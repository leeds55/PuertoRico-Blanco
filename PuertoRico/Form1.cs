using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace PuertoRico
{
	public class Form1 : Form
	{
		[AccessedThroughProperty("MenuItem6")]
		private MenuItem _MenuItem6;

		[AccessedThroughProperty("num_sugar_bank_label")]
		private Label _num_sugar_bank_label;

		[AccessedThroughProperty("num_indigo_bank_label")]
		private Label _num_indigo_bank_label;

		[AccessedThroughProperty("num_quarry_bank_label")]
		private Label _num_quarry_bank_label;

		[AccessedThroughProperty("gold_label")]
		private Label _gold_label;

		[AccessedThroughProperty("settler_bonus_label")]
		private Label _settler_bonus_label;

		[AccessedThroughProperty("mayor_bonus_label")]
		private Label _mayor_bonus_label;

		[AccessedThroughProperty("builder_bonus_label")]
		private Label _builder_bonus_label;

		[AccessedThroughProperty("craftsman_bonus_label")]
		private Label _craftsman_bonus_label;

		[AccessedThroughProperty("captain_bonus_label")]
		private Label _captain_bonus_label;

		[AccessedThroughProperty("pros1_bonus_label")]
		private Label _pros1_bonus_label;

		[AccessedThroughProperty("trader_bonus_label")]
		private Label _trader_bonus_label;

		[AccessedThroughProperty("role_prospector2_pic")]
		private PictureBox _role_prospector2_pic;

		[AccessedThroughProperty("pros2_bonus_label")]
		private Label _pros2_bonus_label;

		[AccessedThroughProperty("governor_pic")]
		private PictureBox _governor_pic;

		[AccessedThroughProperty("plantation_available_slot6")]
		private PictureBox _plantation_available_slot6;

		[AccessedThroughProperty("plantation_available_slot5")]
		private PictureBox _plantation_available_slot5;

		[AccessedThroughProperty("plantation_available_slot2")]
		private PictureBox _plantation_available_slot2;

		[AccessedThroughProperty("plantation_available_slot4")]
		private PictureBox _plantation_available_slot4;

		[AccessedThroughProperty("plantation_available_slot1")]
		private PictureBox _plantation_available_slot1;

		[AccessedThroughProperty("plantation_available_slot3")]
		private PictureBox _plantation_available_slot3;

		[AccessedThroughProperty("plant_p1_slot1")]
		private PictureBox _plant_p1_slot1;

		[AccessedThroughProperty("plant_p1_slot2")]
		private PictureBox _plant_p1_slot2;

		[AccessedThroughProperty("plant_p1_slot3")]
		private PictureBox _plant_p1_slot3;

		[AccessedThroughProperty("prnondistext")]
		private Label _prnondistext;

		[AccessedThroughProperty("plant_p1_slot6")]
		private PictureBox _plant_p1_slot6;

		[AccessedThroughProperty("plant_p1_slot5")]
		private PictureBox _plant_p1_slot5;

		[AccessedThroughProperty("plant_p1_slot4")]
		private PictureBox _plant_p1_slot4;

		[AccessedThroughProperty("plant_p1_slot9")]
		private PictureBox _plant_p1_slot9;

		[AccessedThroughProperty("plant_p1_slot8")]
		private PictureBox _plant_p1_slot8;

		[AccessedThroughProperty("plant_p1_slot7")]
		private PictureBox _plant_p1_slot7;

		[AccessedThroughProperty("plant_p1_slot11")]
		private PictureBox _plant_p1_slot11;

		[AccessedThroughProperty("plant_p1_slot10")]
		private PictureBox _plant_p1_slot10;

		[AccessedThroughProperty("plant_p1_slot12")]
		private PictureBox _plant_p1_slot12;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("tradehouse_slot4")]
		private PictureBox _tradehouse_slot4;

		[AccessedThroughProperty("tradehouse_slot3")]
		private PictureBox _tradehouse_slot3;

		[AccessedThroughProperty("tradehouse_slot2")]
		private PictureBox _tradehouse_slot2;

		[AccessedThroughProperty("tradehouse_slot1")]
		private PictureBox _tradehouse_slot1;

		[AccessedThroughProperty("build_p1_slot1")]
		private PictureBox _build_p1_slot1;

		[AccessedThroughProperty("build_p1_slot2")]
		private PictureBox _build_p1_slot2;

		[AccessedThroughProperty("build_p1_slot3")]
		private PictureBox _build_p1_slot3;

		[AccessedThroughProperty("build_p1_slot6")]
		private PictureBox _build_p1_slot6;

		[AccessedThroughProperty("build_p1_slot5")]
		private PictureBox _build_p1_slot5;

		[AccessedThroughProperty("build_p1_slot4")]
		private PictureBox _build_p1_slot4;

		[AccessedThroughProperty("build_p1_slot9")]
		private PictureBox _build_p1_slot9;

		[AccessedThroughProperty("build_p1_slot8")]
		private PictureBox _build_p1_slot8;

		[AccessedThroughProperty("build_p1_slot7")]
		private PictureBox _build_p1_slot7;

		[AccessedThroughProperty("build_p1_slot12")]
		private PictureBox _build_p1_slot12;

		[AccessedThroughProperty("build_p1_slot11")]
		private PictureBox _build_p1_slot11;

		[AccessedThroughProperty("build_p1_slot10")]
		private PictureBox _build_p1_slot10;

		[AccessedThroughProperty("build_p1_slot13")]
		private PictureBox _build_p1_slot13;

		[AccessedThroughProperty("next_turn_button")]
		private Button _next_turn_button;

		[AccessedThroughProperty("role_builder_pic")]
		private PictureBox _role_builder_pic;

		[AccessedThroughProperty("role_craftsman_pic")]
		private PictureBox _role_craftsman_pic;

		[AccessedThroughProperty("role_prospector1_pic")]
		private PictureBox _role_prospector1_pic;

		[AccessedThroughProperty("build_p1_slot19")]
		private PictureBox _build_p1_slot19;

		[AccessedThroughProperty("MenuItem7")]
		private MenuItem _MenuItem7;

		[AccessedThroughProperty("build_p1_slot17")]
		private PictureBox _build_p1_slot17;

		[AccessedThroughProperty("MenuItem5")]
		private MenuItem _MenuItem5;

		[AccessedThroughProperty("MenuItem8")]
		private MenuItem _MenuItem8;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("build_p1_slot15")]
		private PictureBox _build_p1_slot15;

		[AccessedThroughProperty("build_p1_slot14")]
		private PictureBox _build_p1_slot14;

		[AccessedThroughProperty("build_p1_slot16")]
		private PictureBox _build_p1_slot16;

		[AccessedThroughProperty("build_p1_slot18")]
		private PictureBox _build_p1_slot18;

		[AccessedThroughProperty("build_p1_slot20")]
		private PictureBox _build_p1_slot20;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		[AccessedThroughProperty("Label9")]
		private Label _Label9;

		[AccessedThroughProperty("shipc_pic")]
		private PictureBox _shipc_pic;

		[AccessedThroughProperty("shipb_pic")]
		private PictureBox _shipb_pic;

		[AccessedThroughProperty("shipa_pic")]
		private PictureBox _shipa_pic;

		[AccessedThroughProperty("Label10")]
		private Label _Label10;

		[AccessedThroughProperty("wharf_pic")]
		private PictureBox _wharf_pic;

		[AccessedThroughProperty("vpremain_label")]
		private Label _vpremain_label;

		[AccessedThroughProperty("Label12")]
		private Label _Label12;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("MenuItem4")]
		private MenuItem _MenuItem4;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("vp_chips_label")]
		private Label _vp_chips_label;

		[AccessedThroughProperty("vp_total_label")]
		private Label _vp_total_label;

		[AccessedThroughProperty("shipa_slot6")]
		private PictureBox _shipa_slot6;

		[AccessedThroughProperty("done_trading_button")]
		private Button _done_trading_button;

		[AccessedThroughProperty("menu_view")]
		private MenuItem _menu_view;

		[AccessedThroughProperty("idle_colonists_label")]
		private Label _idle_colonists_label;

		[AccessedThroughProperty("num_coffee_label")]
		private Label _num_coffee_label;

		[AccessedThroughProperty("shipa_slot5")]
		private PictureBox _shipa_slot5;

		[AccessedThroughProperty("num_tobacco_label")]
		private Label _num_tobacco_label;

		[AccessedThroughProperty("menu_help_about")]
		private MenuItem _menu_help_about;

		[AccessedThroughProperty("num_corn_label")]
		private Label _num_corn_label;

		[AccessedThroughProperty("shipa_slot4")]
		private PictureBox _shipa_slot4;

		[AccessedThroughProperty("num_sugar_label")]
		private Label _num_sugar_label;

		[AccessedThroughProperty("Label11")]
		private Label _Label11;

		[AccessedThroughProperty("num_indigo_label")]
		private Label _num_indigo_label;

		[AccessedThroughProperty("prcoverbox")]
		private PictureBox _prcoverbox;

		[AccessedThroughProperty("auto_captain_button")]
		private Button _auto_captain_button;

		[AccessedThroughProperty("nondis_button")]
		private Button _nondis_button;

		[AccessedThroughProperty("shipc_slot1")]
		private PictureBox _shipc_slot1;

		[AccessedThroughProperty("MenuItem1")]
		private MenuItem _MenuItem1;

		[AccessedThroughProperty("shipc_slot2")]
		private PictureBox _shipc_slot2;

		[AccessedThroughProperty("shipc_slot3")]
		private PictureBox _shipc_slot3;

		[AccessedThroughProperty("nondis_label")]
		private Label _nondis_label;

		[AccessedThroughProperty("shipa_slot3")]
		private PictureBox _shipa_slot3;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("role_settler_pic")]
		private PictureBox _role_settler_pic;

		[AccessedThroughProperty("role_mayor_pic")]
		private PictureBox _role_mayor_pic;

		[AccessedThroughProperty("role_trader_pic")]
		private PictureBox _role_trader_pic;

		[AccessedThroughProperty("shipa_slot2")]
		private PictureBox _shipa_slot2;

		[AccessedThroughProperty("menu_help_rules")]
		private MenuItem _menu_help_rules;

		[AccessedThroughProperty("role_captain_pic")]
		private PictureBox _role_captain_pic;

		[AccessedThroughProperty("colonist_ship_pic")]
		private PictureBox _colonist_ship_pic;

		[AccessedThroughProperty("shipa_slot1")]
		private PictureBox _shipa_slot1;

		[AccessedThroughProperty("num_colonist_ship_label")]
		private Label _num_colonist_ship_label;

		[AccessedThroughProperty("menu_help")]
		private MenuItem _menu_help;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("shipb_slot7")]
		private PictureBox _shipb_slot7;

		[AccessedThroughProperty("done_choosing_craftsman_button")]
		private Button _done_choosing_craftsman_button;

		[AccessedThroughProperty("player_board_pic")]
		private PictureBox _player_board_pic;

		[AccessedThroughProperty("MenuItem3")]
		private MenuItem _MenuItem3;

		[AccessedThroughProperty("menu_game_exit")]
		private MenuItem _menu_game_exit;

		[AccessedThroughProperty("shipb_slot6")]
		private PictureBox _shipb_slot6;

		[AccessedThroughProperty("num_colonist_bank_label")]
		private Label _num_colonist_bank_label;

		[AccessedThroughProperty("num_coffee_bank_label")]
		private Label _num_coffee_bank_label;

		[AccessedThroughProperty("num_tobacco_bank_label")]
		private Label _num_tobacco_bank_label;

		[AccessedThroughProperty("shipb_slot5")]
		private PictureBox _shipb_slot5;

		[AccessedThroughProperty("MenuItem2")]
		private MenuItem _MenuItem2;

		[AccessedThroughProperty("num_corn_bank_label")]
		private Label _num_corn_bank_label;

		[AccessedThroughProperty("shipc_slot4")]
		private PictureBox _shipc_slot4;

		[AccessedThroughProperty("shipb_slot4")]
		private PictureBox _shipb_slot4;

		[AccessedThroughProperty("start_game_button")]
		private Button _start_game_button;

		[AccessedThroughProperty("shipc_slot5")]
		private PictureBox _shipc_slot5;

		[AccessedThroughProperty("menu_game_new")]
		private MenuItem _menu_game_new;

		[AccessedThroughProperty("shipc_slot6")]
		private PictureBox _shipc_slot6;

		[AccessedThroughProperty("shipb_slot3")]
		private PictureBox _shipb_slot3;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("shipc_slot7")]
		private PictureBox _shipc_slot7;

		[AccessedThroughProperty("shipc_slot8")]
		private PictureBox _shipc_slot8;

		[AccessedThroughProperty("menu_game")]
		private MenuItem _menu_game;

		[AccessedThroughProperty("shipb_slot2")]
		private PictureBox _shipb_slot2;

		[AccessedThroughProperty("MainMenu1")]
		private MainMenu _MainMenu1;

		[AccessedThroughProperty("shipb_slot1")]
		private PictureBox _shipb_slot1;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		private IContainer components;

		public StreamWriter sw;

		public Buildings buildings_form;

		public Setup setup_form;

		public Info1 info_form;

		public Player2 player2_form;

		public Player3 player3_form;

		public Player4 player4_form;

		public Player5 player5_form;

		public Mayor1 mayor1_form;

		public Craftsman1 craftsman1_form;

		public Summary1 summary_form;

		public Score1 score_form;

		public Storage1 storage_form;

		public Confirmnopic confirmnopic_form;

		public Confirmrole confirmrole_form;

		public Confirmplant confirmplant_form;

		public Confirmbuilding1 confirmbuilding1_form;

		public Confirmbuilding2 confirmbuilding2_form;

		public Infonopic infonopic_form;

		public Inforole inforole_form;

		public Infoplant infoplant_form;

		public Infobuilding1 infobuilding1_form;

		public Infobuilding2 infobuilding2_form;

		public int[] plantations_tilebag_array;

		public int[] plantations_tilebag_array2;

		public int[] plantations_discarded_array;

		public int[] plantations_p1_array;

		public int[] plantations_p2_array;

		public int[] plantations_p3_array;

		public int[] plantations_p4_array;

		public int[] plantations_p5_array;

		public int[] plantation_available_array;

		public int num_plantations_p1;

		public int num_plantations_p2;

		public int num_plantations_p3;

		public int num_plantations_p4;

		public int num_plantations_p5;

		public int[] buildings_p1_array;

		public int[] buildings_p2_array;

		public int[] buildings_p3_array;

		public int[] buildings_p4_array;

		public int[] buildings_p5_array;

		public int[] buildings_available_array;

		public int[] bonus_roles_array;

		public int[] goods_bank_array;

		public int[] goods_bank_array2;

		public int[] goods_p1_array;

		public int[] goods_p2_array;

		public int[] goods_p3_array;

		public int[] goods_p4_array;

		public int[] goods_p5_array;

		public int[] p1_storage_array;

		public int[] p2_storage_array;

		public int[] p3_storage_array;

		public int[] p4_storage_array;

		public int[] p5_storage_array;

		public int[] goods_this_turn_p1_array;

		public int[] goods_this_turn_p2_array;

		public int[] goods_this_turn_p3_array;

		public int[] goods_this_turn_p4_array;

		public int[] goods_this_turn_p5_array;

		public int[] goods_ability_p1_array;

		public int[] goods_ability_p2_array;

		public int[] goods_ability_p3_array;

		public int[] goods_ability_p4_array;

		public int[] goods_ability_p5_array;

		public int num_buildings_p1;

		public int num_buildings_p2;

		public int num_buildings_p3;

		public int num_buildings_p4;

		public int num_buildings_p5;

		public int num_quarries_p1;

		public int num_quarries_p2;

		public int num_quarries_p3;

		public int num_quarries_p4;

		public int num_quarries_p5;

		public int num_manned_quarries_p1;

		public int num_manned_quarries_p2;

		public int num_manned_quarries_p3;

		public int num_manned_quarries_p4;

		public int num_manned_quarries_p5;

		public int num_empty_corn_plant_p1;

		public int num_empty_corn_plant_p2;

		public int num_empty_corn_plant_p3;

		public int num_empty_corn_plant_p4;

		public int num_empty_corn_plant_p5;

		public int[] idle_colonists_array;

		public int[] idle_colonists_this_turn_array;

		public int[] colonists_array;

		public int[] empty_colonists_slots_array;

		public int p1_empty_colonists_slots;

		public int p2_empty_colonists_slots;

		public int p3_empty_colonists_slots;

		public int p4_empty_colonists_slots;

		public int p5_empty_colonists_slots;

		public int gold_p1;

		public int gold_p2;

		public int gold_p3;

		public int gold_p4;

		public int gold_p5;

		public int vpchips_p1;

		public int vpchips_p2;

		public int vpchips_p3;

		public int vpchips_p4;

		public int vpchips_p5;

		public int vp_buildings_p1;

		public int vp_buildings_p2;

		public int vp_buildings_p3;

		public int vp_buildings_p4;

		public int vp_buildings_p5;

		public int p1_total_score;

		public int p2_total_score;

		public int p3_total_score;

		public int p4_total_score;

		public int p5_total_score;

		public int[] shipa_array;

		public int[] shipb_array;

		public int[] shipc_array;

		public int[] trading_house_array;

		public int colonists_bank_num;

		public int colonists_ship_num;

		public int vp_bank_num;

		public int number_of_players;

		public int seat_num;

		public bool finished;

		public bool p2_finished_choosing_role;

		public bool p3_finished_choosing_role;

		public bool p4_finished_choosing_role;

		public bool p5_finished_choosing_role;

		public bool finishedx;

		public bool p2_ai_done;

		public bool p3_ai_done;

		public bool p4_ai_done;

		public bool p5_ai_done;

		public int counter1;

		public int counter2;

		public int counter3;

		public int counter1x;

		public int counter2x;

		public int counter3x;

		public int random1;

		public bool chance;

		public string tempstring;

		public string tempstring2;

		public int tempinteger;

		public bool game_started;

		public bool game_over;

		public bool rand_finished;

		public bool confirmed;

		public bool found_building;

		public bool found_buildingx;

		public bool found_plantation;

		public bool found_good;

		public bool end_announced;

		public bool already_there;

		public bool trading_house_full;

		public bool p1_done_all_shipping;

		public bool p2_done_all_shipping;

		public bool p3_done_all_shipping;

		public bool p4_done_all_shipping;

		public bool p5_done_all_shipping;

		public bool all_done_all_shipping;

		public bool p1_done_shipping;

		public bool p2_done_shipping;

		public bool p3_done_shipping;

		public bool p4_done_shipping;

		public bool p5_done_shipping;

		public int p1_num_shipped;

		public int p2_num_shipped;

		public int p3_num_shipped;

		public int p4_num_shipped;

		public int p5_num_shipped;

		public bool need_to_pick_ship;

		public bool summary_on;

		public bool p1_used_wharf;

		public bool p2_used_wharf;

		public bool p3_used_wharf;

		public bool p4_used_wharf;

		public bool p5_used_wharf;

		public bool captain_bonus_taken;

		public int dialog_box_OK_timer;

		public int[] player_order_array;

		public int current_role_chooser;

		public int current_player;

		public int current_playerx;

		public int current_player_captain;

		public int current_governor;

		public string current_player_string;

		public string current_role_chooser_string;

		public string current_governor_string;

		public string p1_name;

		public string p2_name;

		public string p3_name;

		public string p4_name;

		public string p5_name;

		public bool p1_chose_plantation;

		public bool p1_chose_extra_good;

		public bool p1_traded;

		public bool p2_traded;

		public bool p3_traded;

		public bool p4_traded;

		public bool p5_traded;

		public bool p1_taken_turn;

		public bool p2_taken_turn;

		public bool p3_taken_turn;

		public bool p4_taken_turn;

		public bool p5_taken_turn;

		public bool p1_been_governor;

		public bool p2_been_governor;

		public bool p3_been_governor;

		public bool p4_been_governor;

		public bool p5_been_governor;

		public bool p1_dumped;

		public bool p2_dumped;

		public bool p3_dumped;

		public bool p4_dumped;

		public bool p5_dumped;

		public bool settler_round;

		public bool mayor_round;

		public bool builder_round;

		public bool craftsman_round;

		public bool trader_round;

		public bool captain_round;

		public bool prospector1_round;

		public bool prospector2_round;

		public bool first_round;

		public object restart_turn_routine;

		public bool p1_choosing_role;

		public bool new_governor;

		public bool new_role_chooser;

		public bool processed_builder;

		public bool goods_to_ship;

		public bool goods_to_produce;

		public bool goods_to_trade;

		public bool space_to_ship;

		public int indigo_shipnum;

		public int sugar_shipnum;

		public int corn_shipnum;

		public int tobacco_shipnum;

		public int coffee_shipnum;

		public bool indigo_ship_available;

		public bool sugar_ship_available;

		public bool corn_ship_available;

		public bool tobacco_ship_available;

		public bool coffee_ship_available;

		public bool indigo_ship_full;

		public bool sugar_ship_full;

		public bool corn_ship_full;

		public bool tobacco_ship_full;

		public bool coffee_ship_full;

		public bool empty_ship_available;

		public bool ships_can_take_indigo;

		public bool ships_can_take_sugar;

		public bool ships_can_take_corn;

		public bool ships_can_take_tobacco;

		public bool ships_can_take_coffee;

		public bool ready_to_ship_indigo;

		public bool ready_to_ship_sugar;

		public bool ready_to_ship_corn;

		public bool ready_to_ship_tobacco;

		public bool ready_to_ship_coffee;

		public bool p1_built;

		public bool p2_built;

		public bool p3_built;

		public bool p4_built;

		public bool p5_built;

		public bool p1_built_nothing;

		public bool p1_ready_to_end_settler;

		public bool p2_ready_to_end_settler;

		public bool p3_ready_to_end_settler;

		public bool p4_ready_to_end_settler;

		public bool p5_ready_to_end_settler;

		public int new_colonists_needed;

		public int discard_size;

		public bool game_end_triggered_colonists;

		public bool game_end_triggered_buildings;

		public bool game_end_triggered_victorypoints;

		public int p1_tiebreaker;

		public int p2_tiebreaker;

		public int p3_tiebreaker;

		public int p4_tiebreaker;

		public int p5_tiebreaker;

		public string current_winner;

		public int current_best_tiebreaker;

		public string tie1;

		public string tie2;

		public string tie3;

		public string tie4;

		public string tie5;

		public string[] tie_breaker_array;

		public int verify_indigo;

		public int verify_sugar;

		public int verify_corn;

		public int verify_tobacco;

		public int verify_coffee;

		public int verify_colonists;

		public bool alerts_on;

		public bool developer_on;

		public bool alert_triggered;

		public bool p1_manned_office;

		public bool autoclick_captain_phase_on;

		public bool p1_just_clicked_autoclick;

		public bool role_has_been_chosen;

		public bool p2_chose_quarry;

		public bool p2_chose_corn;

		public bool p2_chose_random;

		public bool p2_manned_construction_hut;

		public bool p2_manned_hospice;

		public bool p2_manned_hacienda;

		public bool p2_use_hacienda;

		public bool p2_chose_settler;

		public bool p2_chose_trader;

		public bool p2_manned_small_market;

		public bool p2_manned_large_market;

		public int p2_num_indigo_plants;

		public int p2_num_sugar_plants;

		public int p2_num_tobacco_plants;

		public int p2_num_coffee_plants;

		public bool p2_manned_office;

		public bool p3_chose_quarry;

		public bool p3_chose_corn;

		public bool p3_chose_random;

		public bool p3_manned_construction_hut;

		public bool p3_manned_hospice;

		public bool p3_manned_hacienda;

		public bool p3_use_hacienda;

		public bool p3_chose_settler;

		public bool p3_chose_trader;

		public bool p3_manned_small_market;

		public bool p3_manned_large_market;

		public int p3_num_indigo_plants;

		public int p3_num_sugar_plants;

		public int p3_num_tobacco_plants;

		public int p3_num_coffee_plants;

		public bool p3_manned_office;

		public bool p4_chose_quarry;

		public bool p4_chose_corn;

		public bool p4_chose_random;

		public bool p4_manned_construction_hut;

		public bool p4_manned_hospice;

		public bool p4_manned_hacienda;

		public bool p4_use_hacienda;

		public bool p4_chose_settler;

		public bool p4_chose_trader;

		public bool p4_manned_small_market;

		public bool p4_manned_large_market;

		public int p4_num_indigo_plants;

		public int p4_num_sugar_plants;

		public int p4_num_tobacco_plants;

		public int p4_num_coffee_plants;

		public bool p4_manned_office;

		public bool p5_chose_quarry;

		public bool p5_chose_corn;

		public bool p5_chose_random;

		public bool p5_manned_construction_hut;

		public bool p5_manned_hospice;

		public bool p5_manned_hacienda;

		public bool p5_use_hacienda;

		public bool p5_chose_settler;

		public bool p5_chose_trader;

		public bool p5_manned_small_market;

		public bool p5_manned_large_market;

		public int p5_num_indigo_plants;

		public int p5_num_sugar_plants;

		public int p5_num_tobacco_plants;

		public int p5_num_coffee_plants;

		public bool p5_manned_office;

		public string previous_role;

		public bool indigo_available;

		public int indigo_available_slot;

		public bool sugar_available;

		public int sugar_available_slot;

		public bool corn_available;

		public int corn_available_slot;

		public bool tobacco_available;

		public int tobacco_available_slot;

		public bool coffee_available;

		public int coffee_available_slot;

		public bool quarry_available;

		public int plantation_slot;

		public int building_slot;

		public bool buyable;

		public int discount1;

		public int discount2;

		public int build_final_cost;

		public int build_available_slot;

		public int build_cost;

		public int build_number;

		public string build_name;

		public int guild_hall_score;

		public int residence_score;

		public int fortress_score;

		public int customs_house_score;

		public int city_hall_score;

		public int best_building_num;

		public string best_shipping_method;

		public int best_storage_type;

		public int best_storage_qty;

		public int current_best_score;

		public int large_build_spot;

		public bool room_to_build_large;

		public bool afford_large;

		public int slots_to_store;

		public bool done_dumping;

		public bool stored_indigo;

		public bool stored_sugar;

		public bool stored_corn;

		public bool stored_tobacco;

		public bool stored_coffee;

		public string role_choice;

		public bool dont_choose_settler;

		public bool dont_choose_mayor;

		public bool dont_choose_builder;

		public bool dont_choose_craftsman;

		public bool dont_choose_trader;

		public bool dont_choose_captain;

		public bool dont_choose_prospector1;

		public bool dont_choose_prospector2;

		public bool need_to_choose_random;

		public bool free_buildings_available;

		public int turn_number;

		public int indigo_points_shipa;

		public int indigo_points_shipb;

		public int indigo_points_shipc;

		public int indigo_points_wharf;

		public int sugar_points_shipa;

		public int sugar_points_shipb;

		public int sugar_points_shipc;

		public int sugar_points_wharf;

		public int corn_points_shipa;

		public int corn_points_shipb;

		public int corn_points_shipc;

		public int corn_points_wharf;

		public int tobacco_points_shipa;

		public int tobacco_points_shipb;

		public int tobacco_points_shipc;

		public int tobacco_points_wharf;

		public int coffee_points_shipa;

		public int coffee_points_shipb;

		public int coffee_points_shipc;

		public int coffee_points_wharf;

		public bool shipa_empty;

		public bool shipb_empty;

		public bool shipc_empty;

		public string biggest_empty_ship;

		public bool found_indigo_match;

		public bool found_sugar_match;

		public bool found_tobacco_match;

		public bool found_coffee_match;

		public bool very_first_turn;

		internal virtual Button auto_captain_button
		{
			get
			{
				return this._auto_captain_button;
			}
			set
			{
				if (this._auto_captain_button != null)
				{
					Form1 form1 = this;
					this._auto_captain_button.Click -=new EventHandler(form1.auto_captain_button_Click);
				}
				this._auto_captain_button = value;
				if (this._auto_captain_button != null)
				{
					Form1 form11 = this;
					this._auto_captain_button.Click +=new EventHandler(form11.auto_captain_button_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot1
		{
			get
			{
				return this._build_p1_slot1;
			}
			set
			{
				if (this._build_p1_slot1 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot1.Click -=new EventHandler(form1.build_p1_slot1_Click);
				}
				this._build_p1_slot1 = value;
				if (this._build_p1_slot1 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot1.Click +=new EventHandler(form11.build_p1_slot1_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot10
		{
			get
			{
				return this._build_p1_slot10;
			}
			set
			{
				if (this._build_p1_slot10 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot10.Click -=new EventHandler(form1.build_p1_slot10_Click);
				}
				this._build_p1_slot10 = value;
				if (this._build_p1_slot10 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot10.Click +=new EventHandler(form11.build_p1_slot10_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot11
		{
			get
			{
				return this._build_p1_slot11;
			}
			set
			{
				if (this._build_p1_slot11 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot11.Click -=new EventHandler(form1.build_p1_slot11_Click);
				}
				this._build_p1_slot11 = value;
				if (this._build_p1_slot11 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot11.Click +=new EventHandler(form11.build_p1_slot11_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot12
		{
			get
			{
				return this._build_p1_slot12;
			}
			set
			{
				if (this._build_p1_slot12 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot12.Click -=new EventHandler(form1.build_p1_slot12_Click);
				}
				this._build_p1_slot12 = value;
				if (this._build_p1_slot12 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot12.Click +=new EventHandler(form11.build_p1_slot12_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot13
		{
			get
			{
				return this._build_p1_slot13;
			}
			set
			{
				if (this._build_p1_slot13 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot13.Click -=new EventHandler(form1.build_p1_slot13_Click);
				}
				this._build_p1_slot13 = value;
				if (this._build_p1_slot13 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot13.Click +=new EventHandler(form11.build_p1_slot13_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot14
		{
			get
			{
				return this._build_p1_slot14;
			}
			set
			{
				if (this._build_p1_slot14 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot14.Click -=new EventHandler(form1.build_p1_slot14_Click);
				}
				this._build_p1_slot14 = value;
				if (this._build_p1_slot14 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot14.Click +=new EventHandler(form11.build_p1_slot14_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot15
		{
			get
			{
				return this._build_p1_slot15;
			}
			set
			{
				if (this._build_p1_slot15 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot15.Click -=new EventHandler(form1.build_p1_slot15_Click);
				}
				this._build_p1_slot15 = value;
				if (this._build_p1_slot15 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot15.Click +=new EventHandler(form11.build_p1_slot15_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot16
		{
			get
			{
				return this._build_p1_slot16;
			}
			set
			{
				if (this._build_p1_slot16 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot16.Click -=new EventHandler(form1.build_p1_slot16_Click);
				}
				this._build_p1_slot16 = value;
				if (this._build_p1_slot16 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot16.Click +=new EventHandler(form11.build_p1_slot16_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot17
		{
			get
			{
				return this._build_p1_slot17;
			}
			set
			{
				if (this._build_p1_slot17 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot17.Click -=new EventHandler(form1.build_p1_slot17_Click);
				}
				this._build_p1_slot17 = value;
				if (this._build_p1_slot17 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot17.Click +=new EventHandler(form11.build_p1_slot17_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot18
		{
			get
			{
				return this._build_p1_slot18;
			}
			set
			{
				if (this._build_p1_slot18 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot18.Click -=new EventHandler(form1.build_p1_slot18_Click);
				}
				this._build_p1_slot18 = value;
				if (this._build_p1_slot18 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot18.Click +=new EventHandler(form11.build_p1_slot18_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot19
		{
			get
			{
				return this._build_p1_slot19;
			}
			set
			{
				if (this._build_p1_slot19 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot19.Click -=new EventHandler(form1.build_p1_slot19_Click);
				}
				this._build_p1_slot19 = value;
				if (this._build_p1_slot19 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot19.Click +=new EventHandler(form11.build_p1_slot19_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot2
		{
			get
			{
				return this._build_p1_slot2;
			}
			set
			{
				if (this._build_p1_slot2 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot2.Click -=new EventHandler(form1.build_p1_slot2_Click);
				}
				this._build_p1_slot2 = value;
				if (this._build_p1_slot2 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot2.Click +=new EventHandler(form11.build_p1_slot2_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot20
		{
			get
			{
				return this._build_p1_slot20;
			}
			set
			{
				if (this._build_p1_slot20 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot20.Click -=new EventHandler(form1.build_p1_slot20_Click);
				}
				this._build_p1_slot20 = value;
				if (this._build_p1_slot20 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot20.Click +=new EventHandler(form11.build_p1_slot20_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot3
		{
			get
			{
				return this._build_p1_slot3;
			}
			set
			{
				if (this._build_p1_slot3 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot3.Click -=new EventHandler(form1.build_p1_slot3_Click);
				}
				this._build_p1_slot3 = value;
				if (this._build_p1_slot3 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot3.Click +=new EventHandler(form11.build_p1_slot3_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot4
		{
			get
			{
				return this._build_p1_slot4;
			}
			set
			{
				if (this._build_p1_slot4 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot4.Click -=new EventHandler(form1.build_p1_slot4_Click);
				}
				this._build_p1_slot4 = value;
				if (this._build_p1_slot4 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot4.Click +=new EventHandler(form11.build_p1_slot4_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot5
		{
			get
			{
				return this._build_p1_slot5;
			}
			set
			{
				if (this._build_p1_slot5 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot5.Click -=new EventHandler(form1.build_p1_slot5_Click);
				}
				this._build_p1_slot5 = value;
				if (this._build_p1_slot5 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot5.Click +=new EventHandler(form11.build_p1_slot5_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot6
		{
			get
			{
				return this._build_p1_slot6;
			}
			set
			{
				if (this._build_p1_slot6 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot6.Click -=new EventHandler(form1.build_p1_slot6_Click);
				}
				this._build_p1_slot6 = value;
				if (this._build_p1_slot6 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot6.Click +=new EventHandler(form11.build_p1_slot6_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot7
		{
			get
			{
				return this._build_p1_slot7;
			}
			set
			{
				if (this._build_p1_slot7 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot7.Click -=new EventHandler(form1.build_p1_slot7_Click);
				}
				this._build_p1_slot7 = value;
				if (this._build_p1_slot7 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot7.Click +=new EventHandler(form11.build_p1_slot7_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot8
		{
			get
			{
				return this._build_p1_slot8;
			}
			set
			{
				if (this._build_p1_slot8 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot8.Click -=new EventHandler(form1.build_p1_slot8_Click);
				}
				this._build_p1_slot8 = value;
				if (this._build_p1_slot8 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot8.Click +=new EventHandler(form11.build_p1_slot8_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot9
		{
			get
			{
				return this._build_p1_slot9;
			}
			set
			{
				if (this._build_p1_slot9 != null)
				{
					Form1 form1 = this;
					this._build_p1_slot9.Click -=new EventHandler(form1.build_p1_slot9_Click);
				}
				this._build_p1_slot9 = value;
				if (this._build_p1_slot9 != null)
				{
					Form1 form11 = this;
					this._build_p1_slot9.Click +=new EventHandler(form11.build_p1_slot9_Click);
				}
			}
		}

		internal virtual Label builder_bonus_label
		{
			get
			{
				return this._builder_bonus_label;
			}
			set
			{
				if (this._builder_bonus_label != null)
				{
					Form1 form1 = this;
					this._builder_bonus_label.Click -=new EventHandler(form1.builder_bonus_label_Click);
				}
				this._builder_bonus_label = value;
				if (this._builder_bonus_label != null)
				{
					Form1 form11 = this;
					this._builder_bonus_label.Click +=new EventHandler(form11.builder_bonus_label_Click);
				}
			}
		}

		internal virtual Button Button1
		{
			get
			{
				return this._Button1;
			}
			set
			{
				if (this._Button1 != null)
				{
					Form1 form1 = this;
					this._Button1.Click -=new EventHandler(form1.Button1_Click);
				}
				this._Button1 = value;
				if (this._Button1 != null)
				{
					Form1 form11 = this;
					this._Button1.Click +=new EventHandler(form11.Button1_Click);
				}
			}
		}

		internal virtual Button Button2
		{
			get
			{
				return this._Button2;
			}
			set
			{
				if (this._Button2 != null)
				{
					Form1 form1 = this;
					this._Button2.Click -=new EventHandler(form1.Button2_Click);
				}
				this._Button2 = value;
				if (this._Button2 != null)
				{
					Form1 form11 = this;
					this._Button2.Click +=new EventHandler(form11.Button2_Click);
				}
			}
		}

		internal virtual Button Button3
		{
			get
			{
				return this._Button3;
			}
			set
			{
				if (this._Button3 != null)
				{
					Form1 form1 = this;
					this._Button3.Click -=new EventHandler(form1.Button3_Click);
				}
				this._Button3 = value;
				if (this._Button3 != null)
				{
					Form1 form11 = this;
					this._Button3.Click +=new EventHandler(form11.Button3_Click);
				}
			}
		}

		internal virtual Label captain_bonus_label
		{
			get
			{
				return this._captain_bonus_label;
			}
			set
			{
				if (this._captain_bonus_label != null)
				{
					Form1 form1 = this;
					this._captain_bonus_label.Click -=new EventHandler(form1.captain_bonus_label_Click);
				}
				this._captain_bonus_label = value;
				if (this._captain_bonus_label != null)
				{
					Form1 form11 = this;
					this._captain_bonus_label.Click +=new EventHandler(form11.captain_bonus_label_Click);
				}
			}
		}

		internal virtual PictureBox colonist_ship_pic
		{
			get
			{
				return this._colonist_ship_pic;
			}
			set
			{
				if (this._colonist_ship_pic != null)
				{
					Form1 form1 = this;
					this._colonist_ship_pic.Click -=new EventHandler(form1.colonist_ship_pic_Click);
				}
				this._colonist_ship_pic = value;
				if (this._colonist_ship_pic != null)
				{
					Form1 form11 = this;
					this._colonist_ship_pic.Click +=new EventHandler(form11.colonist_ship_pic_Click);
				}
			}
		}

		internal virtual Label craftsman_bonus_label
		{
			get
			{
				return this._craftsman_bonus_label;
			}
			set
			{
				if (this._craftsman_bonus_label != null)
				{
					Form1 form1 = this;
					this._craftsman_bonus_label.Click -=new EventHandler(form1.craftsman_bonus_label_Click);
				}
				this._craftsman_bonus_label = value;
				if (this._craftsman_bonus_label != null)
				{
					Form1 form11 = this;
					this._craftsman_bonus_label.Click +=new EventHandler(form11.craftsman_bonus_label_Click);
				}
			}
		}

		internal virtual Button done_choosing_craftsman_button
		{
			get
			{
				return this._done_choosing_craftsman_button;
			}
			set
			{
				if (this._done_choosing_craftsman_button != null)
				{
					Form1 form1 = this;
					this._done_choosing_craftsman_button.Click -=new EventHandler(form1.done_choosing_craftsman_button_Click);
				}
				this._done_choosing_craftsman_button = value;
				if (this._done_choosing_craftsman_button != null)
				{
					Form1 form11 = this;
					this._done_choosing_craftsman_button.Click +=new EventHandler(form11.done_choosing_craftsman_button_Click);
				}
			}
		}

		internal virtual Button done_trading_button
		{
			get
			{
				return this._done_trading_button;
			}
			set
			{
				if (this._done_trading_button != null)
				{
					Form1 form1 = this;
					this._done_trading_button.Click -=new EventHandler(form1.done_trading_button_Click);
				}
				this._done_trading_button = value;
				if (this._done_trading_button != null)
				{
					Form1 form11 = this;
					this._done_trading_button.Click +=new EventHandler(form11.done_trading_button_Click);
				}
			}
		}

		internal virtual Label gold_label
		{
			get
			{
				return this._gold_label;
			}
			set
			{
				this._gold_label = null;
				this._gold_label = value;
				this._gold_label = null;
			}
		}

		internal virtual PictureBox governor_pic
		{
			get
			{
				return this._governor_pic;
			}
			set
			{
				if (this._governor_pic != null)
				{
					Form1 form1 = this;
					this._governor_pic.Click -=new EventHandler(form1.governor_pic_Click);
				}
				this._governor_pic = value;
				if (this._governor_pic != null)
				{
					Form1 form11 = this;
					this._governor_pic.Click +=new EventHandler(form11.governor_pic_Click);
				}
			}
		}

		internal virtual Label idle_colonists_label
		{
			get
			{
				return this._idle_colonists_label;
			}
			set
			{
				this._idle_colonists_label = null;
				this._idle_colonists_label = value;
				this._idle_colonists_label = null;
			}
		}

		internal virtual Label Label1
		{
			get
			{
				return this._Label1;
			}
			set
			{
				this._Label1 = null;
				this._Label1 = value;
				this._Label1 = null;
			}
		}

		internal virtual Label Label10
		{
			get
			{
				return this._Label10;
			}
			set
			{
				this._Label10 = null;
				this._Label10 = value;
				this._Label10 = null;
			}
		}

		internal virtual Label Label11
		{
			get
			{
				return this._Label11;
			}
			set
			{
				this._Label11 = null;
				this._Label11 = value;
				this._Label11 = null;
			}
		}

		internal virtual Label Label12
		{
			get
			{
				return this._Label12;
			}
			set
			{
				if (this._Label12 != null)
				{
					Form1 form1 = this;
					this._Label12.Click -=new EventHandler(form1.Label12_Click);
				}
				this._Label12 = value;
				if (this._Label12 != null)
				{
					Form1 form11 = this;
					this._Label12.Click +=new EventHandler(form11.Label12_Click);
				}
			}
		}

		internal virtual Label Label2
		{
			get
			{
				return this._Label2;
			}
			set
			{
				if (this._Label2 != null)
				{
					Form1 form1 = this;
					this._Label2.Click -=new EventHandler(form1.Label2_Click_1);
				}
				this._Label2 = value;
				if (this._Label2 != null)
				{
					Form1 form11 = this;
					this._Label2.Click +=new EventHandler(form11.Label2_Click_1);
				}
			}
		}

		internal virtual Label Label3
		{
			get
			{
				return this._Label3;
			}
			set
			{
				this._Label3 = null;
				this._Label3 = value;
				this._Label3 = null;
			}
		}

		internal virtual Label Label4
		{
			get
			{
				return this._Label4;
			}
			set
			{
				this._Label4 = null;
				this._Label4 = value;
				this._Label4 = null;
			}
		}

		internal virtual Label Label5
		{
			get
			{
				return this._Label5;
			}
			set
			{
				this._Label5 = null;
				this._Label5 = value;
				this._Label5 = null;
			}
		}

		internal virtual Label Label6
		{
			get
			{
				return this._Label6;
			}
			set
			{
				this._Label6 = null;
				this._Label6 = value;
				this._Label6 = null;
			}
		}

		internal virtual Label Label7
		{
			get
			{
				return this._Label7;
			}
			set
			{
				this._Label7 = null;
				this._Label7 = value;
				this._Label7 = null;
			}
		}

		internal virtual Label Label8
		{
			get
			{
				return this._Label8;
			}
			set
			{
				this._Label8 = null;
				this._Label8 = value;
				this._Label8 = null;
			}
		}

		internal virtual Label Label9
		{
			get
			{
				return this._Label9;
			}
			set
			{
				this._Label9 = null;
				this._Label9 = value;
				this._Label9 = null;
			}
		}

		internal virtual MainMenu MainMenu1
		{
			get
			{
				return this._MainMenu1;
			}
			set
			{
				this._MainMenu1 = null;
				this._MainMenu1 = value;
				this._MainMenu1 = null;
			}
		}

		internal virtual Label mayor_bonus_label
		{
			get
			{
				return this._mayor_bonus_label;
			}
			set
			{
				if (this._mayor_bonus_label != null)
				{
					Form1 form1 = this;
					this._mayor_bonus_label.Click -=new EventHandler(form1.mayor_bonus_label_Click);
				}
				this._mayor_bonus_label = value;
				if (this._mayor_bonus_label != null)
				{
					Form1 form11 = this;
					this._mayor_bonus_label.Click +=new EventHandler(form11.mayor_bonus_label_Click);
				}
			}
		}

		internal virtual MenuItem menu_game
		{
			get
			{
				return this._menu_game;
			}
			set
			{
				this._menu_game = null;
				this._menu_game = value;
				this._menu_game = null;
			}
		}

		internal virtual MenuItem menu_game_exit
		{
			get
			{
				return this._menu_game_exit;
			}
			set
			{
				if (this._menu_game_exit != null)
				{
					Form1 form1 = this;
					this._menu_game_exit.Click -=new EventHandler(form1.menu_game_exit_Click);
				}
				this._menu_game_exit = value;
				if (this._menu_game_exit != null)
				{
					Form1 form11 = this;
					this._menu_game_exit.Click +=new EventHandler(form11.menu_game_exit_Click);
				}
			}
		}

		internal virtual MenuItem menu_game_new
		{
			get
			{
				return this._menu_game_new;
			}
			set
			{
				if (this._menu_game_new != null)
				{
					Form1 form1 = this;
					this._menu_game_new.Click -=new EventHandler(form1.menu_game_new_Click);
				}
				this._menu_game_new = value;
				if (this._menu_game_new != null)
				{
					Form1 form11 = this;
					this._menu_game_new.Click +=new EventHandler(form11.menu_game_new_Click);
				}
			}
		}

		internal virtual MenuItem menu_help
		{
			get
			{
				return this._menu_help;
			}
			set
			{
				this._menu_help = null;
				this._menu_help = value;
				this._menu_help = null;
			}
		}

		internal virtual MenuItem menu_help_about
		{
			get
			{
				return this._menu_help_about;
			}
			set
			{
				if (this._menu_help_about != null)
				{
					Form1 form1 = this;
					this._menu_help_about.Click -=new EventHandler(form1.menu_help_about_Click);
				}
				this._menu_help_about = value;
				if (this._menu_help_about != null)
				{
					Form1 form11 = this;
					this._menu_help_about.Click +=new EventHandler(form11.menu_help_about_Click);
				}
			}
		}

		internal virtual MenuItem menu_help_rules
		{
			get
			{
				return this._menu_help_rules;
			}
			set
			{
				if (this._menu_help_rules != null)
				{
					Form1 form1 = this;
					this._menu_help_rules.Click -=new EventHandler(form1.menu_help_rules_Click);
				}
				this._menu_help_rules = value;
				if (this._menu_help_rules != null)
				{
					Form1 form11 = this;
					this._menu_help_rules.Click +=new EventHandler(form11.menu_help_rules_Click);
				}
			}
		}

		internal virtual MenuItem menu_view
		{
			get
			{
				return this._menu_view;
			}
			set
			{
				this._menu_view = null;
				this._menu_view = value;
				this._menu_view = null;
			}
		}

		internal virtual MenuItem MenuItem1
		{
			get
			{
				return this._MenuItem1;
			}
			set
			{
				this._MenuItem1 = null;
				this._MenuItem1 = value;
				this._MenuItem1 = null;
			}
		}

		internal virtual MenuItem MenuItem2
		{
			get
			{
				return this._MenuItem2;
			}
			set
			{
				this._MenuItem2 = null;
				this._MenuItem2 = value;
				this._MenuItem2 = null;
			}
		}

		internal virtual MenuItem MenuItem3
		{
			get
			{
				return this._MenuItem3;
			}
			set
			{
				if (this._MenuItem3 != null)
				{
					Form1 form1 = this;
					this._MenuItem3.Click -=new EventHandler(form1.MenuItem3_Click);
				}
				this._MenuItem3 = value;
				if (this._MenuItem3 != null)
				{
					Form1 form11 = this;
					this._MenuItem3.Click +=new EventHandler(form11.MenuItem3_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem4
		{
			get
			{
				return this._MenuItem4;
			}
			set
			{
				if (this._MenuItem4 != null)
				{
					Form1 form1 = this;
					this._MenuItem4.Click -=new EventHandler(form1.MenuItem4_Click);
				}
				this._MenuItem4 = value;
				if (this._MenuItem4 != null)
				{
					Form1 form11 = this;
					this._MenuItem4.Click +=new EventHandler(form11.MenuItem4_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem5
		{
			get
			{
				return this._MenuItem5;
			}
			set
			{
				if (this._MenuItem5 != null)
				{
					Form1 form1 = this;
					this._MenuItem5.Click -=new EventHandler(form1.MenuItem5_Click);
				}
				this._MenuItem5 = value;
				if (this._MenuItem5 != null)
				{
					Form1 form11 = this;
					this._MenuItem5.Click +=new EventHandler(form11.MenuItem5_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem6
		{
			get
			{
				return this._MenuItem6;
			}
			set
			{
				if (this._MenuItem6 != null)
				{
					Form1 form1 = this;
					this._MenuItem6.Click -=new EventHandler(form1.MenuItem6_Click);
				}
				this._MenuItem6 = value;
				if (this._MenuItem6 != null)
				{
					Form1 form11 = this;
					this._MenuItem6.Click +=new EventHandler(form11.MenuItem6_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem7
		{
			get
			{
				return this._MenuItem7;
			}
			set
			{
				if (this._MenuItem7 != null)
				{
					Form1 form1 = this;
					this._MenuItem7.Click -=new EventHandler(form1.MenuItem7_Click);
				}
				this._MenuItem7 = value;
				if (this._MenuItem7 != null)
				{
					Form1 form11 = this;
					this._MenuItem7.Click +=new EventHandler(form11.MenuItem7_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem8
		{
			get
			{
				return this._MenuItem8;
			}
			set
			{
				if (this._MenuItem8 != null)
				{
					Form1 form1 = this;
					this._MenuItem8.Click -=new EventHandler(form1.MenuItem8_Click);
				}
				this._MenuItem8 = value;
				if (this._MenuItem8 != null)
				{
					Form1 form11 = this;
					this._MenuItem8.Click +=new EventHandler(form11.MenuItem8_Click);
				}
			}
		}

		internal virtual Button next_turn_button
		{
			get
			{
				return this._next_turn_button;
			}
			set
			{
				if (this._next_turn_button != null)
				{
					Form1 form1 = this;
					this._next_turn_button.Click -=new EventHandler(form1.next_turn_button_Click);
				}
				this._next_turn_button = value;
				if (this._next_turn_button != null)
				{
					Form1 form11 = this;
					this._next_turn_button.Click +=new EventHandler(form11.next_turn_button_Click);
				}
			}
		}

		internal virtual Button nondis_button
		{
			get
			{
				return this._nondis_button;
			}
			set
			{
				if (this._nondis_button != null)
				{
					Form1 form1 = this;
					this._nondis_button.Click -=new EventHandler(form1.nondis_button_Click);
				}
				this._nondis_button = value;
				if (this._nondis_button != null)
				{
					Form1 form11 = this;
					this._nondis_button.Click +=new EventHandler(form11.nondis_button_Click);
				}
			}
		}

		internal virtual Label nondis_label
		{
			get
			{
				return this._nondis_label;
			}
			set
			{
				this._nondis_label = null;
				this._nondis_label = value;
				this._nondis_label = null;
			}
		}

		internal virtual Label num_coffee_bank_label
		{
			get
			{
				return this._num_coffee_bank_label;
			}
			set
			{
				if (this._num_coffee_bank_label != null)
				{
					Form1 form1 = this;
					this._num_coffee_bank_label.Click -=new EventHandler(form1.num_coffee_bank_label_Click);
				}
				this._num_coffee_bank_label = value;
				if (this._num_coffee_bank_label != null)
				{
					Form1 form11 = this;
					this._num_coffee_bank_label.Click +=new EventHandler(form11.num_coffee_bank_label_Click);
				}
			}
		}

		internal virtual Label num_coffee_label
		{
			get
			{
				return this._num_coffee_label;
			}
			set
			{
				if (this._num_coffee_label != null)
				{
					Form1 form1 = this;
					this._num_coffee_label.Click -=new EventHandler(form1.num_coffee_label_Click);
				}
				this._num_coffee_label = value;
				if (this._num_coffee_label != null)
				{
					Form1 form11 = this;
					this._num_coffee_label.Click +=new EventHandler(form11.num_coffee_label_Click);
				}
			}
		}

		internal virtual Label num_colonist_bank_label
		{
			get
			{
				return this._num_colonist_bank_label;
			}
			set
			{
				if (this._num_colonist_bank_label != null)
				{
					Form1 form1 = this;
					this._num_colonist_bank_label.Click -=new EventHandler(form1.num_colonist_bank_label_Click);
				}
				this._num_colonist_bank_label = value;
				if (this._num_colonist_bank_label != null)
				{
					Form1 form11 = this;
					this._num_colonist_bank_label.Click +=new EventHandler(form11.num_colonist_bank_label_Click);
				}
			}
		}

		internal virtual Label num_colonist_ship_label
		{
			get
			{
				return this._num_colonist_ship_label;
			}
			set
			{
				if (this._num_colonist_ship_label != null)
				{
					Form1 form1 = this;
					this._num_colonist_ship_label.Click -=new EventHandler(form1.num_colonist_ship_label_Click);
				}
				this._num_colonist_ship_label = value;
				if (this._num_colonist_ship_label != null)
				{
					Form1 form11 = this;
					this._num_colonist_ship_label.Click +=new EventHandler(form11.num_colonist_ship_label_Click);
				}
			}
		}

		internal virtual Label num_corn_bank_label
		{
			get
			{
				return this._num_corn_bank_label;
			}
			set
			{
				if (this._num_corn_bank_label != null)
				{
					Form1 form1 = this;
					this._num_corn_bank_label.Click -=new EventHandler(form1.num_corn_bank_label_Click);
				}
				this._num_corn_bank_label = value;
				if (this._num_corn_bank_label != null)
				{
					Form1 form11 = this;
					this._num_corn_bank_label.Click +=new EventHandler(form11.num_corn_bank_label_Click);
				}
			}
		}

		internal virtual Label num_corn_label
		{
			get
			{
				return this._num_corn_label;
			}
			set
			{
				if (this._num_corn_label != null)
				{
					Form1 form1 = this;
					this._num_corn_label.Click -=new EventHandler(form1.num_corn_label_Click);
				}
				this._num_corn_label = value;
				if (this._num_corn_label != null)
				{
					Form1 form11 = this;
					this._num_corn_label.Click +=new EventHandler(form11.num_corn_label_Click);
				}
			}
		}

		internal virtual Label num_indigo_bank_label
		{
			get
			{
				return this._num_indigo_bank_label;
			}
			set
			{
				if (this._num_indigo_bank_label != null)
				{
					Form1 form1 = this;
					this._num_indigo_bank_label.Click -=new EventHandler(form1.num_indigo_bank_label_Click);
				}
				this._num_indigo_bank_label = value;
				if (this._num_indigo_bank_label != null)
				{
					Form1 form11 = this;
					this._num_indigo_bank_label.Click +=new EventHandler(form11.num_indigo_bank_label_Click);
				}
			}
		}

		internal virtual Label num_indigo_label
		{
			get
			{
				return this._num_indigo_label;
			}
			set
			{
				if (this._num_indigo_label != null)
				{
					Form1 form1 = this;
					this._num_indigo_label.Click -=new EventHandler(form1.num_indigo_label_Click);
				}
				this._num_indigo_label = value;
				if (this._num_indigo_label != null)
				{
					Form1 form11 = this;
					this._num_indigo_label.Click +=new EventHandler(form11.num_indigo_label_Click);
				}
			}
		}

		internal virtual Label num_quarry_bank_label
		{
			get
			{
				return this._num_quarry_bank_label;
			}
			set
			{
				if (this._num_quarry_bank_label != null)
				{
					Form1 form1 = this;
					this._num_quarry_bank_label.Click -=new EventHandler(form1.num_quarry_bank_label_Click);
				}
				this._num_quarry_bank_label = value;
				if (this._num_quarry_bank_label != null)
				{
					Form1 form11 = this;
					this._num_quarry_bank_label.Click +=new EventHandler(form11.num_quarry_bank_label_Click);
				}
			}
		}

		internal virtual Label num_sugar_bank_label
		{
			get
			{
				return this._num_sugar_bank_label;
			}
			set
			{
				if (this._num_sugar_bank_label != null)
				{
					Form1 form1 = this;
					this._num_sugar_bank_label.Click -=new EventHandler(form1.num_sugar_bank_label_Click);
				}
				this._num_sugar_bank_label = value;
				if (this._num_sugar_bank_label != null)
				{
					Form1 form11 = this;
					this._num_sugar_bank_label.Click +=new EventHandler(form11.num_sugar_bank_label_Click);
				}
			}
		}

		internal virtual Label num_sugar_label
		{
			get
			{
				return this._num_sugar_label;
			}
			set
			{
				if (this._num_sugar_label != null)
				{
					Form1 form1 = this;
					this._num_sugar_label.Click -=new EventHandler(form1.num_sugar_label_Click);
				}
				this._num_sugar_label = value;
				if (this._num_sugar_label != null)
				{
					Form1 form11 = this;
					this._num_sugar_label.Click +=new EventHandler(form11.num_sugar_label_Click);
				}
			}
		}

		internal virtual Label num_tobacco_bank_label
		{
			get
			{
				return this._num_tobacco_bank_label;
			}
			set
			{
				if (this._num_tobacco_bank_label != null)
				{
					Form1 form1 = this;
					this._num_tobacco_bank_label.Click -=new EventHandler(form1.num_tobacco_bank_label_Click);
				}
				this._num_tobacco_bank_label = value;
				if (this._num_tobacco_bank_label != null)
				{
					Form1 form11 = this;
					this._num_tobacco_bank_label.Click +=new EventHandler(form11.num_tobacco_bank_label_Click);
				}
			}
		}

		internal virtual Label num_tobacco_label
		{
			get
			{
				return this._num_tobacco_label;
			}
			set
			{
				if (this._num_tobacco_label != null)
				{
					Form1 form1 = this;
					this._num_tobacco_label.Click -=new EventHandler(form1.num_tobacco_label_Click);
				}
				this._num_tobacco_label = value;
				if (this._num_tobacco_label != null)
				{
					Form1 form11 = this;
					this._num_tobacco_label.Click +=new EventHandler(form11.num_tobacco_label_Click);
				}
			}
		}

		internal virtual PictureBox PictureBox1
		{
			get
			{
				return this._PictureBox1;
			}
			set
			{
				if (this._PictureBox1 != null)
				{
					Form1 form1 = this;
					this._PictureBox1.Click -=new EventHandler(form1.PictureBox1_Click);
				}
				this._PictureBox1 = value;
				if (this._PictureBox1 != null)
				{
					Form1 form11 = this;
					this._PictureBox1.Click +=new EventHandler(form11.PictureBox1_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot1
		{
			get
			{
				return this._plant_p1_slot1;
			}
			set
			{
				if (this._plant_p1_slot1 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot1.Click -=new EventHandler(form1.plant_p1_slot1_Click);
				}
				this._plant_p1_slot1 = value;
				if (this._plant_p1_slot1 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot1.Click +=new EventHandler(form11.plant_p1_slot1_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot10
		{
			get
			{
				return this._plant_p1_slot10;
			}
			set
			{
				if (this._plant_p1_slot10 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot10.Click -=new EventHandler(form1.plant_p1_slot10_Click);
				}
				this._plant_p1_slot10 = value;
				if (this._plant_p1_slot10 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot10.Click +=new EventHandler(form11.plant_p1_slot10_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot11
		{
			get
			{
				return this._plant_p1_slot11;
			}
			set
			{
				if (this._plant_p1_slot11 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot11.Click -=new EventHandler(form1.plant_p1_slot11_Click);
				}
				this._plant_p1_slot11 = value;
				if (this._plant_p1_slot11 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot11.Click +=new EventHandler(form11.plant_p1_slot11_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot12
		{
			get
			{
				return this._plant_p1_slot12;
			}
			set
			{
				if (this._plant_p1_slot12 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot12.Click -=new EventHandler(form1.plant_p1_slot12_Click);
				}
				this._plant_p1_slot12 = value;
				if (this._plant_p1_slot12 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot12.Click +=new EventHandler(form11.plant_p1_slot12_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot2
		{
			get
			{
				return this._plant_p1_slot2;
			}
			set
			{
				if (this._plant_p1_slot2 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot2.Click -=new EventHandler(form1.plant_p1_slot2_Click);
				}
				this._plant_p1_slot2 = value;
				if (this._plant_p1_slot2 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot2.Click +=new EventHandler(form11.plant_p1_slot2_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot3
		{
			get
			{
				return this._plant_p1_slot3;
			}
			set
			{
				if (this._plant_p1_slot3 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot3.Click -=new EventHandler(form1.plant_p1_slot3_Click);
				}
				this._plant_p1_slot3 = value;
				if (this._plant_p1_slot3 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot3.Click +=new EventHandler(form11.plant_p1_slot3_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot4
		{
			get
			{
				return this._plant_p1_slot4;
			}
			set
			{
				if (this._plant_p1_slot4 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot4.Click -=new EventHandler(form1.plant_p1_slot4_Click);
				}
				this._plant_p1_slot4 = value;
				if (this._plant_p1_slot4 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot4.Click +=new EventHandler(form11.plant_p1_slot4_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot5
		{
			get
			{
				return this._plant_p1_slot5;
			}
			set
			{
				if (this._plant_p1_slot5 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot5.Click -=new EventHandler(form1.plant_p1_slot5_Click);
				}
				this._plant_p1_slot5 = value;
				if (this._plant_p1_slot5 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot5.Click +=new EventHandler(form11.plant_p1_slot5_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot6
		{
			get
			{
				return this._plant_p1_slot6;
			}
			set
			{
				if (this._plant_p1_slot6 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot6.Click -=new EventHandler(form1.plant_p1_slot6_Click);
				}
				this._plant_p1_slot6 = value;
				if (this._plant_p1_slot6 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot6.Click +=new EventHandler(form11.plant_p1_slot6_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot7
		{
			get
			{
				return this._plant_p1_slot7;
			}
			set
			{
				if (this._plant_p1_slot7 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot7.Click -=new EventHandler(form1.plant_p1_slot7_Click);
				}
				this._plant_p1_slot7 = value;
				if (this._plant_p1_slot7 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot7.Click +=new EventHandler(form11.plant_p1_slot7_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot8
		{
			get
			{
				return this._plant_p1_slot8;
			}
			set
			{
				if (this._plant_p1_slot8 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot8.Click -=new EventHandler(form1.plant_p1_slot8_Click);
				}
				this._plant_p1_slot8 = value;
				if (this._plant_p1_slot8 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot8.Click +=new EventHandler(form11.plant_p1_slot8_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot9
		{
			get
			{
				return this._plant_p1_slot9;
			}
			set
			{
				if (this._plant_p1_slot9 != null)
				{
					Form1 form1 = this;
					this._plant_p1_slot9.Click -=new EventHandler(form1.plant_p1_slot9_Click);
				}
				this._plant_p1_slot9 = value;
				if (this._plant_p1_slot9 != null)
				{
					Form1 form11 = this;
					this._plant_p1_slot9.Click +=new EventHandler(form11.plant_p1_slot9_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot1
		{
			get
			{
				return this._plantation_available_slot1;
			}
			set
			{
				if (this._plantation_available_slot1 != null)
				{
					Form1 form1 = this;
					this._plantation_available_slot1.Click -=new EventHandler(form1.plantation_available_slot1_Click);
				}
				this._plantation_available_slot1 = value;
				if (this._plantation_available_slot1 != null)
				{
					Form1 form11 = this;
					this._plantation_available_slot1.Click +=new EventHandler(form11.plantation_available_slot1_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot2
		{
			get
			{
				return this._plantation_available_slot2;
			}
			set
			{
				if (this._plantation_available_slot2 != null)
				{
					Form1 form1 = this;
					this._plantation_available_slot2.Click -=new EventHandler(form1.plantation_available_slot2_Click);
				}
				this._plantation_available_slot2 = value;
				if (this._plantation_available_slot2 != null)
				{
					Form1 form11 = this;
					this._plantation_available_slot2.Click +=new EventHandler(form11.plantation_available_slot2_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot3
		{
			get
			{
				return this._plantation_available_slot3;
			}
			set
			{
				if (this._plantation_available_slot3 != null)
				{
					Form1 form1 = this;
					this._plantation_available_slot3.Click -=new EventHandler(form1.plantation_available_slot3_Click);
				}
				this._plantation_available_slot3 = value;
				if (this._plantation_available_slot3 != null)
				{
					Form1 form11 = this;
					this._plantation_available_slot3.Click +=new EventHandler(form11.plantation_available_slot3_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot4
		{
			get
			{
				return this._plantation_available_slot4;
			}
			set
			{
				if (this._plantation_available_slot4 != null)
				{
					Form1 form1 = this;
					this._plantation_available_slot4.Click -=new EventHandler(form1.plantation_available_slot4_Click);
				}
				this._plantation_available_slot4 = value;
				if (this._plantation_available_slot4 != null)
				{
					Form1 form11 = this;
					this._plantation_available_slot4.Click +=new EventHandler(form11.plantation_available_slot4_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot5
		{
			get
			{
				return this._plantation_available_slot5;
			}
			set
			{
				if (this._plantation_available_slot5 != null)
				{
					Form1 form1 = this;
					this._plantation_available_slot5.Click -=new EventHandler(form1.plantation_available_slot5_Click);
				}
				this._plantation_available_slot5 = value;
				if (this._plantation_available_slot5 != null)
				{
					Form1 form11 = this;
					this._plantation_available_slot5.Click +=new EventHandler(form11.plantation_available_slot5_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot6
		{
			get
			{
				return this._plantation_available_slot6;
			}
			set
			{
				if (this._plantation_available_slot6 != null)
				{
					Form1 form1 = this;
					this._plantation_available_slot6.Click -=new EventHandler(form1.plantation_available_slot6_Click);
				}
				this._plantation_available_slot6 = value;
				if (this._plantation_available_slot6 != null)
				{
					Form1 form11 = this;
					this._plantation_available_slot6.Click +=new EventHandler(form11.plantation_available_slot6_Click);
				}
			}
		}

		internal virtual PictureBox player_board_pic
		{
			get
			{
				return this._player_board_pic;
			}
			set
			{
				this._player_board_pic = null;
				this._player_board_pic = value;
				this._player_board_pic = null;
			}
		}

		internal virtual PictureBox prcoverbox
		{
			get
			{
				return this._prcoverbox;
			}
			set
			{
				this._prcoverbox = null;
				this._prcoverbox = value;
				this._prcoverbox = null;
			}
		}

		internal virtual Label prnondistext
		{
			get
			{
				return this._prnondistext;
			}
			set
			{
				if (this._prnondistext != null)
				{
					Form1 form1 = this;
					this._prnondistext.Click -=new EventHandler(form1.prnondistext_Click);
				}
				this._prnondistext = value;
				if (this._prnondistext != null)
				{
					Form1 form11 = this;
					this._prnondistext.Click +=new EventHandler(form11.prnondistext_Click);
				}
			}
		}

		internal virtual Label pros1_bonus_label
		{
			get
			{
				return this._pros1_bonus_label;
			}
			set
			{
				if (this._pros1_bonus_label != null)
				{
					Form1 form1 = this;
					this._pros1_bonus_label.Click -=new EventHandler(form1.pros1_bonus_label_Click);
				}
				this._pros1_bonus_label = value;
				if (this._pros1_bonus_label != null)
				{
					Form1 form11 = this;
					this._pros1_bonus_label.Click +=new EventHandler(form11.pros1_bonus_label_Click);
				}
			}
		}

		internal virtual Label pros2_bonus_label
		{
			get
			{
				return this._pros2_bonus_label;
			}
			set
			{
				if (this._pros2_bonus_label != null)
				{
					Form1 form1 = this;
					this._pros2_bonus_label.Click -=new EventHandler(form1.pros2_bonus_label_Click);
				}
				this._pros2_bonus_label = value;
				if (this._pros2_bonus_label != null)
				{
					Form1 form11 = this;
					this._pros2_bonus_label.Click +=new EventHandler(form11.pros2_bonus_label_Click);
				}
			}
		}

		internal virtual PictureBox role_builder_pic
		{
			get
			{
				return this._role_builder_pic;
			}
			set
			{
				if (this._role_builder_pic != null)
				{
					Form1 form1 = this;
					this._role_builder_pic.Click -=new EventHandler(form1.role_builder_pic_Click);
				}
				this._role_builder_pic = value;
				if (this._role_builder_pic != null)
				{
					Form1 form11 = this;
					this._role_builder_pic.Click +=new EventHandler(form11.role_builder_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_captain_pic
		{
			get
			{
				return this._role_captain_pic;
			}
			set
			{
				if (this._role_captain_pic != null)
				{
					Form1 form1 = this;
					this._role_captain_pic.Click -=new EventHandler(form1.role_captain_pic_Click);
				}
				this._role_captain_pic = value;
				if (this._role_captain_pic != null)
				{
					Form1 form11 = this;
					this._role_captain_pic.Click +=new EventHandler(form11.role_captain_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_craftsman_pic
		{
			get
			{
				return this._role_craftsman_pic;
			}
			set
			{
				if (this._role_craftsman_pic != null)
				{
					Form1 form1 = this;
					this._role_craftsman_pic.Click -=new EventHandler(form1.role_craftsman_pic_Click);
				}
				this._role_craftsman_pic = value;
				if (this._role_craftsman_pic != null)
				{
					Form1 form11 = this;
					this._role_craftsman_pic.Click +=new EventHandler(form11.role_craftsman_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_mayor_pic
		{
			get
			{
				return this._role_mayor_pic;
			}
			set
			{
				if (this._role_mayor_pic != null)
				{
					Form1 form1 = this;
					this._role_mayor_pic.Click -=new EventHandler(form1.role_mayor_pic_Click);
				}
				this._role_mayor_pic = value;
				if (this._role_mayor_pic != null)
				{
					Form1 form11 = this;
					this._role_mayor_pic.Click +=new EventHandler(form11.role_mayor_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_prospector1_pic
		{
			get
			{
				return this._role_prospector1_pic;
			}
			set
			{
				if (this._role_prospector1_pic != null)
				{
					Form1 form1 = this;
					this._role_prospector1_pic.Click -=new EventHandler(form1.role_prospector1_pic_Click);
				}
				this._role_prospector1_pic = value;
				if (this._role_prospector1_pic != null)
				{
					Form1 form11 = this;
					this._role_prospector1_pic.Click +=new EventHandler(form11.role_prospector1_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_prospector2_pic
		{
			get
			{
				return this._role_prospector2_pic;
			}
			set
			{
				if (this._role_prospector2_pic != null)
				{
					Form1 form1 = this;
					this._role_prospector2_pic.Click -=new EventHandler(form1.role_prospector2_pic_Click);
				}
				this._role_prospector2_pic = value;
				if (this._role_prospector2_pic != null)
				{
					Form1 form11 = this;
					this._role_prospector2_pic.Click +=new EventHandler(form11.role_prospector2_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_settler_pic
		{
			get
			{
				return this._role_settler_pic;
			}
			set
			{
				if (this._role_settler_pic != null)
				{
					Form1 form1 = this;
					this._role_settler_pic.Click -=new EventHandler(form1.role_settler_pic_Click);
				}
				this._role_settler_pic = value;
				if (this._role_settler_pic != null)
				{
					Form1 form11 = this;
					this._role_settler_pic.Click +=new EventHandler(form11.role_settler_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_trader_pic
		{
			get
			{
				return this._role_trader_pic;
			}
			set
			{
				if (this._role_trader_pic != null)
				{
					Form1 form1 = this;
					this._role_trader_pic.Click -=new EventHandler(form1.role_trader_pic_Click);
				}
				this._role_trader_pic = value;
				if (this._role_trader_pic != null)
				{
					Form1 form11 = this;
					this._role_trader_pic.Click +=new EventHandler(form11.role_trader_pic_Click);
				}
			}
		}

		internal virtual Label settler_bonus_label
		{
			get
			{
				return this._settler_bonus_label;
			}
			set
			{
				if (this._settler_bonus_label != null)
				{
					Form1 form1 = this;
					this._settler_bonus_label.Click -=new EventHandler(form1.settler_bonus_label_Click);
				}
				this._settler_bonus_label = value;
				if (this._settler_bonus_label != null)
				{
					Form1 form11 = this;
					this._settler_bonus_label.Click +=new EventHandler(form11.settler_bonus_label_Click);
				}
			}
		}

		internal virtual PictureBox shipa_pic
		{
			get
			{
				return this._shipa_pic;
			}
			set
			{
				if (this._shipa_pic != null)
				{
					Form1 form1 = this;
					this._shipa_pic.Click -=new EventHandler(form1.shipa_pic_Click);
				}
				this._shipa_pic = value;
				if (this._shipa_pic != null)
				{
					Form1 form11 = this;
					this._shipa_pic.Click +=new EventHandler(form11.shipa_pic_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot1
		{
			get
			{
				return this._shipa_slot1;
			}
			set
			{
				if (this._shipa_slot1 != null)
				{
					Form1 form1 = this;
					this._shipa_slot1.Click -=new EventHandler(form1.shipa_slot1_Click);
				}
				this._shipa_slot1 = value;
				if (this._shipa_slot1 != null)
				{
					Form1 form11 = this;
					this._shipa_slot1.Click +=new EventHandler(form11.shipa_slot1_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot2
		{
			get
			{
				return this._shipa_slot2;
			}
			set
			{
				if (this._shipa_slot2 != null)
				{
					Form1 form1 = this;
					this._shipa_slot2.Click -=new EventHandler(form1.shipa_slot2_Click);
				}
				this._shipa_slot2 = value;
				if (this._shipa_slot2 != null)
				{
					Form1 form11 = this;
					this._shipa_slot2.Click +=new EventHandler(form11.shipa_slot2_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot3
		{
			get
			{
				return this._shipa_slot3;
			}
			set
			{
				if (this._shipa_slot3 != null)
				{
					Form1 form1 = this;
					this._shipa_slot3.Click -=new EventHandler(form1.shipa_slot3_Click);
				}
				this._shipa_slot3 = value;
				if (this._shipa_slot3 != null)
				{
					Form1 form11 = this;
					this._shipa_slot3.Click +=new EventHandler(form11.shipa_slot3_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot4
		{
			get
			{
				return this._shipa_slot4;
			}
			set
			{
				if (this._shipa_slot4 != null)
				{
					Form1 form1 = this;
					this._shipa_slot4.Click -=new EventHandler(form1.shipa_slot4_Click);
				}
				this._shipa_slot4 = value;
				if (this._shipa_slot4 != null)
				{
					Form1 form11 = this;
					this._shipa_slot4.Click +=new EventHandler(form11.shipa_slot4_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot5
		{
			get
			{
				return this._shipa_slot5;
			}
			set
			{
				if (this._shipa_slot5 != null)
				{
					Form1 form1 = this;
					this._shipa_slot5.Click -=new EventHandler(form1.shipa_slot5_Click);
				}
				this._shipa_slot5 = value;
				if (this._shipa_slot5 != null)
				{
					Form1 form11 = this;
					this._shipa_slot5.Click +=new EventHandler(form11.shipa_slot5_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot6
		{
			get
			{
				return this._shipa_slot6;
			}
			set
			{
				if (this._shipa_slot6 != null)
				{
					Form1 form1 = this;
					this._shipa_slot6.Click -=new EventHandler(form1.shipa_slot6_Click);
				}
				this._shipa_slot6 = value;
				if (this._shipa_slot6 != null)
				{
					Form1 form11 = this;
					this._shipa_slot6.Click +=new EventHandler(form11.shipa_slot6_Click);
				}
			}
		}

		internal virtual PictureBox shipb_pic
		{
			get
			{
				return this._shipb_pic;
			}
			set
			{
				if (this._shipb_pic != null)
				{
					Form1 form1 = this;
					this._shipb_pic.Click -=new EventHandler(form1.shipb_pic_Click);
				}
				this._shipb_pic = value;
				if (this._shipb_pic != null)
				{
					Form1 form11 = this;
					this._shipb_pic.Click +=new EventHandler(form11.shipb_pic_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot1
		{
			get
			{
				return this._shipb_slot1;
			}
			set
			{
				if (this._shipb_slot1 != null)
				{
					Form1 form1 = this;
					this._shipb_slot1.Click -=new EventHandler(form1.shipb_slot1_Click);
				}
				this._shipb_slot1 = value;
				if (this._shipb_slot1 != null)
				{
					Form1 form11 = this;
					this._shipb_slot1.Click +=new EventHandler(form11.shipb_slot1_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot2
		{
			get
			{
				return this._shipb_slot2;
			}
			set
			{
				if (this._shipb_slot2 != null)
				{
					Form1 form1 = this;
					this._shipb_slot2.Click -=new EventHandler(form1.shipb_slot2_Click);
				}
				this._shipb_slot2 = value;
				if (this._shipb_slot2 != null)
				{
					Form1 form11 = this;
					this._shipb_slot2.Click +=new EventHandler(form11.shipb_slot2_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot3
		{
			get
			{
				return this._shipb_slot3;
			}
			set
			{
				if (this._shipb_slot3 != null)
				{
					Form1 form1 = this;
					this._shipb_slot3.Click -=new EventHandler(form1.shipb_slot3_Click);
				}
				this._shipb_slot3 = value;
				if (this._shipb_slot3 != null)
				{
					Form1 form11 = this;
					this._shipb_slot3.Click +=new EventHandler(form11.shipb_slot3_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot4
		{
			get
			{
				return this._shipb_slot4;
			}
			set
			{
				if (this._shipb_slot4 != null)
				{
					Form1 form1 = this;
					this._shipb_slot4.Click -=new EventHandler(form1.shipb_slot4_Click);
				}
				this._shipb_slot4 = value;
				if (this._shipb_slot4 != null)
				{
					Form1 form11 = this;
					this._shipb_slot4.Click +=new EventHandler(form11.shipb_slot4_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot5
		{
			get
			{
				return this._shipb_slot5;
			}
			set
			{
				if (this._shipb_slot5 != null)
				{
					Form1 form1 = this;
					this._shipb_slot5.Click -=new EventHandler(form1.shipb_slot5_Click);
				}
				this._shipb_slot5 = value;
				if (this._shipb_slot5 != null)
				{
					Form1 form11 = this;
					this._shipb_slot5.Click +=new EventHandler(form11.shipb_slot5_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot6
		{
			get
			{
				return this._shipb_slot6;
			}
			set
			{
				if (this._shipb_slot6 != null)
				{
					Form1 form1 = this;
					this._shipb_slot6.Click -=new EventHandler(form1.shipb_slot6_Click);
				}
				this._shipb_slot6 = value;
				if (this._shipb_slot6 != null)
				{
					Form1 form11 = this;
					this._shipb_slot6.Click +=new EventHandler(form11.shipb_slot6_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot7
		{
			get
			{
				return this._shipb_slot7;
			}
			set
			{
				if (this._shipb_slot7 != null)
				{
					Form1 form1 = this;
					this._shipb_slot7.Click -=new EventHandler(form1.shipb_slot7_Click);
				}
				this._shipb_slot7 = value;
				if (this._shipb_slot7 != null)
				{
					Form1 form11 = this;
					this._shipb_slot7.Click +=new EventHandler(form11.shipb_slot7_Click);
				}
			}
		}

		internal virtual PictureBox shipc_pic
		{
			get
			{
				return this._shipc_pic;
			}
			set
			{
				if (this._shipc_pic != null)
				{
					Form1 form1 = this;
					this._shipc_pic.Click -=new EventHandler(form1.shipc_pic_Click);
				}
				this._shipc_pic = value;
				if (this._shipc_pic != null)
				{
					Form1 form11 = this;
					this._shipc_pic.Click +=new EventHandler(form11.shipc_pic_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot1
		{
			get
			{
				return this._shipc_slot1;
			}
			set
			{
				if (this._shipc_slot1 != null)
				{
					Form1 form1 = this;
					this._shipc_slot1.Click -=new EventHandler(form1.shipc_slot1_Click);
				}
				this._shipc_slot1 = value;
				if (this._shipc_slot1 != null)
				{
					Form1 form11 = this;
					this._shipc_slot1.Click +=new EventHandler(form11.shipc_slot1_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot2
		{
			get
			{
				return this._shipc_slot2;
			}
			set
			{
				if (this._shipc_slot2 != null)
				{
					Form1 form1 = this;
					this._shipc_slot2.Click -=new EventHandler(form1.shipc_slot2_Click);
				}
				this._shipc_slot2 = value;
				if (this._shipc_slot2 != null)
				{
					Form1 form11 = this;
					this._shipc_slot2.Click +=new EventHandler(form11.shipc_slot2_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot3
		{
			get
			{
				return this._shipc_slot3;
			}
			set
			{
				if (this._shipc_slot3 != null)
				{
					Form1 form1 = this;
					this._shipc_slot3.Click -=new EventHandler(form1.shipc_slot3_Click);
				}
				this._shipc_slot3 = value;
				if (this._shipc_slot3 != null)
				{
					Form1 form11 = this;
					this._shipc_slot3.Click +=new EventHandler(form11.shipc_slot3_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot4
		{
			get
			{
				return this._shipc_slot4;
			}
			set
			{
				if (this._shipc_slot4 != null)
				{
					Form1 form1 = this;
					this._shipc_slot4.Click -=new EventHandler(form1.shipc_slot4_Click);
				}
				this._shipc_slot4 = value;
				if (this._shipc_slot4 != null)
				{
					Form1 form11 = this;
					this._shipc_slot4.Click +=new EventHandler(form11.shipc_slot4_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot5
		{
			get
			{
				return this._shipc_slot5;
			}
			set
			{
				if (this._shipc_slot5 != null)
				{
					Form1 form1 = this;
					this._shipc_slot5.Click -=new EventHandler(form1.shipc_slot5_Click);
				}
				this._shipc_slot5 = value;
				if (this._shipc_slot5 != null)
				{
					Form1 form11 = this;
					this._shipc_slot5.Click +=new EventHandler(form11.shipc_slot5_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot6
		{
			get
			{
				return this._shipc_slot6;
			}
			set
			{
				if (this._shipc_slot6 != null)
				{
					Form1 form1 = this;
					this._shipc_slot6.Click -=new EventHandler(form1.shipc_slot6_Click);
				}
				this._shipc_slot6 = value;
				if (this._shipc_slot6 != null)
				{
					Form1 form11 = this;
					this._shipc_slot6.Click +=new EventHandler(form11.shipc_slot6_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot7
		{
			get
			{
				return this._shipc_slot7;
			}
			set
			{
				if (this._shipc_slot7 != null)
				{
					Form1 form1 = this;
					this._shipc_slot7.Click -=new EventHandler(form1.shipc_slot7_Click);
				}
				this._shipc_slot7 = value;
				if (this._shipc_slot7 != null)
				{
					Form1 form11 = this;
					this._shipc_slot7.Click +=new EventHandler(form11.shipc_slot7_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot8
		{
			get
			{
				return this._shipc_slot8;
			}
			set
			{
				if (this._shipc_slot8 != null)
				{
					Form1 form1 = this;
					this._shipc_slot8.Click -=new EventHandler(form1.shipc_slot8_Click);
				}
				this._shipc_slot8 = value;
				if (this._shipc_slot8 != null)
				{
					Form1 form11 = this;
					this._shipc_slot8.Click +=new EventHandler(form11.shipc_slot8_Click);
				}
			}
		}

		internal virtual Button start_game_button
		{
			get
			{
				return this._start_game_button;
			}
			set
			{
				if (this._start_game_button != null)
				{
					Form1 form1 = this;
					this._start_game_button.Click -=new EventHandler(form1.start_game_button_Click);
				}
				this._start_game_button = value;
				if (this._start_game_button != null)
				{
					Form1 form11 = this;
					this._start_game_button.Click +=new EventHandler(form11.start_game_button_Click);
				}
			}
		}

		internal virtual PictureBox tradehouse_slot1
		{
			get
			{
				return this._tradehouse_slot1;
			}
			set
			{
				this._tradehouse_slot1 = null;
				this._tradehouse_slot1 = value;
				this._tradehouse_slot1 = null;
			}
		}

		internal virtual PictureBox tradehouse_slot2
		{
			get
			{
				return this._tradehouse_slot2;
			}
			set
			{
				this._tradehouse_slot2 = null;
				this._tradehouse_slot2 = value;
				this._tradehouse_slot2 = null;
			}
		}

		internal virtual PictureBox tradehouse_slot3
		{
			get
			{
				return this._tradehouse_slot3;
			}
			set
			{
				this._tradehouse_slot3 = null;
				this._tradehouse_slot3 = value;
				this._tradehouse_slot3 = null;
			}
		}

		internal virtual PictureBox tradehouse_slot4
		{
			get
			{
				return this._tradehouse_slot4;
			}
			set
			{
				this._tradehouse_slot4 = null;
				this._tradehouse_slot4 = value;
				this._tradehouse_slot4 = null;
			}
		}

		internal virtual Label trader_bonus_label
		{
			get
			{
				return this._trader_bonus_label;
			}
			set
			{
				if (this._trader_bonus_label != null)
				{
					Form1 form1 = this;
					this._trader_bonus_label.Click -=new EventHandler(form1.trader_bonus_label_Click);
				}
				this._trader_bonus_label = value;
				if (this._trader_bonus_label != null)
				{
					Form1 form11 = this;
					this._trader_bonus_label.Click +=new EventHandler(form11.trader_bonus_label_Click);
				}
			}
		}

		internal virtual Label vp_chips_label
		{
			get
			{
				return this._vp_chips_label;
			}
			set
			{
				this._vp_chips_label = null;
				this._vp_chips_label = value;
				this._vp_chips_label = null;
			}
		}

		internal virtual Label vp_total_label
		{
			get
			{
				return this._vp_total_label;
			}
			set
			{
				this._vp_total_label = null;
				this._vp_total_label = value;
				this._vp_total_label = null;
			}
		}

		internal virtual Label vpremain_label
		{
			get
			{
				return this._vpremain_label;
			}
			set
			{
				if (this._vpremain_label != null)
				{
					Form1 form1 = this;
					this._vpremain_label.Click -=new EventHandler(form1.vpremain_label_Click);
				}
				this._vpremain_label = value;
				if (this._vpremain_label != null)
				{
					Form1 form11 = this;
					this._vpremain_label.Click +=new EventHandler(form11.vpremain_label_Click);
				}
			}
		}

		internal virtual PictureBox wharf_pic
		{
			get
			{
				return this._wharf_pic;
			}
			set
			{
				if (this._wharf_pic != null)
				{
					Form1 form1 = this;
					this._wharf_pic.Click -=new EventHandler(form1.wharf_pic_Click);
				}
				this._wharf_pic = value;
				if (this._wharf_pic != null)
				{
					Form1 form11 = this;
					this._wharf_pic.Click +=new EventHandler(form11.wharf_pic_Click);
				}
			}
		}

		public Form1()
		{
			this.sw = new StreamWriter("prlog.txt");
			this.buildings_form = new Buildings();
			this.setup_form = new Setup();
			this.info_form = new Info1();
			this.player2_form = new Player2();
			this.player3_form = new Player3();
			this.player4_form = new Player4();
			this.player5_form = new Player5();
			this.mayor1_form = new Mayor1();
			this.craftsman1_form = new Craftsman1();
			this.summary_form = new Summary1();
			this.score_form = new Score1();
			this.storage_form = new Storage1();
			this.confirmnopic_form = new Confirmnopic();
			this.confirmrole_form = new Confirmrole();
			this.confirmplant_form = new Confirmplant();
			this.confirmbuilding1_form = new Confirmbuilding1();
			this.confirmbuilding2_form = new Confirmbuilding2();
			this.infonopic_form = new Infonopic();
			this.inforole_form = new Inforole();
			this.infoplant_form = new Infoplant();
			this.infobuilding1_form = new Infobuilding1();
			this.infobuilding2_form = new Infobuilding2();
			int[] numArray = new int[] { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 50, 50, 50, 50, 50, 50, 50, 50 };
			this.plantations_tilebag_array = numArray;
			int[] numArray1 = new int[] { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 50, 50, 50, 50, 50, 50, 50, 50 };
			this.plantations_tilebag_array2 = numArray1;
			int[] numArray2 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.plantations_discarded_array = numArray2;
			int[] numArray3 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.plantations_p1_array = numArray3;
			int[] numArray4 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.plantations_p2_array = numArray4;
			int[] numArray5 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.plantations_p3_array = numArray5;
			int[] numArray6 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.plantations_p4_array = numArray6;
			int[] numArray7 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.plantations_p5_array = numArray7;
			int[] numArray8 = new int[] { 0, 0, 0, 0, 0, 0 };
			this.plantation_available_array = numArray8;
			this.num_plantations_p1 = 1;
			this.num_plantations_p2 = 1;
			this.num_plantations_p3 = 1;
			this.num_plantations_p4 = 1;
			this.num_plantations_p5 = 1;
			int[] numArray9 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.buildings_p1_array = numArray9;
			int[] numArray10 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.buildings_p2_array = numArray10;
			int[] numArray11 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.buildings_p3_array = numArray11;
			int[] numArray12 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.buildings_p4_array = numArray12;
			int[] numArray13 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			this.buildings_p5_array = numArray13;
			int[] numArray14 = new int[] { 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1 };
			this.buildings_available_array = numArray14;
			int[] numArray15 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
			this.bonus_roles_array = numArray15;
			int[] numArray16 = new int[] { 11, 11, 10, 9, 9, 8 };
			this.goods_bank_array = numArray16;
			int[] numArray17 = new int[] { 11, 11, 10, 9, 9, 8 };
			this.goods_bank_array2 = numArray17;
			int[] numArray18 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_p1_array = numArray18;
			int[] numArray19 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_p2_array = numArray19;
			int[] numArray20 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_p3_array = numArray20;
			int[] numArray21 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_p4_array = numArray21;
			int[] numArray22 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_p5_array = numArray22;
			int[] numArray23 = new int[] { 0, 0, 0, 0, 0 };
			this.p1_storage_array = numArray23;
			int[] numArray24 = new int[] { 0, 0, 0, 0, 0 };
			this.p2_storage_array = numArray24;
			int[] numArray25 = new int[] { 0, 0, 0, 0, 0 };
			this.p3_storage_array = numArray25;
			int[] numArray26 = new int[] { 0, 0, 0, 0, 0 };
			this.p4_storage_array = numArray26;
			int[] numArray27 = new int[] { 0, 0, 0, 0, 0 };
			this.p5_storage_array = numArray27;
			int[] numArray28 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_this_turn_p1_array = numArray28;
			int[] numArray29 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_this_turn_p2_array = numArray29;
			int[] numArray30 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_this_turn_p3_array = numArray30;
			int[] numArray31 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_this_turn_p4_array = numArray31;
			int[] numArray32 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_this_turn_p5_array = numArray32;
			int[] numArray33 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_ability_p1_array = numArray33;
			int[] numArray34 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_ability_p2_array = numArray34;
			int[] numArray35 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_ability_p3_array = numArray35;
			int[] numArray36 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_ability_p4_array = numArray36;
			int[] numArray37 = new int[] { 0, 0, 0, 0, 0 };
			this.goods_ability_p5_array = numArray37;
			this.num_buildings_p1 = 0;
			this.num_buildings_p2 = 0;
			this.num_buildings_p3 = 0;
			this.num_buildings_p4 = 0;
			this.num_buildings_p5 = 0;
			this.num_quarries_p1 = 0;
			this.num_quarries_p2 = 0;
			this.num_quarries_p3 = 0;
			this.num_quarries_p4 = 0;
			this.num_quarries_p5 = 0;
			this.num_manned_quarries_p1 = 0;
			this.num_manned_quarries_p2 = 0;
			this.num_manned_quarries_p3 = 0;
			this.num_manned_quarries_p4 = 0;
			this.num_manned_quarries_p5 = 0;
			this.num_empty_corn_plant_p1 = 0;
			this.num_empty_corn_plant_p2 = 0;
			this.num_empty_corn_plant_p3 = 0;
			this.num_empty_corn_plant_p4 = 0;
			this.num_empty_corn_plant_p5 = 0;
			int[] numArray38 = new int[] { 0, 0, 0, 0, 0, 0 };
			this.idle_colonists_array = numArray38;
			int[] numArray39 = new int[] { 0, 0, 0, 0, 0, 0 };
			this.idle_colonists_this_turn_array = numArray39;
			int[] numArray40 = new int[] { 0, 0, 0, 0, 0, 0 };
			this.colonists_array = numArray40;
			int[] numArray41 = new int[] { 0, 0, 0, 0, 0, 0 };
			this.empty_colonists_slots_array = numArray41;
			this.p1_empty_colonists_slots = 0;
			this.p2_empty_colonists_slots = 0;
			this.p3_empty_colonists_slots = 0;
			this.p4_empty_colonists_slots = 0;
			this.p5_empty_colonists_slots = 0;
			this.gold_p1 = 0;
			this.gold_p2 = 0;
			this.gold_p3 = 0;
			this.gold_p4 = 0;
			this.gold_p5 = 0;
			this.vpchips_p1 = 0;
			this.vpchips_p2 = 0;
			this.vpchips_p3 = 0;
			this.vpchips_p4 = 0;
			this.vpchips_p5 = 0;
			this.vp_buildings_p1 = 0;
			this.vp_buildings_p2 = 0;
			this.vp_buildings_p3 = 0;
			this.vp_buildings_p4 = 0;
			this.vp_buildings_p5 = 0;
			this.p1_total_score = 0;
			this.p2_total_score = 0;
			this.p3_total_score = 0;
			this.p4_total_score = 0;
			this.p5_total_score = 0;
			int[] numArray42 = new int[] { 0, 0, 99, 0 };
			this.shipa_array = numArray42;
			int[] numArray43 = new int[] { 0, 0, 99, 0 };
			this.shipb_array = numArray43;
			int[] numArray44 = new int[] { 0, 0, 99, 0 };
			this.shipc_array = numArray44;
			int[] numArray45 = new int[] { 0, 0, 0, 0 };
			this.trading_house_array = numArray45;
			this.colonists_bank_num = 0;
			this.colonists_ship_num = 0;
			this.vp_bank_num = 0;
			this.number_of_players = 0;
			this.seat_num = 0;
			this.finished = true;
			this.p2_finished_choosing_role = false;
			this.p3_finished_choosing_role = false;
			this.p4_finished_choosing_role = false;
			this.p5_finished_choosing_role = false;
			this.finishedx = true;
			this.p2_ai_done = false;
			this.p3_ai_done = false;
			this.p4_ai_done = false;
			this.p5_ai_done = false;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			this.counter1x = 0;
			this.counter2x = 0;
			this.counter3x = 0;
			this.random1 = 0;
			this.chance = false;
			this.tempinteger = 0;
			this.game_started = false;
			this.game_over = true;
			this.rand_finished = true;
			this.confirmed = false;
			this.found_building = false;
			this.found_buildingx = false;
			this.found_plantation = false;
			this.found_good = false;
			this.end_announced = false;
			this.already_there = false;
			this.trading_house_full = false;
			this.p1_done_all_shipping = false;
			this.p2_done_all_shipping = false;
			this.p3_done_all_shipping = false;
			this.p4_done_all_shipping = false;
			this.p5_done_all_shipping = false;
			this.all_done_all_shipping = false;
			this.p1_done_shipping = false;
			this.p2_done_shipping = false;
			this.p3_done_shipping = false;
			this.p4_done_shipping = false;
			this.p5_done_shipping = false;
			this.p1_num_shipped = 0;
			this.p2_num_shipped = 0;
			this.p3_num_shipped = 0;
			this.p4_num_shipped = 0;
			this.p5_num_shipped = 0;
			this.need_to_pick_ship = false;
			this.summary_on = false;
			this.p1_used_wharf = false;
			this.p2_used_wharf = false;
			this.p3_used_wharf = false;
			this.p4_used_wharf = false;
			this.p5_used_wharf = false;
			this.captain_bonus_taken = false;
			this.dialog_box_OK_timer = 3;
			int[] numArray46 = new int[] { 0, 1, 2, 3, 4, 5, 9 };
			this.player_order_array = numArray46;
			this.current_role_chooser = 1;
			this.current_player = 1;
			this.current_playerx = 1;
			this.current_player_captain = 1;
			this.current_governor = 1;
			this.p1_chose_plantation = false;
			this.p1_chose_extra_good = false;
			this.p1_traded = false;
			this.p2_traded = false;
			this.p3_traded = false;
			this.p4_traded = false;
			this.p5_traded = false;
			this.p1_taken_turn = false;
			this.p2_taken_turn = false;
			this.p3_taken_turn = false;
			this.p4_taken_turn = false;
			this.p5_taken_turn = false;
			this.p1_been_governor = false;
			this.p2_been_governor = false;
			this.p3_been_governor = false;
			this.p4_been_governor = false;
			this.p5_been_governor = false;
			this.p1_dumped = false;
			this.p2_dumped = false;
			this.p3_dumped = false;
			this.p4_dumped = false;
			this.p5_dumped = false;
			this.settler_round = false;
			this.mayor_round = false;
			this.builder_round = false;
			this.craftsman_round = false;
			this.trader_round = false;
			this.captain_round = false;
			this.prospector1_round = false;
			this.prospector2_round = false;
			this.first_round = true;
			this.restart_turn_routine = false;
			this.p1_choosing_role = false;
			this.new_governor = true;
			this.new_role_chooser = false;
			this.processed_builder = false;
			this.goods_to_ship = false;
			this.goods_to_produce = false;
			this.goods_to_trade = false;
			this.space_to_ship = false;
			this.indigo_shipnum = 0;
			this.sugar_shipnum = 0;
			this.corn_shipnum = 0;
			this.tobacco_shipnum = 0;
			this.coffee_shipnum = 0;
			this.indigo_ship_available = false;
			this.sugar_ship_available = false;
			this.corn_ship_available = false;
			this.tobacco_ship_available = false;
			this.coffee_ship_available = false;
			this.indigo_ship_full = false;
			this.sugar_ship_full = false;
			this.corn_ship_full = false;
			this.tobacco_ship_full = false;
			this.coffee_ship_full = false;
			this.empty_ship_available = false;
			this.ships_can_take_indigo = false;
			this.ships_can_take_sugar = false;
			this.ships_can_take_corn = false;
			this.ships_can_take_tobacco = false;
			this.ships_can_take_coffee = false;
			this.ready_to_ship_indigo = false;
			this.ready_to_ship_sugar = false;
			this.ready_to_ship_corn = false;
			this.ready_to_ship_tobacco = false;
			this.ready_to_ship_coffee = false;
			this.p1_built = true;
			this.p2_built = true;
			this.p3_built = true;
			this.p4_built = true;
			this.p5_built = true;
			this.p1_built_nothing = true;
			this.p1_ready_to_end_settler = false;
			this.p2_ready_to_end_settler = false;
			this.p3_ready_to_end_settler = false;
			this.p4_ready_to_end_settler = false;
			this.p5_ready_to_end_settler = false;
			this.new_colonists_needed = 0;
			this.discard_size = 0;
			this.game_end_triggered_colonists = false;
			this.game_end_triggered_buildings = false;
			this.game_end_triggered_victorypoints = false;
			this.p1_tiebreaker = 0;
			this.p2_tiebreaker = 0;
			this.p3_tiebreaker = 0;
			this.p4_tiebreaker = 0;
			this.p5_tiebreaker = 0;
			this.current_winner = "null";
			this.current_best_tiebreaker = 0;
			this.tie1 = "null";
			this.tie2 = "null";
			this.tie3 = "null";
			this.tie4 = "null";
			this.tie5 = "null";
			string[] strArray = new string[] { "null", "null", "null", "null", "null" };
			this.tie_breaker_array = strArray;
			this.verify_indigo = 0;
			this.verify_sugar = 0;
			this.verify_corn = 0;
			this.verify_tobacco = 0;
			this.verify_coffee = 0;
			this.verify_colonists = 0;
			this.alerts_on = false;
			this.developer_on = false;
			this.alert_triggered = false;
			this.p1_manned_office = false;
			this.autoclick_captain_phase_on = false;
			this.p1_just_clicked_autoclick = false;
			this.role_has_been_chosen = false;
			this.p2_chose_quarry = false;
			this.p2_chose_corn = false;
			this.p2_chose_random = false;
			this.p2_manned_construction_hut = false;
			this.p2_manned_hospice = false;
			this.p2_manned_hacienda = false;
			this.p2_use_hacienda = false;
			this.p2_chose_settler = false;
			this.p2_chose_trader = false;
			this.p2_manned_small_market = false;
			this.p2_manned_large_market = false;
			this.p2_num_indigo_plants = 0;
			this.p2_num_sugar_plants = 0;
			this.p2_num_tobacco_plants = 0;
			this.p2_num_coffee_plants = 0;
			this.p2_manned_office = false;
			this.p3_chose_quarry = false;
			this.p3_chose_corn = false;
			this.p3_chose_random = false;
			this.p3_manned_construction_hut = false;
			this.p3_manned_hospice = false;
			this.p3_manned_hacienda = false;
			this.p3_use_hacienda = false;
			this.p3_chose_settler = false;
			this.p3_chose_trader = false;
			this.p3_manned_small_market = false;
			this.p3_manned_large_market = false;
			this.p3_num_indigo_plants = 0;
			this.p3_num_sugar_plants = 0;
			this.p3_num_tobacco_plants = 0;
			this.p3_num_coffee_plants = 0;
			this.p3_manned_office = false;
			this.p4_chose_quarry = false;
			this.p4_chose_corn = false;
			this.p4_chose_random = false;
			this.p4_manned_construction_hut = false;
			this.p4_manned_hospice = false;
			this.p4_manned_hacienda = false;
			this.p4_use_hacienda = false;
			this.p4_chose_settler = false;
			this.p4_chose_trader = false;
			this.p4_manned_small_market = false;
			this.p4_manned_large_market = false;
			this.p4_num_indigo_plants = 0;
			this.p4_num_sugar_plants = 0;
			this.p4_num_tobacco_plants = 0;
			this.p4_num_coffee_plants = 0;
			this.p4_manned_office = false;
			this.p5_chose_quarry = false;
			this.p5_chose_corn = false;
			this.p5_chose_random = false;
			this.p5_manned_construction_hut = false;
			this.p5_manned_hospice = false;
			this.p5_manned_hacienda = false;
			this.p5_use_hacienda = false;
			this.p5_chose_settler = false;
			this.p5_chose_trader = false;
			this.p5_manned_small_market = false;
			this.p5_manned_large_market = false;
			this.p5_num_indigo_plants = 0;
			this.p5_num_sugar_plants = 0;
			this.p5_num_tobacco_plants = 0;
			this.p5_num_coffee_plants = 0;
			this.p5_manned_office = false;
			this.previous_role = "null";
			this.indigo_available = false;
			this.indigo_available_slot = 99;
			this.sugar_available = false;
			this.sugar_available_slot = 99;
			this.corn_available = false;
			this.corn_available_slot = 99;
			this.tobacco_available = false;
			this.tobacco_available_slot = 99;
			this.coffee_available = false;
			this.coffee_available_slot = 99;
			this.quarry_available = false;
			this.plantation_slot = 99;
			this.building_slot = 99;
			this.buyable = false;
			this.discount1 = 0;
			this.discount2 = 0;
			this.build_final_cost = 0;
			this.build_available_slot = 0;
			this.build_cost = 0;
			this.build_number = 0;
			this.best_storage_type = 999;
			this.best_storage_qty = 0;
			this.current_best_score = 0;
			this.large_build_spot = 0;
			this.room_to_build_large = false;
			this.afford_large = false;
			this.slots_to_store = 0;
			this.done_dumping = false;
			this.stored_indigo = false;
			this.stored_sugar = false;
			this.stored_corn = false;
			this.stored_tobacco = false;
			this.stored_coffee = false;
			this.dont_choose_settler = false;
			this.dont_choose_mayor = false;
			this.dont_choose_builder = false;
			this.dont_choose_craftsman = false;
			this.dont_choose_trader = false;
			this.dont_choose_captain = false;
			this.dont_choose_prospector1 = false;
			this.dont_choose_prospector2 = false;
			this.need_to_choose_random = false;
			this.free_buildings_available = false;
			this.turn_number = 0;
			this.indigo_points_shipa = 0;
			this.indigo_points_shipb = 0;
			this.indigo_points_shipc = 0;
			this.indigo_points_wharf = 0;
			this.sugar_points_shipa = 0;
			this.sugar_points_shipb = 0;
			this.sugar_points_shipc = 0;
			this.sugar_points_wharf = 0;
			this.corn_points_shipa = 0;
			this.corn_points_shipb = 0;
			this.corn_points_shipc = 0;
			this.corn_points_wharf = 0;
			this.tobacco_points_shipa = 0;
			this.tobacco_points_shipb = 0;
			this.tobacco_points_shipc = 0;
			this.tobacco_points_wharf = 0;
			this.coffee_points_shipa = 0;
			this.coffee_points_shipb = 0;
			this.coffee_points_shipc = 0;
			this.coffee_points_wharf = 0;
			this.shipa_empty = false;
			this.shipb_empty = false;
			this.shipc_empty = false;
			this.found_indigo_match = false;
			this.found_sugar_match = false;
			this.found_tobacco_match = false;
			this.found_coffee_match = false;
			this.very_first_turn = true;
			this.InitializeComponent();
		}

		public void ai_role_choice_maintenance()
		{
			if (this.dont_choose_settler)
			{
				this.chance_of_action(5);
				if (this.chance)
				{
					this.dont_choose_settler = false;
				}
			}
			if (this.dont_choose_mayor)
			{
				this.chance_of_action(5);
				if (this.chance)
				{
					this.dont_choose_mayor = false;
				}
			}
			if (this.dont_choose_builder)
			{
				this.chance_of_action(5);
				if (this.chance)
				{
					this.dont_choose_builder = false;
				}
			}
			if (this.dont_choose_prospector1)
			{
				this.chance_of_action(5);
				if (this.chance)
				{
					this.dont_choose_prospector1 = false;
				}
			}
			if (this.dont_choose_prospector2)
			{
				this.chance_of_action(5);
				if (this.chance)
				{
					this.dont_choose_prospector2 = false;
				}
			}
			if (this.need_to_choose_random)
			{
				this.generate_random1(0, checked(this.number_of_players + 2));
				if (this.random1 == 0 & !this.dont_choose_settler)
				{
					this.role_choice = "settler";
				}
				if (this.random1 == 1 & !this.dont_choose_mayor)
				{
					this.role_choice = "mayor";
				}
				if (this.random1 == 2 & !this.dont_choose_builder)
				{
					this.role_choice = "builder";
				}
				if (this.random1 == 3 & !this.dont_choose_craftsman)
				{
					this.role_choice = "craftsman";
				}
				if (this.random1 == 4 & !this.dont_choose_trader)
				{
					this.role_choice = "trader";
				}
				if (this.random1 == 5 & !this.dont_choose_captain)
				{
					this.role_choice = "captain";
				}
				if (this.random1 == 6 & !this.dont_choose_prospector1)
				{
					this.role_choice = "prospector1";
				}
				if (this.random1 == 7 & !this.dont_choose_prospector2)
				{
					this.role_choice = "prospector2";
				}
			}
		}

		private void auto_captain_button_Click(object sender, EventArgs e)
		{
			if (!this.autoclick_captain_phase_on & this.captain_round)
			{
				if (this.current_player != 1)
				{
					this.p1_just_clicked_autoclick = false;
				}
				else
				{
					this.p1_just_clicked_autoclick = true;
				}
				this.autoclick_captain_phase();
			}
		}

		public void autoclick_captain_phase()
		{
			this.current_playerx = this.current_player;
			this.autoclick_captain_phase_on = true;
			if (this.p1_just_clicked_autoclick)
			{
				this.current_playerx = 99;
			}
			while (!(this.current_playerx == 1 | !this.autoclick_captain_phase_on))
			{
				this.next_turn_routine();
				this.current_playerx = this.current_player;
				if (this.current_playerx != 1)
				{
					continue;
				}
				this.determine_goods_to_ship();
				if (this.goods_to_ship)
				{
					continue;
				}
				this.current_playerx = 99;
			}
			this.autoclick_captain_phase_on = false;
			this.p1_just_clicked_autoclick = false;
		}

		public void build_buildings()
		{
			this.buildings_form.p1_builtb = this.p1_built;
			this.update_buildings_available_labels();
			this.buildings_form.gold_p1b = this.gold_p1;
			this.buildings_form.p1_built_nothingb = this.p1_built_nothing;
			if (this.current_player != 1)
			{
				this.buildings_form.do_not_build_button.Enabled=false;
				this.buildings_form.do_not_build_button.Visible = false;
			}
			else if (this.p1_built)
			{
				this.buildings_form.do_not_build_button.Enabled=false;
				this.buildings_form.do_not_build_button.Visible = false;
			}
			else
			{
				this.buildings_form.do_not_build_button.Enabled = true;
				this.buildings_form.do_not_build_button.Visible = true;
			}
			this.determine_manned_quarries();
			this.check_for_building(341);
			if (!this.found_building)
			{
				this.buildings_form.university_bonusb = false;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.buildings_form.university_bonusb = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.buildings_form.university_bonusb = false;
			}
			else
			{
				this.buildings_form.university_bonusb = true;
			}
			if (!(this.builder_round & this.current_player == 1 & this.current_role_chooser == 1))
			{
				this.buildings_form.builder_bonusb = false;
			}
			else
			{
				this.buildings_form.builder_bonusb = true;
			}
			this.buildings_form.ShowDialog();
			this.gold_p1 = this.buildings_form.gold_p1b;
			this.p1_built = this.buildings_form.p1_builtb;
			this.p1_built_nothing = this.buildings_form.p1_built_nothingb;
			this.update_buildings_available_labels2();
			if (this.current_player == 1 & this.p1_built & !this.processed_builder & !this.p1_built_nothing & this.builder_round)
			{
				this.check_for_building(341);
				if (this.found_building)
				{
					if (this.colonists_bank_num > 0)
					{
						this.colonists_bank_num = checked(this.colonists_bank_num - 1);
						this.infobox_building1("Your manned University granted you a colonist for your building.", 341);
						this.colonists_array[1] = checked(this.colonists_array[1] + 1);
					}
					else if (this.colonists_ship_num > 0)
					{
						this.colonists_ship_num = checked(this.colonists_ship_num - 1);
						this.infobox_building1("Your manned University granted you a colonist for your building.", 341);
						this.colonists_array[1] = checked(this.colonists_array[1] + 1);
					}
				}
				this.processed_builder = true;
			}
			this.update_all_labels();
			if (this.p1_built & this.builder_round)
			{
				this.formtitle("p1", "Builder Phase - Your turn is over");
				this.next_turn_routine();
			}
		}

		private void build_p1_slot1_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[0] == 110 | this.buildings_p1_array[0] == 120 | this.buildings_p1_array[0] == 130 | this.buildings_p1_array[0] == 140 | this.buildings_p1_array[0] == 150 | this.buildings_p1_array[0] == 160 | this.buildings_p1_array[0] == 210 | this.buildings_p1_array[0] == 220 | this.buildings_p1_array[0] == 230 | this.buildings_p1_array[0] == 240 | this.buildings_p1_array[0] == 250 | this.buildings_p1_array[0] == 260 | this.buildings_p1_array[0] == 310 | this.buildings_p1_array[0] == 320 | this.buildings_p1_array[0] == 330 | this.buildings_p1_array[0] == 340 | this.buildings_p1_array[0] == 350 | this.buildings_p1_array[0] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[0] = checked(this.buildings_p1_array[0] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[0] == 111 | this.buildings_p1_array[0] == 121 | this.buildings_p1_array[0] == 131 | this.buildings_p1_array[0] == 141 | this.buildings_p1_array[0] == 151 | this.buildings_p1_array[0] == 161 | this.buildings_p1_array[0] == 213 | this.buildings_p1_array[0] == 223 | this.buildings_p1_array[0] == 231 | this.buildings_p1_array[0] == 241 | this.buildings_p1_array[0] == 251 | this.buildings_p1_array[0] == 261 | this.buildings_p1_array[0] == 313 | this.buildings_p1_array[0] == 322 | this.buildings_p1_array[0] == 331 | this.buildings_p1_array[0] == 341 | this.buildings_p1_array[0] == 351 | this.buildings_p1_array[0] == 361)
					{
						this.buildings_p1_array[0] = checked(this.buildings_p1_array[0] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[0] == 211 | this.buildings_p1_array[0] == 212 | this.buildings_p1_array[0] == 221 | this.buildings_p1_array[0] == 222 | this.buildings_p1_array[0] == 311 | this.buildings_p1_array[0] == 312 | this.buildings_p1_array[0] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[0] = checked(this.buildings_p1_array[0] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[0] = checked(this.buildings_p1_array[0] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot10_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[9] == 110 | this.buildings_p1_array[9] == 120 | this.buildings_p1_array[9] == 130 | this.buildings_p1_array[9] == 140 | this.buildings_p1_array[9] == 150 | this.buildings_p1_array[9] == 160 | this.buildings_p1_array[9] == 210 | this.buildings_p1_array[9] == 220 | this.buildings_p1_array[9] == 230 | this.buildings_p1_array[9] == 240 | this.buildings_p1_array[9] == 250 | this.buildings_p1_array[9] == 260 | this.buildings_p1_array[9] == 310 | this.buildings_p1_array[9] == 320 | this.buildings_p1_array[9] == 330 | this.buildings_p1_array[9] == 340 | this.buildings_p1_array[9] == 350 | this.buildings_p1_array[9] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[9] = checked(this.buildings_p1_array[9] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[9] == 111 | this.buildings_p1_array[9] == 121 | this.buildings_p1_array[9] == 131 | this.buildings_p1_array[9] == 141 | this.buildings_p1_array[9] == 151 | this.buildings_p1_array[9] == 161 | this.buildings_p1_array[9] == 213 | this.buildings_p1_array[9] == 223 | this.buildings_p1_array[9] == 231 | this.buildings_p1_array[9] == 241 | this.buildings_p1_array[9] == 251 | this.buildings_p1_array[9] == 261 | this.buildings_p1_array[9] == 313 | this.buildings_p1_array[9] == 322 | this.buildings_p1_array[9] == 331 | this.buildings_p1_array[9] == 341 | this.buildings_p1_array[9] == 351 | this.buildings_p1_array[9] == 361)
					{
						this.buildings_p1_array[9] = checked(this.buildings_p1_array[9] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[9] == 211 | this.buildings_p1_array[9] == 212 | this.buildings_p1_array[9] == 221 | this.buildings_p1_array[9] == 222 | this.buildings_p1_array[9] == 311 | this.buildings_p1_array[9] == 312 | this.buildings_p1_array[9] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[9] = checked(this.buildings_p1_array[9] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[9] = checked(this.buildings_p1_array[9] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot11_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[10] == 110 | this.buildings_p1_array[10] == 120 | this.buildings_p1_array[10] == 130 | this.buildings_p1_array[10] == 140 | this.buildings_p1_array[10] == 150 | this.buildings_p1_array[10] == 160 | this.buildings_p1_array[10] == 210 | this.buildings_p1_array[10] == 220 | this.buildings_p1_array[10] == 230 | this.buildings_p1_array[10] == 240 | this.buildings_p1_array[10] == 250 | this.buildings_p1_array[10] == 260 | this.buildings_p1_array[10] == 310 | this.buildings_p1_array[10] == 320 | this.buildings_p1_array[10] == 330 | this.buildings_p1_array[10] == 340 | this.buildings_p1_array[10] == 350 | this.buildings_p1_array[10] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[10] = checked(this.buildings_p1_array[10] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[10] == 111 | this.buildings_p1_array[10] == 121 | this.buildings_p1_array[10] == 131 | this.buildings_p1_array[10] == 141 | this.buildings_p1_array[10] == 151 | this.buildings_p1_array[10] == 161 | this.buildings_p1_array[10] == 213 | this.buildings_p1_array[10] == 223 | this.buildings_p1_array[10] == 231 | this.buildings_p1_array[10] == 241 | this.buildings_p1_array[10] == 251 | this.buildings_p1_array[10] == 261 | this.buildings_p1_array[10] == 313 | this.buildings_p1_array[10] == 322 | this.buildings_p1_array[10] == 331 | this.buildings_p1_array[10] == 341 | this.buildings_p1_array[10] == 351 | this.buildings_p1_array[10] == 361)
					{
						this.buildings_p1_array[10] = checked(this.buildings_p1_array[10] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[10] == 211 | this.buildings_p1_array[10] == 212 | this.buildings_p1_array[10] == 221 | this.buildings_p1_array[10] == 222 | this.buildings_p1_array[10] == 311 | this.buildings_p1_array[10] == 312 | this.buildings_p1_array[10] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[10] = checked(this.buildings_p1_array[10] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[10] = checked(this.buildings_p1_array[10] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot12_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[11] == 110 | this.buildings_p1_array[11] == 120 | this.buildings_p1_array[11] == 130 | this.buildings_p1_array[11] == 140 | this.buildings_p1_array[11] == 150 | this.buildings_p1_array[11] == 160 | this.buildings_p1_array[11] == 210 | this.buildings_p1_array[11] == 220 | this.buildings_p1_array[11] == 230 | this.buildings_p1_array[11] == 240 | this.buildings_p1_array[11] == 250 | this.buildings_p1_array[11] == 260 | this.buildings_p1_array[11] == 310 | this.buildings_p1_array[11] == 320 | this.buildings_p1_array[11] == 330 | this.buildings_p1_array[11] == 340 | this.buildings_p1_array[11] == 350 | this.buildings_p1_array[11] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[11] = checked(this.buildings_p1_array[11] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[11] == 111 | this.buildings_p1_array[11] == 121 | this.buildings_p1_array[11] == 131 | this.buildings_p1_array[11] == 141 | this.buildings_p1_array[11] == 151 | this.buildings_p1_array[11] == 161 | this.buildings_p1_array[11] == 213 | this.buildings_p1_array[11] == 223 | this.buildings_p1_array[11] == 231 | this.buildings_p1_array[11] == 241 | this.buildings_p1_array[11] == 251 | this.buildings_p1_array[11] == 261 | this.buildings_p1_array[11] == 313 | this.buildings_p1_array[11] == 322 | this.buildings_p1_array[11] == 331 | this.buildings_p1_array[11] == 341 | this.buildings_p1_array[11] == 351 | this.buildings_p1_array[11] == 361)
					{
						this.buildings_p1_array[11] = checked(this.buildings_p1_array[11] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[11] == 211 | this.buildings_p1_array[11] == 212 | this.buildings_p1_array[11] == 221 | this.buildings_p1_array[11] == 222 | this.buildings_p1_array[11] == 311 | this.buildings_p1_array[11] == 312 | this.buildings_p1_array[11] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[11] = checked(this.buildings_p1_array[11] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[11] = checked(this.buildings_p1_array[11] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot13_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[12] == 410 | this.buildings_p1_array[12] == 420 | this.buildings_p1_array[12] == 430 | this.buildings_p1_array[12] == 440 | this.buildings_p1_array[12] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[12] = checked(this.buildings_p1_array[12] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[12] == 411 | this.buildings_p1_array[12] == 421 | this.buildings_p1_array[12] == 431 | this.buildings_p1_array[12] == 441 | this.buildings_p1_array[12] == 451)
					{
						this.buildings_p1_array[12] = checked(this.buildings_p1_array[12] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot14_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[13] == 410 | this.buildings_p1_array[13] == 420 | this.buildings_p1_array[13] == 430 | this.buildings_p1_array[13] == 440 | this.buildings_p1_array[13] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[13] = checked(this.buildings_p1_array[13] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[13] == 411 | this.buildings_p1_array[13] == 421 | this.buildings_p1_array[13] == 431 | this.buildings_p1_array[13] == 441 | this.buildings_p1_array[13] == 451)
					{
						this.buildings_p1_array[13] = checked(this.buildings_p1_array[13] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot15_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[14] == 410 | this.buildings_p1_array[14] == 420 | this.buildings_p1_array[14] == 430 | this.buildings_p1_array[14] == 440 | this.buildings_p1_array[14] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[14] = checked(this.buildings_p1_array[14] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[14] == 411 | this.buildings_p1_array[14] == 421 | this.buildings_p1_array[14] == 431 | this.buildings_p1_array[14] == 441 | this.buildings_p1_array[14] == 451)
					{
						this.buildings_p1_array[14] = checked(this.buildings_p1_array[14] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot16_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[15] == 410 | this.buildings_p1_array[15] == 420 | this.buildings_p1_array[15] == 430 | this.buildings_p1_array[15] == 440 | this.buildings_p1_array[15] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[15] = checked(this.buildings_p1_array[15] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[15] == 411 | this.buildings_p1_array[15] == 421 | this.buildings_p1_array[15] == 431 | this.buildings_p1_array[15] == 441 | this.buildings_p1_array[15] == 451)
					{
						this.buildings_p1_array[15] = checked(this.buildings_p1_array[15] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot17_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[16] == 410 | this.buildings_p1_array[16] == 420 | this.buildings_p1_array[16] == 430 | this.buildings_p1_array[16] == 440 | this.buildings_p1_array[16] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[16] = checked(this.buildings_p1_array[16] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[16] == 411 | this.buildings_p1_array[16] == 421 | this.buildings_p1_array[16] == 431 | this.buildings_p1_array[16] == 441 | this.buildings_p1_array[16] == 451)
					{
						this.buildings_p1_array[16] = checked(this.buildings_p1_array[16] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot18_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[17] == 410 | this.buildings_p1_array[17] == 420 | this.buildings_p1_array[17] == 430 | this.buildings_p1_array[17] == 440 | this.buildings_p1_array[17] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[17] = checked(this.buildings_p1_array[17] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[17] == 411 | this.buildings_p1_array[17] == 421 | this.buildings_p1_array[17] == 431 | this.buildings_p1_array[17] == 441 | this.buildings_p1_array[17] == 451)
					{
						this.buildings_p1_array[17] = checked(this.buildings_p1_array[17] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot19_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[18] == 410 | this.buildings_p1_array[18] == 420 | this.buildings_p1_array[18] == 430 | this.buildings_p1_array[18] == 440 | this.buildings_p1_array[18] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[18] = checked(this.buildings_p1_array[18] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[18] == 411 | this.buildings_p1_array[18] == 421 | this.buildings_p1_array[18] == 431 | this.buildings_p1_array[18] == 441 | this.buildings_p1_array[18] == 451)
					{
						this.buildings_p1_array[18] = checked(this.buildings_p1_array[18] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot2_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[1] == 110 | this.buildings_p1_array[1] == 120 | this.buildings_p1_array[1] == 130 | this.buildings_p1_array[1] == 140 | this.buildings_p1_array[1] == 150 | this.buildings_p1_array[1] == 160 | this.buildings_p1_array[1] == 210 | this.buildings_p1_array[1] == 220 | this.buildings_p1_array[1] == 230 | this.buildings_p1_array[1] == 240 | this.buildings_p1_array[1] == 250 | this.buildings_p1_array[1] == 260 | this.buildings_p1_array[1] == 310 | this.buildings_p1_array[1] == 320 | this.buildings_p1_array[1] == 330 | this.buildings_p1_array[1] == 340 | this.buildings_p1_array[1] == 350 | this.buildings_p1_array[1] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[1] = checked(this.buildings_p1_array[1] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[1] == 111 | this.buildings_p1_array[1] == 121 | this.buildings_p1_array[1] == 131 | this.buildings_p1_array[1] == 141 | this.buildings_p1_array[1] == 151 | this.buildings_p1_array[1] == 161 | this.buildings_p1_array[1] == 213 | this.buildings_p1_array[1] == 223 | this.buildings_p1_array[1] == 231 | this.buildings_p1_array[1] == 241 | this.buildings_p1_array[1] == 251 | this.buildings_p1_array[1] == 261 | this.buildings_p1_array[1] == 313 | this.buildings_p1_array[1] == 322 | this.buildings_p1_array[1] == 331 | this.buildings_p1_array[1] == 341 | this.buildings_p1_array[1] == 351 | this.buildings_p1_array[1] == 361)
					{
						this.buildings_p1_array[1] = checked(this.buildings_p1_array[1] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[1] == 211 | this.buildings_p1_array[1] == 212 | this.buildings_p1_array[1] == 221 | this.buildings_p1_array[1] == 222 | this.buildings_p1_array[1] == 311 | this.buildings_p1_array[1] == 312 | this.buildings_p1_array[1] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[1] = checked(this.buildings_p1_array[1] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[1] = checked(this.buildings_p1_array[1] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot20_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				this.finished = false;
				if (!this.finished)
				{
					if (this.buildings_p1_array[19] == 410 | this.buildings_p1_array[19] == 420 | this.buildings_p1_array[19] == 430 | this.buildings_p1_array[19] == 440 | this.buildings_p1_array[19] == 450)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[19] = checked(this.buildings_p1_array[19] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[19] == 411 | this.buildings_p1_array[19] == 421 | this.buildings_p1_array[19] == 431 | this.buildings_p1_array[19] == 441 | this.buildings_p1_array[19] == 451)
					{
						this.buildings_p1_array[19] = checked(this.buildings_p1_array[19] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot3_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[2] == 110 | this.buildings_p1_array[2] == 120 | this.buildings_p1_array[2] == 130 | this.buildings_p1_array[2] == 140 | this.buildings_p1_array[2] == 150 | this.buildings_p1_array[2] == 160 | this.buildings_p1_array[2] == 210 | this.buildings_p1_array[2] == 220 | this.buildings_p1_array[2] == 230 | this.buildings_p1_array[2] == 240 | this.buildings_p1_array[2] == 250 | this.buildings_p1_array[2] == 260 | this.buildings_p1_array[2] == 310 | this.buildings_p1_array[2] == 320 | this.buildings_p1_array[2] == 330 | this.buildings_p1_array[2] == 340 | this.buildings_p1_array[2] == 350 | this.buildings_p1_array[2] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[2] = checked(this.buildings_p1_array[2] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[2] == 111 | this.buildings_p1_array[2] == 121 | this.buildings_p1_array[2] == 131 | this.buildings_p1_array[2] == 141 | this.buildings_p1_array[2] == 151 | this.buildings_p1_array[2] == 161 | this.buildings_p1_array[2] == 213 | this.buildings_p1_array[2] == 223 | this.buildings_p1_array[2] == 231 | this.buildings_p1_array[2] == 241 | this.buildings_p1_array[2] == 251 | this.buildings_p1_array[2] == 261 | this.buildings_p1_array[2] == 313 | this.buildings_p1_array[2] == 322 | this.buildings_p1_array[2] == 331 | this.buildings_p1_array[2] == 341 | this.buildings_p1_array[2] == 351 | this.buildings_p1_array[2] == 361)
					{
						this.buildings_p1_array[2] = checked(this.buildings_p1_array[2] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[2] == 211 | this.buildings_p1_array[2] == 212 | this.buildings_p1_array[2] == 221 | this.buildings_p1_array[2] == 222 | this.buildings_p1_array[2] == 311 | this.buildings_p1_array[2] == 312 | this.buildings_p1_array[2] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[2] = checked(this.buildings_p1_array[2] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[2] = checked(this.buildings_p1_array[2] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot4_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[3] == 110 | this.buildings_p1_array[3] == 120 | this.buildings_p1_array[3] == 130 | this.buildings_p1_array[3] == 140 | this.buildings_p1_array[3] == 150 | this.buildings_p1_array[3] == 160 | this.buildings_p1_array[3] == 210 | this.buildings_p1_array[3] == 220 | this.buildings_p1_array[3] == 230 | this.buildings_p1_array[3] == 240 | this.buildings_p1_array[3] == 250 | this.buildings_p1_array[3] == 260 | this.buildings_p1_array[3] == 310 | this.buildings_p1_array[3] == 320 | this.buildings_p1_array[3] == 330 | this.buildings_p1_array[3] == 340 | this.buildings_p1_array[3] == 350 | this.buildings_p1_array[3] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[3] = checked(this.buildings_p1_array[3] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[3] == 111 | this.buildings_p1_array[3] == 121 | this.buildings_p1_array[3] == 131 | this.buildings_p1_array[3] == 141 | this.buildings_p1_array[3] == 151 | this.buildings_p1_array[3] == 161 | this.buildings_p1_array[3] == 213 | this.buildings_p1_array[3] == 223 | this.buildings_p1_array[3] == 231 | this.buildings_p1_array[3] == 241 | this.buildings_p1_array[3] == 251 | this.buildings_p1_array[3] == 261 | this.buildings_p1_array[3] == 313 | this.buildings_p1_array[3] == 322 | this.buildings_p1_array[3] == 331 | this.buildings_p1_array[3] == 341 | this.buildings_p1_array[3] == 351 | this.buildings_p1_array[3] == 361)
					{
						this.buildings_p1_array[3] = checked(this.buildings_p1_array[3] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[3] == 211 | this.buildings_p1_array[3] == 212 | this.buildings_p1_array[3] == 221 | this.buildings_p1_array[3] == 222 | this.buildings_p1_array[3] == 311 | this.buildings_p1_array[3] == 312 | this.buildings_p1_array[3] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[3] = checked(this.buildings_p1_array[3] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[3] = checked(this.buildings_p1_array[3] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot5_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[4] == 110 | this.buildings_p1_array[4] == 120 | this.buildings_p1_array[4] == 130 | this.buildings_p1_array[4] == 140 | this.buildings_p1_array[4] == 150 | this.buildings_p1_array[4] == 160 | this.buildings_p1_array[4] == 210 | this.buildings_p1_array[4] == 220 | this.buildings_p1_array[4] == 230 | this.buildings_p1_array[4] == 240 | this.buildings_p1_array[4] == 250 | this.buildings_p1_array[4] == 260 | this.buildings_p1_array[4] == 310 | this.buildings_p1_array[4] == 320 | this.buildings_p1_array[4] == 330 | this.buildings_p1_array[4] == 340 | this.buildings_p1_array[4] == 350 | this.buildings_p1_array[4] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[4] = checked(this.buildings_p1_array[4] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[4] == 111 | this.buildings_p1_array[4] == 121 | this.buildings_p1_array[4] == 131 | this.buildings_p1_array[4] == 141 | this.buildings_p1_array[4] == 151 | this.buildings_p1_array[4] == 161 | this.buildings_p1_array[4] == 213 | this.buildings_p1_array[4] == 223 | this.buildings_p1_array[4] == 231 | this.buildings_p1_array[4] == 241 | this.buildings_p1_array[4] == 251 | this.buildings_p1_array[4] == 261 | this.buildings_p1_array[4] == 313 | this.buildings_p1_array[4] == 322 | this.buildings_p1_array[4] == 331 | this.buildings_p1_array[4] == 341 | this.buildings_p1_array[4] == 351 | this.buildings_p1_array[4] == 361)
					{
						this.buildings_p1_array[4] = checked(this.buildings_p1_array[4] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[4] == 211 | this.buildings_p1_array[4] == 212 | this.buildings_p1_array[4] == 221 | this.buildings_p1_array[4] == 222 | this.buildings_p1_array[4] == 311 | this.buildings_p1_array[4] == 312 | this.buildings_p1_array[4] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[4] = checked(this.buildings_p1_array[4] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[4] = checked(this.buildings_p1_array[4] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot6_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[5] == 110 | this.buildings_p1_array[5] == 120 | this.buildings_p1_array[5] == 130 | this.buildings_p1_array[5] == 140 | this.buildings_p1_array[5] == 150 | this.buildings_p1_array[5] == 160 | this.buildings_p1_array[5] == 210 | this.buildings_p1_array[5] == 220 | this.buildings_p1_array[5] == 230 | this.buildings_p1_array[5] == 240 | this.buildings_p1_array[5] == 250 | this.buildings_p1_array[5] == 260 | this.buildings_p1_array[5] == 310 | this.buildings_p1_array[5] == 320 | this.buildings_p1_array[5] == 330 | this.buildings_p1_array[5] == 340 | this.buildings_p1_array[5] == 350 | this.buildings_p1_array[5] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[5] = checked(this.buildings_p1_array[5] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[5] == 111 | this.buildings_p1_array[5] == 121 | this.buildings_p1_array[5] == 131 | this.buildings_p1_array[5] == 141 | this.buildings_p1_array[5] == 151 | this.buildings_p1_array[5] == 161 | this.buildings_p1_array[5] == 213 | this.buildings_p1_array[5] == 223 | this.buildings_p1_array[5] == 231 | this.buildings_p1_array[5] == 241 | this.buildings_p1_array[5] == 251 | this.buildings_p1_array[5] == 261 | this.buildings_p1_array[5] == 313 | this.buildings_p1_array[5] == 322 | this.buildings_p1_array[5] == 331 | this.buildings_p1_array[5] == 341 | this.buildings_p1_array[5] == 351 | this.buildings_p1_array[5] == 361)
					{
						this.buildings_p1_array[5] = checked(this.buildings_p1_array[5] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[5] == 211 | this.buildings_p1_array[5] == 212 | this.buildings_p1_array[5] == 221 | this.buildings_p1_array[5] == 222 | this.buildings_p1_array[5] == 311 | this.buildings_p1_array[5] == 312 | this.buildings_p1_array[5] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[5] = checked(this.buildings_p1_array[5] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[5] = checked(this.buildings_p1_array[5] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot7_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[6] == 110 | this.buildings_p1_array[6] == 120 | this.buildings_p1_array[6] == 130 | this.buildings_p1_array[6] == 140 | this.buildings_p1_array[6] == 150 | this.buildings_p1_array[6] == 160 | this.buildings_p1_array[6] == 210 | this.buildings_p1_array[6] == 220 | this.buildings_p1_array[6] == 230 | this.buildings_p1_array[6] == 240 | this.buildings_p1_array[6] == 250 | this.buildings_p1_array[6] == 260 | this.buildings_p1_array[6] == 310 | this.buildings_p1_array[6] == 320 | this.buildings_p1_array[6] == 330 | this.buildings_p1_array[6] == 340 | this.buildings_p1_array[6] == 350 | this.buildings_p1_array[6] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[6] = checked(this.buildings_p1_array[6] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[6] == 111 | this.buildings_p1_array[6] == 121 | this.buildings_p1_array[6] == 131 | this.buildings_p1_array[6] == 141 | this.buildings_p1_array[6] == 151 | this.buildings_p1_array[6] == 161 | this.buildings_p1_array[6] == 213 | this.buildings_p1_array[6] == 223 | this.buildings_p1_array[6] == 231 | this.buildings_p1_array[6] == 241 | this.buildings_p1_array[6] == 251 | this.buildings_p1_array[6] == 261 | this.buildings_p1_array[6] == 313 | this.buildings_p1_array[6] == 322 | this.buildings_p1_array[6] == 331 | this.buildings_p1_array[6] == 341 | this.buildings_p1_array[6] == 351 | this.buildings_p1_array[6] == 361)
					{
						this.buildings_p1_array[6] = checked(this.buildings_p1_array[6] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[6] == 211 | this.buildings_p1_array[6] == 212 | this.buildings_p1_array[6] == 221 | this.buildings_p1_array[6] == 222 | this.buildings_p1_array[6] == 311 | this.buildings_p1_array[6] == 312 | this.buildings_p1_array[6] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[6] = checked(this.buildings_p1_array[6] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[6] = checked(this.buildings_p1_array[6] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot8_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[7] == 110 | this.buildings_p1_array[7] == 120 | this.buildings_p1_array[7] == 130 | this.buildings_p1_array[7] == 140 | this.buildings_p1_array[7] == 150 | this.buildings_p1_array[7] == 160 | this.buildings_p1_array[7] == 210 | this.buildings_p1_array[7] == 220 | this.buildings_p1_array[7] == 230 | this.buildings_p1_array[7] == 240 | this.buildings_p1_array[7] == 250 | this.buildings_p1_array[7] == 260 | this.buildings_p1_array[7] == 310 | this.buildings_p1_array[7] == 320 | this.buildings_p1_array[7] == 330 | this.buildings_p1_array[7] == 340 | this.buildings_p1_array[7] == 350 | this.buildings_p1_array[7] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[7] = checked(this.buildings_p1_array[7] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[7] == 111 | this.buildings_p1_array[7] == 121 | this.buildings_p1_array[7] == 131 | this.buildings_p1_array[7] == 141 | this.buildings_p1_array[7] == 151 | this.buildings_p1_array[7] == 161 | this.buildings_p1_array[7] == 213 | this.buildings_p1_array[7] == 223 | this.buildings_p1_array[7] == 231 | this.buildings_p1_array[7] == 241 | this.buildings_p1_array[7] == 251 | this.buildings_p1_array[7] == 261 | this.buildings_p1_array[7] == 313 | this.buildings_p1_array[7] == 322 | this.buildings_p1_array[7] == 331 | this.buildings_p1_array[7] == 341 | this.buildings_p1_array[7] == 351 | this.buildings_p1_array[7] == 361)
					{
						this.buildings_p1_array[7] = checked(this.buildings_p1_array[7] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[7] == 211 | this.buildings_p1_array[7] == 212 | this.buildings_p1_array[7] == 221 | this.buildings_p1_array[7] == 222 | this.buildings_p1_array[7] == 311 | this.buildings_p1_array[7] == 312 | this.buildings_p1_array[7] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[7] = checked(this.buildings_p1_array[7] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[7] = checked(this.buildings_p1_array[7] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot9_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!this.mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!this.finished)
				{
					if (this.buildings_p1_array[8] == 110 | this.buildings_p1_array[8] == 120 | this.buildings_p1_array[8] == 130 | this.buildings_p1_array[8] == 140 | this.buildings_p1_array[8] == 150 | this.buildings_p1_array[8] == 160 | this.buildings_p1_array[8] == 210 | this.buildings_p1_array[8] == 220 | this.buildings_p1_array[8] == 230 | this.buildings_p1_array[8] == 240 | this.buildings_p1_array[8] == 250 | this.buildings_p1_array[8] == 260 | this.buildings_p1_array[8] == 310 | this.buildings_p1_array[8] == 320 | this.buildings_p1_array[8] == 330 | this.buildings_p1_array[8] == 340 | this.buildings_p1_array[8] == 350 | this.buildings_p1_array[8] == 360)
					{
						if (this.idle_colonists_array[this.current_player] > 0)
						{
							this.buildings_p1_array[8] = checked(this.buildings_p1_array[8] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[8] == 111 | this.buildings_p1_array[8] == 121 | this.buildings_p1_array[8] == 131 | this.buildings_p1_array[8] == 141 | this.buildings_p1_array[8] == 151 | this.buildings_p1_array[8] == 161 | this.buildings_p1_array[8] == 213 | this.buildings_p1_array[8] == 223 | this.buildings_p1_array[8] == 231 | this.buildings_p1_array[8] == 241 | this.buildings_p1_array[8] == 251 | this.buildings_p1_array[8] == 261 | this.buildings_p1_array[8] == 313 | this.buildings_p1_array[8] == 322 | this.buildings_p1_array[8] == 331 | this.buildings_p1_array[8] == 341 | this.buildings_p1_array[8] == 351 | this.buildings_p1_array[8] == 361)
					{
						this.buildings_p1_array[8] = checked(this.buildings_p1_array[8] - 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished)
				{
					if (this.buildings_p1_array[8] == 211 | this.buildings_p1_array[8] == 212 | this.buildings_p1_array[8] == 221 | this.buildings_p1_array[8] == 222 | this.buildings_p1_array[8] == 311 | this.buildings_p1_array[8] == 312 | this.buildings_p1_array[8] == 321)
					{
						if (this.idle_colonists_array[this.current_player] <= 0)
						{
							this.buildings_p1_array[8] = checked(this.buildings_p1_array[8] - 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
							this.finished = true;
							this.update_all_labels();
						}
						else
						{
							this.buildings_p1_array[8] = checked(this.buildings_p1_array[8] + 1);
							this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
							this.finished = true;
							this.update_all_labels();
						}
					}
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void builder_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_builder();
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			this.tempinteger = this.tempinteger;
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			this.close_text_file();
		}

		private void Button3_Click(object sender, EventArgs e)
		{
		}

		public void calculate_best_captain_points_p2()
		{
			this.update_ship_cargo();
			if (this.indigo_shipnum == 1 & this.indigo_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p2_array[0])
				{
					this.indigo_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.indigo_points_shipa = this.goods_p2_array[0];
				}
			}
			if (this.indigo_shipnum == 2 & this.indigo_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p2_array[0])
				{
					this.indigo_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.indigo_points_shipb = this.goods_p2_array[0];
				}
			}
			if (this.indigo_shipnum == 3 & this.indigo_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p2_array[0])
				{
					this.indigo_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.indigo_points_shipc = this.goods_p2_array[0];
				}
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.indigo_points_shipa = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.indigo_points_shipb = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.indigo_points_shipc = this.shipa_array[3];
			}
			if (this.sugar_shipnum == 1 & this.sugar_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p2_array[1])
				{
					this.sugar_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.sugar_points_shipa = this.goods_p2_array[1];
				}
			}
			if (this.sugar_shipnum == 2 & this.sugar_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p2_array[1])
				{
					this.sugar_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.sugar_points_shipb = this.goods_p2_array[1];
				}
			}
			if (this.sugar_shipnum == 3 & this.sugar_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p2_array[1])
				{
					this.sugar_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.sugar_points_shipc = this.goods_p2_array[1];
				}
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.sugar_points_shipa = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.sugar_points_shipb = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.sugar_points_shipc = this.shipa_array[3];
			}
			if (this.corn_shipnum == 1 & this.corn_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p2_array[2])
				{
					this.corn_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.corn_points_shipa = this.goods_p2_array[2];
				}
			}
			if (this.corn_shipnum == 2 & this.corn_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p2_array[2])
				{
					this.corn_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.corn_points_shipb = this.goods_p2_array[2];
				}
			}
			if (this.corn_shipnum == 3 & this.corn_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p2_array[2])
				{
					this.corn_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.corn_points_shipc = this.goods_p2_array[2];
				}
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.corn_points_shipa = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.corn_points_shipb = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.corn_points_shipc = this.shipa_array[3];
			}
			if (this.tobacco_shipnum == 1 & this.tobacco_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p2_array[3])
				{
					this.tobacco_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.tobacco_points_shipa = this.goods_p2_array[3];
				}
			}
			if (this.tobacco_shipnum == 2 & this.tobacco_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p2_array[3])
				{
					this.tobacco_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.tobacco_points_shipb = this.goods_p2_array[3];
				}
			}
			if (this.tobacco_shipnum == 3 & this.tobacco_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p2_array[3])
				{
					this.tobacco_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.tobacco_points_shipc = this.goods_p2_array[3];
				}
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.tobacco_points_shipa = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.tobacco_points_shipb = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.tobacco_points_shipc = this.shipa_array[3];
			}
			if (this.coffee_shipnum == 1 & this.coffee_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p2_array[4])
				{
					this.coffee_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.coffee_points_shipa = this.goods_p2_array[4];
				}
			}
			if (this.coffee_shipnum == 2 & this.coffee_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p2_array[4])
				{
					this.coffee_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.coffee_points_shipb = this.goods_p2_array[4];
				}
			}
			if (this.coffee_shipnum == 3 & this.coffee_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p2_array[4])
				{
					this.coffee_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.coffee_points_shipc = this.goods_p2_array[4];
				}
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.coffee_points_shipa = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.coffee_points_shipb = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.coffee_points_shipc = this.shipa_array[3];
			}
			this.corn_points_wharf = this.goods_p2_array[2];
			this.indigo_points_wharf = this.goods_p2_array[0];
			this.sugar_points_wharf = this.goods_p2_array[1];
			this.tobacco_points_wharf = this.goods_p2_array[3];
			this.coffee_points_wharf = this.goods_p2_array[4];
			this.calculate_best_captain_pointsb_p2();
		}

		public void calculate_best_captain_points_p3()
		{
			this.update_ship_cargo();
			if (this.indigo_shipnum == 1 & this.indigo_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p3_array[0])
				{
					this.indigo_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.indigo_points_shipa = this.goods_p3_array[0];
				}
			}
			if (this.indigo_shipnum == 2 & this.indigo_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p3_array[0])
				{
					this.indigo_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.indigo_points_shipb = this.goods_p3_array[0];
				}
			}
			if (this.indigo_shipnum == 3 & this.indigo_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p3_array[0])
				{
					this.indigo_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.indigo_points_shipc = this.goods_p3_array[0];
				}
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.indigo_points_shipa = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.indigo_points_shipb = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.indigo_points_shipc = this.shipa_array[3];
			}
			if (this.sugar_shipnum == 1 & this.sugar_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p3_array[1])
				{
					this.sugar_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.sugar_points_shipa = this.goods_p3_array[1];
				}
			}
			if (this.sugar_shipnum == 2 & this.sugar_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p3_array[1])
				{
					this.sugar_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.sugar_points_shipb = this.goods_p3_array[1];
				}
			}
			if (this.sugar_shipnum == 3 & this.sugar_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p3_array[1])
				{
					this.sugar_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.sugar_points_shipc = this.goods_p3_array[1];
				}
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.sugar_points_shipa = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.sugar_points_shipb = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.sugar_points_shipc = this.shipa_array[3];
			}
			if (this.corn_shipnum == 1 & this.corn_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p3_array[2])
				{
					this.corn_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.corn_points_shipa = this.goods_p3_array[2];
				}
			}
			if (this.corn_shipnum == 2 & this.corn_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p3_array[2])
				{
					this.corn_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.corn_points_shipb = this.goods_p3_array[2];
				}
			}
			if (this.corn_shipnum == 3 & this.corn_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p3_array[2])
				{
					this.corn_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.corn_points_shipc = this.goods_p3_array[2];
				}
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.corn_points_shipa = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.corn_points_shipb = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.corn_points_shipc = this.shipa_array[3];
			}
			if (this.tobacco_shipnum == 1 & this.tobacco_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p3_array[3])
				{
					this.tobacco_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.tobacco_points_shipa = this.goods_p3_array[3];
				}
			}
			if (this.tobacco_shipnum == 2 & this.tobacco_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p3_array[3])
				{
					this.tobacco_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.tobacco_points_shipb = this.goods_p3_array[3];
				}
			}
			if (this.tobacco_shipnum == 3 & this.tobacco_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p3_array[3])
				{
					this.tobacco_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.tobacco_points_shipc = this.goods_p3_array[3];
				}
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.tobacco_points_shipa = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.tobacco_points_shipb = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.tobacco_points_shipc = this.shipa_array[3];
			}
			if (this.coffee_shipnum == 1 & this.coffee_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p3_array[4])
				{
					this.coffee_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.coffee_points_shipa = this.goods_p3_array[4];
				}
			}
			if (this.coffee_shipnum == 2 & this.coffee_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p3_array[4])
				{
					this.coffee_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.coffee_points_shipb = this.goods_p3_array[4];
				}
			}
			if (this.coffee_shipnum == 3 & this.coffee_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p3_array[4])
				{
					this.coffee_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.coffee_points_shipc = this.goods_p3_array[4];
				}
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.coffee_points_shipa = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.coffee_points_shipb = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.coffee_points_shipc = this.shipa_array[3];
			}
			this.corn_points_wharf = this.goods_p3_array[2];
			this.indigo_points_wharf = this.goods_p3_array[0];
			this.sugar_points_wharf = this.goods_p3_array[1];
			this.tobacco_points_wharf = this.goods_p3_array[3];
			this.coffee_points_wharf = this.goods_p3_array[4];
			this.calculate_best_captain_pointsb_p3();
		}

		public void calculate_best_captain_points_p4()
		{
			this.update_ship_cargo();
			if (this.indigo_shipnum == 1 & this.indigo_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p4_array[0])
				{
					this.indigo_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.indigo_points_shipa = this.goods_p4_array[0];
				}
			}
			if (this.indigo_shipnum == 2 & this.indigo_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p4_array[0])
				{
					this.indigo_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.indigo_points_shipb = this.goods_p4_array[0];
				}
			}
			if (this.indigo_shipnum == 3 & this.indigo_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p4_array[0])
				{
					this.indigo_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.indigo_points_shipc = this.goods_p4_array[0];
				}
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.indigo_points_shipa = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.indigo_points_shipb = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.indigo_points_shipc = this.shipa_array[3];
			}
			if (this.sugar_shipnum == 1 & this.sugar_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p4_array[1])
				{
					this.sugar_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.sugar_points_shipa = this.goods_p4_array[1];
				}
			}
			if (this.sugar_shipnum == 2 & this.sugar_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p4_array[1])
				{
					this.sugar_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.sugar_points_shipb = this.goods_p4_array[1];
				}
			}
			if (this.sugar_shipnum == 3 & this.sugar_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p4_array[1])
				{
					this.sugar_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.sugar_points_shipc = this.goods_p4_array[1];
				}
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.sugar_points_shipa = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.sugar_points_shipb = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.sugar_points_shipc = this.shipa_array[3];
			}
			if (this.corn_shipnum == 1 & this.corn_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p4_array[2])
				{
					this.corn_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.corn_points_shipa = this.goods_p4_array[2];
				}
			}
			if (this.corn_shipnum == 2 & this.corn_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p4_array[2])
				{
					this.corn_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.corn_points_shipb = this.goods_p4_array[2];
				}
			}
			if (this.corn_shipnum == 3 & this.corn_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p4_array[2])
				{
					this.corn_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.corn_points_shipc = this.goods_p4_array[2];
				}
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.corn_points_shipa = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.corn_points_shipb = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.corn_points_shipc = this.shipa_array[3];
			}
			if (this.tobacco_shipnum == 1 & this.tobacco_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p4_array[3])
				{
					this.tobacco_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.tobacco_points_shipa = this.goods_p4_array[3];
				}
			}
			if (this.tobacco_shipnum == 2 & this.tobacco_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p4_array[3])
				{
					this.tobacco_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.tobacco_points_shipb = this.goods_p4_array[3];
				}
			}
			if (this.tobacco_shipnum == 3 & this.tobacco_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p4_array[3])
				{
					this.tobacco_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.tobacco_points_shipc = this.goods_p4_array[3];
				}
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.tobacco_points_shipa = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.tobacco_points_shipb = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.tobacco_points_shipc = this.shipa_array[3];
			}
			if (this.coffee_shipnum == 1 & this.coffee_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p4_array[4])
				{
					this.coffee_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.coffee_points_shipa = this.goods_p4_array[4];
				}
			}
			if (this.coffee_shipnum == 2 & this.coffee_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p4_array[4])
				{
					this.coffee_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.coffee_points_shipb = this.goods_p4_array[4];
				}
			}
			if (this.coffee_shipnum == 3 & this.coffee_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p4_array[4])
				{
					this.coffee_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.coffee_points_shipc = this.goods_p4_array[4];
				}
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.coffee_points_shipa = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.coffee_points_shipb = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.coffee_points_shipc = this.shipa_array[3];
			}
			this.corn_points_wharf = this.goods_p4_array[2];
			this.indigo_points_wharf = this.goods_p4_array[0];
			this.sugar_points_wharf = this.goods_p4_array[1];
			this.tobacco_points_wharf = this.goods_p4_array[3];
			this.coffee_points_wharf = this.goods_p4_array[4];
			this.calculate_best_captain_pointsb_p4();
		}

		public void calculate_best_captain_points_p5()
		{
			this.update_ship_cargo();
			if (this.indigo_shipnum == 1 & this.indigo_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p5_array[0])
				{
					this.indigo_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.indigo_points_shipa = this.goods_p5_array[0];
				}
			}
			if (this.indigo_shipnum == 2 & this.indigo_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p5_array[0])
				{
					this.indigo_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.indigo_points_shipb = this.goods_p5_array[0];
				}
			}
			if (this.indigo_shipnum == 3 & this.indigo_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p5_array[0])
				{
					this.indigo_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.indigo_points_shipc = this.goods_p5_array[0];
				}
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.indigo_points_shipa = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.indigo_points_shipb = this.shipa_array[3];
			}
			if (!this.indigo_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.indigo_points_shipc = this.shipa_array[3];
			}
			if (this.sugar_shipnum == 1 & this.sugar_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p5_array[1])
				{
					this.sugar_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.sugar_points_shipa = this.goods_p5_array[1];
				}
			}
			if (this.sugar_shipnum == 2 & this.sugar_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p5_array[1])
				{
					this.sugar_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.sugar_points_shipb = this.goods_p5_array[1];
				}
			}
			if (this.sugar_shipnum == 3 & this.sugar_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p5_array[1])
				{
					this.sugar_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.sugar_points_shipc = this.goods_p5_array[1];
				}
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.sugar_points_shipa = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.sugar_points_shipb = this.shipa_array[3];
			}
			if (!this.sugar_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.sugar_points_shipc = this.shipa_array[3];
			}
			if (this.corn_shipnum == 1 & this.corn_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p5_array[2])
				{
					this.corn_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.corn_points_shipa = this.goods_p5_array[2];
				}
			}
			if (this.corn_shipnum == 2 & this.corn_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p5_array[2])
				{
					this.corn_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.corn_points_shipb = this.goods_p5_array[2];
				}
			}
			if (this.corn_shipnum == 3 & this.corn_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p5_array[2])
				{
					this.corn_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.corn_points_shipc = this.goods_p5_array[2];
				}
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.corn_points_shipa = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.corn_points_shipb = this.shipa_array[3];
			}
			if (!this.corn_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.corn_points_shipc = this.shipa_array[3];
			}
			if (this.tobacco_shipnum == 1 & this.tobacco_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p5_array[3])
				{
					this.tobacco_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.tobacco_points_shipa = this.goods_p5_array[3];
				}
			}
			if (this.tobacco_shipnum == 2 & this.tobacco_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p5_array[3])
				{
					this.tobacco_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.tobacco_points_shipb = this.goods_p5_array[3];
				}
			}
			if (this.tobacco_shipnum == 3 & this.tobacco_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p5_array[3])
				{
					this.tobacco_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.tobacco_points_shipc = this.goods_p5_array[3];
				}
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.tobacco_points_shipa = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.tobacco_points_shipb = this.shipa_array[3];
			}
			if (!this.tobacco_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.tobacco_points_shipc = this.shipa_array[3];
			}
			if (this.coffee_shipnum == 1 & this.coffee_ship_available)
			{
				if (this.shipa_array[3] < this.goods_p5_array[4])
				{
					this.coffee_points_shipa = this.shipa_array[3];
				}
				else
				{
					this.coffee_points_shipa = this.goods_p5_array[4];
				}
			}
			if (this.coffee_shipnum == 2 & this.coffee_ship_available)
			{
				if (this.shipb_array[3] < this.goods_p5_array[4])
				{
					this.coffee_points_shipb = this.shipb_array[3];
				}
				else
				{
					this.coffee_points_shipb = this.goods_p5_array[4];
				}
			}
			if (this.coffee_shipnum == 3 & this.coffee_ship_available)
			{
				if (this.shipc_array[3] < this.goods_p5_array[4])
				{
					this.coffee_points_shipc = this.shipc_array[3];
				}
				else
				{
					this.coffee_points_shipc = this.goods_p5_array[4];
				}
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0)
			{
				this.coffee_points_shipa = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0)
			{
				this.coffee_points_shipb = this.shipa_array[3];
			}
			if (!this.coffee_ship_full & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0)
			{
				this.coffee_points_shipc = this.shipa_array[3];
			}
			this.corn_points_wharf = this.goods_p5_array[2];
			this.indigo_points_wharf = this.goods_p5_array[0];
			this.sugar_points_wharf = this.goods_p5_array[1];
			this.tobacco_points_wharf = this.goods_p5_array[3];
			this.coffee_points_wharf = this.goods_p5_array[4];
			this.calculate_best_captain_pointsb_p5();
		}

		public void calculate_best_captain_pointsb_p2()
		{
			this.best_shipping_method = "null";
			this.current_best_score = 0;
			if (this.goods_p2_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 1 & this.ships_can_take_corn)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p2_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 2 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p2_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 3 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p2_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_corn & this.corn_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p2_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p2_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p2_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 1 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p2_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 2 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p2_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 3 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p2_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p2_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p2_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p2_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 1 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p2_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 2 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p2_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 3 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p2_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p2_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p2_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p2_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 1 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p2_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 2 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p2_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 3 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p2_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p2_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p2_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p2_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 1 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p2_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 2 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p2_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 3 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (this.goods_p2_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p2_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p2_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(this.best_shipping_method, "null", false) == 0)
			{
				this.check_for_building(361);
				if (this.goods_p2_array[2] > 0 & this.found_building)
				{
					this.current_best_score = this.corn_points_wharf;
					this.best_shipping_method = "corn_wharf";
				}
				if (this.goods_p2_array[0] > 0 & this.found_building & this.indigo_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.indigo_points_wharf;
					this.best_shipping_method = "indigo_wharf";
				}
				if (this.goods_p2_array[1] > 0 & this.found_building & this.sugar_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.sugar_points_wharf;
					this.best_shipping_method = "sugar_wharf";
				}
				if (this.goods_p2_array[3] > 0 & this.found_building & this.tobacco_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.tobacco_points_wharf;
					this.best_shipping_method = "tobacco_wharf";
				}
				if (this.goods_p2_array[4] > 0 & this.found_building & this.coffee_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.coffee_points_wharf;
					this.best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_best_captain_pointsb_p3()
		{
			this.best_shipping_method = "null";
			this.current_best_score = 0;
			if (this.goods_p3_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 1 & this.ships_can_take_corn)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p3_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 2 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p3_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 3 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p3_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_corn & this.corn_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p3_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p3_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p3_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 1 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p3_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 2 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p3_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 3 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p3_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p3_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p3_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p3_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 1 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p3_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 2 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p3_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 3 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p3_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p3_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p3_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p3_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 1 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p3_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 2 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p3_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 3 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p3_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p3_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p3_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p3_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 1 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p3_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 2 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p3_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 3 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (this.goods_p3_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p3_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p3_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(this.best_shipping_method, "null", false) == 0)
			{
				this.check_for_building(361);
				if (this.goods_p3_array[2] > 0 & this.found_building)
				{
					this.current_best_score = this.corn_points_wharf;
					this.best_shipping_method = "corn_wharf";
				}
				if (this.goods_p3_array[0] > 0 & this.found_building & this.indigo_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.indigo_points_wharf;
					this.best_shipping_method = "indigo_wharf";
				}
				if (this.goods_p3_array[1] > 0 & this.found_building & this.sugar_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.sugar_points_wharf;
					this.best_shipping_method = "sugar_wharf";
				}
				if (this.goods_p3_array[3] > 0 & this.found_building & this.tobacco_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.tobacco_points_wharf;
					this.best_shipping_method = "tobacco_wharf";
				}
				if (this.goods_p3_array[4] > 0 & this.found_building & this.coffee_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.coffee_points_wharf;
					this.best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_best_captain_pointsb_p4()
		{
			this.best_shipping_method = "null";
			this.current_best_score = 0;
			if (this.goods_p4_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 1 & this.ships_can_take_corn)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p4_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 2 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p4_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 3 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p4_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_corn & this.corn_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p4_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p4_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p4_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 1 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p4_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 2 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p4_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 3 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p4_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p4_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p4_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p4_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 1 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p4_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 2 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p4_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 3 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p4_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p4_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p4_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p4_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 1 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p4_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 2 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p4_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 3 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p4_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p4_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p4_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p4_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 1 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p4_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 2 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p4_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 3 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (this.goods_p4_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p4_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p4_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(this.best_shipping_method, "null", false) == 0)
			{
				this.check_for_building(361);
				if (this.goods_p4_array[2] > 0 & this.found_building)
				{
					this.current_best_score = this.corn_points_wharf;
					this.best_shipping_method = "corn_wharf";
				}
				if (this.goods_p4_array[0] > 0 & this.found_building & this.indigo_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.indigo_points_wharf;
					this.best_shipping_method = "indigo_wharf";
				}
				if (this.goods_p4_array[1] > 0 & this.found_building & this.sugar_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.sugar_points_wharf;
					this.best_shipping_method = "sugar_wharf";
				}
				if (this.goods_p4_array[3] > 0 & this.found_building & this.tobacco_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.tobacco_points_wharf;
					this.best_shipping_method = "tobacco_wharf";
				}
				if (this.goods_p4_array[4] > 0 & this.found_building & this.coffee_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.coffee_points_wharf;
					this.best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_best_captain_pointsb_p5()
		{
			this.best_shipping_method = "null";
			this.current_best_score = 0;
			if (this.goods_p5_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 1 & this.ships_can_take_corn)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p5_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 2 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p5_array[2] > 0 & this.corn_ship_available & this.corn_shipnum == 3 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p5_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_corn & this.corn_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipa;
				this.best_shipping_method = "corn_shipa";
			}
			if (this.goods_p5_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_corn & this.corn_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipb;
				this.best_shipping_method = "corn_shipb";
			}
			if (this.goods_p5_array[2] > 0 & !this.corn_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_corn & this.corn_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.corn_points_shipc;
				this.best_shipping_method = "corn_shipc";
			}
			if (this.goods_p5_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 1 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p5_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 2 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p5_array[0] > 0 & this.indigo_ship_available & this.indigo_shipnum == 3 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p5_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipa;
				this.best_shipping_method = "indigo_shipa";
			}
			if (this.goods_p5_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipb;
				this.best_shipping_method = "indigo_shipb";
			}
			if (this.goods_p5_array[0] > 0 & !this.indigo_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_indigo & this.indigo_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.indigo_points_shipc;
				this.best_shipping_method = "indigo_shipc";
			}
			if (this.goods_p5_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 1 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p5_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 2 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p5_array[1] > 0 & this.sugar_ship_available & this.sugar_shipnum == 3 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p5_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipa;
				this.best_shipping_method = "sugar_shipa";
			}
			if (this.goods_p5_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipb;
				this.best_shipping_method = "sugar_shipb";
			}
			if (this.goods_p5_array[1] > 0 & !this.sugar_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_sugar & this.sugar_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.sugar_points_shipc;
				this.best_shipping_method = "sugar_shipc";
			}
			if (this.goods_p5_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 1 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p5_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 2 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p5_array[3] > 0 & this.tobacco_ship_available & this.tobacco_shipnum == 3 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p5_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipa;
				this.best_shipping_method = "tobacco_shipa";
			}
			if (this.goods_p5_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipb;
				this.best_shipping_method = "tobacco_shipb";
			}
			if (this.goods_p5_array[3] > 0 & !this.tobacco_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_tobacco & this.tobacco_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.tobacco_points_shipc;
				this.best_shipping_method = "tobacco_shipc";
			}
			if (this.goods_p5_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 1 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p5_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 2 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p5_array[4] > 0 & this.coffee_ship_available & this.coffee_shipnum == 3 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (this.goods_p5_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipa", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipa > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipa;
				this.best_shipping_method = "coffee_shipa";
			}
			if (this.goods_p5_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipb", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipb > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipb;
				this.best_shipping_method = "coffee_shipb";
			}
			if (this.goods_p5_array[4] > 0 & !this.coffee_ship_available & StringType.StrCmp(this.biggest_empty_ship, "shipc", false) == 0 & this.ships_can_take_coffee & this.coffee_points_shipc > this.current_best_score)
			{
				this.current_best_score = this.coffee_points_shipc;
				this.best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(this.best_shipping_method, "null", false) == 0)
			{
				this.check_for_building(361);
				if (this.goods_p5_array[2] > 0 & this.found_building)
				{
					this.current_best_score = this.corn_points_wharf;
					this.best_shipping_method = "corn_wharf";
				}
				if (this.goods_p5_array[0] > 0 & this.found_building & this.indigo_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.indigo_points_wharf;
					this.best_shipping_method = "indigo_wharf";
				}
				if (this.goods_p5_array[1] > 0 & this.found_building & this.sugar_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.sugar_points_wharf;
					this.best_shipping_method = "sugar_wharf";
				}
				if (this.goods_p5_array[3] > 0 & this.found_building & this.tobacco_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.tobacco_points_wharf;
					this.best_shipping_method = "tobacco_wharf";
				}
				if (this.goods_p5_array[4] > 0 & this.found_building & this.coffee_points_wharf > this.current_best_score)
				{
					this.current_best_score = this.coffee_points_wharf;
					this.best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_score()
		{
			this.update_all_colonists();
			this.calculate_score_p1();
			this.calculate_score_p2();
			this.calculate_score_p3();
			this.calculate_score_p4();
			this.calculate_score_p5();
			this.verification_alerts();
		}

		public void calculate_score_p1()
		{
			this.vp_buildings_p1 = 0;
			this.counter1x = 0;
			do
			{
				this.tempstring = Conversion.Str(this.buildings_p1_array[this.counter1x]);
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "1", false) == 0)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "2", false) == 0)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "3", false) == 0)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "4", false) == 0)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (this.counter1x <= 19);
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 16))
			{
				if (this.buildings_p1_array[this.counter1x] != 411)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p1_array[this.counter1x] == 110 | this.buildings_p1_array[this.counter1x] == 111 | this.buildings_p1_array[this.counter1x] == 120 | this.buildings_p1_array[this.counter1x] == 121)
					{
						this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 1);
					}
					if (this.buildings_p1_array[this.counter1x] == 210 | this.buildings_p1_array[this.counter1x] == 211 | this.buildings_p1_array[this.counter1x] == 212 | this.buildings_p1_array[this.counter1x] == 213 | this.buildings_p1_array[this.counter1x] == 220 | this.buildings_p1_array[this.counter1x] == 221 | this.buildings_p1_array[this.counter1x] == 222 | this.buildings_p1_array[this.counter1x] == 223 | this.buildings_p1_array[this.counter1x] == 310 | this.buildings_p1_array[this.counter1x] == 311 | this.buildings_p1_array[this.counter1x] == 312 | this.buildings_p1_array[this.counter1x] == 313 | this.buildings_p1_array[this.counter1x] == 320 | this.buildings_p1_array[this.counter1x] == 321 | this.buildings_p1_array[this.counter1x] == 322)
					{
						this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p1_array[this.counter1x] != 421)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				if (this.num_plantations_p1 <= 9)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 4);
				}
				if (this.num_plantations_p1 == 10)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 5);
				}
				if (this.num_plantations_p1 == 11)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 6);
				}
				if (this.num_plantations_p1 == 12)
				{
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 7);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p1_array[this.counter1x] != 431)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.colonists_array[1] > 0)
				{
					int colonistsArray = this.colonists_array[1];
					this.counter1x = 1;
					while (this.counter1x <= colonistsArray)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 3)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p1_array[this.counter1x] != 441)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p1 > 0)
				{
					int vpchipsP1 = this.vpchips_p1;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP1)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					this.vp_buildings_p1 = checked(this.vp_buildings_p1 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p1_array[this.counter1x] != 451)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p1_array[this.counter1x] == 130 | this.buildings_p1_array[this.counter1x] == 131 | this.buildings_p1_array[this.counter1x] == 140 | this.buildings_p1_array[this.counter1x] == 141 | this.buildings_p1_array[this.counter1x] == 150 | this.buildings_p1_array[this.counter1x] == 151 | this.buildings_p1_array[this.counter1x] == 160 | this.buildings_p1_array[this.counter1x] == 161 | this.buildings_p1_array[this.counter1x] == 230 | this.buildings_p1_array[this.counter1x] == 231 | this.buildings_p1_array[this.counter1x] == 240 | this.buildings_p1_array[this.counter1x] == 241 | this.buildings_p1_array[this.counter1x] == 250 | this.buildings_p1_array[this.counter1x] == 251 | this.buildings_p1_array[this.counter1x] == 260 | this.buildings_p1_array[this.counter1x] == 261 | this.buildings_p1_array[this.counter1x] == 330 | this.buildings_p1_array[this.counter1x] == 331 | this.buildings_p1_array[this.counter1x] == 340 | this.buildings_p1_array[this.counter1x] == 341 | this.buildings_p1_array[this.counter1x] == 350 | this.buildings_p1_array[this.counter1x] == 351 | this.buildings_p1_array[this.counter1x] == 410 | this.buildings_p1_array[this.counter1x] == 411 | this.buildings_p1_array[this.counter1x] == 420 | this.buildings_p1_array[this.counter1x] == 421 | this.buildings_p1_array[this.counter1x] == 430 | this.buildings_p1_array[this.counter1x] == 431 | this.buildings_p1_array[this.counter1x] == 440 | this.buildings_p1_array[this.counter1x] == 441 | this.buildings_p1_array[this.counter1x] == 450 | this.buildings_p1_array[this.counter1x] == 451 | this.buildings_p1_array[this.counter1x] == 361)
					{
						this.vp_buildings_p1 = checked(this.vp_buildings_p1 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
		}

		public void calculate_score_p2()
		{
			this.vp_buildings_p2 = 0;
			this.counter1x = 0;
			do
			{
				this.tempstring = Conversion.Str(this.buildings_p2_array[this.counter1x]);
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "1", false) == 0)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "2", false) == 0)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "3", false) == 0)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "4", false) == 0)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (this.counter1x <= 19);
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 16))
			{
				if (this.buildings_p2_array[this.counter1x] != 411)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p2_array[this.counter1x] == 110 | this.buildings_p2_array[this.counter1x] == 111 | this.buildings_p2_array[this.counter1x] == 120 | this.buildings_p2_array[this.counter1x] == 121)
					{
						this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 1);
					}
					if (this.buildings_p2_array[this.counter1x] == 210 | this.buildings_p2_array[this.counter1x] == 211 | this.buildings_p2_array[this.counter1x] == 212 | this.buildings_p2_array[this.counter1x] == 213 | this.buildings_p2_array[this.counter1x] == 220 | this.buildings_p2_array[this.counter1x] == 221 | this.buildings_p2_array[this.counter1x] == 222 | this.buildings_p2_array[this.counter1x] == 223 | this.buildings_p2_array[this.counter1x] == 310 | this.buildings_p2_array[this.counter1x] == 311 | this.buildings_p2_array[this.counter1x] == 312 | this.buildings_p2_array[this.counter1x] == 313 | this.buildings_p2_array[this.counter1x] == 320 | this.buildings_p2_array[this.counter1x] == 321 | this.buildings_p2_array[this.counter1x] == 322)
					{
						this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p2_array[this.counter1x] != 421)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				if (this.num_plantations_p2 <= 9)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 4);
				}
				if (this.num_plantations_p2 == 10)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 5);
				}
				if (this.num_plantations_p2 == 11)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 6);
				}
				if (this.num_plantations_p2 == 12)
				{
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 7);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p2_array[this.counter1x] != 431)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.colonists_array[1] > 0)
				{
					int colonistsArray = this.colonists_array[2];
					this.counter1x = 1;
					while (this.counter1x <= colonistsArray)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 3)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p2_array[this.counter1x] != 441)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p2 > 0)
				{
					int vpchipsP2 = this.vpchips_p2;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP2)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					this.vp_buildings_p2 = checked(this.vp_buildings_p2 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p2_array[this.counter1x] != 451)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p2_array[this.counter1x] == 130 | this.buildings_p2_array[this.counter1x] == 131 | this.buildings_p2_array[this.counter1x] == 140 | this.buildings_p2_array[this.counter1x] == 141 | this.buildings_p2_array[this.counter1x] == 150 | this.buildings_p2_array[this.counter1x] == 151 | this.buildings_p2_array[this.counter1x] == 160 | this.buildings_p2_array[this.counter1x] == 161 | this.buildings_p2_array[this.counter1x] == 230 | this.buildings_p2_array[this.counter1x] == 231 | this.buildings_p2_array[this.counter1x] == 240 | this.buildings_p2_array[this.counter1x] == 241 | this.buildings_p2_array[this.counter1x] == 250 | this.buildings_p2_array[this.counter1x] == 251 | this.buildings_p2_array[this.counter1x] == 260 | this.buildings_p2_array[this.counter1x] == 261 | this.buildings_p2_array[this.counter1x] == 330 | this.buildings_p2_array[this.counter1x] == 331 | this.buildings_p2_array[this.counter1x] == 340 | this.buildings_p2_array[this.counter1x] == 341 | this.buildings_p2_array[this.counter1x] == 350 | this.buildings_p2_array[this.counter1x] == 351 | this.buildings_p2_array[this.counter1x] == 410 | this.buildings_p2_array[this.counter1x] == 411 | this.buildings_p2_array[this.counter1x] == 420 | this.buildings_p2_array[this.counter1x] == 421 | this.buildings_p2_array[this.counter1x] == 430 | this.buildings_p2_array[this.counter1x] == 431 | this.buildings_p2_array[this.counter1x] == 440 | this.buildings_p2_array[this.counter1x] == 441 | this.buildings_p2_array[this.counter1x] == 450 | this.buildings_p2_array[this.counter1x] == 451 | this.buildings_p2_array[this.counter1x] == 361)
					{
						this.vp_buildings_p2 = checked(this.vp_buildings_p2 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
		}

		public void calculate_score_p3()
		{
			this.vp_buildings_p3 = 0;
			this.counter1x = 0;
			do
			{
				this.tempstring = Conversion.Str(this.buildings_p3_array[this.counter1x]);
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "1", false) == 0)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "2", false) == 0)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "3", false) == 0)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "4", false) == 0)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (this.counter1x <= 19);
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 16))
			{
				if (this.buildings_p3_array[this.counter1x] != 411)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p3_array[this.counter1x] == 110 | this.buildings_p3_array[this.counter1x] == 111 | this.buildings_p3_array[this.counter1x] == 120 | this.buildings_p3_array[this.counter1x] == 121)
					{
						this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 1);
					}
					if (this.buildings_p3_array[this.counter1x] == 210 | this.buildings_p3_array[this.counter1x] == 211 | this.buildings_p3_array[this.counter1x] == 212 | this.buildings_p3_array[this.counter1x] == 213 | this.buildings_p3_array[this.counter1x] == 220 | this.buildings_p3_array[this.counter1x] == 221 | this.buildings_p3_array[this.counter1x] == 222 | this.buildings_p3_array[this.counter1x] == 223 | this.buildings_p3_array[this.counter1x] == 310 | this.buildings_p3_array[this.counter1x] == 311 | this.buildings_p3_array[this.counter1x] == 312 | this.buildings_p3_array[this.counter1x] == 313 | this.buildings_p3_array[this.counter1x] == 320 | this.buildings_p3_array[this.counter1x] == 321 | this.buildings_p3_array[this.counter1x] == 322)
					{
						this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p3_array[this.counter1x] != 421)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				if (this.num_plantations_p3 <= 9)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 4);
				}
				if (this.num_plantations_p3 == 10)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 5);
				}
				if (this.num_plantations_p3 == 11)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 6);
				}
				if (this.num_plantations_p3 == 12)
				{
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 7);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p3_array[this.counter1x] != 431)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.colonists_array[1] > 0)
				{
					int colonistsArray = this.colonists_array[3];
					this.counter1x = 1;
					while (this.counter1x <= colonistsArray)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 3)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p3_array[this.counter1x] != 441)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p3 > 0)
				{
					int vpchipsP3 = this.vpchips_p3;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP3)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					this.vp_buildings_p3 = checked(this.vp_buildings_p3 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p3_array[this.counter1x] != 451)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p3_array[this.counter1x] == 130 | this.buildings_p3_array[this.counter1x] == 131 | this.buildings_p3_array[this.counter1x] == 140 | this.buildings_p3_array[this.counter1x] == 141 | this.buildings_p3_array[this.counter1x] == 150 | this.buildings_p3_array[this.counter1x] == 151 | this.buildings_p3_array[this.counter1x] == 160 | this.buildings_p3_array[this.counter1x] == 161 | this.buildings_p3_array[this.counter1x] == 230 | this.buildings_p3_array[this.counter1x] == 231 | this.buildings_p3_array[this.counter1x] == 240 | this.buildings_p3_array[this.counter1x] == 241 | this.buildings_p3_array[this.counter1x] == 250 | this.buildings_p3_array[this.counter1x] == 251 | this.buildings_p3_array[this.counter1x] == 260 | this.buildings_p3_array[this.counter1x] == 261 | this.buildings_p3_array[this.counter1x] == 330 | this.buildings_p3_array[this.counter1x] == 331 | this.buildings_p3_array[this.counter1x] == 340 | this.buildings_p3_array[this.counter1x] == 341 | this.buildings_p3_array[this.counter1x] == 350 | this.buildings_p3_array[this.counter1x] == 351 | this.buildings_p3_array[this.counter1x] == 410 | this.buildings_p3_array[this.counter1x] == 411 | this.buildings_p3_array[this.counter1x] == 420 | this.buildings_p3_array[this.counter1x] == 421 | this.buildings_p3_array[this.counter1x] == 430 | this.buildings_p3_array[this.counter1x] == 431 | this.buildings_p3_array[this.counter1x] == 440 | this.buildings_p3_array[this.counter1x] == 441 | this.buildings_p3_array[this.counter1x] == 450 | this.buildings_p3_array[this.counter1x] == 451 | this.buildings_p3_array[this.counter1x] == 361)
					{
						this.vp_buildings_p3 = checked(this.vp_buildings_p3 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
		}

		public void calculate_score_p4()
		{
			this.vp_buildings_p4 = 0;
			this.counter1x = 0;
			do
			{
				this.tempstring = Conversion.Str(this.buildings_p4_array[this.counter1x]);
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "1", false) == 0)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "2", false) == 0)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "3", false) == 0)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "4", false) == 0)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (this.counter1x <= 19);
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 16))
			{
				if (this.buildings_p4_array[this.counter1x] != 411)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p4_array[this.counter1x] == 110 | this.buildings_p4_array[this.counter1x] == 111 | this.buildings_p4_array[this.counter1x] == 120 | this.buildings_p4_array[this.counter1x] == 121)
					{
						this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 1);
					}
					if (this.buildings_p4_array[this.counter1x] == 210 | this.buildings_p4_array[this.counter1x] == 211 | this.buildings_p4_array[this.counter1x] == 212 | this.buildings_p4_array[this.counter1x] == 213 | this.buildings_p4_array[this.counter1x] == 220 | this.buildings_p4_array[this.counter1x] == 221 | this.buildings_p4_array[this.counter1x] == 222 | this.buildings_p4_array[this.counter1x] == 223 | this.buildings_p4_array[this.counter1x] == 310 | this.buildings_p4_array[this.counter1x] == 311 | this.buildings_p4_array[this.counter1x] == 312 | this.buildings_p4_array[this.counter1x] == 313 | this.buildings_p4_array[this.counter1x] == 320 | this.buildings_p4_array[this.counter1x] == 321 | this.buildings_p4_array[this.counter1x] == 322)
					{
						this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p4_array[this.counter1x] != 421)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				if (this.num_plantations_p4 <= 9)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 4);
				}
				if (this.num_plantations_p4 == 10)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 5);
				}
				if (this.num_plantations_p4 == 11)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 6);
				}
				if (this.num_plantations_p4 == 12)
				{
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 7);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p4_array[this.counter1x] != 431)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.colonists_array[1] > 0)
				{
					int colonistsArray = this.colonists_array[4];
					this.counter1x = 1;
					while (this.counter1x <= colonistsArray)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 3)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p4_array[this.counter1x] != 441)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p4 > 0)
				{
					int vpchipsP4 = this.vpchips_p4;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP4)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					this.vp_buildings_p4 = checked(this.vp_buildings_p4 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p4_array[this.counter1x] != 451)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p4_array[this.counter1x] == 130 | this.buildings_p4_array[this.counter1x] == 131 | this.buildings_p4_array[this.counter1x] == 140 | this.buildings_p4_array[this.counter1x] == 141 | this.buildings_p4_array[this.counter1x] == 150 | this.buildings_p4_array[this.counter1x] == 151 | this.buildings_p4_array[this.counter1x] == 160 | this.buildings_p4_array[this.counter1x] == 161 | this.buildings_p4_array[this.counter1x] == 230 | this.buildings_p4_array[this.counter1x] == 231 | this.buildings_p4_array[this.counter1x] == 240 | this.buildings_p4_array[this.counter1x] == 241 | this.buildings_p4_array[this.counter1x] == 250 | this.buildings_p4_array[this.counter1x] == 251 | this.buildings_p4_array[this.counter1x] == 260 | this.buildings_p4_array[this.counter1x] == 261 | this.buildings_p4_array[this.counter1x] == 330 | this.buildings_p4_array[this.counter1x] == 331 | this.buildings_p4_array[this.counter1x] == 340 | this.buildings_p4_array[this.counter1x] == 341 | this.buildings_p4_array[this.counter1x] == 350 | this.buildings_p4_array[this.counter1x] == 351 | this.buildings_p4_array[this.counter1x] == 410 | this.buildings_p4_array[this.counter1x] == 411 | this.buildings_p4_array[this.counter1x] == 420 | this.buildings_p4_array[this.counter1x] == 421 | this.buildings_p4_array[this.counter1x] == 430 | this.buildings_p4_array[this.counter1x] == 431 | this.buildings_p4_array[this.counter1x] == 440 | this.buildings_p4_array[this.counter1x] == 441 | this.buildings_p4_array[this.counter1x] == 450 | this.buildings_p4_array[this.counter1x] == 451 | this.buildings_p4_array[this.counter1x] == 361)
					{
						this.vp_buildings_p4 = checked(this.vp_buildings_p4 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
		}

		public void calculate_score_p5()
		{
			this.vp_buildings_p5 = 0;
			this.counter1x = 0;
			do
			{
				this.tempstring = Conversion.Str(this.buildings_p5_array[this.counter1x]);
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "1", false) == 0)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "2", false) == 0)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "3", false) == 0)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(this.tempstring[1]), "4", false) == 0)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (this.counter1x <= 19);
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 16))
			{
				if (this.buildings_p5_array[this.counter1x] != 411)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p5_array[this.counter1x] == 110 | this.buildings_p5_array[this.counter1x] == 111 | this.buildings_p5_array[this.counter1x] == 120 | this.buildings_p5_array[this.counter1x] == 121)
					{
						this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 1);
					}
					if (this.buildings_p5_array[this.counter1x] == 210 | this.buildings_p5_array[this.counter1x] == 211 | this.buildings_p5_array[this.counter1x] == 212 | this.buildings_p5_array[this.counter1x] == 213 | this.buildings_p5_array[this.counter1x] == 220 | this.buildings_p5_array[this.counter1x] == 221 | this.buildings_p5_array[this.counter1x] == 222 | this.buildings_p5_array[this.counter1x] == 223 | this.buildings_p5_array[this.counter1x] == 310 | this.buildings_p5_array[this.counter1x] == 311 | this.buildings_p5_array[this.counter1x] == 312 | this.buildings_p5_array[this.counter1x] == 313 | this.buildings_p5_array[this.counter1x] == 320 | this.buildings_p5_array[this.counter1x] == 321 | this.buildings_p5_array[this.counter1x] == 322)
					{
						this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p5_array[this.counter1x] != 421)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				if (this.num_plantations_p5 <= 9)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 4);
				}
				if (this.num_plantations_p5 == 10)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 5);
				}
				if (this.num_plantations_p5 == 11)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 6);
				}
				if (this.num_plantations_p5 == 12)
				{
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 7);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p5_array[this.counter1x] != 431)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.colonists_array[1] > 0)
				{
					int colonistsArray = this.colonists_array[5];
					this.counter1x = 1;
					while (this.counter1x <= colonistsArray)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 3)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p5_array[this.counter1x] != 441)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p5 > 0)
				{
					int vpchipsP5 = this.vpchips_p5;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP5)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					this.vp_buildings_p5 = checked(this.vp_buildings_p5 + this.counter3x);
				}
			}
			this.finishedx = false;
			this.counter1x = 12;
			this.found_buildingx = false;
			while (!(this.finishedx | this.counter1x == 19))
			{
				if (this.buildings_p5_array[this.counter1x] != 451)
				{
					this.counter1x = checked(this.counter1x + 1);
				}
				else
				{
					this.finishedx = true;
					this.found_buildingx = true;
				}
			}
			if (this.found_buildingx)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p5_array[this.counter1x] == 130 | this.buildings_p5_array[this.counter1x] == 131 | this.buildings_p5_array[this.counter1x] == 140 | this.buildings_p5_array[this.counter1x] == 141 | this.buildings_p5_array[this.counter1x] == 150 | this.buildings_p5_array[this.counter1x] == 151 | this.buildings_p5_array[this.counter1x] == 160 | this.buildings_p5_array[this.counter1x] == 161 | this.buildings_p5_array[this.counter1x] == 230 | this.buildings_p5_array[this.counter1x] == 231 | this.buildings_p5_array[this.counter1x] == 240 | this.buildings_p5_array[this.counter1x] == 241 | this.buildings_p5_array[this.counter1x] == 250 | this.buildings_p5_array[this.counter1x] == 251 | this.buildings_p5_array[this.counter1x] == 260 | this.buildings_p5_array[this.counter1x] == 261 | this.buildings_p5_array[this.counter1x] == 330 | this.buildings_p5_array[this.counter1x] == 331 | this.buildings_p5_array[this.counter1x] == 340 | this.buildings_p5_array[this.counter1x] == 341 | this.buildings_p5_array[this.counter1x] == 350 | this.buildings_p5_array[this.counter1x] == 351 | this.buildings_p5_array[this.counter1x] == 410 | this.buildings_p5_array[this.counter1x] == 411 | this.buildings_p5_array[this.counter1x] == 420 | this.buildings_p5_array[this.counter1x] == 421 | this.buildings_p5_array[this.counter1x] == 430 | this.buildings_p5_array[this.counter1x] == 431 | this.buildings_p5_array[this.counter1x] == 440 | this.buildings_p5_array[this.counter1x] == 441 | this.buildings_p5_array[this.counter1x] == 450 | this.buildings_p5_array[this.counter1x] == 451 | this.buildings_p5_array[this.counter1x] == 361)
					{
						this.vp_buildings_p5 = checked(this.vp_buildings_p5 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
		}

		private void captain_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_captain();
			}
		}

		public void chance_of_action(object percent_chance)
		{
			VBMath.Randomize();
			this.random1 = checked((int)Math.Round((double)Conversion.Int(100f * VBMath.Rnd() + 0f)));
			if (ObjectType.ObjTst(this.random1, percent_chance, false) > 0)
			{
				this.chance = false;
			}
			else
			{
				this.chance = true;
			}
		}

		public void check_available_plant(object buildingquery)
		{
			this.found_plantation = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.plantation_available_array[this.counter1], buildingquery, false) == 0)
				{
					this.found_plantation = true;
					if (ObjectType.ObjTst(buildingquery, 30, false) == 0)
					{
						this.corn_available_slot = this.counter1;
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 5);
		}

		public void check_for_building(object buildingquery)
		{
			this.found_building = false;
			if (this.current_player == 1)
			{
				this.counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(this.buildings_p1_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_building = true;
						this.building_slot = this.counter1;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 2)
			{
				this.counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(this.buildings_p2_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_building = true;
						this.building_slot = this.counter1;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 3)
			{
				this.counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(this.buildings_p3_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_building = true;
						this.building_slot = this.counter1;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 4)
			{
				this.counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(this.buildings_p4_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_building = true;
						this.building_slot = this.counter1;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 5)
			{
				this.counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(this.buildings_p5_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_building = true;
						this.building_slot = this.counter1;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
		}

		public void check_for_building_p1(object buildingquery)
		{
			this.found_building = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.buildings_p1_array[this.counter1], buildingquery, false) == 0)
				{
					this.found_building = true;
					this.building_slot = this.counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void check_for_building_p2(object buildingquery)
		{
			this.found_building = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.buildings_p2_array[this.counter1], buildingquery, false) == 0)
				{
					this.found_building = true;
					this.building_slot = this.counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void check_for_building_p3(object buildingquery)
		{
			this.found_building = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.buildings_p3_array[this.counter1], buildingquery, false) == 0)
				{
					this.found_building = true;
					this.building_slot = this.counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void check_for_building_p4(object buildingquery)
		{
			this.found_building = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.buildings_p4_array[this.counter1], buildingquery, false) == 0)
				{
					this.found_building = true;
					this.building_slot = this.counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void check_for_building_p5(object buildingquery)
		{
			this.found_building = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.buildings_p4_array[this.counter1], buildingquery, false) == 0)
				{
					this.found_building = true;
					this.building_slot = this.counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void check_for_building1(object buildingquery)
		{
			this.found_building = false;
			if (this.current_player == 1)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p1_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p1_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 2)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p2_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p2_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 3)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p1_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p3_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 4)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p4_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p4_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 5)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p5_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p5_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
		}

		public void check_for_building2(object buildingquery)
		{
			this.found_building = false;
			if (this.current_player == 1)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p1_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p1_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p1_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 2)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p2_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p2_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p2_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 3)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p3_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p3_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p3_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 4)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p4_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p4_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p4_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 5)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p5_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p5_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p5_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
		}

		public void check_for_building3(object buildingquery)
		{
			this.found_building = false;
			if (this.current_player == 1)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p1_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p1_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p1_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(this.buildings_p1_array[this.counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 2)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p2_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p2_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p2_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(this.buildings_p2_array[this.counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 3)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p3_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p3_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p3_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(this.buildings_p3_array[this.counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 4)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p4_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p4_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p4_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(this.buildings_p4_array[this.counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
			if (this.current_player == 5)
			{
				this.counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(this.buildings_p5_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(this.buildings_p5_array[this.counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(this.buildings_p5_array[this.counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(this.buildings_p5_array[this.counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						this.found_building = true;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (this.counter1 <= 19);
			}
		}

		public void check_for_coffee_production()
		{
			this.found_coffee_match = false;
			if (!this.found_coffee_match)
			{
				this.check_for_plantation(50);
				this.check_for_building(320);
				if (this.found_plantation & this.found_building)
				{
					this.found_coffee_match = true;
				}
			}
			if (!this.found_coffee_match)
			{
				this.check_for_plantation(50);
				this.check_for_building(321);
				if (this.found_plantation & this.found_building)
				{
					this.found_coffee_match = true;
				}
			}
		}

		public void check_for_game_end_triggered()
		{
			if (!this.end_announced)
			{
				if (this.game_end_triggered_buildings)
				{
					if (this.num_buildings_p1 == 12)
					{
						this.infobox_nopic(string.Concat(this.p1_name, " has occupied all building spots. The game end has been triggered."));
						this.end_announced = true;
					}
					if (this.num_buildings_p2 == 12)
					{
						this.infobox_nopic(string.Concat(this.p2_name, " has occupied all building spots. The game end has been triggered."));
						this.end_announced = true;
					}
					if (this.num_buildings_p3 == 12)
					{
						this.infobox_nopic(string.Concat(this.p3_name, " has occupied all building spots. The game end has been triggered."));
						this.end_announced = true;
					}
					if (this.num_buildings_p4 == 12)
					{
						this.infobox_nopic(string.Concat(this.p4_name, " has occupied all building spots. The game end has been triggered."));
						this.end_announced = true;
					}
					if (this.num_buildings_p5 == 12)
					{
						this.infobox_nopic(string.Concat(this.p5_name, " has occupied all building spots. The game end has been triggered."));
						this.end_announced = true;
					}
				}
				if (this.game_end_triggered_victorypoints)
				{
					this.infobox_nopic("The last Victory Point has been handed out. Victory Points will continue to be handed out, but the game end has been triggered.");
					this.end_announced = true;
				}
				if (this.game_end_triggered_colonists)
				{
					this.infobox_nopic("The colonist ship could not be fully refilled. The game end has been triggered.");
					this.end_announced = true;
				}
			}
			if (this.vp_bank_num >= 0)
			{
				this.vpremain_label.Text =StringType.FromInteger(this.vp_bank_num);
			}
			else
			{
				this.vpremain_label.Text = StringType.FromInteger(0);
			}
		}

		public void check_for_goods_in_trading_house(object tradegood)
		{
			this.found_good = false;
			this.counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(this.trading_house_array[this.counter1], ObjectType.AddObj(tradegood, 1), false) == 0)
				{
					this.found_good = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 3);
		}

		public void check_for_indigo_production()
		{
			this.found_indigo_match = false;
			if (!this.found_indigo_match)
			{
				this.check_for_plantation(10);
				this.check_for_building(110);
				if (this.found_plantation & this.found_building)
				{
					this.found_indigo_match = true;
				}
			}
			if (!this.found_indigo_match)
			{
				this.check_for_plantation(10);
				this.check_for_building(210);
				if (this.found_plantation & this.found_building)
				{
					this.found_indigo_match = true;
				}
			}
			if (!this.found_indigo_match)
			{
				this.check_for_plantation(10);
				this.check_for_building(211);
				if (this.found_plantation & this.found_building)
				{
					this.found_indigo_match = true;
				}
			}
			if (!this.found_indigo_match)
			{
				this.check_for_plantation(10);
				this.check_for_building(212);
				if (this.found_plantation & this.found_building)
				{
					this.found_indigo_match = true;
				}
			}
		}

		public void check_for_plantation(object buildingquery)
		{
			this.found_plantation = false;
			if (this.current_player == 1)
			{
				this.counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(this.plantations_p1_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 2)
			{
				this.counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(this.plantations_p2_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 3)
			{
				this.counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(this.plantations_p3_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 4)
			{
				this.counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(this.plantations_p4_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 5)
			{
				this.counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(this.plantations_p5_array[this.counter1], buildingquery, false) == 0)
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
		}

		public void check_for_plantation1(object buildingquery)
		{
			this.found_plantation = false;
			if (this.current_player == 1)
			{
				this.counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.plantations_p1_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(this.plantations_p1_array[this.counter1] + 1), buildingquery, false) == 0)))
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 2)
			{
				this.counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.plantations_p2_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(this.plantations_p2_array[this.counter1] + 1), buildingquery, false) == 0)))
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 3)
			{
				this.counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.plantations_p3_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(this.plantations_p3_array[this.counter1] + 1), buildingquery, false) == 0)))
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 4)
			{
				this.counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.plantations_p4_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(this.plantations_p4_array[this.counter1] + 1), buildingquery, false) == 0)))
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
			if (this.current_player == 5)
			{
				this.counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(this.plantations_p5_array[this.counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(this.plantations_p5_array[this.counter1] + 1), buildingquery, false) == 0)))
					{
						this.found_plantation = true;
						this.plantation_slot = this.counter1;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + -1);
				}
				while (this.counter1 >= 0);
			}
		}

		public void check_for_sugar_production()
		{
			this.found_sugar_match = false;
			if (!this.found_sugar_match)
			{
				this.check_for_plantation(20);
				this.check_for_building(120);
				if (this.found_plantation & this.found_building)
				{
					this.found_sugar_match = true;
				}
			}
			if (!this.found_sugar_match)
			{
				this.check_for_plantation(20);
				this.check_for_building(220);
				if (this.found_plantation & this.found_building)
				{
					this.found_sugar_match = true;
				}
			}
			if (!this.found_sugar_match)
			{
				this.check_for_plantation(20);
				this.check_for_building(221);
				if (this.found_plantation & this.found_building)
				{
					this.found_sugar_match = true;
				}
			}
			if (!this.found_sugar_match)
			{
				this.check_for_plantation(20);
				this.check_for_building(222);
				if (this.found_plantation & this.found_building)
				{
					this.found_sugar_match = true;
				}
			}
		}

		public void check_for_tobacco_production()
		{
			this.found_tobacco_match = false;
			if (!this.found_tobacco_match)
			{
				this.check_for_plantation(40);
				this.check_for_building(310);
				if (this.found_plantation & this.found_building)
				{
					this.found_tobacco_match = true;
				}
			}
			if (!this.found_tobacco_match)
			{
				this.check_for_plantation(40);
				this.check_for_building(311);
				if (this.found_plantation & this.found_building)
				{
					this.found_tobacco_match = true;
				}
			}
			if (!this.found_tobacco_match)
			{
				this.check_for_plantation(40);
				this.check_for_building(312);
				if (this.found_plantation & this.found_building)
				{
					this.found_tobacco_match = true;
				}
			}
		}

		public void choose_builder()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Builder - Reduces the cost of a building by 1 doubloon during the Builder Phase.", "role_builder");
			}
			else
			{
				this.role_builder_pic.Visible = false;
				this.builder_bonus_label.Visible = false;
				if (this.bonus_roles_array[2] <= 0)
				{
					this.confirmbox_role("You chose the Builder - You get 1 doubloon credit towards building this turn. Is this the role you want to choose?", "role_builder");
				}
				else if (this.bonus_roles_array[2] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the builder (and the", Conversion.Str(this.bonus_roles_array[2]), " doubloons on it) - You get 1 doubloon credit towards building this turn. Is this the role you want to choose?"), "role_builder");
				}
				else
				{
					this.confirmbox_role("You chose the builder (and the 1 doubloon on it) - You get 1 doubloon credit towards building this turn. Is this the role you want to choose?", "role_builder");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_builder_pic.Visible = true;
					if (this.bonus_roles_array[2] <= 0)
					{
						this.builder_bonus_label.Visible = false;
					}
					else
					{
						this.builder_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = false;
					this.builder_round = true;
					this.craftsman_round = false;
					this.trader_round = false;
					this.captain_round = false;
					this.prospector1_round = false;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[2]);
					this.bonus_roles_array[2] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Builder");
					this.p1_process_builder();
				}
			}
		}

		public void choose_captain()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Captain - Grants you +1 Victory Point for your first shipment during the Captain Phase.", "role_captain");
			}
			else
			{
				this.role_captain_pic.Visible = false;
				this.captain_bonus_label.Visible = false;
				if (this.bonus_roles_array[5] <= 0)
				{
					this.confirmbox_role("You chose the captain - You get 1 extra VP if you ship this turn. Is this the role you want to choose?", "role_captain");
				}
				else if (this.bonus_roles_array[5] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the captain (and the", Conversion.Str(this.bonus_roles_array[5]), " doubloons on it) - You get 1 extra VP if you ship this turn. Is this the role you want to choose?"), "role_captain");
				}
				else
				{
					this.confirmbox_role("You chose the captain (and the 1 doubloon on it) - You get 1 VP if you ship this turn. Is this the role you want to choose?", "role_captain");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_captain_pic.Visible = true;
					if (this.bonus_roles_array[5] <= 0)
					{
						this.captain_bonus_label.Visible = false;
					}
					else
					{
						this.captain_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_used_wharf = false;
					this.p2_used_wharf = false;
					this.p3_used_wharf = false;
					this.p4_used_wharf = false;
					this.p5_used_wharf = false;
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = false;
					this.builder_round = false;
					this.craftsman_round = false;
					this.trader_round = false;
					this.captain_round = true;
					this.prospector1_round = false;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[5]);
					this.bonus_roles_array[5] = 0;
					this.captain_bonus_taken = false;
					this.update_all_labels();
					this.log_role_chooser("p1", "Captain");
					this.p1_process_captain();
				}
			}
		}

		public void choose_craftsman()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Craftsman - Grants you an extra production good during the Craftsman Phase.", "role_craftsman");
			}
			else
			{
				this.role_craftsman_pic.Visible = false;
				this.craftsman_bonus_label.Visible = false;
				if (this.bonus_roles_array[3] <= 0)
				{
					this.confirmbox_role("You chose the craftsman - You get 1 extra good during production. Is this the role you want to choose?", "role_craftsman");
				}
				else if (this.bonus_roles_array[3] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the craftsman (and the", Conversion.Str(this.bonus_roles_array[3]), " doubloons on it) - You get 1 extra good during production. Is this the role you want to choose?"), "role_craftsman");
				}
				else
				{
					this.confirmbox_role("You chose the craftsman (and the 1 doubloon on it) - You get 1 extra good during production. Is this the role you want to choose?", "role_craftsman");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_craftsman_pic.Visible = true;
					if (this.bonus_roles_array[3] <= 0)
					{
						this.craftsman_bonus_label.Visible = false;
					}
					else
					{
						this.craftsman_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = false;
					this.builder_round = false;
					this.craftsman_round = true;
					this.trader_round = false;
					this.captain_round = false;
					this.prospector1_round = false;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[3]);
					this.bonus_roles_array[3] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Craftsman");
					this.p1_process_craftsman();
				}
			}
		}

		public void choose_mayor()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Mayor - Grants you +1 Colonist during the Mayor Phase.", "role_mayor");
			}
			else
			{
				this.role_mayor_pic.Visible = false;
				this.mayor_bonus_label.Visible = false;
				if (this.bonus_roles_array[1] <= 0)
				{
					this.confirmbox_role("You chose the Mayor - You will get a bonus colonist from the supply if one is available. Is this the role you want to choose?", "role_mayor");
				}
				else if (this.bonus_roles_array[1] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the Mayor (and the", Conversion.Str(this.bonus_roles_array[1]), " doubloons on it) - You will get a bonus colonist from the supply if one is available. Is this the role you want to choose?"), "role_mayor");
				}
				else
				{
					this.confirmbox_role("You chose the Mayor (and the 1 doubloon on it) - You will get a bonus colonist from the supply if one is available. Is this the role you want to choose?", "role_mayor");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_mayor_pic.Visible = true;
					if (this.bonus_roles_array[1] <= 0)
					{
						this.mayor_bonus_label.Visible = false;
					}
					else
					{
						this.mayor_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = true;
					this.builder_round = false;
					this.craftsman_round = false;
					this.trader_round = false;
					this.captain_round = false;
					this.prospector1_round = false;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[1]);
					this.bonus_roles_array[1] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Mayor");
					this.p1_process_mayor();
				}
			}
		}

		public void choose_prospector1()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Prospector - Grants you 1 doubloon during the Prospector Phase", "role_prospector1");
			}
			else
			{
				this.role_prospector1_pic.Visible = false;
				this.pros1_bonus_label.Visible = false;
				if (this.bonus_roles_array[6] <= 0)
				{
					this.confirmbox_role("You chose the Prospector - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				else if (this.bonus_roles_array[6] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the Prospector (and the", Conversion.Str(this.bonus_roles_array[4]), " doubloons on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?"), "role_prospector1");
				}
				else
				{
					this.confirmbox_role("You chose the Prospector (and the 1 doubloon on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_prospector1_pic.Visible = true;
					if (this.bonus_roles_array[6] <= 0)
					{
						this.pros1_bonus_label.Visible = false;
					}
					else
					{
						this.pros1_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = false;
					this.builder_round = false;
					this.craftsman_round = false;
					this.trader_round = false;
					this.captain_round = false;
					this.prospector1_round = true;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[6]);
					this.bonus_roles_array[6] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Prospector1");
					this.p1_process_prospector1();
				}
			}
		}

		public void choose_prospector2()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Prospector - Grants you 1 doubloon during the Prospector Phase", "role_prospector1");
			}
			else
			{
				this.role_prospector2_pic.Visible = false;
				this.pros2_bonus_label.Visible = false;
				if (this.bonus_roles_array[7] <= 0)
				{
					this.confirmbox_role("You chose the Prospector - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				else if (this.bonus_roles_array[7] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the Prospector (and the", Conversion.Str(this.bonus_roles_array[4]), " doubloons on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?"), "role_prospector1");
				}
				else
				{
					this.confirmbox_role("You chose the Prospector (and the 1 doubloon on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_prospector2_pic.Visible = true;
					if (this.bonus_roles_array[7] <= 0)
					{
						this.pros2_bonus_label.Visible = false;
					}
					else
					{
						this.pros2_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = false;
					this.builder_round = false;
					this.craftsman_round = false;
					this.trader_round = false;
					this.captain_round = false;
					this.prospector1_round = false;
					this.prospector2_round = true;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[7]);
					this.bonus_roles_array[7] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Prospector2");
					this.p1_process_prospector2();
				}
			}
		}

		public void choose_quarry()
		{
			this.tempstring = StringType.FromInteger(this.num_plantations_p1);
			this.check_for_building(151);
			if (this.found_building & this.num_plantations_p1 < 12 & this.num_quarries_p1 < 4 & !this.p1_chose_plantation & this.current_player == 1 & this.current_role_chooser != 1 & this.goods_bank_array[5] > 0)
			{
				this.infobox_building1("Your manned Construction Hut allowed you to choose a quarry.", 151);
			}
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					this.infobox_nopic("You've already chosen a plantation or quarry. Please click NEXT TURN.");
				}
				else if (!(this.current_role_chooser == 1 | this.found_building))
				{
					this.infobox_plant("You are not allowed to choose a quarry.", 60);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_chose_plantation = true;
					this.infobox_nopic("You already have 12 plantations. You cannot take another. Your turn is over.");
				}
				else if (this.num_quarries_p1 >= 4)
				{
					this.infobox_nopic("You already have the max of 4 quarries. You need to choose a plantation.");
				}
				else if (this.goods_bank_array[5] <= 0)
				{
					this.infobox_nopic("There aren't any quarries left. You need to choose a plantation.");
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Do you want a quarry?", 60);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = 60;
							this.update_num_plantations();
							this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Do you want a quarry?", 60);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = 61;
							this.update_num_plantations();
							this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
							this.infobox_building1("Your Hospice has granted you a colonist for your quarry.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Do you want a quarry?", 60);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = 60;
							this.update_num_plantations();
							this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Do you want a quarry?", 60);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = 61;
							this.update_num_plantations();
							this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
							this.infobox_building1("Your Hospice has granted you a colonist for your quarry. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.p1_chose_plantation = true;
						this.update_all_labels();
						this.p1_taken_turn = true;
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Text = "End Turn";
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		public void choose_settler()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Settler - Allows you to choose a Quarry instead of a Plantation during the Settler Phase.", "role_settler");
			}
			else
			{
				this.role_settler_pic.Visible = false;
				this.settler_bonus_label.Visible = false;
				if (this.bonus_roles_array[0] <= 0)
				{
					this.confirmbox_role("You chose the Settler - You may choose a quarry instead of a plantation if one is available. Is this the role you want to choose?", "role_settler");
				}
				else if (this.bonus_roles_array[0] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the Settler (and the", Conversion.Str(this.bonus_roles_array[0]), " doubloons on it) - You may choose a quarry instead of a plantation if one is available. Is this the role you want to choose?"), "role_settler");
				}
				else
				{
					this.confirmbox_role("You chose the Settler (and the 1 doubloon on it) - You may choose a quarry instead of a planataion if one is available. Is this the role you want to choose?", "role_settler");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_settler_pic.Visible = true;
					if (this.bonus_roles_array[0] <= 0)
					{
						this.settler_bonus_label.Visible = false;
					}
					else
					{
						this.settler_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = true;
					this.mayor_round = false;
					this.builder_round = false;
					this.craftsman_round = false;
					this.trader_round = false;
					this.captain_round = false;
					this.prospector1_round = false;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[0]);
					this.bonus_roles_array[0] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Settler");
					this.p1_process_settler();
				}
			}
		}

		public void choose_trader()
		{
			if (!this.p1_choosing_role)
			{
				this.infobox_role("The Trader - Grants you +1 doubloon for your sale during the Trader Phase.", "role_trader");
			}
			else
			{
				this.role_trader_pic.Visible = false;
				this.trader_bonus_label.Visible = false;
				if (this.bonus_roles_array[4] <= 0)
				{
					this.confirmbox_role("You chose the trader - You get +1 doubloon for sale to Trading House. Is this the role you want to choose?", "role_trader");
				}
				else if (this.bonus_roles_array[4] != 1)
				{
					this.confirmbox_role(string.Concat("You chose the trader (and the", Conversion.Str(this.bonus_roles_array[4]), " doubloons on it) - You get +1 doubloon for sale to Trading House. Is this the role you want to choose?"), "role_trader");
				}
				else
				{
					this.confirmbox_role("You chose the trader (and the 1 doubloon on it) - You get +1 doubloon for sale to Trading House. Is this the role you want to choose?", "role_trader");
				}
				if (!this.confirmed)
				{
					this.p1_choosing_role = true;
					this.role_trader_pic.Visible = true;
					if (this.bonus_roles_array[4] <= 0)
					{
						this.trader_bonus_label.Visible = false;
					}
					else
					{
						this.trader_bonus_label.Visible = true;
					}
				}
				else
				{
					this.make_role_buttons_inactive();
					this.p1_choosing_role = false;
					this.settler_round = false;
					this.mayor_round = false;
					this.builder_round = false;
					this.craftsman_round = false;
					this.trader_round = true;
					this.captain_round = false;
					this.prospector1_round = false;
					this.prospector2_round = false;
					this.p1_chose_plantation = false;
					this.gold_p1 = checked(this.gold_p1 + this.bonus_roles_array[4]);
					this.bonus_roles_array[4] = 0;
					this.update_all_labels();
					this.log_role_chooser("p1", "Trader");
					this.p1_process_trader();
				}
			}
		}

		public void close_text_file()
		{
			this.sw.Close();
		}

		private void colonist_ship_pic_Click(object sender, EventArgs e)
		{
			this.help_colonists_on_ship();
		}

		public void compute_temporary_city_hall_score()
		{
			if (this.current_player == 1)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p1_array[this.counter1x] == 130 | this.buildings_p1_array[this.counter1x] == 131 | this.buildings_p1_array[this.counter1x] == 140 | this.buildings_p1_array[this.counter1x] == 141 | this.buildings_p1_array[this.counter1x] == 150 | this.buildings_p1_array[this.counter1x] == 151 | this.buildings_p1_array[this.counter1x] == 160 | this.buildings_p1_array[this.counter1x] == 161 | this.buildings_p1_array[this.counter1x] == 230 | this.buildings_p1_array[this.counter1x] == 231 | this.buildings_p1_array[this.counter1x] == 240 | this.buildings_p1_array[this.counter1x] == 241 | this.buildings_p1_array[this.counter1x] == 250 | this.buildings_p1_array[this.counter1x] == 251 | this.buildings_p1_array[this.counter1x] == 260 | this.buildings_p1_array[this.counter1x] == 261 | this.buildings_p1_array[this.counter1x] == 330 | this.buildings_p1_array[this.counter1x] == 331 | this.buildings_p1_array[this.counter1x] == 340 | this.buildings_p1_array[this.counter1x] == 341 | this.buildings_p1_array[this.counter1x] == 350 | this.buildings_p1_array[this.counter1x] == 351 | this.buildings_p1_array[this.counter1x] == 410 | this.buildings_p1_array[this.counter1x] == 411 | this.buildings_p1_array[this.counter1x] == 420 | this.buildings_p1_array[this.counter1x] == 421 | this.buildings_p1_array[this.counter1x] == 430 | this.buildings_p1_array[this.counter1x] == 431 | this.buildings_p1_array[this.counter1x] == 440 | this.buildings_p1_array[this.counter1x] == 441 | this.buildings_p1_array[this.counter1x] == 450 | this.buildings_p1_array[this.counter1x] == 451 | this.buildings_p1_array[this.counter1x] == 361)
					{
						this.city_hall_score = checked(this.city_hall_score + 1);
					}
					Form1 form1 = this;
					form1.counter1x = checked(form1.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
			if (this.current_player == 2)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p2_array[this.counter1x] == 130 | this.buildings_p2_array[this.counter1x] == 131 | this.buildings_p2_array[this.counter1x] == 140 | this.buildings_p2_array[this.counter1x] == 141 | this.buildings_p2_array[this.counter1x] == 150 | this.buildings_p2_array[this.counter1x] == 151 | this.buildings_p2_array[this.counter1x] == 160 | this.buildings_p2_array[this.counter1x] == 161 | this.buildings_p2_array[this.counter1x] == 230 | this.buildings_p2_array[this.counter1x] == 231 | this.buildings_p2_array[this.counter1x] == 240 | this.buildings_p2_array[this.counter1x] == 241 | this.buildings_p2_array[this.counter1x] == 250 | this.buildings_p2_array[this.counter1x] == 251 | this.buildings_p2_array[this.counter1x] == 260 | this.buildings_p2_array[this.counter1x] == 261 | this.buildings_p2_array[this.counter1x] == 330 | this.buildings_p2_array[this.counter1x] == 331 | this.buildings_p2_array[this.counter1x] == 340 | this.buildings_p2_array[this.counter1x] == 341 | this.buildings_p2_array[this.counter1x] == 350 | this.buildings_p2_array[this.counter1x] == 351 | this.buildings_p2_array[this.counter1x] == 410 | this.buildings_p2_array[this.counter1x] == 411 | this.buildings_p2_array[this.counter1x] == 420 | this.buildings_p2_array[this.counter1x] == 421 | this.buildings_p2_array[this.counter1x] == 430 | this.buildings_p2_array[this.counter1x] == 431 | this.buildings_p2_array[this.counter1x] == 440 | this.buildings_p2_array[this.counter1x] == 441 | this.buildings_p2_array[this.counter1x] == 450 | this.buildings_p2_array[this.counter1x] == 451 | this.buildings_p2_array[this.counter1x] == 361)
					{
						this.city_hall_score = checked(this.city_hall_score + 1);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
			if (this.current_player == 3)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p3_array[this.counter1x] == 130 | this.buildings_p3_array[this.counter1x] == 131 | this.buildings_p3_array[this.counter1x] == 140 | this.buildings_p3_array[this.counter1x] == 141 | this.buildings_p3_array[this.counter1x] == 150 | this.buildings_p3_array[this.counter1x] == 151 | this.buildings_p3_array[this.counter1x] == 160 | this.buildings_p3_array[this.counter1x] == 161 | this.buildings_p3_array[this.counter1x] == 230 | this.buildings_p3_array[this.counter1x] == 231 | this.buildings_p3_array[this.counter1x] == 240 | this.buildings_p3_array[this.counter1x] == 241 | this.buildings_p3_array[this.counter1x] == 250 | this.buildings_p3_array[this.counter1x] == 251 | this.buildings_p3_array[this.counter1x] == 260 | this.buildings_p3_array[this.counter1x] == 261 | this.buildings_p3_array[this.counter1x] == 330 | this.buildings_p3_array[this.counter1x] == 331 | this.buildings_p3_array[this.counter1x] == 340 | this.buildings_p3_array[this.counter1x] == 341 | this.buildings_p3_array[this.counter1x] == 350 | this.buildings_p3_array[this.counter1x] == 351 | this.buildings_p3_array[this.counter1x] == 410 | this.buildings_p3_array[this.counter1x] == 411 | this.buildings_p3_array[this.counter1x] == 420 | this.buildings_p3_array[this.counter1x] == 421 | this.buildings_p3_array[this.counter1x] == 430 | this.buildings_p3_array[this.counter1x] == 431 | this.buildings_p3_array[this.counter1x] == 440 | this.buildings_p3_array[this.counter1x] == 441 | this.buildings_p3_array[this.counter1x] == 450 | this.buildings_p3_array[this.counter1x] == 451 | this.buildings_p3_array[this.counter1x] == 361)
					{
						this.city_hall_score = checked(this.city_hall_score + 1);
					}
					Form1 form12 = this;
					form12.counter1x = checked(form12.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
			if (this.current_player == 4)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p4_array[this.counter1x] == 130 | this.buildings_p4_array[this.counter1x] == 131 | this.buildings_p4_array[this.counter1x] == 140 | this.buildings_p4_array[this.counter1x] == 141 | this.buildings_p4_array[this.counter1x] == 150 | this.buildings_p4_array[this.counter1x] == 151 | this.buildings_p4_array[this.counter1x] == 160 | this.buildings_p4_array[this.counter1x] == 161 | this.buildings_p4_array[this.counter1x] == 230 | this.buildings_p4_array[this.counter1x] == 231 | this.buildings_p4_array[this.counter1x] == 240 | this.buildings_p4_array[this.counter1x] == 241 | this.buildings_p4_array[this.counter1x] == 250 | this.buildings_p4_array[this.counter1x] == 251 | this.buildings_p4_array[this.counter1x] == 260 | this.buildings_p4_array[this.counter1x] == 261 | this.buildings_p4_array[this.counter1x] == 330 | this.buildings_p4_array[this.counter1x] == 331 | this.buildings_p4_array[this.counter1x] == 340 | this.buildings_p4_array[this.counter1x] == 341 | this.buildings_p4_array[this.counter1x] == 350 | this.buildings_p4_array[this.counter1x] == 351 | this.buildings_p4_array[this.counter1x] == 410 | this.buildings_p4_array[this.counter1x] == 411 | this.buildings_p4_array[this.counter1x] == 420 | this.buildings_p4_array[this.counter1x] == 421 | this.buildings_p4_array[this.counter1x] == 430 | this.buildings_p4_array[this.counter1x] == 431 | this.buildings_p4_array[this.counter1x] == 440 | this.buildings_p4_array[this.counter1x] == 441 | this.buildings_p4_array[this.counter1x] == 450 | this.buildings_p4_array[this.counter1x] == 451 | this.buildings_p4_array[this.counter1x] == 361)
					{
						this.city_hall_score = checked(this.city_hall_score + 1);
					}
					Form1 form13 = this;
					form13.counter1x = checked(form13.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
			if (this.current_player == 5)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p5_array[this.counter1x] == 130 | this.buildings_p5_array[this.counter1x] == 131 | this.buildings_p5_array[this.counter1x] == 140 | this.buildings_p5_array[this.counter1x] == 141 | this.buildings_p5_array[this.counter1x] == 150 | this.buildings_p5_array[this.counter1x] == 151 | this.buildings_p5_array[this.counter1x] == 160 | this.buildings_p5_array[this.counter1x] == 161 | this.buildings_p5_array[this.counter1x] == 230 | this.buildings_p5_array[this.counter1x] == 231 | this.buildings_p5_array[this.counter1x] == 240 | this.buildings_p5_array[this.counter1x] == 241 | this.buildings_p5_array[this.counter1x] == 250 | this.buildings_p5_array[this.counter1x] == 251 | this.buildings_p5_array[this.counter1x] == 260 | this.buildings_p5_array[this.counter1x] == 261 | this.buildings_p5_array[this.counter1x] == 330 | this.buildings_p5_array[this.counter1x] == 331 | this.buildings_p5_array[this.counter1x] == 340 | this.buildings_p5_array[this.counter1x] == 341 | this.buildings_p5_array[this.counter1x] == 350 | this.buildings_p5_array[this.counter1x] == 351 | this.buildings_p5_array[this.counter1x] == 410 | this.buildings_p5_array[this.counter1x] == 411 | this.buildings_p5_array[this.counter1x] == 420 | this.buildings_p5_array[this.counter1x] == 421 | this.buildings_p5_array[this.counter1x] == 430 | this.buildings_p5_array[this.counter1x] == 431 | this.buildings_p5_array[this.counter1x] == 440 | this.buildings_p5_array[this.counter1x] == 441 | this.buildings_p5_array[this.counter1x] == 450 | this.buildings_p5_array[this.counter1x] == 451 | this.buildings_p5_array[this.counter1x] == 361)
					{
						this.city_hall_score = checked(this.city_hall_score + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 15);
			}
		}

		public void compute_temporary_customs_house_score()
		{
			if (this.current_player == 1)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p1 > 0)
				{
					int vpchipsP1 = this.vpchips_p1;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP1)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form1 = this;
						form1.counter1x = checked(form1.counter1x + 1);
					}
					this.customs_house_score = checked(this.customs_house_score + this.counter3x);
				}
			}
			if (this.current_player == 2)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p2 > 0)
				{
					int vpchipsP2 = this.vpchips_p2;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP2)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form11 = this;
						form11.counter1x = checked(form11.counter1x + 1);
					}
					this.customs_house_score = checked(this.customs_house_score + this.counter3x);
				}
			}
			if (this.current_player == 3)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p3 > 0)
				{
					int vpchipsP3 = this.vpchips_p3;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP3)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					this.customs_house_score = checked(this.customs_house_score + this.counter3x);
				}
			}
			if (this.current_player == 4)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p4 > 0)
				{
					int vpchipsP4 = this.vpchips_p4;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP4)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					this.customs_house_score = checked(this.customs_house_score + this.counter3x);
				}
			}
			if (this.current_player == 5)
			{
				this.counter2x = 0;
				this.counter3x = 0;
				if (this.vpchips_p5 > 0)
				{
					int vpchipsP5 = this.vpchips_p5;
					this.counter1x = 1;
					while (this.counter1x <= vpchipsP5)
					{
						this.counter2x = checked(this.counter2x + 1);
						if (this.counter2x == 4)
						{
							this.counter3x = checked(this.counter3x + 1);
							this.counter2x = 0;
						}
						Form1 form14 = this;
						form14.counter1x = checked(form14.counter1x + 1);
					}
					this.customs_house_score = checked(this.customs_house_score + this.counter3x);
				}
			}
		}

		public void compute_temporary_fortress_score()
		{
			this.fortress_score = 0;
			this.counter2x = 0;
			this.counter3x = 0;
			if (this.colonists_array[this.current_player] > 0)
			{
				int colonistsArray = this.colonists_array[this.current_player];
				this.counter1x = 1;
				while (this.counter1x <= colonistsArray)
				{
					this.counter2x = checked(this.counter2x + 1);
					if (this.counter2x == 3)
					{
						this.counter3x = checked(this.counter3x + 1);
						this.counter2x = 0;
					}
					Form1 form1 = this;
					form1.counter1x = checked(form1.counter1x + 1);
				}
				this.fortress_score = checked(this.fortress_score + this.counter3x);
			}
		}

		public void compute_temporary_guild_hall_score()
		{
			this.guild_hall_score = 0;
			if (this.current_player == 1)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p1_array[this.counter1x] == 110 | this.buildings_p1_array[this.counter1x] == 111 | this.buildings_p1_array[this.counter1x] == 120 | this.buildings_p1_array[this.counter1x] == 121)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 1);
					}
					if (this.buildings_p1_array[this.counter1x] == 210 | this.buildings_p1_array[this.counter1x] == 211 | this.buildings_p1_array[this.counter1x] == 212 | this.buildings_p1_array[this.counter1x] == 213 | this.buildings_p1_array[this.counter1x] == 220 | this.buildings_p1_array[this.counter1x] == 221 | this.buildings_p1_array[this.counter1x] == 222 | this.buildings_p1_array[this.counter1x] == 223 | this.buildings_p1_array[this.counter1x] == 310 | this.buildings_p1_array[this.counter1x] == 311 | this.buildings_p1_array[this.counter1x] == 312 | this.buildings_p1_array[this.counter1x] == 313 | this.buildings_p1_array[this.counter1x] == 320 | this.buildings_p1_array[this.counter1x] == 321 | this.buildings_p1_array[this.counter1x] == 322)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 2);
					}
					Form1 form1 = this;
					form1.counter1x = checked(form1.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			if (this.current_player == 2)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p2_array[this.counter1x] == 110 | this.buildings_p2_array[this.counter1x] == 111 | this.buildings_p2_array[this.counter1x] == 120 | this.buildings_p2_array[this.counter1x] == 121)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 1);
					}
					if (this.buildings_p2_array[this.counter1x] == 210 | this.buildings_p2_array[this.counter1x] == 211 | this.buildings_p2_array[this.counter1x] == 212 | this.buildings_p2_array[this.counter1x] == 213 | this.buildings_p2_array[this.counter1x] == 220 | this.buildings_p2_array[this.counter1x] == 221 | this.buildings_p2_array[this.counter1x] == 222 | this.buildings_p2_array[this.counter1x] == 223 | this.buildings_p2_array[this.counter1x] == 310 | this.buildings_p2_array[this.counter1x] == 311 | this.buildings_p2_array[this.counter1x] == 312 | this.buildings_p2_array[this.counter1x] == 313 | this.buildings_p2_array[this.counter1x] == 320 | this.buildings_p2_array[this.counter1x] == 321 | this.buildings_p2_array[this.counter1x] == 322)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			if (this.current_player == 3)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p3_array[this.counter1x] == 110 | this.buildings_p3_array[this.counter1x] == 111 | this.buildings_p3_array[this.counter1x] == 120 | this.buildings_p3_array[this.counter1x] == 121)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 1);
					}
					if (this.buildings_p3_array[this.counter1x] == 210 | this.buildings_p3_array[this.counter1x] == 211 | this.buildings_p3_array[this.counter1x] == 212 | this.buildings_p3_array[this.counter1x] == 213 | this.buildings_p3_array[this.counter1x] == 220 | this.buildings_p3_array[this.counter1x] == 221 | this.buildings_p3_array[this.counter1x] == 222 | this.buildings_p3_array[this.counter1x] == 223 | this.buildings_p3_array[this.counter1x] == 310 | this.buildings_p3_array[this.counter1x] == 311 | this.buildings_p3_array[this.counter1x] == 312 | this.buildings_p3_array[this.counter1x] == 313 | this.buildings_p3_array[this.counter1x] == 320 | this.buildings_p3_array[this.counter1x] == 321 | this.buildings_p3_array[this.counter1x] == 322)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 2);
					}
					Form1 form12 = this;
					form12.counter1x = checked(form12.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			if (this.current_player == 4)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p4_array[this.counter1x] == 110 | this.buildings_p4_array[this.counter1x] == 111 | this.buildings_p4_array[this.counter1x] == 120 | this.buildings_p4_array[this.counter1x] == 121)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 1);
					}
					if (this.buildings_p4_array[this.counter1x] == 210 | this.buildings_p4_array[this.counter1x] == 211 | this.buildings_p4_array[this.counter1x] == 212 | this.buildings_p4_array[this.counter1x] == 213 | this.buildings_p4_array[this.counter1x] == 220 | this.buildings_p4_array[this.counter1x] == 221 | this.buildings_p4_array[this.counter1x] == 222 | this.buildings_p4_array[this.counter1x] == 223 | this.buildings_p4_array[this.counter1x] == 310 | this.buildings_p4_array[this.counter1x] == 311 | this.buildings_p4_array[this.counter1x] == 312 | this.buildings_p4_array[this.counter1x] == 313 | this.buildings_p4_array[this.counter1x] == 320 | this.buildings_p4_array[this.counter1x] == 321 | this.buildings_p4_array[this.counter1x] == 322)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 2);
					}
					Form1 form13 = this;
					form13.counter1x = checked(form13.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
			if (this.current_player == 5)
			{
				this.counter1x = 0;
				do
				{
					if (this.buildings_p5_array[this.counter1x] == 110 | this.buildings_p5_array[this.counter1x] == 111 | this.buildings_p5_array[this.counter1x] == 120 | this.buildings_p5_array[this.counter1x] == 121)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 1);
					}
					if (this.buildings_p5_array[this.counter1x] == 210 | this.buildings_p5_array[this.counter1x] == 211 | this.buildings_p5_array[this.counter1x] == 212 | this.buildings_p5_array[this.counter1x] == 213 | this.buildings_p5_array[this.counter1x] == 220 | this.buildings_p5_array[this.counter1x] == 221 | this.buildings_p5_array[this.counter1x] == 222 | this.buildings_p5_array[this.counter1x] == 223 | this.buildings_p5_array[this.counter1x] == 310 | this.buildings_p5_array[this.counter1x] == 311 | this.buildings_p5_array[this.counter1x] == 312 | this.buildings_p5_array[this.counter1x] == 313 | this.buildings_p5_array[this.counter1x] == 320 | this.buildings_p5_array[this.counter1x] == 321 | this.buildings_p5_array[this.counter1x] == 322)
					{
						this.guild_hall_score = checked(this.guild_hall_score + 2);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (this.counter1x <= 19);
			}
		}

		public void compute_temporary_large_building_score()
		{
			this.compute_temporary_guild_hall_score();
			this.compute_temporary_residence_score();
			this.compute_temporary_fortress_score();
			this.compute_temporary_customs_house_score();
			this.compute_temporary_city_hall_score();
			this.best_building_num = 999;
			this.current_best_score = 0;
			if (this.buildings_available_array[18] > 0)
			{
				this.current_best_score = this.guild_hall_score;
				this.best_building_num = 410;
			}
			if (this.buildings_available_array[19] > 0 & this.residence_score > this.current_best_score)
			{
				this.current_best_score = this.residence_score;
				this.best_building_num = 420;
			}
			if (this.buildings_available_array[20] > 0 & this.fortress_score > this.current_best_score)
			{
				this.current_best_score = this.fortress_score;
				this.best_building_num = 430;
			}
			if (this.buildings_available_array[21] > 0 & this.customs_house_score > this.current_best_score)
			{
				this.current_best_score = this.customs_house_score;
				this.best_building_num = 440;
			}
			if (this.buildings_available_array[22] > 0 & this.city_hall_score > this.current_best_score)
			{
				this.current_best_score = this.city_hall_score;
				this.best_building_num = 450;
			}
		}

		public void compute_temporary_residence_score()
		{
			this.residence_score = 0;
			if (this.current_player == 1)
			{
				if (this.num_plantations_p1 <= 9)
				{
					this.residence_score = checked(this.residence_score + 4);
				}
				if (this.num_plantations_p1 == 10)
				{
					this.residence_score = checked(this.residence_score + 5);
				}
				if (this.num_plantations_p1 == 11)
				{
					this.residence_score = checked(this.residence_score + 6);
				}
				if (this.num_plantations_p1 == 12)
				{
					this.residence_score = checked(this.residence_score + 7);
				}
			}
			if (this.current_player == 2)
			{
				if (this.num_plantations_p2 <= 9)
				{
					this.residence_score = checked(this.residence_score + 4);
				}
				if (this.num_plantations_p2 == 10)
				{
					this.residence_score = checked(this.residence_score + 5);
				}
				if (this.num_plantations_p2 == 11)
				{
					this.residence_score = checked(this.residence_score + 6);
				}
				if (this.num_plantations_p2 == 12)
				{
					this.residence_score = checked(this.residence_score + 7);
				}
			}
			if (this.current_player == 3)
			{
				if (this.num_plantations_p3 <= 9)
				{
					this.residence_score = checked(this.residence_score + 4);
				}
				if (this.num_plantations_p3 == 10)
				{
					this.residence_score = checked(this.residence_score + 5);
				}
				if (this.num_plantations_p3 == 11)
				{
					this.residence_score = checked(this.residence_score + 6);
				}
				if (this.num_plantations_p3 == 12)
				{
					this.residence_score = checked(this.residence_score + 7);
				}
			}
			if (this.current_player == 4)
			{
				if (this.num_plantations_p4 <= 9)
				{
					this.residence_score = checked(this.residence_score + 4);
				}
				if (this.num_plantations_p4 == 10)
				{
					this.residence_score = checked(this.residence_score + 5);
				}
				if (this.num_plantations_p4 == 11)
				{
					this.residence_score = checked(this.residence_score + 6);
				}
				if (this.num_plantations_p4 == 12)
				{
					this.residence_score = checked(this.residence_score + 7);
				}
			}
			if (this.current_player == 5)
			{
				if (this.num_plantations_p5 <= 9)
				{
					this.residence_score = checked(this.residence_score + 4);
				}
				if (this.num_plantations_p5 == 10)
				{
					this.residence_score = checked(this.residence_score + 5);
				}
				if (this.num_plantations_p5 == 11)
				{
					this.residence_score = checked(this.residence_score + 6);
				}
				if (this.num_plantations_p5 == 12)
				{
					this.residence_score = checked(this.residence_score + 7);
				}
			}
		}

		public void confirmbox_building1(object confirmtext1, object confirmpic1)
		{
			this.confirmbuilding1_form.Label1.Text =StringType.FromObject(confirmtext1);
			PictureBox pictureBox1 = this.confirmbuilding1_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			this.confirmbuilding1_form.PictureBox1.Visible = true;
			this.confirmbuilding1_form.ShowDialog();
			if (!this.confirmbuilding1_form.yes_clicked)
			{
				this.confirmed = false;
			}
			else
			{
				this.confirmed = true;
			}
		}

		public void confirmbox_building2(object confirmtext1, object confirmpic1)
		{
			this.confirmbuilding2_form.Label1.Text =StringType.FromObject(confirmtext1);
			PictureBox pictureBox1 = this.confirmbuilding1_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			this.confirmbuilding2_form.PictureBox1.Visible = true;
			this.confirmbuilding2_form.ShowDialog();
			if (!this.confirmbuilding2_form.yes_clicked)
			{
				this.confirmed = false;
			}
			else
			{
				this.confirmed = true;
			}
		}

		public void confirmbox_nopic(object confirmtext1)
		{
			this.confirmnopic_form.Label1.Text =StringType.FromObject(confirmtext1);
			this.confirmnopic_form.ShowDialog();
			if (!this.confirmnopic_form.yes_clicked)
			{
				this.confirmed = false;
			}
			else
			{
				this.confirmed = true;
			}
		}

		public void confirmbox_plant(object confirmtext1, object confirmpic1)
		{
			this.confirmplant_form.Label1.Text =StringType.FromObject(confirmtext1);
			this.confirmplant_form.PictureBox1.Image = Image.FromFile(string.Concat("pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[2]), ".bmp"));
			this.confirmplant_form.PictureBox1.Visible = true;
			this.confirmplant_form.ShowDialog();
			if (!this.confirmplant_form.yes_clicked)
			{
				this.confirmed = false;
			}
			else
			{
				this.confirmed = true;
			}
		}

		public void confirmbox_role(object confirmtext1, object confirmpic1)
		{
			this.confirmrole_form.Label1.Text =StringType.FromObject(confirmtext1);
			this.confirmrole_form.PictureBox1.Image = Image.FromFile(StringType.FromObject(ObjectType.AddObj(ObjectType.AddObj("pic\\", confirmpic1), ".bmp")));
			this.confirmrole_form.PictureBox1.Visible = true;
			this.confirmrole_form.ShowDialog();
			if (!this.confirmrole_form.yes_clicked)
			{
				this.confirmed = false;
			}
			else
			{
				this.confirmed = true;
			}
		}

		private void craftsman_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_craftsman();
			}
		}

		public void debug_setup_variables()
		{
			this.dialog_box_OK_timer = 4;
			this.developer_on = false;
			this.alerts_on = true;
			this.update_num_buildings();
			this.update_num_plantations();
			if (!this.developer_on)
			{
				this.Button1.Visible = false;
				this.Button1.Enabled=false;
				this.Button2.Visible = false;
				this.Button2.Enabled=false;
				this.Button3.Visible = false;
				this.Button3.Enabled=false;
				this.Label7.Visible = false;
				this.Label8.Visible = false;
				this.Label9.Visible = false;
				this.Label10.Visible = false;
				this.player2_form.Button1.Enabled=false;
				this.player2_form.Button1.Visible = false;
				this.player3_form.Button1.Enabled=false;
				this.player3_form.Button1.Visible = false;
				this.player4_form.Button1.Enabled=false;
				this.player4_form.Button1.Visible = false;
				this.player5_form.Button1.Enabled=false;
				this.player5_form.Button1.Visible = false;
			}
			else
			{
				this.Button1.Visible = true;
				this.Button1.Enabled = true;
				this.Button2.Visible = true;
				this.Button2.Enabled = true;
				this.Button3.Visible = true;
				this.Button3.Enabled = true;
				this.Label7.Visible = true;
				this.Label8.Visible = true;
				this.Label9.Visible = true;
				this.Label10.Visible = true;
				this.player2_form.Button1.Enabled = true;
				this.player2_form.Button1.Visible = true;
				this.player3_form.Button1.Enabled = true;
				this.player3_form.Button1.Visible = true;
				this.player4_form.Button1.Enabled = true;
				this.player4_form.Button1.Visible = true;
				this.player5_form.Button1.Enabled = true;
				this.player5_form.Button1.Visible = true;
			}
		}

		public void determine_best_goods_to_store()
		{
			this.best_storage_type = 999;
			this.best_storage_qty = 0;
			if (this.current_player == 2)
			{
				this.counter3 = 0;
				do
				{
					if (this.goods_p2_array[this.counter3] > this.best_storage_qty)
					{
						this.best_storage_type = this.counter3;
						this.best_storage_qty = this.goods_p2_array[this.counter3];
					}
					Form1 form1 = this;
					form1.counter3 = checked(form1.counter3 + 1);
				}
				while (this.counter3 <= 4);
			}
			if (this.current_player == 3)
			{
				this.counter3 = 0;
				do
				{
					if (this.goods_p3_array[this.counter3] > this.best_storage_qty)
					{
						this.best_storage_type = this.counter3;
						this.best_storage_qty = this.goods_p3_array[this.counter3];
					}
					Form1 form11 = this;
					form11.counter3 = checked(form11.counter3 + 1);
				}
				while (this.counter3 <= 4);
			}
			if (this.current_player == 4)
			{
				this.counter3 = 0;
				do
				{
					if (this.goods_p4_array[this.counter3] > this.best_storage_qty)
					{
						this.best_storage_type = this.counter3;
						this.best_storage_qty = this.goods_p4_array[this.counter3];
					}
					Form1 form12 = this;
					form12.counter3 = checked(form12.counter3 + 1);
				}
				while (this.counter3 <= 4);
			}
			if (this.current_player == 5)
			{
				this.counter3 = 0;
				do
				{
					if (this.goods_p5_array[this.counter3] > this.best_storage_qty)
					{
						this.best_storage_type = this.counter3;
						this.best_storage_qty = this.goods_p5_array[this.counter3];
					}
					Form1 form13 = this;
					form13.counter3 = checked(form13.counter3 + 1);
				}
				while (this.counter3 <= 4);
			}
		}

		public void determine_empty_colonists_slots_all()
		{
			this.determine_empty_colonists_slots_p1();
			this.determine_empty_colonists_slots_p2();
			this.determine_empty_colonists_slots_p3();
			this.determine_empty_colonists_slots_p4();
			this.determine_empty_colonists_slots_p5();
			this.p1_empty_colonists_slots = this.empty_colonists_slots_array[1];
			this.p2_empty_colonists_slots = this.empty_colonists_slots_array[2];
			this.p3_empty_colonists_slots = this.empty_colonists_slots_array[3];
			this.p4_empty_colonists_slots = this.empty_colonists_slots_array[4];
			this.p5_empty_colonists_slots = this.empty_colonists_slots_array[5];
		}

		public void determine_empty_colonists_slots_p1()
		{
			this.empty_colonists_slots_array[1] = 0;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter1] == 110 | this.buildings_p1_array[this.counter1] == 120 | this.buildings_p1_array[this.counter1] == 130 | this.buildings_p1_array[this.counter1] == 140 | this.buildings_p1_array[this.counter1] == 150 | this.buildings_p1_array[this.counter1] == 160 | this.buildings_p1_array[this.counter1] == 212 | this.buildings_p1_array[this.counter1] == 222 | this.buildings_p1_array[this.counter1] == 230 | this.buildings_p1_array[this.counter1] == 240 | this.buildings_p1_array[this.counter1] == 250 | this.buildings_p1_array[this.counter1] == 260 | this.buildings_p1_array[this.counter1] == 312 | this.buildings_p1_array[this.counter1] == 321 | this.buildings_p1_array[this.counter1] == 330 | this.buildings_p1_array[this.counter1] == 340 | this.buildings_p1_array[this.counter1] == 350 | this.buildings_p1_array[this.counter1] == 360)
				{
					this.empty_colonists_slots_array[1] = checked(this.empty_colonists_slots_array[1] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter1] == 211 | this.buildings_p1_array[this.counter1] == 221 | this.buildings_p1_array[this.counter1] == 311 | this.buildings_p1_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[1] = checked(this.empty_colonists_slots_array[1] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter1] == 210 | this.buildings_p1_array[this.counter1] == 220 | this.buildings_p1_array[this.counter1] == 310 | this.buildings_p1_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[1] = checked(this.empty_colonists_slots_array[1] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p1_array[this.counter1] == 410 | this.buildings_p1_array[this.counter1] == 420 | this.buildings_p1_array[this.counter1] == 430 | this.buildings_p1_array[this.counter1] == 440 | this.buildings_p1_array[this.counter1] == 450)
				{
					this.empty_colonists_slots_array[1] = checked(this.empty_colonists_slots_array[1] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p2()
		{
			this.empty_colonists_slots_array[2] = 0;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter1] == 110 | this.buildings_p2_array[this.counter1] == 120 | this.buildings_p2_array[this.counter1] == 130 | this.buildings_p2_array[this.counter1] == 140 | this.buildings_p2_array[this.counter1] == 150 | this.buildings_p2_array[this.counter1] == 160 | this.buildings_p2_array[this.counter1] == 212 | this.buildings_p2_array[this.counter1] == 222 | this.buildings_p2_array[this.counter1] == 230 | this.buildings_p2_array[this.counter1] == 240 | this.buildings_p2_array[this.counter1] == 250 | this.buildings_p2_array[this.counter1] == 260 | this.buildings_p2_array[this.counter1] == 312 | this.buildings_p2_array[this.counter1] == 321 | this.buildings_p2_array[this.counter1] == 330 | this.buildings_p2_array[this.counter1] == 340 | this.buildings_p2_array[this.counter1] == 350 | this.buildings_p2_array[this.counter1] == 360)
				{
					this.empty_colonists_slots_array[2] = checked(this.empty_colonists_slots_array[2] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter1] == 211 | this.buildings_p2_array[this.counter1] == 221 | this.buildings_p2_array[this.counter1] == 311 | this.buildings_p2_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[2] = checked(this.empty_colonists_slots_array[2] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter1] == 210 | this.buildings_p2_array[this.counter1] == 220 | this.buildings_p2_array[this.counter1] == 310 | this.buildings_p2_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[2] = checked(this.empty_colonists_slots_array[2] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p2_array[this.counter1] == 410 | this.buildings_p2_array[this.counter1] == 420 | this.buildings_p2_array[this.counter1] == 430 | this.buildings_p2_array[this.counter1] == 440 | this.buildings_p2_array[this.counter1] == 450)
				{
					this.empty_colonists_slots_array[2] = checked(this.empty_colonists_slots_array[2] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p3()
		{
			this.empty_colonists_slots_array[3] = 0;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter1] == 110 | this.buildings_p3_array[this.counter1] == 120 | this.buildings_p3_array[this.counter1] == 130 | this.buildings_p3_array[this.counter1] == 140 | this.buildings_p3_array[this.counter1] == 150 | this.buildings_p3_array[this.counter1] == 160 | this.buildings_p3_array[this.counter1] == 212 | this.buildings_p3_array[this.counter1] == 222 | this.buildings_p3_array[this.counter1] == 230 | this.buildings_p3_array[this.counter1] == 240 | this.buildings_p3_array[this.counter1] == 250 | this.buildings_p3_array[this.counter1] == 260 | this.buildings_p3_array[this.counter1] == 312 | this.buildings_p3_array[this.counter1] == 321 | this.buildings_p3_array[this.counter1] == 330 | this.buildings_p3_array[this.counter1] == 340 | this.buildings_p3_array[this.counter1] == 350 | this.buildings_p3_array[this.counter1] == 360)
				{
					this.empty_colonists_slots_array[3] = checked(this.empty_colonists_slots_array[3] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter1] == 211 | this.buildings_p3_array[this.counter1] == 221 | this.buildings_p3_array[this.counter1] == 311 | this.buildings_p3_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[3] = checked(this.empty_colonists_slots_array[3] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter1] == 210 | this.buildings_p3_array[this.counter1] == 220 | this.buildings_p3_array[this.counter1] == 310 | this.buildings_p3_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[3] = checked(this.empty_colonists_slots_array[3] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p3_array[this.counter1] == 410 | this.buildings_p3_array[this.counter1] == 420 | this.buildings_p3_array[this.counter1] == 430 | this.buildings_p3_array[this.counter1] == 440 | this.buildings_p3_array[this.counter1] == 450)
				{
					this.empty_colonists_slots_array[3] = checked(this.empty_colonists_slots_array[3] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p4()
		{
			this.empty_colonists_slots_array[4] = 0;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter1] == 110 | this.buildings_p4_array[this.counter1] == 120 | this.buildings_p4_array[this.counter1] == 130 | this.buildings_p4_array[this.counter1] == 140 | this.buildings_p4_array[this.counter1] == 150 | this.buildings_p4_array[this.counter1] == 160 | this.buildings_p4_array[this.counter1] == 212 | this.buildings_p4_array[this.counter1] == 222 | this.buildings_p4_array[this.counter1] == 230 | this.buildings_p4_array[this.counter1] == 240 | this.buildings_p4_array[this.counter1] == 250 | this.buildings_p4_array[this.counter1] == 260 | this.buildings_p4_array[this.counter1] == 312 | this.buildings_p4_array[this.counter1] == 321 | this.buildings_p4_array[this.counter1] == 330 | this.buildings_p4_array[this.counter1] == 340 | this.buildings_p4_array[this.counter1] == 350 | this.buildings_p4_array[this.counter1] == 360)
				{
					this.empty_colonists_slots_array[4] = checked(this.empty_colonists_slots_array[4] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter1] == 211 | this.buildings_p4_array[this.counter1] == 221 | this.buildings_p4_array[this.counter1] == 311 | this.buildings_p4_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[4] = checked(this.empty_colonists_slots_array[4] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter1] == 210 | this.buildings_p4_array[this.counter1] == 220 | this.buildings_p4_array[this.counter1] == 310 | this.buildings_p4_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[4] = checked(this.empty_colonists_slots_array[4] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p4_array[this.counter1] == 410 | this.buildings_p4_array[this.counter1] == 420 | this.buildings_p4_array[this.counter1] == 430 | this.buildings_p4_array[this.counter1] == 440 | this.buildings_p4_array[this.counter1] == 450)
				{
					this.empty_colonists_slots_array[4] = checked(this.empty_colonists_slots_array[4] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p5()
		{
			this.empty_colonists_slots_array[5] = 0;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter1] == 110 | this.buildings_p5_array[this.counter1] == 120 | this.buildings_p5_array[this.counter1] == 130 | this.buildings_p5_array[this.counter1] == 140 | this.buildings_p5_array[this.counter1] == 150 | this.buildings_p5_array[this.counter1] == 160 | this.buildings_p5_array[this.counter1] == 212 | this.buildings_p5_array[this.counter1] == 222 | this.buildings_p5_array[this.counter1] == 230 | this.buildings_p5_array[this.counter1] == 240 | this.buildings_p5_array[this.counter1] == 250 | this.buildings_p5_array[this.counter1] == 260 | this.buildings_p5_array[this.counter1] == 312 | this.buildings_p5_array[this.counter1] == 321 | this.buildings_p5_array[this.counter1] == 330 | this.buildings_p5_array[this.counter1] == 340 | this.buildings_p5_array[this.counter1] == 350 | this.buildings_p5_array[this.counter1] == 360)
				{
					this.empty_colonists_slots_array[5] = checked(this.empty_colonists_slots_array[5] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter1] == 211 | this.buildings_p5_array[this.counter1] == 221 | this.buildings_p5_array[this.counter1] == 311 | this.buildings_p5_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[5] = checked(this.empty_colonists_slots_array[5] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter1] == 210 | this.buildings_p5_array[this.counter1] == 220 | this.buildings_p5_array[this.counter1] == 310 | this.buildings_p5_array[this.counter1] == 320)
				{
					this.empty_colonists_slots_array[5] = checked(this.empty_colonists_slots_array[5] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p5_array[this.counter1] == 410 | this.buildings_p5_array[this.counter1] == 420 | this.buildings_p5_array[this.counter1] == 430 | this.buildings_p5_array[this.counter1] == 440 | this.buildings_p5_array[this.counter1] == 450)
				{
					this.empty_colonists_slots_array[5] = checked(this.empty_colonists_slots_array[5] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void determine_factory_production()
		{
			this.check_for_building_p1(331);
			if (this.found_building)
			{
				this.counter1 = 0;
				this.counter3 = 0;
				this.counter2 = 0;
				do
				{
					if (this.goods_this_turn_p1_array[this.counter2] > 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					Form1 form1 = this;
					form1.counter2 = checked(form1.counter2 + 1);
				}
				while (this.counter2 <= 4);
				if (this.counter1 == 0)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 1)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 2)
				{
					this.counter3 = 1;
				}
				if (this.counter1 == 3)
				{
					this.counter3 = 2;
				}
				if (this.counter1 == 4)
				{
					this.counter3 = 3;
				}
				if (this.counter1 == 5)
				{
					this.counter3 = 5;
				}
				this.infobox_building1(string.Concat("Your manned Factory generated", Conversion.Str(this.counter3), " doubloon(s) for your goods produced."), 331);
				this.gold_p1 = checked(this.gold_p1 + this.counter3);
				this.update_all_labels();
			}
			this.check_for_building_p2(331);
			if (this.found_building)
			{
				this.counter1 = 0;
				this.counter3 = 0;
				this.counter2 = 0;
				do
				{
					if (this.goods_this_turn_p2_array[this.counter2] > 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (this.counter2 <= 4);
				if (this.counter1 == 0)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 1)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 2)
				{
					this.counter3 = 1;
				}
				if (this.counter1 == 3)
				{
					this.counter3 = 2;
				}
				if (this.counter1 == 4)
				{
					this.counter3 = 3;
				}
				if (this.counter1 == 5)
				{
					this.counter3 = 5;
				}
				this.infobox_building1(string.Concat(this.p2_name, "'s manned Factory generated", Conversion.Str(this.counter3), " doubloon(s) for goods produced."), 331);
				this.gold_p2 = checked(this.gold_p2 + this.counter3);
				this.update_all_labels();
			}
			this.check_for_building_p3(331);
			if (this.found_building)
			{
				this.counter1 = 0;
				this.counter3 = 0;
				this.counter2 = 0;
				do
				{
					if (this.goods_this_turn_p3_array[this.counter2] > 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					Form1 form12 = this;
					form12.counter2 = checked(form12.counter2 + 1);
				}
				while (this.counter2 <= 4);
				if (this.counter1 == 0)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 1)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 2)
				{
					this.counter3 = 1;
				}
				if (this.counter1 == 3)
				{
					this.counter3 = 2;
				}
				if (this.counter1 == 4)
				{
					this.counter3 = 3;
				}
				if (this.counter1 == 5)
				{
					this.counter3 = 5;
				}
				this.infobox_building1(string.Concat(this.p3_name, "'s manned Factory generated", Conversion.Str(this.counter3), " doubloon(s) for goods produced."), 331);
				this.gold_p3 = checked(this.gold_p3 + this.counter3);
				this.update_all_labels();
			}
			this.check_for_building_p4(331);
			if (this.found_building)
			{
				this.counter1 = 0;
				this.counter3 = 0;
				this.counter2 = 0;
				do
				{
					if (this.goods_this_turn_p4_array[this.counter2] > 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					Form1 form13 = this;
					form13.counter2 = checked(form13.counter2 + 1);
				}
				while (this.counter2 <= 4);
				if (this.counter1 == 0)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 1)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 2)
				{
					this.counter3 = 1;
				}
				if (this.counter1 == 3)
				{
					this.counter3 = 2;
				}
				if (this.counter1 == 4)
				{
					this.counter3 = 3;
				}
				if (this.counter1 == 5)
				{
					this.counter3 = 5;
				}
				this.infobox_building1(string.Concat(this.p4_name, "'s manned Factory generated", Conversion.Str(this.counter3), " doubloons for goods produced."), 331);
				this.gold_p4 = checked(this.gold_p4 + this.counter3);
				this.update_all_labels();
			}
			this.check_for_building_p5(331);
			if (this.found_building)
			{
				this.counter1 = 0;
				this.counter3 = 0;
				this.counter2 = 0;
				do
				{
					if (this.goods_this_turn_p5_array[this.counter2] > 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					Form1 form14 = this;
					form14.counter2 = checked(form14.counter2 + 1);
				}
				while (this.counter2 <= 4);
				if (this.counter1 == 0)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 1)
				{
					this.counter3 = 0;
				}
				if (this.counter1 == 2)
				{
					this.counter3 = 1;
				}
				if (this.counter1 == 3)
				{
					this.counter3 = 2;
				}
				if (this.counter1 == 4)
				{
					this.counter3 = 3;
				}
				if (this.counter1 == 5)
				{
					this.counter3 = 5;
				}
				this.infobox_building1(string.Concat(this.p5_name, "'s manned Factory generated", Conversion.Str(this.counter3), " doubloons for goods produced."), 331);
				this.gold_p5 = checked(this.gold_p5 + this.counter3);
				this.update_all_labels();
			}
		}

		public void determine_goods_to_ship()
		{
			this.update_ship_cargo();
			this.goods_to_ship = false;
			if (this.current_player == 1)
			{
				this.check_for_building(361);
				if (this.goods_p1_array[0] > 0 & this.ships_can_take_indigo | this.goods_p1_array[0] > 0 & this.found_building & !this.p1_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p1_array[1] > 0 & this.ships_can_take_sugar | this.goods_p1_array[1] > 0 & this.found_building & !this.p1_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p1_array[2] > 0 & this.ships_can_take_corn | this.goods_p1_array[2] > 0 & this.found_building & !this.p1_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p1_array[3] > 0 & this.ships_can_take_tobacco | this.goods_p1_array[3] > 0 & this.found_building & !this.p1_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p1_array[4] > 0 & this.ships_can_take_coffee | this.goods_p1_array[4] > 0 & this.found_building & !this.p1_used_wharf)
				{
					this.goods_to_ship = true;
				}
			}
			if (this.current_player == 2)
			{
				this.check_for_building(361);
				if (this.goods_p2_array[0] > 0 & this.ships_can_take_indigo | this.goods_p2_array[0] > 0 & this.found_building & !this.p2_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p2_array[1] > 0 & this.ships_can_take_sugar | this.goods_p2_array[1] > 0 & this.found_building & !this.p2_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p2_array[2] > 0 & this.ships_can_take_corn | this.goods_p2_array[2] > 0 & this.found_building & !this.p2_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p2_array[3] > 0 & this.ships_can_take_tobacco | this.goods_p2_array[3] > 0 & this.found_building & !this.p2_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p2_array[4] > 0 & this.ships_can_take_coffee | this.goods_p2_array[4] > 0 & this.found_building & !this.p2_used_wharf)
				{
					this.goods_to_ship = true;
				}
			}
			if (this.current_player == 3)
			{
				this.check_for_building(361);
				if (this.goods_p3_array[0] > 0 & this.ships_can_take_indigo | this.goods_p3_array[0] > 0 & this.found_building & !this.p3_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p3_array[1] > 0 & this.ships_can_take_sugar | this.goods_p3_array[1] > 0 & this.found_building & !this.p3_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p3_array[2] > 0 & this.ships_can_take_corn | this.goods_p3_array[2] > 0 & this.found_building & !this.p3_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p3_array[3] > 0 & this.ships_can_take_tobacco | this.goods_p3_array[3] > 0 & this.found_building & !this.p3_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p3_array[4] > 0 & this.ships_can_take_coffee | this.goods_p3_array[4] > 0 & this.found_building & !this.p3_used_wharf)
				{
					this.goods_to_ship = true;
				}
			}
			if (this.current_player == 4)
			{
				this.check_for_building(361);
				if (this.goods_p4_array[0] > 0 & this.ships_can_take_indigo | this.goods_p4_array[0] > 0 & this.found_building & !this.p4_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p4_array[1] > 0 & this.ships_can_take_sugar | this.goods_p4_array[1] > 0 & this.found_building & !this.p4_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p4_array[2] > 0 & this.ships_can_take_corn | this.goods_p4_array[2] > 0 & this.found_building & !this.p4_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p4_array[3] > 0 & this.ships_can_take_tobacco | this.goods_p4_array[3] > 0 & this.found_building & !this.p4_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p4_array[4] > 0 & this.ships_can_take_coffee | this.goods_p4_array[4] > 0 & this.found_building & !this.p4_used_wharf)
				{
					this.goods_to_ship = true;
				}
			}
			if (this.current_player == 5)
			{
				this.check_for_building(361);
				if (this.goods_p5_array[0] > 0 & this.ships_can_take_indigo | this.goods_p5_array[0] > 0 & this.found_building & !this.p5_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p5_array[1] > 0 & this.ships_can_take_sugar | this.goods_p5_array[1] > 0 & this.found_building & !this.p5_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p5_array[2] > 0 & this.ships_can_take_corn | this.goods_p5_array[2] > 0 & this.found_building & !this.p5_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p5_array[3] > 0 & this.ships_can_take_tobacco | this.goods_p5_array[3] > 0 & this.found_building & !this.p5_used_wharf)
				{
					this.goods_to_ship = true;
				}
				if (this.goods_p5_array[4] > 0 & this.ships_can_take_coffee | this.goods_p5_array[4] > 0 & this.found_building & !this.p5_used_wharf)
				{
					this.goods_to_ship = true;
				}
			}
		}

		public void determine_goods_to_trade()
		{
			this.goods_to_trade = false;
			this.p1_manned_office = false;
			this.p2_manned_office = false;
			this.p3_manned_office = false;
			this.p4_manned_office = false;
			this.p5_manned_office = false;
			this.trading_house_full = false;
			if (this.trading_house_array[3] != 0)
			{
				this.trading_house_full = true;
			}
			if (this.current_player == 1)
			{
				this.check_for_building(241);
				if (this.found_building)
				{
					this.p1_manned_office = true;
				}
				this.counter2 = 0;
				do
				{
					if (this.goods_p1_array[this.counter2] > 0)
					{
						this.check_for_goods_in_trading_house(this.counter2);
						if (!this.found_good & !this.trading_house_full | this.p1_manned_office & !this.trading_house_full)
						{
							this.goods_to_trade = true;
						}
					}
					Form1 form1 = this;
					form1.counter2 = checked(form1.counter2 + 1);
				}
				while (this.counter2 <= 4);
			}
			if (this.current_player == 2)
			{
				this.check_for_building(241);
				if (this.found_building)
				{
					this.p2_manned_office = true;
				}
				this.counter2 = 0;
				do
				{
					if (this.goods_p2_array[this.counter2] > 0)
					{
						this.check_for_goods_in_trading_house(this.counter2);
						if (!this.found_good & !this.trading_house_full | this.p2_manned_office & !this.trading_house_full)
						{
							this.goods_to_trade = true;
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (this.counter2 <= 4);
			}
			if (this.current_player == 3)
			{
				this.counter2 = 0;
				do
				{
					if (this.goods_p3_array[this.counter2] > 0)
					{
						this.check_for_goods_in_trading_house(this.counter2);
						if (!this.found_good & !this.trading_house_full | this.p3_manned_office & !this.trading_house_full)
						{
							this.goods_to_trade = true;
						}
					}
					Form1 form12 = this;
					form12.counter2 = checked(form12.counter2 + 1);
				}
				while (this.counter2 <= 4);
			}
			if (this.current_player == 4)
			{
				this.counter2 = 0;
				do
				{
					if (this.goods_p4_array[this.counter2] > 0)
					{
						this.check_for_goods_in_trading_house(this.counter2);
						if (!this.found_good & !this.trading_house_full | this.p4_manned_office & !this.trading_house_full)
						{
							this.goods_to_trade = true;
						}
					}
					Form1 form13 = this;
					form13.counter2 = checked(form13.counter2 + 1);
				}
				while (this.counter2 <= 4);
			}
			if (this.current_player == 5)
			{
				this.counter2 = 0;
				do
				{
					if (this.goods_p5_array[this.counter2] > 0)
					{
						this.check_for_goods_in_trading_house(this.counter2);
						if (!this.found_good & !this.trading_house_full | this.p5_manned_office & !this.trading_house_full)
						{
							this.goods_to_trade = true;
						}
					}
					Form1 form14 = this;
					form14.counter2 = checked(form14.counter2 + 1);
				}
				while (this.counter2 <= 4);
			}
		}

		public void determine_governor()
		{
			if (this.first_round)
			{
				this.first_round = false;
			}
			else if (this.player_order_array[checked(this.current_governor + 1)] != 9)
			{
				this.current_governor = checked(this.current_governor + 1);
				this.current_player = this.current_governor;
				this.current_role_chooser = this.current_governor;
				this.reset_for_new_governor();
			}
			else
			{
				this.current_governor = 1;
				this.current_player = this.current_governor;
				this.current_role_chooser = this.current_governor;
				this.reset_for_new_governor();
			}
			this.p1_taken_turn = false;
			this.p2_taken_turn = false;
			this.p3_taken_turn = false;
			this.p4_taken_turn = false;
			this.p5_taken_turn = false;
			this.update_summary();
			if (this.current_governor == 1)
			{
				this.update_all_labels();
				this.infobox_role(string.Concat(this.p1_name, ", you are the new governor. Please choose a role."), "governor");
				this.log_governor();
				this.make_role_buttons_active();
				this.p1_choose_role();
			}
			if (this.current_governor == 2)
			{
				this.update_all_labels();
				this.infobox_role(string.Concat(this.p2_name, " is the new governor."), "governor");
				this.log_governor();
				this.p2_choose_role();
			}
			if (this.current_governor == 3)
			{
				this.update_all_labels();
				this.infobox_role(string.Concat(this.p3_name, " is the new governor."), "governor");
				this.log_governor();
				this.p3_choose_role();
			}
			if (this.current_governor == 4)
			{
				this.update_all_labels();
				this.infobox_role(string.Concat(this.p4_name, " is the new governor."), "governor");
				this.log_governor();
				this.p4_choose_role();
			}
			if (this.current_governor == 5)
			{
				this.update_all_labels();
				this.infobox_role(string.Concat(this.p5_name, " is the new governor."), "governor");
				this.log_governor();
				this.p5_choose_role();
			}
		}

		public void determine_if_afford_large()
		{
			this.build_final_cost = 0;
			this.discount1 = 0;
			this.discount2 = 0;
			if (this.current_player == 2)
			{
				if (this.current_role_chooser != 2)
				{
					this.discount1 = 0;
				}
				else
				{
					this.discount1 = 1;
				}
				if (this.num_manned_quarries_p2 == 0)
				{
					this.discount2 = 0;
				}
				if (this.num_manned_quarries_p2 == 1)
				{
					this.discount2 = 1;
				}
				if (this.num_manned_quarries_p2 == 2)
				{
					this.discount2 = 2;
				}
				if (this.num_manned_quarries_p2 == 3)
				{
					this.discount2 = 3;
				}
				if (this.num_manned_quarries_p2 == 4)
				{
					this.discount2 = 4;
				}
				if (checked(checked(10 - this.discount1) - this.discount2) >= 0)
				{
					this.build_final_cost = checked(checked(10 - this.discount1) - this.discount2);
				}
				else
				{
					this.build_final_cost = 0;
				}
				if (this.gold_p2 < this.build_final_cost)
				{
					this.afford_large = false;
				}
				else
				{
					this.afford_large = true;
				}
			}
			if (this.current_player == 3)
			{
				if (this.current_role_chooser != 3)
				{
					this.discount1 = 0;
				}
				else
				{
					this.discount1 = 1;
				}
				if (this.num_manned_quarries_p3 == 0)
				{
					this.discount2 = 0;
				}
				if (this.num_manned_quarries_p3 == 1)
				{
					this.discount2 = 1;
				}
				if (this.num_manned_quarries_p3 == 2)
				{
					this.discount2 = 2;
				}
				if (this.num_manned_quarries_p3 == 3)
				{
					this.discount2 = 3;
				}
				if (this.num_manned_quarries_p3 == 4)
				{
					this.discount2 = 4;
				}
				if (checked(checked(10 - this.discount1) - this.discount2) >= 0)
				{
					this.build_final_cost = checked(checked(10 - this.discount1) - this.discount2);
				}
				else
				{
					this.build_final_cost = 0;
				}
				if (this.gold_p3 < this.build_final_cost)
				{
					this.afford_large = false;
				}
				else
				{
					this.afford_large = true;
				}
			}
			if (this.current_player == 4)
			{
				if (this.current_role_chooser != 4)
				{
					this.discount1 = 0;
				}
				else
				{
					this.discount1 = 1;
				}
				if (this.num_manned_quarries_p4 == 0)
				{
					this.discount2 = 0;
				}
				if (this.num_manned_quarries_p4 == 1)
				{
					this.discount2 = 1;
				}
				if (this.num_manned_quarries_p4 == 2)
				{
					this.discount2 = 2;
				}
				if (this.num_manned_quarries_p4 == 3)
				{
					this.discount2 = 3;
				}
				if (this.num_manned_quarries_p4 == 4)
				{
					this.discount2 = 4;
				}
				if (checked(checked(10 - this.discount1) - this.discount2) >= 0)
				{
					this.build_final_cost = checked(checked(10 - this.discount1) - this.discount2);
				}
				else
				{
					this.build_final_cost = 0;
				}
				if (this.gold_p4 < this.build_final_cost)
				{
					this.afford_large = false;
				}
				else
				{
					this.afford_large = true;
				}
			}
			if (this.current_player == 5)
			{
				if (this.current_role_chooser != 5)
				{
					this.discount1 = 0;
				}
				else
				{
					this.discount1 = 1;
				}
				if (this.num_manned_quarries_p5 == 0)
				{
					this.discount2 = 0;
				}
				if (this.num_manned_quarries_p5 == 1)
				{
					this.discount2 = 1;
				}
				if (this.num_manned_quarries_p5 == 2)
				{
					this.discount2 = 2;
				}
				if (this.num_manned_quarries_p5 == 3)
				{
					this.discount2 = 3;
				}
				if (this.num_manned_quarries_p5 == 4)
				{
					this.discount2 = 4;
				}
				if (checked(checked(10 - this.discount1) - this.discount2) >= 0)
				{
					this.build_final_cost = checked(checked(10 - this.discount1) - this.discount2);
				}
				else
				{
					this.build_final_cost = 0;
				}
				if (this.gold_p5 < this.build_final_cost)
				{
					this.afford_large = false;
				}
				else
				{
					this.afford_large = true;
				}
			}
		}

		public void determine_if_buyable1(object avail_index, object buildingnumber, object buildbasecost)
		{
			this.buyable = false;
			this.build_final_cost = 0;
			this.discount1 = 0;
			this.discount2 = 0;
			if (this.current_player == 2)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 2)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p2 < 1)
					{
						this.discount2 = 0;
					}
					else
					{
						this.discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p2 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 3)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 3)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p3 < 1)
					{
						this.discount2 = 0;
					}
					else
					{
						this.discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p3 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 4)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 4)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p4 < 1)
					{
						this.discount2 = 0;
					}
					else
					{
						this.discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p4 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 5)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 5)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p5 < 1)
					{
						this.discount2 = 0;
					}
					else
					{
						this.discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p5 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
		}

		public void determine_if_buyable2(object avail_index, object buildingnumber, object buildbasecost)
		{
			this.buyable = false;
			this.build_final_cost = 0;
			this.discount1 = 0;
			this.discount2 = 0;
			if (this.current_player == 2)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 2)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p2 >= 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p2 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p2 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p2 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 3)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 3)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p3 >= 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p3 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p3 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p3 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 4)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 4)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p4 >= 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p4 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p4 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p4 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 5)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 5)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p5 >= 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p5 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p5 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p5 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
		}

		public void determine_if_buyable3(object avail_index, object buildingnumber, object buildbasecost)
		{
			this.buyable = false;
			this.build_final_cost = 0;
			this.discount1 = 0;
			this.discount2 = 0;
			if (this.current_player == 2)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 2)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p2 >= 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p2 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p2 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p2 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p2 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 3)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 3)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p3 >= 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p3 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p3 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p3 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p3 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 4)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 4)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p4 >= 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p4 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p4 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p4 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p4 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 5)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 5)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p5 >= 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p5 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p5 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p5 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p5 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
		}

		public void determine_if_buyable4(object avail_index, object buildingnumber, object buildbasecost)
		{
			this.buyable = false;
			this.build_final_cost = 0;
			this.discount1 = 0;
			this.discount2 = 0;
			if (this.current_player == 2)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 2)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p2 == 4)
					{
						this.discount2 = 4;
					}
					if (this.num_manned_quarries_p2 == 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p2 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p2 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p2 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p2 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 3)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 3)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p3 == 4)
					{
						this.discount2 = 4;
					}
					if (this.num_manned_quarries_p3 == 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p3 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p3 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p3 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p3 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 4)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 4)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p4 == 4)
					{
						this.discount2 = 4;
					}
					if (this.num_manned_quarries_p4 == 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p4 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p4 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p4 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p4 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
			if (this.current_player == 5)
			{
				this.check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(this.buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | this.found_building))
				{
					this.buyable = true;
				}
				else
				{
					this.buyable = false;
				}
				if (this.buyable)
				{
					if (this.current_role_chooser != 5)
					{
						this.discount1 = 0;
					}
					else
					{
						this.discount1 = 1;
					}
					if (this.num_manned_quarries_p5 == 4)
					{
						this.discount2 = 4;
					}
					if (this.num_manned_quarries_p5 == 3)
					{
						this.discount2 = 3;
					}
					if (this.num_manned_quarries_p5 == 2)
					{
						this.discount2 = 2;
					}
					if (this.num_manned_quarries_p5 == 1)
					{
						this.discount2 = 1;
					}
					if (this.num_manned_quarries_p5 == 0)
					{
						this.discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2), 0, false) >= 0)
					{
						this.build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, this.discount1), this.discount2));
					}
					else
					{
						this.build_final_cost = 0;
					}
					if (this.gold_p5 < this.build_final_cost)
					{
						this.buyable = false;
					}
					else
					{
						this.buyable = true;
					}
				}
			}
		}

		public void determine_manned_quarries()
		{
			this.num_manned_quarries_p1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter1] == 61)
				{
					this.num_manned_quarries_p1 = checked(this.num_manned_quarries_p1 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.buildings_form.num_manned_quarries_p1b = this.num_manned_quarries_p1;
			this.num_manned_quarries_p2 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] == 61)
				{
					this.num_manned_quarries_p2 = checked(this.num_manned_quarries_p2 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.num_manned_quarries_p3 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] == 61)
				{
					this.num_manned_quarries_p3 = checked(this.num_manned_quarries_p3 + 1);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.num_manned_quarries_p4 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] == 61)
				{
					this.num_manned_quarries_p4 = checked(this.num_manned_quarries_p4 + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.num_manned_quarries_p5 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] == 61)
				{
					this.num_manned_quarries_p5 = checked(this.num_manned_quarries_p5 + 1);
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 11);
		}

		public void determine_next_role_chooser()
		{
			this.role_has_been_chosen = false;
			if (this.current_player == 1 & !this.role_has_been_chosen)
			{
				this.Text =string.Concat(this.p1_name, "'s Turn");
				this.infobox_nopic(string.Concat("It is now ", this.p1_name, "'s turn to choose a role."));
				this.role_has_been_chosen = true;
				this.p1_choose_role();
			}
			if (this.current_player == 2 & !this.role_has_been_chosen)
			{
				this.Text =string.Concat(this.p2_name, "'s Turn");
				this.infobox_nopic(string.Concat("It is now ", this.p2_name, "'s turn to choose a role."));
				this.role_has_been_chosen = true;
				this.p2_choose_role();
			}
			if (this.current_player == 3 & !this.role_has_been_chosen)
			{
				this.Text =string.Concat(this.p3_name, "'s Turn");
				this.infobox_nopic(string.Concat("It is now ", this.p3_name, "'s turn to choose a role."));
				this.role_has_been_chosen = true;
				this.p3_choose_role();
			}
			if (this.current_player == 4 & !this.role_has_been_chosen)
			{
				this.Text =string.Concat(this.p4_name, "'s Turn");
				this.infobox_nopic(string.Concat("It is now ", this.p4_name, "'s turn to choose a role."));
				this.role_has_been_chosen = true;
				this.p4_choose_role();
			}
			if (this.current_player == 5 & !this.role_has_been_chosen)
			{
				this.Text =string.Concat(this.p5_name, "'s Turn");
				this.infobox_nopic(string.Concat("It is now ", this.p5_name, "'s turn to choose a role."));
				this.role_has_been_chosen = true;
				this.p5_choose_role();
			}
		}

		public void determine_p1_mayor_phase_over()
		{
			this.confirmed = false;
			this.determine_empty_colonists_slots_all();
			if (!(this.idle_colonists_array[1] > 0 & this.empty_colonists_slots_array[1] > 0))
			{
				this.confirmed = true;
			}
			else
			{
				this.confirmed = false;
			}
			if (!this.confirmed)
			{
				this.next_turn_button.Enabled=false;
				this.next_turn_button.Visible = false;
				this.formtitle("p1", "Mayor Phase - Fill more building slots");
			}
			else
			{
				this.next_turn_button.Text = "Done Distributing";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.formtitle("p1", "Mayor Phase - Distribute Colonists or End Your Turn");
			}
		}

		public void determine_p2_mayor_phase_over()
		{
			this.confirmed = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.formtitle("p2", "Mayor Phase - Currently distributing colonists");
			this.determine_empty_colonists_slots_all();
			if (!(this.idle_colonists_array[2] > 0 & this.empty_colonists_slots_array[2] > 0))
			{
				this.confirmed = true;
			}
			else
			{
				this.confirmed = false;
			}
			if (!this.confirmed)
			{
				this.next_turn_button.Enabled=false;
				this.next_turn_button.Visible = false;
				this.formtitle("p2", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				this.formtitle("p2", "Mayor Phase - Done distributing colonists");
				this.infobox_role(string.Concat(this.p2_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_p3_mayor_phase_over()
		{
			this.confirmed = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.formtitle("p3", "Mayor Phase - Currently distributing colonists");
			this.determine_empty_colonists_slots_all();
			if (!(this.idle_colonists_array[3] > 0 & this.empty_colonists_slots_array[3] > 0))
			{
				this.confirmed = true;
			}
			else
			{
				this.confirmed = false;
			}
			if (!this.confirmed)
			{
				this.next_turn_button.Enabled=false;
				this.next_turn_button.Visible = false;
				this.formtitle("p3", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				this.formtitle("p3", "Mayor Phase - Done distributing colonists");
				this.infobox_role(string.Concat(this.p3_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_p4_mayor_phase_over()
		{
			this.confirmed = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.formtitle("p4", "Mayor Phase - Currently distributing colonists");
			this.determine_empty_colonists_slots_all();
			if (!(this.idle_colonists_array[4] > 0 & this.empty_colonists_slots_array[4] > 0))
			{
				this.confirmed = true;
			}
			else
			{
				this.confirmed = false;
			}
			if (!this.confirmed)
			{
				this.next_turn_button.Enabled=false;
				this.next_turn_button.Visible = false;
				this.formtitle("p4", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				this.formtitle("p4", "Mayor Phase - Done distributing colonists");
				this.infobox_role(string.Concat(this.p4_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_p5_mayor_phase_over()
		{
			this.confirmed = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.formtitle("p5", "Mayor Phase - Currently distributing colonists");
			this.determine_empty_colonists_slots_all();
			if (!(this.idle_colonists_array[5] > 0 & this.empty_colonists_slots_array[5] > 0))
			{
				this.confirmed = true;
			}
			else
			{
				this.confirmed = false;
			}
			if (!this.confirmed)
			{
				this.next_turn_button.Enabled=false;
				this.next_turn_button.Visible = false;
				this.formtitle("p5", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				this.formtitle("p5", "Mayor Phase - Done distributing colonists");
				this.infobox_role(string.Concat(this.p5_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_player_order()
		{
			if (this.number_of_players == 3)
			{
				this.player_order_array[4] = 9;
				this.player_order_array[5] = 9;
				if (this.seat_num == 1)
				{
					this.current_governor = 1;
					this.current_player = 1;
					this.current_role_chooser = 1;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 30;
				}
				if (this.seat_num == 2)
				{
					this.current_governor = 3;
					this.current_player = 3;
					this.current_role_chooser = 3;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 30;
					this.plantations_p3_array[0] = 10;
				}
				if (this.seat_num == 3)
				{
					this.current_governor = 2;
					this.current_player = 2;
					this.current_role_chooser = 2;
					this.plantations_p1_array[0] = 30;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 10;
				}
				this.plantations_tilebag_array[10] = 0;
				this.plantations_tilebag_array[11] = 0;
				this.plantations_tilebag_array[12] = 0;
			}
			if (this.number_of_players == 4)
			{
				this.player_order_array[5] = 9;
				if (this.seat_num == 1)
				{
					this.current_governor = 1;
					this.current_player = 1;
					this.current_role_chooser = 1;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 30;
					this.plantations_p4_array[0] = 30;
				}
				if (this.seat_num == 2)
				{
					this.current_governor = 4;
					this.current_player = 4;
					this.current_role_chooser = 4;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 30;
					this.plantations_p3_array[0] = 30;
					this.plantations_p4_array[0] = 10;
				}
				if (this.seat_num == 3)
				{
					this.current_governor = 3;
					this.current_player = 3;
					this.current_role_chooser = 3;
					this.plantations_p1_array[0] = 30;
					this.plantations_p2_array[0] = 30;
					this.plantations_p3_array[0] = 10;
					this.plantations_p4_array[0] = 10;
				}
				if (this.seat_num == 4)
				{
					this.current_governor = 2;
					this.current_player = 2;
					this.current_role_chooser = 2;
					this.plantations_p1_array[0] = 30;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 10;
					this.plantations_p4_array[0] = 30;
				}
				this.plantations_tilebag_array[10] = 0;
				this.plantations_tilebag_array[11] = 0;
				this.plantations_tilebag_array[12] = 0;
				this.plantations_tilebag_array[13] = 0;
			}
			if (this.number_of_players == 5)
			{
				if (this.seat_num == 1)
				{
					this.current_governor = 1;
					this.current_player = 1;
					this.current_role_chooser = 1;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 10;
					this.plantations_p4_array[0] = 30;
					this.plantations_p5_array[0] = 30;
				}
				if (this.seat_num == 2)
				{
					this.current_governor = 5;
					this.current_player = 5;
					this.current_role_chooser = 5;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 30;
					this.plantations_p4_array[0] = 30;
					this.plantations_p5_array[0] = 10;
				}
				if (this.seat_num == 3)
				{
					this.current_governor = 4;
					this.current_player = 4;
					this.current_role_chooser = 4;
					this.plantations_p1_array[0] = 10;
					this.plantations_p2_array[0] = 30;
					this.plantations_p3_array[0] = 30;
					this.plantations_p4_array[0] = 10;
					this.plantations_p5_array[0] = 10;
				}
				if (this.seat_num == 4)
				{
					this.current_governor = 3;
					this.current_player = 3;
					this.current_role_chooser = 3;
					this.plantations_p1_array[0] = 30;
					this.plantations_p2_array[0] = 30;
					this.plantations_p3_array[0] = 10;
					this.plantations_p4_array[0] = 10;
					this.plantations_p5_array[0] = 10;
				}
				if (this.seat_num == 5)
				{
					this.current_governor = 2;
					this.current_player = 2;
					this.current_role_chooser = 2;
					this.plantations_p1_array[0] = 30;
					this.plantations_p2_array[0] = 10;
					this.plantations_p3_array[0] = 10;
					this.plantations_p4_array[0] = 10;
					this.plantations_p5_array[0] = 30;
				}
				this.plantations_tilebag_array[9] = 0;
				this.plantations_tilebag_array[10] = 0;
				this.plantations_tilebag_array[11] = 0;
				this.plantations_tilebag_array[12] = 0;
				this.plantations_tilebag_array[13] = 0;
			}
		}

		public void determine_production()
		{
			this.determine_production_p1();
			this.determine_production_p2();
			this.determine_production_p3();
			this.determine_production_p4();
			this.determine_production_p5();
			this.counter1 = 0;
			do
			{
				this.goods_this_turn_p1_array[this.counter1] = 0;
				this.goods_this_turn_p2_array[this.counter1] = 0;
				this.goods_this_turn_p3_array[this.counter1] = 0;
				this.goods_this_turn_p4_array[this.counter1] = 0;
				this.goods_this_turn_p5_array[this.counter1] = 0;
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.number_of_players == 3)
			{
				if (this.number_of_players == 3 & this.current_role_chooser == 1)
				{
					this.give_goods_to_p1();
					this.give_goods_to_p2();
					this.give_goods_to_p3();
				}
				if (this.number_of_players == 3 & this.current_role_chooser == 2)
				{
					this.give_goods_to_p2();
					this.give_goods_to_p3();
					this.give_goods_to_p1();
				}
				if (this.number_of_players == 3 & this.current_role_chooser == 3)
				{
					this.give_goods_to_p3();
					this.give_goods_to_p1();
					this.give_goods_to_p2();
				}
			}
			if (this.number_of_players == 4)
			{
				if (this.number_of_players == 4 & this.current_role_chooser == 1)
				{
					this.give_goods_to_p1();
					this.give_goods_to_p2();
					this.give_goods_to_p3();
					this.give_goods_to_p4();
				}
				if (this.number_of_players == 4 & this.current_role_chooser == 2)
				{
					this.give_goods_to_p2();
					this.give_goods_to_p3();
					this.give_goods_to_p4();
					this.give_goods_to_p1();
				}
				if (this.number_of_players == 4 & this.current_role_chooser == 3)
				{
					this.give_goods_to_p3();
					this.give_goods_to_p4();
					this.give_goods_to_p1();
					this.give_goods_to_p2();
				}
				if (this.number_of_players == 4 & this.current_role_chooser == 4)
				{
					this.give_goods_to_p4();
					this.give_goods_to_p1();
					this.give_goods_to_p2();
					this.give_goods_to_p3();
				}
			}
			if (this.number_of_players == 5)
			{
				if (this.number_of_players == 5 & this.current_role_chooser == 1)
				{
					this.give_goods_to_p1();
					this.give_goods_to_p2();
					this.give_goods_to_p3();
					this.give_goods_to_p4();
					this.give_goods_to_p5();
				}
				if (this.number_of_players == 5 & this.current_role_chooser == 2)
				{
					this.give_goods_to_p2();
					this.give_goods_to_p3();
					this.give_goods_to_p4();
					this.give_goods_to_p5();
					this.give_goods_to_p1();
				}
				if (this.number_of_players == 5 & this.current_role_chooser == 3)
				{
					this.give_goods_to_p3();
					this.give_goods_to_p4();
					this.give_goods_to_p5();
					this.give_goods_to_p1();
					this.give_goods_to_p2();
				}
				if (this.number_of_players == 5 & this.current_role_chooser == 4)
				{
					this.give_goods_to_p4();
					this.give_goods_to_p5();
					this.give_goods_to_p1();
					this.give_goods_to_p2();
					this.give_goods_to_p3();
				}
				if (this.number_of_players == 5 & this.current_role_chooser == 5)
				{
					this.give_goods_to_p5();
					this.give_goods_to_p1();
					this.give_goods_to_p2();
					this.give_goods_to_p3();
					this.give_goods_to_p4();
				}
			}
			this.craftsman1_form.p1_name_label.Text =this.p1_name;
			this.craftsman1_form.p2_name_label.Text =this.p2_name;
			this.craftsman1_form.p3_name_label.Text =this.p3_name;
			this.craftsman1_form.p4_name_label.Text =this.p4_name;
			this.craftsman1_form.p5_name_label.Text =this.p5_name;
			this.craftsman1_form.PictureBox1.Visible = true;
			this.craftsman1_form.PictureBox2.Visible = true;
			this.craftsman1_form.p1_indigo_label.Text =StringType.FromInteger(this.goods_this_turn_p1_array[0]);
			this.craftsman1_form.p1_sugar_label.Text =StringType.FromInteger(this.goods_this_turn_p1_array[1]);
			this.craftsman1_form.p1_corn_label.Text =StringType.FromInteger(this.goods_this_turn_p1_array[2]);
			this.craftsman1_form.p1_tobacco_label.Text =StringType.FromInteger(this.goods_this_turn_p1_array[3]);
			this.craftsman1_form.p1_coffee_label.Text =StringType.FromInteger(this.goods_this_turn_p1_array[4]);
			this.craftsman1_form.p2_indigo_label.Text =StringType.FromInteger(this.goods_this_turn_p2_array[0]);
			this.craftsman1_form.p2_sugar_label.Text =StringType.FromInteger(this.goods_this_turn_p2_array[1]);
			this.craftsman1_form.p2_corn_label.Text =StringType.FromInteger(this.goods_this_turn_p2_array[2]);
			this.craftsman1_form.p2_tobacco_label.Text =StringType.FromInteger(this.goods_this_turn_p2_array[3]);
			this.craftsman1_form.p2_coffee_label.Text =StringType.FromInteger(this.goods_this_turn_p2_array[4]);
			this.craftsman1_form.p3_indigo_label.Text =StringType.FromInteger(this.goods_this_turn_p3_array[0]);
			this.craftsman1_form.p3_sugar_label.Text =StringType.FromInteger(this.goods_this_turn_p3_array[1]);
			this.craftsman1_form.p3_corn_label.Text =StringType.FromInteger(this.goods_this_turn_p3_array[2]);
			this.craftsman1_form.p3_tobacco_label.Text =StringType.FromInteger(this.goods_this_turn_p3_array[3]);
			this.craftsman1_form.p3_coffee_label.Text =StringType.FromInteger(this.goods_this_turn_p3_array[4]);
			if (this.number_of_players >= 4)
			{
				this.craftsman1_form.PictureBox1.Visible = false;
				this.craftsman1_form.p4_indigo_label.Text =StringType.FromInteger(this.goods_this_turn_p4_array[0]);
				this.craftsman1_form.p4_sugar_label.Text =StringType.FromInteger(this.goods_this_turn_p4_array[1]);
				this.craftsman1_form.p4_corn_label.Text =StringType.FromInteger(this.goods_this_turn_p4_array[2]);
				this.craftsman1_form.p4_tobacco_label.Text =StringType.FromInteger(this.goods_this_turn_p4_array[3]);
				this.craftsman1_form.p4_coffee_label.Text =StringType.FromInteger(this.goods_this_turn_p4_array[4]);
			}
			if (this.number_of_players == 5)
			{
				this.craftsman1_form.PictureBox2.Visible = false;
				this.craftsman1_form.p5_indigo_label.Text =StringType.FromInteger(this.goods_this_turn_p5_array[0]);
				this.craftsman1_form.p5_sugar_label.Text =StringType.FromInteger(this.goods_this_turn_p5_array[1]);
				this.craftsman1_form.p5_corn_label.Text =StringType.FromInteger(this.goods_this_turn_p5_array[2]);
				this.craftsman1_form.p5_tobacco_label.Text =StringType.FromInteger(this.goods_this_turn_p5_array[3]);
				this.craftsman1_form.p5_coffee_label.Text =StringType.FromInteger(this.goods_this_turn_p5_array[4]);
			}
			this.craftsman1_form.p1_craftsman_label.Visible = false;
			this.craftsman1_form.p2_craftsman_label.Visible = false;
			this.craftsman1_form.p3_craftsman_label.Visible = false;
			this.craftsman1_form.p4_craftsman_label.Visible = false;
			this.craftsman1_form.p5_craftsman_label.Visible = false;
			if (this.current_role_chooser == 1)
			{
				this.craftsman1_form.p1_craftsman_label.Visible = true;
			}
			if (this.current_role_chooser == 2)
			{
				this.craftsman1_form.p2_craftsman_label.Visible = true;
			}
			if (this.current_role_chooser == 3)
			{
				this.craftsman1_form.p3_craftsman_label.Visible = true;
			}
			if (this.current_role_chooser == 4)
			{
				this.craftsman1_form.p4_craftsman_label.Visible = true;
			}
			if (this.current_role_chooser == 5)
			{
				this.craftsman1_form.p5_craftsman_label.Visible = true;
			}
			this.update_all_labels();
			this.craftsman1_form.ShowDialog();
			this.determine_factory_production();
		}

		public void determine_production_p1()
		{
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter3] == 11)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				this.tempstring = Conversion.Str(this.plantations_p1_array[this.counter3]);
				if (this.buildings_p1_array[this.counter3] == 111)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p1_array[this.counter3] == 211)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p1_array[this.counter3] == 212)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p1_array[this.counter3] == 213)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p1_array[0] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p1_array[0] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter3] == 21)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter3] == 121)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p1_array[this.counter3] == 221)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p1_array[this.counter3] == 222)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p1_array[this.counter3] == 223)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p1_array[1] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p1_array[1] = this.counter2;
			}
			this.counter1 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter3] == 31)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.goods_ability_p1_array[2] = this.counter1;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter3] == 41)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter3] == 311)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p1_array[this.counter3] == 312)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p1_array[this.counter3] == 313)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p1_array[3] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p1_array[3] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter3] == 51)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter3] == 321)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p1_array[this.counter3] == 322)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p1_array[4] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p1_array[4] = this.counter2;
			}
		}

		public void determine_production_p2()
		{
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter3] == 11)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				this.tempstring = Conversion.Str(this.plantations_p2_array[this.counter3]);
				if (this.buildings_p2_array[this.counter3] == 111)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p2_array[this.counter3] == 211)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p2_array[this.counter3] == 212)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p2_array[this.counter3] == 213)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p2_array[0] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p2_array[0] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter3] == 21)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter3] == 121)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p2_array[this.counter3] == 221)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p2_array[this.counter3] == 222)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p2_array[this.counter3] == 223)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p2_array[1] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p2_array[1] = this.counter2;
			}
			this.counter1 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter3] == 31)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.goods_ability_p2_array[2] = this.counter1;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter3] == 41)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter3] == 311)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p2_array[this.counter3] == 312)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p2_array[this.counter3] == 313)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p2_array[3] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p2_array[3] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter3] == 51)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter3] == 321)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p2_array[this.counter3] == 322)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p2_array[4] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p2_array[4] = this.counter2;
			}
			this.counter1 = 0;
			do
			{
				if (this.goods_ability_p2_array[this.counter1] > 0)
				{
					this.goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void determine_production_p3()
		{
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter3] == 11)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				this.tempstring = Conversion.Str(this.plantations_p3_array[this.counter3]);
				if (this.buildings_p3_array[this.counter3] == 111)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p3_array[this.counter3] == 211)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p3_array[this.counter3] == 212)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p3_array[this.counter3] == 213)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p3_array[0] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p3_array[0] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter3] == 21)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter3] == 121)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p3_array[this.counter3] == 221)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p3_array[this.counter3] == 222)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p3_array[this.counter3] == 223)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p3_array[1] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p3_array[1] = this.counter2;
			}
			this.counter1 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter3] == 31)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.goods_ability_p3_array[2] = this.counter1;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter3] == 41)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter3] == 311)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p3_array[this.counter3] == 312)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p3_array[this.counter3] == 313)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p3_array[3] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p3_array[3] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter3] == 51)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter3] == 321)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p3_array[this.counter3] == 322)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p3_array[4] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p3_array[4] = this.counter2;
			}
			this.counter1 = 0;
			do
			{
				if (this.goods_ability_p3_array[this.counter1] > 0)
				{
					this.goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void determine_production_p4()
		{
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter3] == 11)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				this.tempstring = Conversion.Str(this.plantations_p4_array[this.counter3]);
				if (this.buildings_p4_array[this.counter3] == 111)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p4_array[this.counter3] == 211)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p4_array[this.counter3] == 212)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p4_array[this.counter3] == 213)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p4_array[0] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p4_array[0] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter3] == 21)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter3] == 121)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p4_array[this.counter3] == 221)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p4_array[this.counter3] == 222)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p4_array[this.counter3] == 223)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p4_array[1] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p4_array[1] = this.counter2;
			}
			this.counter1 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter3] == 31)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.goods_ability_p4_array[2] = this.counter1;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter3] == 41)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter3] == 311)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p4_array[this.counter3] == 312)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p4_array[this.counter3] == 313)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p4_array[3] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p4_array[3] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter3] == 51)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter3] == 321)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p4_array[this.counter3] == 322)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p4_array[4] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p4_array[4] = this.counter2;
			}
			this.counter1 = 0;
			do
			{
				if (this.goods_ability_p4_array[this.counter1] > 0)
				{
					this.goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void determine_production_p5()
		{
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter3] == 11)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				this.tempstring = Conversion.Str(this.plantations_p5_array[this.counter3]);
				if (this.buildings_p5_array[this.counter3] == 111)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p5_array[this.counter3] == 211)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p5_array[this.counter3] == 212)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p5_array[this.counter3] == 213)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p5_array[0] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p5_array[0] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter3] == 21)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter3] == 121)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p5_array[this.counter3] == 221)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p5_array[this.counter3] == 222)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p5_array[this.counter3] == 223)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p5_array[1] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p5_array[1] = this.counter2;
			}
			this.counter1 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter3] == 31)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.goods_ability_p5_array[2] = this.counter1;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter3] == 41)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter3] == 311)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p5_array[this.counter3] == 312)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				if (this.buildings_p5_array[this.counter3] == 313)
				{
					this.counter2 = checked(this.counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p5_array[3] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p5_array[3] = this.counter2;
			}
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter3] == 51)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (this.counter3 <= 11);
			this.counter3 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter3] == 321)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.buildings_p5_array[this.counter3] == 322)
				{
					this.counter2 = checked(this.counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (this.counter3 <= 11);
			if (this.counter1 <= this.counter2)
			{
				this.goods_ability_p5_array[4] = this.counter1;
			}
			if (this.counter1 > this.counter2)
			{
				this.goods_ability_p5_array[4] = this.counter2;
			}
			this.counter1 = 0;
			do
			{
				if (this.goods_ability_p5_array[this.counter1] > 0)
				{
					this.goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void determine_setup_parameters()
		{
			this.turn_number = 0;
			this.number_of_players = this.setup_form.setup_num_players;
			this.seat_num = this.setup_form.setup_seat;
			this.p1_name = this.setup_form.name_human.Text;
			this.p2_name = this.setup_form.name_ai1.Text;
			this.p3_name = this.setup_form.name_ai2.Text;
			this.p4_name = this.setup_form.name_ai3.Text;
			this.p5_name = this.setup_form.name_ai4.Text;
			this.determine_player_order();
			if (this.number_of_players == 3)
			{
				this.vp_bank_num = 75;
				this.colonists_bank_num = 55;
				this.colonists_ship_num = 3;
				this.gold_p1 = 2;
				this.gold_p2 = 2;
				this.gold_p3 = 2;
				this.shipa_array[0] = 4;
				this.shipb_array[0] = 5;
				this.shipc_array[0] = 6;
				this.role_prospector1_pic.Visible = false;
				this.role_prospector2_pic.Visible = false;
			}
			if (this.number_of_players == 4)
			{
				this.vp_bank_num = 100;
				this.colonists_bank_num = 75;
				this.colonists_ship_num = 4;
				this.gold_p1 = 3;
				this.gold_p2 = 3;
				this.gold_p3 = 3;
				this.gold_p4 = 3;
				this.shipa_array[0] = 5;
				this.shipb_array[0] = 6;
				this.shipc_array[0] = 7;
				this.role_prospector1_pic.Visible = true;
				this.role_prospector2_pic.Visible = false;
			}
			if (this.number_of_players == 5)
			{
				this.vp_bank_num = 122;
				this.colonists_bank_num = 95;
				this.colonists_ship_num = 5;
				this.gold_p1 = 4;
				this.gold_p2 = 4;
				this.gold_p3 = 4;
				this.gold_p4 = 4;
				this.gold_p5 = 4;
				this.shipa_array[0] = 6;
				this.shipb_array[0] = 7;
				this.shipc_array[0] = 8;
				this.role_prospector1_pic.Visible = true;
				this.role_prospector2_pic.Visible = true;
			}
			this.determine_ship_orientation();
			this.buildings_form.dialog_box_OK_timerb = this.dialog_box_OK_timer;
		}

		public void determine_ship_orientation()
		{
			Point point;
			if (this.number_of_players == 3)
			{
				this.shipa_pic.Image = Image.FromFile("pic\\ship4.bmp");
				this.shipb_pic.Image = Image.FromFile("pic\\ship5.bmp");
				this.shipc_pic.Image = Image.FromFile("pic\\ship6.bmp");
				PictureBox shipaSlot1 = this.shipa_slot1;
				point = new Point(512, 116);
				shipaSlot1.Location = point;
				PictureBox shipaSlot2 = this.shipa_slot2;
				point = new Point(544, 116);
				shipaSlot2.Location = point;
				PictureBox shipaSlot3 = this.shipa_slot3;
				point = new Point(512, 148);
				shipaSlot3.Location = point;
				PictureBox shipaSlot4 = this.shipa_slot4;
				point = new Point(544, 148);
				shipaSlot4.Location = point;
				PictureBox shipbSlot1 = this.shipb_slot1;
				point = new Point(600, 104);
				shipbSlot1.Location = point;
				PictureBox shipbSlot2 = this.shipb_slot2;
				point = new Point(630, 104);
				shipbSlot2.Location = point;
				PictureBox shipbSlot3 = this.shipb_slot3;
				point = new Point(600, 134);
				shipbSlot3.Location = point;
				PictureBox shipbSlot4 = this.shipb_slot4;
				point = new Point(630, 134);
				shipbSlot4.Location = point;
				PictureBox shipbSlot5 = this.shipb_slot5;
				point = new Point(614, 166);
				shipbSlot5.Location = point;
				PictureBox shipcSlot1 = this.shipc_slot1;
				point = new Point(692, 106);
				shipcSlot1.Location = point;
				PictureBox shipcSlot2 = this.shipc_slot2;
				point = new Point(724, 106);
				shipcSlot2.Location = point;
				PictureBox shipcSlot3 = this.shipc_slot3;
				point = new Point(692, 138);
				shipcSlot3.Location = point;
				PictureBox shipcSlot4 = this.shipc_slot4;
				point = new Point(724, 138);
				shipcSlot4.Location = point;
				PictureBox shipcSlot5 = this.shipc_slot5;
				point = new Point(692, 168);
				shipcSlot5.Location = point;
				PictureBox shipcSlot6 = this.shipc_slot6;
				point = new Point(724, 168);
				shipcSlot6.Location = point;
			}
			if (this.number_of_players == 4)
			{
				this.shipa_pic.Image = Image.FromFile("pic\\ship5.bmp");
				this.shipb_pic.Image = Image.FromFile("pic\\ship6.bmp");
				this.shipc_pic.Image = Image.FromFile("pic\\ship7.bmp");
				PictureBox pictureBox = this.shipa_slot1;
				point = new Point(512, 100);
				pictureBox.Location = point;
				PictureBox shipaSlot21 = this.shipa_slot2;
				point = new Point(544, 100);
				shipaSlot21.Location = point;
				PictureBox shipaSlot31 = this.shipa_slot3;
				point = new Point(512, 132);
				shipaSlot31.Location = point;
				PictureBox shipaSlot41 = this.shipa_slot4;
				point = new Point(544, 132);
				shipaSlot41.Location = point;
				PictureBox shipaSlot5 = this.shipa_slot5;
				point = new Point(528, 164);
				shipaSlot5.Location = point;
				PictureBox shipbSlot11 = this.shipb_slot1;
				point = new Point(600, 108);
				shipbSlot11.Location = point;
				PictureBox shipbSlot21 = this.shipb_slot2;
				point = new Point(630, 108);
				shipbSlot21.Location = point;
				PictureBox shipbSlot31 = this.shipb_slot3;
				point = new Point(600, 138);
				shipbSlot31.Location = point;
				PictureBox shipbSlot41 = this.shipb_slot4;
				point = new Point(630, 138);
				shipbSlot41.Location = point;
				PictureBox shipbSlot51 = this.shipb_slot5;
				point = new Point(600, 168);
				shipbSlot51.Location = point;
				PictureBox shipbSlot6 = this.shipb_slot6;
				point = new Point(630, 168);
				shipbSlot6.Location = point;
				PictureBox shipcSlot11 = this.shipc_slot1;
				point = new Point(692, 94);
				shipcSlot11.Location = point;
				PictureBox shipcSlot21 = this.shipc_slot2;
				point = new Point(724, 94);
				shipcSlot21.Location = point;
				PictureBox shipcSlot31 = this.shipc_slot3;
				point = new Point(692, 126);
				shipcSlot31.Location = point;
				PictureBox shipcSlot41 = this.shipc_slot4;
				point = new Point(724, 126);
				shipcSlot41.Location = point;
				PictureBox shipcSlot51 = this.shipc_slot5;
				point = new Point(692, 156);
				shipcSlot51.Location = point;
				PictureBox shipcSlot61 = this.shipc_slot6;
				point = new Point(724, 156);
				shipcSlot61.Location = point;
				PictureBox shipcSlot7 = this.shipc_slot7;
				point = new Point(708, 188);
				shipcSlot7.Location = point;
			}
			if (this.number_of_players == 5)
			{
				this.shipa_pic.Image = Image.FromFile("pic\\ship6.bmp");
				this.shipb_pic.Image = Image.FromFile("pic\\ship7.bmp");
				this.shipc_pic.Image = Image.FromFile("pic\\ship8.bmp");
				PictureBox shipaSlot11 = this.shipa_slot1;
				point = new Point(512, 106);
				shipaSlot11.Location = point;
				PictureBox pictureBox1 = this.shipa_slot2;
				point = new Point(544, 106);
				pictureBox1.Location = point;
				PictureBox shipaSlot32 = this.shipa_slot3;
				point = new Point(512, 138);
				shipaSlot32.Location = point;
				PictureBox shipaSlot42 = this.shipa_slot4;
				point = new Point(544, 138);
				shipaSlot42.Location = point;
				PictureBox shipaSlot51 = this.shipa_slot5;
				point = new Point(512, 170);
				shipaSlot51.Location = point;
				PictureBox shipaSlot6 = this.shipa_slot6;
				point = new Point(544, 170);
				shipaSlot6.Location = point;
				PictureBox shipbSlot12 = this.shipb_slot1;
				point = new Point(600, 92);
				shipbSlot12.Location = point;
				PictureBox shipbSlot22 = this.shipb_slot2;
				point = new Point(630, 92);
				shipbSlot22.Location = point;
				PictureBox shipbSlot32 = this.shipb_slot3;
				point = new Point(600, 122);
				shipbSlot32.Location = point;
				PictureBox shipbSlot42 = this.shipb_slot4;
				point = new Point(630, 122);
				shipbSlot42.Location = point;
				PictureBox shipbSlot52 = this.shipb_slot5;
				point = new Point(600, 152);
				shipbSlot52.Location = point;
				PictureBox shipbSlot61 = this.shipb_slot6;
				point = new Point(630, 152);
				shipbSlot61.Location = point;
				PictureBox shipbSlot7 = this.shipb_slot7;
				point = new Point(616, 184);
				shipbSlot7.Location = point;
				PictureBox shipcSlot12 = this.shipc_slot1;
				point = new Point(692, 94);
				shipcSlot12.Location = point;
				PictureBox shipcSlot22 = this.shipc_slot2;
				point = new Point(724, 94);
				shipcSlot22.Location = point;
				PictureBox shipcSlot32 = this.shipc_slot3;
				point = new Point(692, 126);
				shipcSlot32.Location = point;
				PictureBox shipcSlot42 = this.shipc_slot4;
				point = new Point(724, 126);
				shipcSlot42.Location = point;
				PictureBox shipcSlot52 = this.shipc_slot5;
				point = new Point(692, 156);
				shipcSlot52.Location = point;
				PictureBox shipcSlot62 = this.shipc_slot6;
				point = new Point(724, 156);
				shipcSlot62.Location = point;
				PictureBox shipcSlot71 = this.shipc_slot7;
				point = new Point(692, 186);
				shipcSlot71.Location = point;
				PictureBox shipcSlot8 = this.shipc_slot8;
				point = new Point(724, 186);
				shipcSlot8.Location = point;
			}
		}

		public void determine_where_to_build_large_p2()
		{
			this.large_build_spot = 99;
			this.counter1 = 0;
			this.finished = false;
			while (!(this.finished | this.counter1 == 12))
			{
				if (this.buildings_p2_array[this.counter1] != 0)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					if (this.counter1 == 0)
					{
						this.large_build_spot = 12;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[13] = 999;
						this.finished = true;
					}
					if (this.counter1 == 1)
					{
						this.large_build_spot = 13;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[12] = 999;
						this.finished = true;
					}
					if (this.counter1 == 3)
					{
						this.large_build_spot = 14;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[15] = 999;
						this.finished = true;
					}
					if (this.counter1 == 4)
					{
						this.large_build_spot = 15;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[14] = 999;
						this.finished = true;
					}
					if (this.counter1 == 6)
					{
						this.large_build_spot = 16;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[17] = 999;
						this.finished = true;
					}
					if (this.counter1 == 7)
					{
						this.large_build_spot = 17;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[16] = 999;
						this.finished = true;
					}
					if (this.counter1 == 9)
					{
						this.large_build_spot = 18;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[19] = 999;
						this.finished = true;
					}
					if (this.counter1 == 10)
					{
						this.large_build_spot = 19;
						this.buildings_p2_array[this.counter1] = 999;
						this.buildings_p2_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p2_array[18] = 999;
						this.finished = true;
					}
					this.counter1 = checked(this.counter1 + 1);
				}
			}
		}

		public void determine_where_to_build_large_p3()
		{
			this.large_build_spot = 99;
			this.counter1 = 0;
			this.finished = false;
			while (!(this.finished | this.counter1 == 12))
			{
				if (this.buildings_p3_array[this.counter1] != 0)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					if (this.counter1 == 0)
					{
						this.large_build_spot = 12;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[13] = 999;
						this.finished = true;
					}
					if (this.counter1 == 1)
					{
						this.large_build_spot = 13;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[12] = 999;
						this.finished = true;
					}
					if (this.counter1 == 3)
					{
						this.large_build_spot = 14;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[15] = 999;
						this.finished = true;
					}
					if (this.counter1 == 4)
					{
						this.large_build_spot = 15;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[14] = 999;
						this.finished = true;
					}
					if (this.counter1 == 6)
					{
						this.large_build_spot = 16;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[17] = 999;
						this.finished = true;
					}
					if (this.counter1 == 7)
					{
						this.large_build_spot = 17;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[16] = 999;
						this.finished = true;
					}
					if (this.counter1 == 9)
					{
						this.large_build_spot = 18;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[19] = 999;
						this.finished = true;
					}
					if (this.counter1 == 10)
					{
						this.large_build_spot = 19;
						this.buildings_p3_array[this.counter1] = 999;
						this.buildings_p3_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p3_array[18] = 999;
						this.finished = true;
					}
					this.counter1 = checked(this.counter1 + 1);
				}
			}
		}

		public void determine_where_to_build_large_p4()
		{
			this.large_build_spot = 99;
			this.counter1 = 0;
			this.finished = false;
			while (!(this.finished | this.counter1 == 12))
			{
				if (this.buildings_p4_array[this.counter1] != 0)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					if (this.counter1 == 0)
					{
						this.large_build_spot = 12;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[13] = 999;
						this.finished = true;
					}
					if (this.counter1 == 1)
					{
						this.large_build_spot = 13;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[12] = 999;
						this.finished = true;
					}
					if (this.counter1 == 3)
					{
						this.large_build_spot = 14;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[15] = 999;
						this.finished = true;
					}
					if (this.counter1 == 4)
					{
						this.large_build_spot = 15;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[14] = 999;
						this.finished = true;
					}
					if (this.counter1 == 6)
					{
						this.large_build_spot = 16;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[17] = 999;
						this.finished = true;
					}
					if (this.counter1 == 7)
					{
						this.large_build_spot = 17;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[16] = 999;
						this.finished = true;
					}
					if (this.counter1 == 9)
					{
						this.large_build_spot = 18;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[19] = 999;
						this.finished = true;
					}
					if (this.counter1 == 10)
					{
						this.large_build_spot = 19;
						this.buildings_p4_array[this.counter1] = 999;
						this.buildings_p4_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p4_array[18] = 999;
						this.finished = true;
					}
					this.counter1 = checked(this.counter1 + 1);
				}
			}
		}

		public void determine_where_to_build_large_p5()
		{
			this.large_build_spot = 99;
			this.counter1 = 0;
			this.finished = false;
			while (!(this.finished | this.counter1 == 12))
			{
				if (this.buildings_p5_array[this.counter1] != 0)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					if (this.counter1 == 0)
					{
						this.large_build_spot = 12;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[13] = 999;
						this.finished = true;
					}
					if (this.counter1 == 1)
					{
						this.large_build_spot = 13;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[12] = 999;
						this.finished = true;
					}
					if (this.counter1 == 3)
					{
						this.large_build_spot = 14;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[15] = 999;
						this.finished = true;
					}
					if (this.counter1 == 4)
					{
						this.large_build_spot = 15;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[14] = 999;
						this.finished = true;
					}
					if (this.counter1 == 6)
					{
						this.large_build_spot = 16;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[17] = 999;
						this.finished = true;
					}
					if (this.counter1 == 7)
					{
						this.large_build_spot = 17;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[16] = 999;
						this.finished = true;
					}
					if (this.counter1 == 9)
					{
						this.large_build_spot = 18;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[19] = 999;
						this.finished = true;
					}
					if (this.counter1 == 10)
					{
						this.large_build_spot = 19;
						this.buildings_p5_array[this.counter1] = 999;
						this.buildings_p5_array[checked(this.counter1 + 1)] = 999;
						this.buildings_p5_array[18] = 999;
						this.finished = true;
					}
					this.counter1 = checked(this.counter1 + 1);
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && this.components != null)
			{
				this.components.Dispose();
			}
			base.Dispose(disposing);
		}

		public void distribute_new_colonists()
		{
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				this.idle_colonists_this_turn_array[this.counter1] = 0;
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 5);
			this.mayor1_form.p1_name_label.Text =this.p1_name;
			this.mayor1_form.p2_name_label.Text =this.p2_name;
			this.mayor1_form.p3_name_label.Text =this.p3_name;
			this.mayor1_form.p4_name_label.Text =this.p4_name;
			this.mayor1_form.p5_name_label.Text =this.p5_name;
			this.mayor1_form.p1_mayor_label.Visible = false;
			this.mayor1_form.p2_mayor_label.Visible = false;
			this.mayor1_form.p3_mayor_label.Visible = false;
			this.mayor1_form.p4_mayor_label.Visible = false;
			this.mayor1_form.p5_mayor_label.Visible = false;
			if (this.current_role_chooser == 1)
			{
				this.mayor1_form.p1_mayor_label.Visible = true;
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.idle_colonists_this_turn_array[1] = checked(this.idle_colonists_this_turn_array[1] + 1);
					this.idle_colonists_array[1] = checked(this.idle_colonists_array[1] + 1);
					this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				}
			}
			if (this.current_role_chooser == 2)
			{
				this.mayor1_form.p2_mayor_label.Visible = true;
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.idle_colonists_this_turn_array[2] = checked(this.idle_colonists_this_turn_array[2] + 1);
					this.idle_colonists_array[2] = checked(this.idle_colonists_array[2] + 1);
					this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				}
			}
			if (this.current_role_chooser == 3)
			{
				this.mayor1_form.p3_mayor_label.Visible = true;
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.idle_colonists_this_turn_array[3] = checked(this.idle_colonists_this_turn_array[3] + 1);
					this.idle_colonists_array[3] = checked(this.idle_colonists_array[3] + 1);
					this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				}
			}
			if (this.current_role_chooser == 4)
			{
				this.mayor1_form.p4_mayor_label.Visible = true;
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.idle_colonists_this_turn_array[4] = checked(this.idle_colonists_this_turn_array[4] + 1);
					this.idle_colonists_array[4] = checked(this.idle_colonists_array[4] + 1);
					this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				}
			}
			if (this.current_role_chooser == 5)
			{
				this.mayor1_form.p5_mayor_label.Visible = true;
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.idle_colonists_this_turn_array[5] = checked(this.idle_colonists_this_turn_array[5] + 1);
					this.idle_colonists_array[5] = checked(this.idle_colonists_array[5] + 1);
					this.colonists_array[5] = checked(this.colonists_array[5] + 1);
				}
			}
			this.counter1 = this.current_player;
			while (this.colonists_ship_num != 0)
			{
				this.idle_colonists_this_turn_array[this.counter1] = checked(this.idle_colonists_this_turn_array[this.counter1] + 1);
				this.idle_colonists_array[this.counter1] = checked(this.idle_colonists_array[this.counter1] + 1);
				this.colonists_array[this.counter1] = checked(this.colonists_array[this.counter1] + 1);
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				if (this.player_order_array[checked(this.counter1 + 1)] != 9)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					this.counter1 = 1;
				}
			}
			this.mayor1_form.p1_total_label.Text =StringType.FromInteger(this.idle_colonists_this_turn_array[1]);
			this.mayor1_form.p2_total_label.Text =StringType.FromInteger(this.idle_colonists_this_turn_array[2]);
			this.mayor1_form.p3_total_label.Text =StringType.FromInteger(this.idle_colonists_this_turn_array[3]);
			this.mayor1_form.p4_total_label.Text =StringType.FromInteger(this.idle_colonists_this_turn_array[4]);
			this.mayor1_form.p5_total_label.Text =StringType.FromInteger(this.idle_colonists_this_turn_array[5]);
			if (this.number_of_players == 3)
			{
				this.mayor1_form.p4_name_label.Visible = false;
				this.mayor1_form.p4_total_label.Visible = false;
				this.mayor1_form.p5_name_label.Visible = false;
				this.mayor1_form.p5_total_label.Visible = false;
			}
			if (this.number_of_players == 4)
			{
				this.mayor1_form.p5_name_label.Visible = false;
				this.mayor1_form.p5_total_label.Visible = false;
			}
			if(this.number_of_players != 5)
				this.update_all_labels();
			this.mayor1_form.ShowDialog();
		}

		private void done_choosing_craftsman_button_Click(object sender, EventArgs e)
		{
			if (this.p1_chose_extra_good)
			{
				this.done_choosing_craftsman_button.Text = "Done Choosing";
				this.done_choosing_craftsman_button.Visible = true;
				this.done_choosing_craftsman_button.Enabled = true;
				this.infobox_role("You are now done choosing your extra production good.", "role_craftsman");
				this.next_turn_button.Text = "End Turn";
				this.next_turn_button.Visible = true;
				this.next_turn_button.Enabled = true;
			}
		}

		private void done_trading_button_Click(object sender, EventArgs e)
		{
			this.determine_goods_to_trade();
			if (!(this.goods_to_trade & !this.p1_traded))
			{
				this.done_trading_button.Enabled=false;
				this.done_trading_button.Visible = false;
				this.next_turn_routine();
				this.next_turn_button.Text = "End Trader Phase";
				this.next_turn_button.Visible = true;
				this.next_turn_button.Enabled = true;
			}
			else
			{
				this.confirmbox_role("Are you sure you want to end your turn without trading?", "role_trader");
				if (this.confirmed)
				{
					this.done_trading_button.Enabled=false;
					this.done_trading_button.Visible = false;
					this.next_turn_routine();
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
				}
			}
		}

		public void draw_buildings_available_labels()
		{
			if (this.buildings_available_array[0] <= 0)
			{
				this.buildings_form.avail_buildings_slot0.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot0.Visible = true;
			}
			if (this.buildings_available_array[1] <= 0)
			{
				this.buildings_form.avail_buildings_slot1.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot1.Visible = true;
			}
			if (this.buildings_available_array[2] <= 0)
			{
				this.buildings_form.avail_buildings_slot2.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot2.Visible = true;
			}
			if (this.buildings_available_array[3] <= 0)
			{
				this.buildings_form.avail_buildings_slot3.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot3.Visible = true;
			}
			if (this.buildings_available_array[4] <= 0)
			{
				this.buildings_form.avail_buildings_slot4.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot4.Visible = true;
			}
			if (this.buildings_available_array[5] <= 0)
			{
				this.buildings_form.avail_buildings_slot5.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot5.Visible = true;
			}
			if (this.buildings_available_array[6] <= 0)
			{
				this.buildings_form.avail_buildings_slot6.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot6.Visible = true;
			}
			if (this.buildings_available_array[7] <= 0)
			{
				this.buildings_form.avail_buildings_slot7.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot7.Visible = true;
			}
			if (this.buildings_available_array[8] <= 0)
			{
				this.buildings_form.avail_buildings_slot8.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot8.Visible = true;
			}
			if (this.buildings_available_array[9] <= 0)
			{
				this.buildings_form.avail_buildings_slot9.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot9.Visible = true;
			}
			if (this.buildings_available_array[10] <= 0)
			{
				this.buildings_form.avail_buildings_slot10.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot10.Visible = true;
			}
			if (this.buildings_available_array[11] <= 0)
			{
				this.buildings_form.avail_buildings_slot11.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot11.Visible = true;
			}
			if (this.buildings_available_array[12] <= 0)
			{
				this.buildings_form.avail_buildings_slot12.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot12.Visible = true;
			}
			if (this.buildings_available_array[13] <= 0)
			{
				this.buildings_form.avail_buildings_slot13.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot13.Visible = true;
			}
			if (this.buildings_available_array[14] <= 0)
			{
				this.buildings_form.avail_buildings_slot14.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot14.Visible = true;
			}
			if (this.buildings_available_array[15] <= 0)
			{
				this.buildings_form.avail_buildings_slot15.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot15.Visible = true;
			}
			if (this.buildings_available_array[16] <= 0)
			{
				this.buildings_form.avail_buildings_slot16.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot16.Visible = true;
			}
			if (this.buildings_available_array[17] <= 0)
			{
				this.buildings_form.avail_buildings_slot17.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot17.Visible = true;
			}
			if (this.buildings_available_array[18] <= 0)
			{
				this.buildings_form.avail_buildings_slot18.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot18.Visible = true;
			}
			if (this.buildings_available_array[19] <= 0)
			{
				this.buildings_form.avail_buildings_slot19.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot19.Visible = true;
			}
			if (this.buildings_available_array[20] <= 0)
			{
				this.buildings_form.avail_buildings_slot20.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot20.Visible = true;
			}
			if (this.buildings_available_array[21] <= 0)
			{
				this.buildings_form.avail_buildings_slot21.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot21.Visible = true;
			}
			if (this.buildings_available_array[22] <= 0)
			{
				this.buildings_form.avail_buildings_slot22.Visible = false;
			}
			else
			{
				this.buildings_form.avail_buildings_slot22.Visible = true;
			}
			this.verification_alerts();
		}

		public void draw_plantation_tiles()
		{
			this.finished = false;
			this.counter1 = 0;
			while (!this.finished)
			{
				if (this.plantations_discarded_array[this.counter1] != 0)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					this.discard_size = this.counter1;
					this.finished = true;
				}
			}
			this.finished = false;
			this.counter1 = this.discard_size;
			this.counter2 = 0;
			while (!this.finished)
			{
				if (this.plantation_available_array[this.counter2] == 0)
				{
					this.counter2 = checked(this.counter2 + 1);
				}
				else
				{
					this.plantations_discarded_array[this.counter1] = this.plantation_available_array[this.counter2];
					this.plantation_available_array[this.counter2] = 0;
					this.counter1 = checked(this.counter1 + 1);
					this.counter2 = checked(this.counter2 + 1);
				}
				if (this.counter2 != 6)
				{
					continue;
				}
				this.finished = true;
			}
			this.finished = false;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			while (this.counter2 != checked(this.number_of_players + 1))
			{
				if (this.counter1 >= 50)
				{
					if (this.plantations_discarded_array[this.counter3] == 0)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					else
					{
						this.plantation_available_array[this.counter2] = this.plantations_discarded_array[this.counter3];
						this.plantations_discarded_array[this.counter3] = 0;
						this.counter3 = checked(this.counter3 + 1);
						this.counter2 = checked(this.counter2 + 1);
					}
				}
				if (this.plantations_tilebag_array[this.counter1] == 0)
				{
					this.counter1 = checked(this.counter1 + 1);
					if (this.counter1 < 40)
					{
						continue;
					}
					Interaction.MsgBox("The tilebag is nearing emptiness...", 0, null);
					this.tempinteger = this.tempinteger;
				}
				else
				{
					this.plantation_available_array[this.counter2] = this.plantations_tilebag_array[this.counter1];
					this.plantations_tilebag_array[this.counter1] = 0;
					this.counter1 = checked(this.counter1 + 1);
					this.counter2 = checked(this.counter2 + 1);
				}
			}
			this.update_all_labels();
		}

		public void draw_random_plantation_tile()
		{
			this.finished = false;
			this.counter1 = 0;
			this.counter2 = 0;
			this.counter3 = 0;
			while (this.counter2 != 1)
			{
				if (this.counter1 >= 50)
				{
					if (this.plantations_discarded_array[this.counter3] == 0)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					else
					{
						this.plantation_available_array[this.counter2] = this.plantations_discarded_array[this.counter3];
						this.plantations_discarded_array[this.counter3] = 0;
						this.counter3 = checked(this.counter3 + 1);
						this.counter2 = checked(this.counter2 + 1);
					}
				}
				if (this.plantations_tilebag_array[this.counter1] == 0)
				{
					this.counter1 = checked(this.counter1 + 1);
				}
				else
				{
					if (this.current_player == 1)
					{
						this.plantations_p1_array[this.num_plantations_p1] = this.plantations_tilebag_array[this.counter1];
						this.plantations_tilebag_array[this.counter1] = 0;
						this.num_plantations_p1 = checked(this.num_plantations_p1 + 1);
						this.infobox_plant("Your randomly drawn Plantation", this.plantations_p1_array[checked(this.num_plantations_p1 - 1)]);
					}
					if (this.current_player == 2)
					{
						this.plantations_p2_array[this.num_plantations_p2] = this.plantations_tilebag_array[this.counter1];
						this.plantations_tilebag_array[this.counter1] = 0;
						this.num_plantations_p2 = checked(this.num_plantations_p2 + 1);
						this.infobox_plant(string.Concat(this.p2_name, " randomly drew this Plantation"), this.plantations_p2_array[checked(this.num_plantations_p2 - 1)]);
					}
					if (this.current_player == 3)
					{
						this.plantations_p3_array[this.num_plantations_p3] = this.plantations_tilebag_array[this.counter1];
						this.plantations_tilebag_array[this.counter1] = 0;
						this.num_plantations_p3 = checked(this.num_plantations_p3 + 1);
						this.infobox_plant(string.Concat(this.p3_name, " randomly drew this Plantation"), this.plantations_p3_array[checked(this.num_plantations_p3 - 1)]);
					}
					if (this.current_player == 4)
					{
						this.plantations_p4_array[this.num_plantations_p4] = this.plantations_tilebag_array[this.counter1];
						this.plantations_tilebag_array[this.counter1] = 0;
						this.num_plantations_p4 = checked(this.num_plantations_p4 + 1);
						this.infobox_plant(string.Concat(this.p4_name, " randomly drew this Plantation"), this.plantations_p4_array[checked(this.num_plantations_p4 - 1)]);
					}
					if (this.current_player == 5)
					{
						this.plantations_p5_array[this.num_plantations_p5] = this.plantations_tilebag_array[this.counter1];
						this.plantations_tilebag_array[this.counter1] = 0;
						this.num_plantations_p5 = checked(this.num_plantations_p5 + 1);
						this.infobox_plant(string.Concat(this.p5_name, " randomly drew this Plantation"), this.plantations_p5_array[checked(this.num_plantations_p5 - 1)]);
					}
					this.counter1 = checked(this.counter1 + 1);
					this.counter2 = checked(this.counter2 + 1);
				}
			}
			this.update_all_labels();
		}

		public void end_builder_phase()
		{
		}

		public void end_captain_phase()
		{
			this.counter1 = 0;
			do
			{
				this.p1_storage_array[this.counter1] = 0;
				this.p2_storage_array[this.counter1] = 0;
				this.p3_storage_array[this.counter1] = 0;
				this.p4_storage_array[this.counter1] = 0;
				this.p5_storage_array[this.counter1] = 0;
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.number_of_players == 3)
			{
				this.p1_dumped = false;
				this.p2_dumped = false;
				this.p3_dumped = false;
				this.p4_dumped = true;
				this.p5_dumped = true;
			}
			if (this.number_of_players == 4)
			{
				this.p1_dumped = false;
				this.p2_dumped = false;
				this.p3_dumped = false;
				this.p4_dumped = false;
				this.p5_dumped = true;
			}
			if (this.number_of_players == 5)
			{
				this.p1_dumped = false;
				this.p2_dumped = false;
				this.p3_dumped = false;
				this.p4_dumped = false;
				this.p5_dumped = false;
			}
			this.finished = false;
			this.current_player_captain = this.current_player;
			while (!this.finished)
			{
				if (this.current_player_captain == 1)
				{
					this.process_p1_dumping();
				}
				if (this.current_player_captain == 2)
				{
					this.process_p2_dumping();
					this.p2_dumped = true;
				}
				if (this.current_player_captain == 3)
				{
					this.process_p3_dumping();
					this.p3_dumped = true;
				}
				if (this.current_player_captain == 4)
				{
					this.process_p4_dumping();
					this.p4_dumped = true;
				}
				if (this.current_player_captain == 5)
				{
					this.process_p5_dumping();
					this.p5_dumped = true;
				}
				if (this.p1_dumped & this.p2_dumped & this.p3_dumped & this.p4_dumped & this.p5_dumped)
				{
					this.finished = true;
				}
				else if (this.player_order_array[checked(this.current_player_captain + 1)] != 9)
				{
					this.current_player_captain = checked(this.current_player_captain + 1);
				}
				else
				{
					this.current_player_captain = 1;
				}
			}
			this.update_ship_cargo();
			if (this.shipa_array[3] == 0)
			{
				this.goods_bank_array[checked(this.shipa_array[2] - 1)] = checked(this.goods_bank_array[checked(this.shipa_array[2] - 1)] + this.shipa_array[0]);
				this.shipa_array[1] = 0;
			}
			if (this.shipb_array[3] == 0)
			{
				this.goods_bank_array[checked(this.shipb_array[2] - 1)] = checked(this.goods_bank_array[checked(this.shipb_array[2] - 1)] + this.shipb_array[0]);
				this.shipb_array[1] = 0;
			}
			if (this.shipc_array[3] == 0)
			{
				this.goods_bank_array[checked(this.shipc_array[2] - 1)] = checked(this.goods_bank_array[checked(this.shipc_array[2] - 1)] + this.shipc_array[0]);
				this.shipc_array[1] = 0;
			}
			this.update_all_labels();
		}

		public void end_craftsman_phase()
		{
			this.Text = "The Craftsman Phase is Over";
		}

		public void end_mayor_phase()
		{
			this.new_colonists_needed = 0;
			int numberOfPlayers = this.number_of_players;
			this.counter1 = 1;
			while (this.counter1 <= numberOfPlayers)
			{
				this.new_colonists_needed = checked(this.new_colonists_needed + this.empty_colonists_slots_array[this.counter1]);
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			if (this.new_colonists_needed < this.number_of_players)
			{
				this.new_colonists_needed = this.number_of_players;
			}
			if (this.new_colonists_needed <= this.colonists_bank_num)
			{
				this.colonists_ship_num = this.new_colonists_needed;
				this.colonists_bank_num = checked(this.colonists_bank_num - this.new_colonists_needed);
				this.update_all_labels();
				this.infobox_role(string.Concat("The colonist ship has been refilled with", Conversion.Str(this.new_colonists_needed), " colonists."), "colonist_ship");
			}
			else
			{
				this.game_end_triggered_colonists = true;
				this.colonists_ship_num = this.colonists_bank_num;
				this.colonists_bank_num = 0;
				this.update_all_labels();
				this.infobox_role("The colonist ship could not be fully refilled. The game end has been triggered.", "colonist_ship");
			}
		}

		public void end_pros1_phase()
		{
		}

		public void end_pros2_phase()
		{
		}

		public void end_settler_phase()
		{
			this.p1_chose_plantation = false;
			this.draw_plantation_tiles();
		}

		public void end_shipping_turn_p1()
		{
			this.p1_done_shipping = true;
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Enabled = true;
			this.auto_captain_button.Visible = true;
			this.formtitle("p1", "Captain Phase - Done Shipping this Round");
			this.update_all_labels();
		}

		public void end_trader_phase()
		{
			if (this.trading_house_array[3] != 0)
			{
				this.infobox_role("The Trading House is full. It will now be emptied.", "role_Trader");
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.goods_bank_array[checked(this.trading_house_array[this.counter1] - 1)] = checked(this.goods_bank_array[checked(this.trading_house_array[this.counter1] - 1)] + 1);
						this.trading_house_array[this.counter1] = 0;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
			}
			this.update_all_labels();
		}

		public void figure_out_winner()
		{
			this.score_form.p1_name_label.Text =this.p1_name;
			this.score_form.p2_name_label.Text =this.p2_name;
			this.score_form.p3_name_label.Text =this.p3_name;
			this.score_form.p4_name_label.Text =this.p4_name;
			this.score_form.p5_name_label.Text =this.p5_name;
			this.p1_tiebreaker = this.gold_p1;
			this.counter1 = 0;
			do
			{
				this.p1_tiebreaker = checked(this.p1_tiebreaker + this.goods_p1_array[this.counter1]);
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.p2_tiebreaker = this.gold_p2;
			this.counter1 = 0;
			do
			{
				this.p2_tiebreaker = checked(this.p2_tiebreaker + this.goods_p2_array[this.counter1]);
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.p3_tiebreaker = this.gold_p3;
			this.counter1 = 0;
			do
			{
				this.p3_tiebreaker = checked(this.p3_tiebreaker + this.goods_p3_array[this.counter1]);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.p4_tiebreaker = this.gold_p4;
			this.counter1 = 0;
			do
			{
				this.p4_tiebreaker = checked(this.p4_tiebreaker + this.goods_p4_array[this.counter1]);
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.p5_tiebreaker = this.gold_p5;
			this.counter1 = 0;
			do
			{
				this.p5_tiebreaker = checked(this.p5_tiebreaker + this.goods_p5_array[this.counter1]);
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.p1_total_score = checked(this.vpchips_p1 + this.vp_buildings_p1);
			this.p2_total_score = checked(this.vpchips_p2 + this.vp_buildings_p2);
			this.p3_total_score = checked(this.vpchips_p3 + this.vp_buildings_p3);
			this.p4_total_score = checked(this.vpchips_p4 + this.vp_buildings_p4);
			this.p5_total_score = checked(this.vpchips_p5 + this.vp_buildings_p5);
			this.current_best_score = this.p1_total_score;
			this.current_best_tiebreaker = this.p1_tiebreaker;
			this.current_winner = "p1";
			GroupBox groupBox1 = this.score_form.GroupBox1;
			Point point = new Point(72, 8);
			groupBox1.Location = point;
			if (this.p2_total_score > this.current_best_score)
			{
				this.current_best_score = this.p2_total_score;
				this.current_best_tiebreaker = this.p2_tiebreaker;
				this.current_winner = "p2";
				GroupBox groupBox = this.score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox.Location = point;
				GroupBox groupBox2 = this.score_form.GroupBox2;
				point = new Point(216, 8);
				groupBox2.Location = point;
			}
			if (this.p2_total_score == this.current_best_score)
			{
				GroupBox groupBox21 = this.score_form.GroupBox2;
				point = new Point(216, 8);
				groupBox21.Location = point;
			}
			if (this.p3_total_score > this.current_best_score)
			{
				this.current_best_score = this.p3_total_score;
				this.current_best_tiebreaker = this.p3_tiebreaker;
				this.current_winner = "p3";
				GroupBox groupBox11 = this.score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox11.Location = point;
				GroupBox groupBox22 = this.score_form.GroupBox2;
				point = new Point(216, 104);
				groupBox22.Location = point;
				GroupBox groupBox3 = this.score_form.GroupBox3;
				point = new Point(360, 8);
				groupBox3.Location = point;
			}
			if (this.p3_total_score == this.current_best_score)
			{
				GroupBox groupBox31 = this.score_form.GroupBox3;
				point = new Point(360, 8);
				groupBox31.Location = point;
			}
			if (this.p4_total_score > this.current_best_score)
			{
				this.current_best_score = this.p4_total_score;
				this.current_best_tiebreaker = this.p4_tiebreaker;
				this.current_winner = "p4";
				GroupBox groupBox12 = this.score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox12.Location = point;
				GroupBox groupBox23 = this.score_form.GroupBox2;
				point = new Point(216, 104);
				groupBox23.Location = point;
				GroupBox groupBox32 = this.score_form.GroupBox3;
				point = new Point(360, 104);
				groupBox32.Location = point;
				GroupBox scoreForm = this.score_form.groupbox4;
				point = new Point(504, 8);
				scoreForm.Location = point;
			}
			if (this.p4_total_score == this.current_best_score)
			{
				GroupBox scoreForm1 = this.score_form.groupbox4;
				point = new Point(504, 8);
				scoreForm1.Location = point;
			}
			if (this.p5_total_score > this.current_best_score)
			{
				this.current_best_score = this.p5_total_score;
				this.current_best_tiebreaker = this.p5_tiebreaker;
				this.current_winner = "p5";
				GroupBox groupBox13 = this.score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox13.Location = point;
				GroupBox groupBox24 = this.score_form.GroupBox2;
				point = new Point(216, 104);
				groupBox24.Location = point;
				GroupBox groupBox33 = this.score_form.GroupBox3;
				point = new Point(360, 104);
				groupBox33.Location = point;
				GroupBox scoreForm2 = this.score_form.groupbox4;
				point = new Point(504, 104);
				scoreForm2.Location = point;
				GroupBox scoreForm3 = this.score_form.groupbox5;
				point = new Point(648, 8);
				scoreForm3.Location = point;
			}
			if (this.p5_total_score == this.current_best_score)
			{
				GroupBox scoreForm4 = this.score_form.groupbox5;
				point = new Point(72, 8);
				scoreForm4.Location = point;
			}
		}

		public void formtitle(object whichplayer, object titletext)
		{
			if (ObjectType.ObjTst(whichplayer, "p1", false) == 0)
			{
				this.Text =StringType.FromObject(ObjectType.AddObj(string.Concat(this.p1_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p2", false) == 0)
			{
				this.Text =StringType.FromObject(ObjectType.AddObj(string.Concat(this.p2_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p3", false) == 0)
			{
				this.Text =StringType.FromObject(ObjectType.AddObj(string.Concat(this.p3_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p4", false) == 0)
			{
				this.Text =StringType.FromObject(ObjectType.AddObj(string.Concat(this.p4_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p5", false) == 0)
			{
				this.Text =StringType.FromObject(ObjectType.AddObj(string.Concat(this.p5_name, "'s turn - "), titletext));
			}
		}

		public void game_over_routine()
		{
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.settler_round = false;
			this.mayor_round = false;
			this.builder_round = false;
			this.craftsman_round = false;
			this.trader_round = false;
			this.captain_round = false;
			this.prospector1_round = false;
			this.prospector2_round = false;
			this.update_all_labels();
			this.score_form.GroupBox1.Visible = true;
			this.score_form.GroupBox2.Visible = true;
			this.score_form.GroupBox3.Visible = true;
			this.score_form.groupbox4.Visible = true;
			this.score_form.groupbox5.Visible = true;
			this.score_form.Text = "GAME OVER";
			if (this.number_of_players == 3)
			{
				this.score_form.groupbox4.Visible = false;
				this.score_form.groupbox5.Visible = false;
			}
			if (this.number_of_players == 4)
			{
				this.score_form.groupbox4.Visible = true;
				this.score_form.groupbox5.Visible = false;
			}
			if (this.number_of_players == 5)
			{
				this.score_form.groupbox4.Visible = true;
				this.score_form.groupbox5.Visible = true;
			}
			this.figure_out_winner();
			this.score_form.p1_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p1 + this.vp_buildings_p1));
			this.score_form.p1_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p1);
			this.score_form.p1_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p1);
			this.score_form.p1_tie_breaker_label.Text =StringType.FromInteger(this.p1_tiebreaker);
			this.sw.WriteLine("------------------------------------------------------");
			this.sw.WriteLine("--------------------GAME OVER-------------------------");
			this.sw.WriteLine("------------------------------------------------------");
			this.sw.WriteLine(string.Concat("Player1 VP Total: ", Conversion.Str(checked(this.vpchips_p1 + this.vp_buildings_p1))));
			this.sw.WriteLine(string.Concat("Player1 VP Chips: ", Conversion.Str(this.vpchips_p1)));
			this.sw.WriteLine(string.Concat("Player1 VP Buildings: ", Conversion.Str(this.vp_buildings_p1)));
			this.sw.WriteLine(string.Concat("Player1 Goods/Doubloons: ", Conversion.Str(this.p1_tiebreaker)));
			this.score_form.p2_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p2 + this.vp_buildings_p2));
			this.score_form.p2_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p2);
			this.score_form.p2_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p2);
			this.score_form.p2_tie_breaker_label.Text =StringType.FromInteger(this.p2_tiebreaker);
			this.sw.WriteLine("------------------------------------------------------");
			this.sw.WriteLine(string.Concat("Player2 VP Total: ", Conversion.Str(checked(this.vpchips_p2 + this.vp_buildings_p2))));
			this.sw.WriteLine(string.Concat("Player2 VP Chips: ", Conversion.Str(this.vpchips_p2)));
			this.sw.WriteLine(string.Concat("Player2 VP Buildings: ", Conversion.Str(this.vp_buildings_p2)));
			this.sw.WriteLine(string.Concat("Player2 Goods/Doubloons: ", Conversion.Str(this.p2_tiebreaker)));
			this.score_form.p3_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p3 + this.vp_buildings_p3));
			this.score_form.p3_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p3);
			this.score_form.p3_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p3);
			this.score_form.p3_tie_breaker_label.Text =StringType.FromInteger(this.p3_tiebreaker);
			this.sw.WriteLine("------------------------------------------------------");
			this.sw.WriteLine(string.Concat("Player3 VP Total: ", Conversion.Str(checked(this.vpchips_p3 + this.vp_buildings_p3))));
			this.sw.WriteLine(string.Concat("Player3 VP Chips: ", Conversion.Str(this.vpchips_p3)));
			this.sw.WriteLine(string.Concat("Player3 VP Buildings: ", Conversion.Str(this.vp_buildings_p3)));
			this.sw.WriteLine(string.Concat("Player3 Goods/Doubloons: ", Conversion.Str(this.p3_tiebreaker)));
			if (this.number_of_players >= 4)
			{
				this.score_form.p4_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p4 + this.vp_buildings_p4));
				this.score_form.p4_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p4);
				this.score_form.p4_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p4);
				this.score_form.p4_tie_breaker_label.Text =StringType.FromInteger(this.p4_tiebreaker);
				this.sw.WriteLine("------------------------------------------------------");
				this.sw.WriteLine(string.Concat("Player4 VP Total: ", Conversion.Str(checked(this.vpchips_p4 + this.vp_buildings_p4))));
				this.sw.WriteLine(string.Concat("Player4 VP Chips: ", Conversion.Str(this.vpchips_p4)));
				this.sw.WriteLine(string.Concat("Player4 VP Buildings: ", Conversion.Str(this.vp_buildings_p4)));
				this.sw.WriteLine(string.Concat("Player4 Goods/Doubloons: ", Conversion.Str(this.p4_tiebreaker)));
			}
			if (this.number_of_players == 5)
			{
				this.score_form.p5_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p5 + this.vp_buildings_p5));
				this.score_form.p5_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p5);
				this.score_form.p5_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p5);
				this.score_form.p5_tie_breaker_label.Text =StringType.FromInteger(this.p5_tiebreaker);
				this.sw.WriteLine("------------------------------------------------------");
				this.sw.WriteLine(string.Concat("Player5 VP Total: ", Conversion.Str(checked(this.vpchips_p5 + this.vp_buildings_p5))));
				this.sw.WriteLine(string.Concat("Player5 VP Chips: ", Conversion.Str(this.vpchips_p5)));
				this.sw.WriteLine(string.Concat("Player5 VP Buildings: ", Conversion.Str(this.vp_buildings_p5)));
				this.sw.WriteLine(string.Concat("Player5 Goods/Doubloons: ", Conversion.Str(this.p5_tiebreaker)));
			}
			this.sw.WriteLine("************************************************************");
			this.score_form.Show();
			this.sw.Close();
		}

		public void generate_random1(object low_rand, object high_rand)
		{
			this.rand_finished = false;
			while (!this.rand_finished)
			{
				VBMath.Randomize();
				this.random1 = IntegerType.FromObject(Conversion.Int(ObjectType.AddObj(ObjectType.MulObj(ObjectType.AddObj(high_rand, 1), VBMath.Rnd()), 0)));
				if (!BooleanType.FromObject(ObjectType.BitAndObj(ObjectType.ObjTst(this.random1, low_rand, false) >= 0, ObjectType.ObjTst(this.random1, high_rand, false) <= 0)))
				{
					continue;
				}
				this.rand_finished = true;
			}
		}

		public void give_goods_to_p1()
		{
			this.counter1 = 0;
			do
			{
				if (this.goods_bank_array[this.counter1] >= this.goods_ability_p1_array[this.counter1])
				{
					this.goods_this_turn_p1_array[this.counter1] = this.goods_ability_p1_array[this.counter1];
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] - this.goods_ability_p1_array[this.counter1]);
					this.goods_p1_array[this.counter1] = checked(this.goods_p1_array[this.counter1] + this.goods_ability_p1_array[this.counter1]);
				}
				else if (this.goods_bank_array[this.counter1] < this.goods_ability_p1_array[this.counter1])
				{
					this.goods_this_turn_p1_array[this.counter1] = this.goods_bank_array[this.counter1];
					this.goods_p1_array[this.counter1] = checked(this.goods_p1_array[this.counter1] + this.goods_bank_array[this.counter1]);
					this.goods_bank_array[this.counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void give_goods_to_p2()
		{
			this.counter1 = 0;
			do
			{
				if (this.goods_bank_array[this.counter1] >= this.goods_ability_p2_array[this.counter1])
				{
					this.goods_this_turn_p2_array[this.counter1] = this.goods_ability_p2_array[this.counter1];
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] - this.goods_ability_p2_array[this.counter1]);
					this.goods_p2_array[this.counter1] = checked(this.goods_p2_array[this.counter1] + this.goods_ability_p2_array[this.counter1]);
				}
				else if (this.goods_bank_array[this.counter1] < this.goods_ability_p2_array[this.counter1])
				{
					this.goods_this_turn_p2_array[this.counter1] = this.goods_bank_array[this.counter1];
					this.goods_p2_array[this.counter1] = checked(this.goods_p2_array[this.counter1] + this.goods_bank_array[this.counter1]);
					this.goods_bank_array[this.counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void give_goods_to_p3()
		{
			this.counter1 = 0;
			do
			{
				if (this.goods_bank_array[this.counter1] >= this.goods_ability_p3_array[this.counter1])
				{
					this.goods_this_turn_p3_array[this.counter1] = this.goods_ability_p3_array[this.counter1];
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] - this.goods_ability_p3_array[this.counter1]);
					this.goods_p3_array[this.counter1] = checked(this.goods_p3_array[this.counter1] + this.goods_ability_p3_array[this.counter1]);
				}
				else if (this.goods_bank_array[this.counter1] < this.goods_ability_p3_array[this.counter1])
				{
					this.goods_this_turn_p3_array[this.counter1] = this.goods_bank_array[this.counter1];
					this.goods_p3_array[this.counter1] = checked(this.goods_p3_array[this.counter1] + this.goods_bank_array[this.counter1]);
					this.goods_bank_array[this.counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void give_goods_to_p4()
		{
			this.counter1 = 0;
			do
			{
				if (this.goods_bank_array[this.counter1] >= this.goods_ability_p4_array[this.counter1])
				{
					this.goods_this_turn_p4_array[this.counter1] = this.goods_ability_p4_array[this.counter1];
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] - this.goods_ability_p4_array[this.counter1]);
					this.goods_p4_array[this.counter1] = checked(this.goods_p4_array[this.counter1] + this.goods_ability_p4_array[this.counter1]);
				}
				else if (this.goods_bank_array[this.counter1] < this.goods_ability_p4_array[this.counter1])
				{
					this.goods_this_turn_p4_array[this.counter1] = this.goods_bank_array[this.counter1];
					this.goods_p4_array[this.counter1] = checked(this.goods_p4_array[this.counter1] + this.goods_bank_array[this.counter1]);
					this.goods_bank_array[this.counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		public void give_goods_to_p5()
		{
			this.counter1 = 0;
			do
			{
				if (this.goods_bank_array[this.counter1] >= this.goods_ability_p5_array[this.counter1])
				{
					this.goods_this_turn_p5_array[this.counter1] = this.goods_ability_p5_array[this.counter1];
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] - this.goods_ability_p5_array[this.counter1]);
					this.goods_p5_array[this.counter1] = checked(this.goods_p5_array[this.counter1] + this.goods_ability_p5_array[this.counter1]);
				}
				else if (this.goods_bank_array[this.counter1] < this.goods_ability_p5_array[this.counter1])
				{
					this.goods_this_turn_p5_array[this.counter1] = this.goods_bank_array[this.counter1];
					this.goods_p5_array[this.counter1] = checked(this.goods_p5_array[this.counter1] + this.goods_bank_array[this.counter1]);
					this.goods_bank_array[this.counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
		}

		private void governor_pic_Click(object sender, EventArgs e)
		{
			this.help_governor();
		}

		public void help_bonus()
		{
			this.infobox_nopic("This is the amount of doubloons you get for choosing this role on your turn. When all players have chosen a role, 1 doubloon is added to each role not chosen that round.");
		}

		public void help_colonists_bank()
		{
			this.infobox_role("This is the number of colonists remaining in the game. If the colonist ship cannot be filled after the Mayor Phase, then the game end is triggered.", "colonist_ship");
		}

		public void help_colonists_on_ship()
		{
			this.infobox_role("This is the number of colonsits currently on the ship. After each Mayor Phase, the ship is re-filled based on the number of empty colonist slots on buildings, but always at least as many players in the game.", "colonist_ship");
		}

		public void help_governor()
		{
			this.infobox_role("When you are the current Governor you get to choose your role first, from among all the roles.", "governor");
		}

		public void help_vp_remaining()
		{
			this.infobox_nopic("The number of Victory Point Chips remaining. When the last chip is handed out during the Captain Phase, the game end is triggered, but points will continue to be handed out until actual game end.");
		}

		public void infobox(object infotext1, object infotext2)
		{
			this.info_form.info_label1.Text =StringType.FromObject(infotext1);
			this.info_form.info_label2.Text =StringType.FromObject(infotext2);
			this.info_form.ShowDialog();
		}

		public void infobox_building1(object infotext1, object infopic1)
		{
			this.infobuilding1_form.infobuilding1_timer1.Interval = 1000;
			this.infobuilding1_form.infobuilding1_timer1.Enabled = true;
			this.infobuilding1_form.timer_label.Text =StringType.FromInteger(this.dialog_box_OK_timer);
			this.infobuilding1_form.Label1.Text =StringType.FromObject(infotext1);
			PictureBox pictureBox1 = this.infobuilding1_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			this.infobuilding1_form.PictureBox1.Visible = true;
			this.infobuilding1_form.ShowDialog();
		}

		public void infobox_building2(object infotext1, object infopic1)
		{
			this.infobuilding2_form.infobuilding2_timer1.Interval = 1000;
			this.infobuilding2_form.infobuilding2_timer1.Enabled = true;
			this.infobuilding2_form.timer_label.Text =StringType.FromInteger(this.dialog_box_OK_timer);
			this.infobuilding2_form.Label1.Text =StringType.FromObject(infotext1);
			PictureBox pictureBox1 = this.infobuilding2_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			this.infobuilding2_form.PictureBox1.Visible = true;
			this.infobuilding2_form.ShowDialog();
		}

		public void infobox_nopic(object infotext1)
		{
			this.infonopic_form.infonopic_timer1.Interval = 1000;
			this.infonopic_form.infonopic_timer1.Enabled = true;
			this.infonopic_form.timer_label.Text =StringType.FromInteger(this.dialog_box_OK_timer);
			this.infonopic_form.Label1.Text = StringType.FromObject(infotext1);
			this.infonopic_form.ShowDialog();
		}

		public void infobox_plant(object infotext1, object infopic1)
		{
			this.infoplant_form.infoplant_timer1.Interval = 1000;
			this.infoplant_form.infoplant_timer1.Enabled = true;
			this.infoplant_form.timer_label.Text =StringType.FromInteger(this.dialog_box_OK_timer);
			this.infoplant_form.Label1.Text =StringType.FromObject(infotext1);
			this.infoplant_form.PictureBox1.Image = Image.FromFile(string.Concat("pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[2]), ".bmp"));
			this.infoplant_form.PictureBox1.Visible = true;
			this.infoplant_form.ShowDialog();
		}

		public void infobox_role(object infotext1, object infopic1)
		{
			this.inforole_form.inforole_timer1.Interval = 1000;
			this.inforole_form.inforole_timer1.Enabled = true;
			this.inforole_form.timer_label.Text =StringType.FromInteger(this.dialog_box_OK_timer);
			this.inforole_form.Label1.Text =StringType.FromObject(infotext1);
			this.inforole_form.PictureBox1.Image = Image.FromFile(StringType.FromObject(ObjectType.AddObj(ObjectType.AddObj("pic\\", infopic1), ".bmp")));
			this.inforole_form.PictureBox1.Visible = true;
			this.inforole_form.ShowDialog();
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ResourceManager resourceManager = new ResourceManager(typeof(Form1));
			this.MainMenu1 = new MainMenu();
			this.menu_game = new MenuItem();
			this.menu_game_new = new MenuItem();
			this.MenuItem3 = new MenuItem();
			this.MenuItem2 = new MenuItem();
			this.menu_game_exit = new MenuItem();
			this.menu_view = new MenuItem();
			this.MenuItem4 = new MenuItem();
			this.MenuItem5 = new MenuItem();
			this.MenuItem6 = new MenuItem();
			this.MenuItem7 = new MenuItem();
			this.MenuItem8 = new MenuItem();
			this.menu_help = new MenuItem();
			this.menu_help_rules = new MenuItem();
			this.MenuItem1 = new MenuItem();
			this.menu_help_about = new MenuItem();
			this.player_board_pic = new PictureBox();
			this.Label5 = new Label();
			this.Label4 = new Label();
			this.vp_chips_label = new Label();
			this.vp_total_label = new Label();
			this.idle_colonists_label = new Label();
			this.num_coffee_label = new Label();
			this.num_tobacco_label = new Label();
			this.num_corn_label = new Label();
			this.num_sugar_label = new Label();
			this.num_indigo_label = new Label();
			this.num_coffee_bank_label = new Label();
			this.num_tobacco_bank_label = new Label();
			this.num_corn_bank_label = new Label();
			this.num_sugar_bank_label = new Label();
			this.num_indigo_bank_label = new Label();
			this.plantation_available_slot6 = new PictureBox();
			this.plantation_available_slot5 = new PictureBox();
			this.plantation_available_slot2 = new PictureBox();
			this.plantation_available_slot4 = new PictureBox();
			this.plantation_available_slot1 = new PictureBox();
			this.tradehouse_slot4 = new PictureBox();
			this.tradehouse_slot3 = new PictureBox();
			this.tradehouse_slot2 = new PictureBox();
			this.tradehouse_slot1 = new PictureBox();
			this.plantation_available_slot3 = new PictureBox();
			this.role_settler_pic = new PictureBox();
			this.role_mayor_pic = new PictureBox();
			this.role_builder_pic = new PictureBox();
			this.role_craftsman_pic = new PictureBox();
			this.role_trader_pic = new PictureBox();
			this.role_captain_pic = new PictureBox();
			this.role_prospector1_pic = new PictureBox();
			this.colonist_ship_pic = new PictureBox();
			this.num_colonist_ship_label = new Label();
			this.role_prospector2_pic = new PictureBox();
			this.num_colonist_bank_label = new Label();
			this.num_quarry_bank_label = new Label();
			this.Label1 = new Label();
			this.gold_label = new Label();
			this.settler_bonus_label = new Label();
			this.mayor_bonus_label = new Label();
			this.builder_bonus_label = new Label();
			this.craftsman_bonus_label = new Label();
			this.trader_bonus_label = new Label();
			this.captain_bonus_label = new Label();
			this.pros1_bonus_label = new Label();
			this.pros2_bonus_label = new Label();
			this.governor_pic = new PictureBox();
			this.plant_p1_slot1 = new PictureBox();
			this.plant_p1_slot2 = new PictureBox();
			this.plant_p1_slot3 = new PictureBox();
			this.plant_p1_slot6 = new PictureBox();
			this.plant_p1_slot5 = new PictureBox();
			this.plant_p1_slot4 = new PictureBox();
			this.plant_p1_slot9 = new PictureBox();
			this.plant_p1_slot8 = new PictureBox();
			this.plant_p1_slot7 = new PictureBox();
			this.plant_p1_slot11 = new PictureBox();
			this.plant_p1_slot10 = new PictureBox();
			this.plant_p1_slot12 = new PictureBox();
			this.Label3 = new Label();
			this.build_p1_slot1 = new PictureBox();
			this.build_p1_slot2 = new PictureBox();
			this.build_p1_slot3 = new PictureBox();
			this.build_p1_slot6 = new PictureBox();
			this.build_p1_slot5 = new PictureBox();
			this.build_p1_slot4 = new PictureBox();
			this.build_p1_slot9 = new PictureBox();
			this.build_p1_slot8 = new PictureBox();
			this.build_p1_slot7 = new PictureBox();
			this.build_p1_slot12 = new PictureBox();
			this.build_p1_slot11 = new PictureBox();
			this.build_p1_slot10 = new PictureBox();
			this.build_p1_slot19 = new PictureBox();
			this.build_p1_slot17 = new PictureBox();
			this.build_p1_slot15 = new PictureBox();
			this.build_p1_slot13 = new PictureBox();
			this.next_turn_button = new Button();
			this.build_p1_slot14 = new PictureBox();
			this.build_p1_slot16 = new PictureBox();
			this.build_p1_slot18 = new PictureBox();
			this.build_p1_slot20 = new PictureBox();
			this.Label6 = new Label();
			this.Label7 = new Label();
			this.Label8 = new Label();
			this.Label9 = new Label();
			this.shipc_slot8 = new PictureBox();
			this.shipc_slot7 = new PictureBox();
			this.shipc_slot6 = new PictureBox();
			this.shipc_slot5 = new PictureBox();
			this.shipc_slot4 = new PictureBox();
			this.shipc_slot3 = new PictureBox();
			this.shipc_slot2 = new PictureBox();
			this.shipc_slot1 = new PictureBox();
			this.shipb_slot7 = new PictureBox();
			this.shipb_slot6 = new PictureBox();
			this.shipb_slot5 = new PictureBox();
			this.shipb_slot4 = new PictureBox();
			this.shipb_slot3 = new PictureBox();
			this.shipb_slot2 = new PictureBox();
			this.shipb_slot1 = new PictureBox();
			this.shipa_slot6 = new PictureBox();
			this.shipa_slot5 = new PictureBox();
			this.shipa_slot4 = new PictureBox();
			this.shipa_slot3 = new PictureBox();
			this.shipa_slot2 = new PictureBox();
			this.shipa_slot1 = new PictureBox();
			this.shipc_pic = new PictureBox();
			this.shipb_pic = new PictureBox();
			this.shipa_pic = new PictureBox();
			this.Label10 = new Label();
			this.Button1 = new Button();
			this.wharf_pic = new PictureBox();
			this.vpremain_label = new Label();
			this.Label12 = new Label();
			this.done_trading_button = new Button();
			this.Button2 = new Button();
			this.done_choosing_craftsman_button = new Button();
			this.start_game_button = new Button();
			this.PictureBox1 = new PictureBox();
			this.Label2 = new Label();
			this.Button3 = new Button();
			this.nondis_label = new Label();
			this.nondis_button = new Button();
			this.auto_captain_button = new Button();
			this.prcoverbox = new PictureBox();
			this.prnondistext = new Label();
			this.Label11 = new Label();
			this.SuspendLayout();
			Menu.MenuItemCollection menuItems = this.MainMenu1.MenuItems;
			MenuItem[] menuGame = new MenuItem[] { this.menu_game, this.menu_view, this.menu_help };
			menuItems.AddRange(menuGame);
			this.menu_game.Enabled=false;
			this.menu_game.Index = 0;
			Menu.MenuItemCollection menuItemCollection = this.menu_game.MenuItems;
			menuGame = new MenuItem[] { this.menu_game_new, this.MenuItem3, this.MenuItem2, this.menu_game_exit };
			menuItemCollection.AddRange(menuGame);
			this.menu_game.Text = "&Game";
			this.menu_game_new.Index = 0;
			this.menu_game_new.Text = "&New";
			this.MenuItem3.Index = 1;
			this.MenuItem3.Text = "Setup";
			this.MenuItem2.Index = 2;
			this.MenuItem2.Text = "-";
			this.menu_game_exit.Index = 3;
			this.menu_game_exit.Text = "E&xit";
			this.menu_view.Enabled=false;
			this.menu_view.Index = 1;
			Menu.MenuItemCollection menuItems1 = this.menu_view.MenuItems;
			menuGame = new MenuItem[] { this.MenuItem4, this.MenuItem5, this.MenuItem6, this.MenuItem7, this.MenuItem8 };
			menuItems1.AddRange(menuGame);
			this.menu_view.Text = "&View";
			this.MenuItem4.Enabled=false;
			this.MenuItem4.Index = 0;
			this.MenuItem4.Text = "Player &2";
			this.MenuItem5.Enabled=false;
			this.MenuItem5.Index = 1;
			this.MenuItem5.Text = "Player &3";
			this.MenuItem6.Enabled=false;
			this.MenuItem6.Index = 2;
			this.MenuItem6.Text = "Player &4";
			this.MenuItem7.Enabled=false;
			this.MenuItem7.Index = 3;
			this.MenuItem7.Text = "Player &5";
			this.MenuItem8.Enabled=false;
			this.MenuItem8.Index = 4;
			this.MenuItem8.Text = "Buildings";
			this.menu_help.Enabled=false;
			this.menu_help.Index = 2;
			Menu.MenuItemCollection menuItemCollection1 = this.menu_help.MenuItems;
			menuGame = new MenuItem[] { this.menu_help_rules, this.MenuItem1, this.menu_help_about };
			menuItemCollection1.AddRange(menuGame);
			this.menu_help.Text = "&Help";
			this.menu_help_rules.Index = 0;
			this.menu_help_rules.Text = "&Rules";
			this.MenuItem1.Index = 1;
			this.MenuItem1.Text = "-";
			this.menu_help_about.Index = 2;
			this.menu_help_about.Text = "&About Puerto Rico";
			this.player_board_pic.Cursor = Cursors.No;
			this.player_board_pic.Image = (Image)resourceManager.GetObject("player_board_pic.Image");
			PictureBox playerBoardPic = this.player_board_pic;
			Point point = new Point(-12, -12);
			playerBoardPic.Location = point;
			this.player_board_pic.Name = "player_board_pic";
			PictureBox pictureBox = this.player_board_pic;
			Size size = new Size(824, 624);
			pictureBox.Size = size;
			this.player_board_pic.SizeMode = PictureBoxSizeMode.CenterImage;
			this.player_board_pic.TabIndex=1;
			this.player_board_pic.TabStop = false;
			this.Label5.Cursor = Cursors.No;
			this.Label5.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label5 = this.Label5;
			point = new Point(8, 568);
			label5.Location = point;
			this.Label5.Name = "Label5";
			Label label = this.Label5;
			size = new Size(72, 16);
			label.Size = size;
			this.Label5.TabIndex = 23;
			this.Label5.Text = "VP Total";
			this.Label5.TextAlign = ContentAlignment.MiddleCenter;
			this.Label4.Cursor = Cursors.No;
			this.Label4.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label4 = this.Label4;
			point = new Point(8, 496);
			label4.Location = point;
			this.Label4.Name = "Label4";
			Label label41 = this.Label4;
			size = new Size(72, 16);
			label41.Size = size;
			this.Label4.TabIndex = 22;
			this.Label4.Text = "VP Chips";
			this.Label4.TextAlign = ContentAlignment.MiddleCenter;
			this.vp_chips_label.BackColor = SystemColors.ActiveBorder;
			this.vp_chips_label.Cursor = Cursors.No;
			this.vp_chips_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label vpChipsLabel = this.vp_chips_label;
			point = new Point(24, 464);
			vpChipsLabel.Location = point;
			this.vp_chips_label.Name = "vp_chips_label";
			Label vpChipsLabel1 = this.vp_chips_label;
			size = new Size(36, 32);
			vpChipsLabel1.Size = size;
			this.vp_chips_label.TabIndex = 21;
			this.vp_chips_label.Text="0";
			this.vp_chips_label.TextAlign = ContentAlignment.MiddleCenter;
			this.vp_total_label.BackColor = SystemColors.ActiveBorder;
			this.vp_total_label.Cursor = Cursors.No;
			this.vp_total_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label vpTotalLabel = this.vp_total_label;
			point = new Point(24, 536);
			vpTotalLabel.Location = point;
			this.vp_total_label.Name = "vp_total_label";
			Label vpTotalLabel1 = this.vp_total_label;
			size = new Size(36, 32);
			vpTotalLabel1.Size = size;
			this.vp_total_label.TabIndex = 20;
			this.vp_total_label.Text="0";
			this.vp_total_label.TextAlign = ContentAlignment.MiddleCenter;
			this.idle_colonists_label.BackColor = SystemColors.ActiveBorder;
			this.idle_colonists_label.Cursor = Cursors.No;
			this.idle_colonists_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label idleColonistsLabel = this.idle_colonists_label;
			point = new Point(40, 272);
			idleColonistsLabel.Location = point;
			this.idle_colonists_label.Name = "idle_colonists_label";
			Label idleColonistsLabel1 = this.idle_colonists_label;
			size = new Size(36, 32);
			idleColonistsLabel1.Size = size;
			this.idle_colonists_label.TabIndex = 19;
			this.idle_colonists_label.Text="0";
			this.idle_colonists_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_coffee_label.BackColor = Color.SaddleBrown;
			this.num_coffee_label.Cursor = Cursors.No;
			this.num_coffee_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.num_coffee_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numCoffeeLabel = this.num_coffee_label;
			point = new Point(392, 256);
			numCoffeeLabel.Location = point;
			this.num_coffee_label.Name = "num_coffee_label";
			Label numCoffeeLabel1 = this.num_coffee_label;
			size = new Size(36, 32);
			numCoffeeLabel1.Size = size;
			this.num_coffee_label.TabIndex = 28;
			this.num_coffee_label.Text="0";
			this.num_coffee_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_tobacco_label.BackColor=Color.Goldenrod;
			this.num_tobacco_label.Cursor = Cursors.No;
			this.num_tobacco_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numTobaccoLabel = this.num_tobacco_label;
			point = new Point(336, 256);
			numTobaccoLabel.Location = point;
			this.num_tobacco_label.Name = "num_tobacco_label";
			Label numTobaccoLabel1 = this.num_tobacco_label;
			size = new Size(36, 32);
			numTobaccoLabel1.Size = size;
			this.num_tobacco_label.TabIndex = 27;
			this.num_tobacco_label.Text="0";
			this.num_tobacco_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_corn_label.BackColor = Color.Yellow;
			this.num_corn_label.Cursor = Cursors.No;
			this.num_corn_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numCornLabel = this.num_corn_label;
			point = new Point(280, 256);
			numCornLabel.Location = point;
			this.num_corn_label.Name = "num_corn_label";
			Label numCornLabel1 = this.num_corn_label;
			size = new Size(36, 32);
			numCornLabel1.Size = size;
			this.num_corn_label.TabIndex = 26;
			this.num_corn_label.Text="0";
			this.num_corn_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_sugar_label.BackColor = Color.White;
			this.num_sugar_label.Cursor = Cursors.No;
			this.num_sugar_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numSugarLabel = this.num_sugar_label;
			point = new Point(224, 256);
			numSugarLabel.Location = point;
			this.num_sugar_label.Name = "num_sugar_label";
			Label numSugarLabel1 = this.num_sugar_label;
			size = new Size(36, 32);
			numSugarLabel1.Size = size;
			this.num_sugar_label.TabIndex = 25;
			this.num_sugar_label.Text="0";
			this.num_sugar_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_indigo_label.BackColor = Color.Blue;
			this.num_indigo_label.Cursor = Cursors.No;
			this.num_indigo_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.num_indigo_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numIndigoLabel = this.num_indigo_label;
			point = new Point(168, 256);
			numIndigoLabel.Location = point;
			this.num_indigo_label.Name = "num_indigo_label";
			Label numIndigoLabel1 = this.num_indigo_label;
			size = new Size(36, 32);
			numIndigoLabel1.Size = size;
			this.num_indigo_label.TabIndex = 24;
			this.num_indigo_label.Text="0";
			this.num_indigo_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_coffee_bank_label.BackColor = Color.SaddleBrown;
			this.num_coffee_bank_label.Cursor = Cursors.No;
			this.num_coffee_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.num_coffee_bank_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numCoffeeBankLabel = this.num_coffee_bank_label;
			point = new Point(728, 464);
			numCoffeeBankLabel.Location = point;
			this.num_coffee_bank_label.Name = "num_coffee_bank_label";
			Label numCoffeeBankLabel1 = this.num_coffee_bank_label;
			size = new Size(36, 32);
			numCoffeeBankLabel1.Size = size;
			this.num_coffee_bank_label.TabIndex = 48;
			this.num_coffee_bank_label.Text = "9";
			this.num_coffee_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_tobacco_bank_label.BackColor=Color.Goldenrod;
			this.num_tobacco_bank_label.Cursor = Cursors.No;
			this.num_tobacco_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numTobaccoBankLabel = this.num_tobacco_bank_label;
			point = new Point(728, 416);
			numTobaccoBankLabel.Location = point;
			this.num_tobacco_bank_label.Name = "num_tobacco_bank_label";
			Label numTobaccoBankLabel1 = this.num_tobacco_bank_label;
			size = new Size(36, 32);
			numTobaccoBankLabel1.Size = size;
			this.num_tobacco_bank_label.TabIndex = 47;
			this.num_tobacco_bank_label.Text = "9";
			this.num_tobacco_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_corn_bank_label.BackColor = Color.Yellow;
			this.num_corn_bank_label.Cursor = Cursors.No;
			this.num_corn_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numCornBankLabel = this.num_corn_bank_label;
			point = new Point(728, 368);
			numCornBankLabel.Location = point;
			this.num_corn_bank_label.Name = "num_corn_bank_label";
			Label numCornBankLabel1 = this.num_corn_bank_label;
			size = new Size(36, 32);
			numCornBankLabel1.Size = size;
			this.num_corn_bank_label.TabIndex = 46;
			this.num_corn_bank_label.Text = "10";
			this.num_corn_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_sugar_bank_label.BackColor = Color.White;
			this.num_sugar_bank_label.Cursor = Cursors.No;
			this.num_sugar_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numSugarBankLabel = this.num_sugar_bank_label;
			point = new Point(728, 320);
			numSugarBankLabel.Location = point;
			this.num_sugar_bank_label.Name = "num_sugar_bank_label";
			Label numSugarBankLabel1 = this.num_sugar_bank_label;
			size = new Size(36, 32);
			numSugarBankLabel1.Size = size;
			this.num_sugar_bank_label.TabIndex = 45;
			this.num_sugar_bank_label.Text = "11";
			this.num_sugar_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_indigo_bank_label.BackColor = Color.Blue;
			this.num_indigo_bank_label.Cursor = Cursors.No;
			this.num_indigo_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.num_indigo_bank_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numIndigoBankLabel = this.num_indigo_bank_label;
			point = new Point(728, 272);
			numIndigoBankLabel.Location = point;
			this.num_indigo_bank_label.Name = "num_indigo_bank_label";
			Label numIndigoBankLabel1 = this.num_indigo_bank_label;
			size = new Size(36, 32);
			numIndigoBankLabel1.Size = size;
			this.num_indigo_bank_label.TabIndex = 44;
			this.num_indigo_bank_label.Text = "11";
			this.num_indigo_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.plantation_available_slot6.BackColor=SystemColors.ActiveCaption;
			this.plantation_available_slot6.BorderStyle=BorderStyle.FixedSingle;
			this.plantation_available_slot6.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot6 = this.plantation_available_slot6;
			point = new Point(648, 344);
			plantationAvailableSlot6.Location = point;
			this.plantation_available_slot6.Name = "plantation_available_slot6";
			PictureBox plantationAvailableSlot61 = this.plantation_available_slot6;
			size = new Size(52, 56);
			plantationAvailableSlot61.Size = size;
			this.plantation_available_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plantation_available_slot6.TabIndex = 43;
			this.plantation_available_slot6.TabStop = false;
			this.plantation_available_slot6.Visible = false;
			this.plantation_available_slot5.BackColor=SystemColors.ActiveCaption;
			this.plantation_available_slot5.BorderStyle=BorderStyle.FixedSingle;
			this.plantation_available_slot5.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot5 = this.plantation_available_slot5;
			point = new Point(592, 344);
			plantationAvailableSlot5.Location = point;
			this.plantation_available_slot5.Name = "plantation_available_slot5";
			PictureBox plantationAvailableSlot51 = this.plantation_available_slot5;
			size = new Size(52, 56);
			plantationAvailableSlot51.Size = size;
			this.plantation_available_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plantation_available_slot5.TabIndex = 42;
			this.plantation_available_slot5.TabStop = false;
			this.plantation_available_slot5.Visible = false;
			this.plantation_available_slot2.BackColor=SystemColors.ActiveCaption;
			this.plantation_available_slot2.BorderStyle=BorderStyle.FixedSingle;
			this.plantation_available_slot2.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot2 = this.plantation_available_slot2;
			point = new Point(648, 472);
			plantationAvailableSlot2.Location = point;
			this.plantation_available_slot2.Name = "plantation_available_slot2";
			PictureBox plantationAvailableSlot21 = this.plantation_available_slot2;
			size = new Size(52, 56);
			plantationAvailableSlot21.Size = size;
			this.plantation_available_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plantation_available_slot2.TabIndex = 41;
			this.plantation_available_slot2.TabStop = false;
			this.plantation_available_slot2.Visible = false;
			this.plantation_available_slot4.BackColor=SystemColors.ActiveCaption;
			this.plantation_available_slot4.BorderStyle=BorderStyle.FixedSingle;
			this.plantation_available_slot4.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot4 = this.plantation_available_slot4;
			point = new Point(648, 408);
			plantationAvailableSlot4.Location = point;
			this.plantation_available_slot4.Name = "plantation_available_slot4";
			PictureBox plantationAvailableSlot41 = this.plantation_available_slot4;
			size = new Size(52, 56);
			plantationAvailableSlot41.Size = size;
			this.plantation_available_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plantation_available_slot4.TabIndex = 40;
			this.plantation_available_slot4.TabStop = false;
			this.plantation_available_slot4.Visible = false;
			this.plantation_available_slot1.BackColor=SystemColors.ActiveCaption;
			this.plantation_available_slot1.BorderStyle=BorderStyle.FixedSingle;
			this.plantation_available_slot1.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot1 = this.plantation_available_slot1;
			point = new Point(592, 472);
			plantationAvailableSlot1.Location = point;
			this.plantation_available_slot1.Name = "plantation_available_slot1";
			PictureBox plantationAvailableSlot11 = this.plantation_available_slot1;
			size = new Size(52, 56);
			plantationAvailableSlot11.Size = size;
			this.plantation_available_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plantation_available_slot1.TabIndex = 39;
			this.plantation_available_slot1.TabStop = false;
			this.plantation_available_slot1.Visible = false;
			this.tradehouse_slot4.BackColor=SystemColors.ActiveCaption;
			this.tradehouse_slot4.BorderStyle=BorderStyle.FixedSingle;
			this.tradehouse_slot4.Cursor = Cursors.No;
			PictureBox tradehouseSlot4 = this.tradehouse_slot4;
			point = new Point(652, 278);
			tradehouseSlot4.Location = point;
			this.tradehouse_slot4.Name = "tradehouse_slot4";
			PictureBox tradehouseSlot41 = this.tradehouse_slot4;
			size = new Size(32, 32);
			tradehouseSlot41.Size = size;
			this.tradehouse_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.tradehouse_slot4.TabIndex = 38;
			this.tradehouse_slot4.TabStop = false;
			this.tradehouse_slot3.BackColor=SystemColors.ActiveCaption;
			this.tradehouse_slot3.BorderStyle=BorderStyle.FixedSingle;
			this.tradehouse_slot3.Cursor = Cursors.No;
			PictureBox tradehouseSlot3 = this.tradehouse_slot3;
			point = new Point(612, 278);
			tradehouseSlot3.Location = point;
			this.tradehouse_slot3.Name = "tradehouse_slot3";
			PictureBox tradehouseSlot31 = this.tradehouse_slot3;
			size = new Size(32, 32);
			tradehouseSlot31.Size = size;
			this.tradehouse_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.tradehouse_slot3.TabIndex = 37;
			this.tradehouse_slot3.TabStop = false;
			this.tradehouse_slot2.BackColor=SystemColors.ActiveCaption;
			this.tradehouse_slot2.BorderStyle=BorderStyle.FixedSingle;
			this.tradehouse_slot2.Cursor = Cursors.No;
			PictureBox tradehouseSlot2 = this.tradehouse_slot2;
			point = new Point(652, 238);
			tradehouseSlot2.Location = point;
			this.tradehouse_slot2.Name = "tradehouse_slot2";
			PictureBox tradehouseSlot21 = this.tradehouse_slot2;
			size = new Size(32, 32);
			tradehouseSlot21.Size = size;
			this.tradehouse_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.tradehouse_slot2.TabIndex = 36;
			this.tradehouse_slot2.TabStop = false;
			this.tradehouse_slot1.BackColor=SystemColors.ActiveCaption;
			this.tradehouse_slot1.BorderStyle=BorderStyle.FixedSingle;
			this.tradehouse_slot1.Cursor = Cursors.No;
			PictureBox tradehouseSlot1 = this.tradehouse_slot1;
			point = new Point(612, 238);
			tradehouseSlot1.Location = point;
			this.tradehouse_slot1.Name = "tradehouse_slot1";
			PictureBox tradehouseSlot11 = this.tradehouse_slot1;
			size = new Size(32, 32);
			tradehouseSlot11.Size = size;
			this.tradehouse_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.tradehouse_slot1.TabIndex = 35;
			this.tradehouse_slot1.TabStop = false;
			this.plantation_available_slot3.BackColor=SystemColors.ActiveCaption;
			this.plantation_available_slot3.BorderStyle=BorderStyle.FixedSingle;
			this.plantation_available_slot3.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot3 = this.plantation_available_slot3;
			point = new Point(592, 408);
			plantationAvailableSlot3.Location = point;
			this.plantation_available_slot3.Name = "plantation_available_slot3";
			PictureBox plantationAvailableSlot31 = this.plantation_available_slot3;
			size = new Size(52, 56);
			plantationAvailableSlot31.Size = size;
			this.plantation_available_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plantation_available_slot3.TabIndex = 34;
			this.plantation_available_slot3.TabStop = false;
			this.plantation_available_slot3.Visible = false;
			this.role_settler_pic.Cursor = Cursors.Help;
			this.role_settler_pic.Image = (Image)resourceManager.GetObject("role_settler_pic.Image");
			PictureBox roleSettlerPic = this.role_settler_pic;
			point = new Point(520, 236);
			roleSettlerPic.Location = point;
			this.role_settler_pic.Name = "role_settler_pic";
			PictureBox roleSettlerPic1 = this.role_settler_pic;
			size = new Size(56, 48);
			roleSettlerPic1.Size = size;
			this.role_settler_pic.TabIndex = 49;
			this.role_settler_pic.TabStop = false;
			this.role_mayor_pic.Cursor = Cursors.Help;
			this.role_mayor_pic.Image = (Image)resourceManager.GetObject("role_mayor_pic.Image");
			PictureBox roleMayorPic = this.role_mayor_pic;
			point = new Point(520, 288);
			roleMayorPic.Location = point;
			this.role_mayor_pic.Name = "role_mayor_pic";
			PictureBox roleMayorPic1 = this.role_mayor_pic;
			size = new Size(60, 48);
			roleMayorPic1.Size = size;
			this.role_mayor_pic.TabIndex = 50;
			this.role_mayor_pic.TabStop = false;
			this.role_builder_pic.Cursor = Cursors.Help;
			this.role_builder_pic.Image = (Image)resourceManager.GetObject("role_builder_pic.Image");
			PictureBox roleBuilderPic = this.role_builder_pic;
			point = new Point(524, 336);
			roleBuilderPic.Location = point;
			this.role_builder_pic.Name = "role_builder_pic";
			PictureBox roleBuilderPic1 = this.role_builder_pic;
			size = new Size(56, 40);
			roleBuilderPic1.Size = size;
			this.role_builder_pic.TabIndex = 51;
			this.role_builder_pic.TabStop = false;
			this.role_craftsman_pic.Cursor = Cursors.Help;
			this.role_craftsman_pic.Image = (Image)resourceManager.GetObject("role_craftsman_pic.Image");
			PictureBox roleCraftsmanPic = this.role_craftsman_pic;
			point = new Point(528, 384);
			roleCraftsmanPic.Location = point;
			this.role_craftsman_pic.Name = "role_craftsman_pic";
			PictureBox roleCraftsmanPic1 = this.role_craftsman_pic;
			size = new Size(48, 40);
			roleCraftsmanPic1.Size = size;
			this.role_craftsman_pic.TabIndex = 52;
			this.role_craftsman_pic.TabStop = false;
			this.role_trader_pic.Cursor = Cursors.Help;
			this.role_trader_pic.Image = (Image)resourceManager.GetObject("role_trader_pic.Image");
			PictureBox roleTraderPic = this.role_trader_pic;
			point = new Point(528, 432);
			roleTraderPic.Location = point;
			this.role_trader_pic.Name = "role_trader_pic";
			PictureBox roleTraderPic1 = this.role_trader_pic;
			size = new Size(48, 40);
			roleTraderPic1.Size = size;
			this.role_trader_pic.TabIndex = 53;
			this.role_trader_pic.TabStop = false;
			this.role_captain_pic.Cursor = Cursors.Help;
			this.role_captain_pic.Image = (Image)resourceManager.GetObject("role_captain_pic.Image");
			PictureBox roleCaptainPic = this.role_captain_pic;
			point = new Point(532, 476);
			roleCaptainPic.Location = point;
			this.role_captain_pic.Name = "role_captain_pic";
			PictureBox roleCaptainPic1 = this.role_captain_pic;
			size = new Size(48, 44);
			roleCaptainPic1.Size = size;
			this.role_captain_pic.TabIndex = 54;
			this.role_captain_pic.TabStop = false;
			this.role_prospector1_pic.Cursor = Cursors.Help;
			this.role_prospector1_pic.Image = (Image)resourceManager.GetObject("role_prospector1_pic.Image");
			PictureBox roleProspector1Pic = this.role_prospector1_pic;
			point = new Point(532, 524);
			roleProspector1Pic.Location = point;
			this.role_prospector1_pic.Name = "role_prospector1_pic";
			PictureBox roleProspector1Pic1 = this.role_prospector1_pic;
			size = new Size(40, 40);
			roleProspector1Pic1.Size = size;
			this.role_prospector1_pic.TabIndex = 55;
			this.role_prospector1_pic.TabStop = false;
			this.colonist_ship_pic.Cursor = Cursors.Help;
			this.colonist_ship_pic.Image = (Image)resourceManager.GetObject("colonist_ship_pic.Image");
			PictureBox colonistShipPic = this.colonist_ship_pic;
			point = new Point(696, 20);
			colonistShipPic.Location = point;
			this.colonist_ship_pic.Name = "colonist_ship_pic";
			PictureBox colonistShipPic1 = this.colonist_ship_pic;
			size = new Size(100, 68);
			colonistShipPic1.Size = size;
			this.colonist_ship_pic.SizeMode = PictureBoxSizeMode.CenterImage;
			this.colonist_ship_pic.TabIndex = 95;
			this.colonist_ship_pic.TabStop = false;
			this.num_colonist_ship_label.BackColor = SystemColors.ActiveBorder;
			this.num_colonist_ship_label.Cursor = Cursors.Help;
			this.num_colonist_ship_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numColonistShipLabel = this.num_colonist_ship_label;
			point = new Point(732, 44);
			numColonistShipLabel.Location = point;
			this.num_colonist_ship_label.Name = "num_colonist_ship_label";
			Label numColonistShipLabel1 = this.num_colonist_ship_label;
			size = new Size(36, 32);
			numColonistShipLabel1.Size = size;
			this.num_colonist_ship_label.TabIndex = 96;
			this.num_colonist_ship_label.Text="0";
			this.num_colonist_ship_label.TextAlign = ContentAlignment.MiddleCenter;
			this.role_prospector2_pic.Cursor = Cursors.Help;
			this.role_prospector2_pic.Image = (Image)resourceManager.GetObject("role_prospector2_pic.Image");
			PictureBox roleProspector2Pic = this.role_prospector2_pic;
			point = new Point(584, 540);
			roleProspector2Pic.Location = point;
			this.role_prospector2_pic.Name = "role_prospector2_pic";
			PictureBox roleProspector2Pic1 = this.role_prospector2_pic;
			size = new Size(40, 40);
			roleProspector2Pic1.Size = size;
			this.role_prospector2_pic.TabIndex = 97;
			this.role_prospector2_pic.TabStop = false;
			this.num_colonist_bank_label.BackColor = SystemColors.ActiveBorder;
			this.num_colonist_bank_label.Cursor = Cursors.Help;
			this.num_colonist_bank_label.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numColonistBankLabel = this.num_colonist_bank_label;
			point = new Point(660, 20);
			numColonistBankLabel.Location = point;
			this.num_colonist_bank_label.Name = "num_colonist_bank_label";
			Label numColonistBankLabel1 = this.num_colonist_bank_label;
			size = new Size(36, 32);
			numColonistBankLabel1.Size = size;
			this.num_colonist_bank_label.TabIndex = 98;
			this.num_colonist_bank_label.Text="0";
			this.num_colonist_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.num_quarry_bank_label.BackColor = Color.Gray;
			this.num_quarry_bank_label.Cursor = Cursors.No;
			this.num_quarry_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			this.num_quarry_bank_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numQuarryBankLabel = this.num_quarry_bank_label;
			point = new Point(728, 530);
			numQuarryBankLabel.Location = point;
			this.num_quarry_bank_label.Name = "num_quarry_bank_label";
			Label numQuarryBankLabel1 = this.num_quarry_bank_label;
			size = new Size(36, 32);
			numQuarryBankLabel1.Size = size;
			this.num_quarry_bank_label.TabIndex = 99;
			this.num_quarry_bank_label.Text = "8";
			this.num_quarry_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			this.Label1.Cursor = Cursors.No;
			this.Label1.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label1 = this.Label1;
			point = new Point(8, 416);
			label1.Location = point;
			this.Label1.Name = "Label1";
			Label label11 = this.Label1;
			size = new Size(72, 16);
			label11.Size = size;
			this.Label1.TabIndex = 101;
			this.Label1.Text = "Doubloons";
			this.Label1.TextAlign = ContentAlignment.MiddleCenter;
			this.gold_label.BackColor = SystemColors.ActiveBorder;
			this.gold_label.Cursor = Cursors.No;
			this.gold_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label goldLabel = this.gold_label;
			point = new Point(24, 384);
			goldLabel.Location = point;
			this.gold_label.Name = "gold_label";
			Label goldLabel1 = this.gold_label;
			size = new Size(36, 32);
			goldLabel1.Size = size;
			this.gold_label.TabIndex=100;
			this.gold_label.Text="0";
			this.gold_label.TextAlign = ContentAlignment.MiddleCenter;
			this.settler_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.settler_bonus_label.Cursor = Cursors.Help;
			this.settler_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label settlerBonusLabel = this.settler_bonus_label;
			point = new Point(484, 248);
			settlerBonusLabel.Location = point;
			this.settler_bonus_label.Name = "settler_bonus_label";
			Label settlerBonusLabel1 = this.settler_bonus_label;
			size = new Size(36, 32);
			settlerBonusLabel1.Size = size;
			this.settler_bonus_label.TabIndex = 102;
			this.settler_bonus_label.Text="0";
			this.settler_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.mayor_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.mayor_bonus_label.Cursor = Cursors.Help;
			this.mayor_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label mayorBonusLabel = this.mayor_bonus_label;
			point = new Point(484, 296);
			mayorBonusLabel.Location = point;
			this.mayor_bonus_label.Name = "mayor_bonus_label";
			Label mayorBonusLabel1 = this.mayor_bonus_label;
			size = new Size(36, 32);
			mayorBonusLabel1.Size = size;
			this.mayor_bonus_label.TabIndex = 103;
			this.mayor_bonus_label.Text="0";
			this.mayor_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.builder_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.builder_bonus_label.Cursor = Cursors.Help;
			this.builder_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label builderBonusLabel = this.builder_bonus_label;
			point = new Point(484, 344);
			builderBonusLabel.Location = point;
			this.builder_bonus_label.Name = "builder_bonus_label";
			Label builderBonusLabel1 = this.builder_bonus_label;
			size = new Size(36, 32);
			builderBonusLabel1.Size = size;
			this.builder_bonus_label.TabIndex = 104;
			this.builder_bonus_label.Text="0";
			this.builder_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.craftsman_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.craftsman_bonus_label.Cursor = Cursors.Help;
			this.craftsman_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label craftsmanBonusLabel = this.craftsman_bonus_label;
			point = new Point(484, 388);
			craftsmanBonusLabel.Location = point;
			this.craftsman_bonus_label.Name = "craftsman_bonus_label";
			Label craftsmanBonusLabel1 = this.craftsman_bonus_label;
			size = new Size(36, 32);
			craftsmanBonusLabel1.Size = size;
			this.craftsman_bonus_label.TabIndex = 105;
			this.craftsman_bonus_label.Text="0";
			this.craftsman_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.trader_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.trader_bonus_label.Cursor = Cursors.Help;
			this.trader_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label traderBonusLabel = this.trader_bonus_label;
			point = new Point(484, 436);
			traderBonusLabel.Location = point;
			this.trader_bonus_label.Name = "trader_bonus_label";
			Label traderBonusLabel1 = this.trader_bonus_label;
			size = new Size(36, 32);
			traderBonusLabel1.Size = size;
			this.trader_bonus_label.TabIndex = 106;
			this.trader_bonus_label.Text="0";
			this.trader_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.captain_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.captain_bonus_label.Cursor = Cursors.Help;
			this.captain_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label captainBonusLabel = this.captain_bonus_label;
			point = new Point(484, 484);
			captainBonusLabel.Location = point;
			this.captain_bonus_label.Name = "captain_bonus_label";
			Label captainBonusLabel1 = this.captain_bonus_label;
			size = new Size(36, 32);
			captainBonusLabel1.Size = size;
			this.captain_bonus_label.TabIndex = 107;
			this.captain_bonus_label.Text="0";
			this.captain_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.pros1_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.pros1_bonus_label.Cursor = Cursors.Help;
			this.pros1_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label pros1BonusLabel = this.pros1_bonus_label;
			point = new Point(484, 528);
			pros1BonusLabel.Location = point;
			this.pros1_bonus_label.Name = "pros1_bonus_label";
			Label pros1BonusLabel1 = this.pros1_bonus_label;
			size = new Size(36, 32);
			pros1BonusLabel1.Size = size;
			this.pros1_bonus_label.TabIndex = 108;
			this.pros1_bonus_label.Text="0";
			this.pros1_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.pros2_bonus_label.BackColor = SystemColors.ActiveBorder;
			this.pros2_bonus_label.Cursor = Cursors.Help;
			this.pros2_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label pros2BonusLabel = this.pros2_bonus_label;
			point = new Point(628, 544);
			pros2BonusLabel.Location = point;
			this.pros2_bonus_label.Name = "pros2_bonus_label";
			Label pros2BonusLabel1 = this.pros2_bonus_label;
			size = new Size(36, 32);
			pros2BonusLabel1.Size = size;
			this.pros2_bonus_label.TabIndex = 109;
			this.pros2_bonus_label.Text="0";
			this.pros2_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			this.governor_pic.Cursor = Cursors.Help;
			this.governor_pic.Image = (Image)resourceManager.GetObject("governor_pic.Image");
			PictureBox governorPic = this.governor_pic;
			point = new Point(412, 504);
			governorPic.Location = point;
			this.governor_pic.Name = "governor_pic";
			PictureBox governorPic1 = this.governor_pic;
			size = new Size(52, 72);
			governorPic1.Size = size;
			this.governor_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			this.governor_pic.TabIndex = 111;
			this.governor_pic.TabStop = false;
			this.plant_p1_slot1.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot1.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot1.Cursor = Cursors.No;
			PictureBox plantP1Slot1 = this.plant_p1_slot1;
			point = new Point(94, 330);
			plantP1Slot1.Location = point;
			this.plant_p1_slot1.Name = "plant_p1_slot1";
			PictureBox plantP1Slot11 = this.plant_p1_slot1;
			size = new Size(72, 74);
			plantP1Slot11.Size = size;
			this.plant_p1_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot1.TabIndex = 112;
			this.plant_p1_slot1.TabStop = false;
			this.plant_p1_slot1.Visible = false;
			this.plant_p1_slot2.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot2.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot2.Cursor = Cursors.No;
			PictureBox plantP1Slot2 = this.plant_p1_slot2;
			point = new Point(94, 408);
			plantP1Slot2.Location = point;
			this.plant_p1_slot2.Name = "plant_p1_slot2";
			PictureBox plantP1Slot21 = this.plant_p1_slot2;
			size = new Size(72, 74);
			plantP1Slot21.Size = size;
			this.plant_p1_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot2.TabIndex = 113;
			this.plant_p1_slot2.TabStop = false;
			this.plant_p1_slot2.Visible = false;
			this.plant_p1_slot3.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot3.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot3.Cursor = Cursors.No;
			PictureBox plantP1Slot3 = this.plant_p1_slot3;
			point = new Point(94, 484);
			plantP1Slot3.Location = point;
			this.plant_p1_slot3.Name = "plant_p1_slot3";
			PictureBox plantP1Slot31 = this.plant_p1_slot3;
			size = new Size(72, 74);
			plantP1Slot31.Size = size;
			this.plant_p1_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot3.TabIndex = 114;
			this.plant_p1_slot3.TabStop = false;
			this.plant_p1_slot3.Visible = false;
			this.plant_p1_slot6.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot6.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot6.Cursor = Cursors.No;
			PictureBox plantP1Slot6 = this.plant_p1_slot6;
			point = new Point(170, 450);
			plantP1Slot6.Location = point;
			this.plant_p1_slot6.Name = "plant_p1_slot6";
			PictureBox plantP1Slot61 = this.plant_p1_slot6;
			size = new Size(72, 74);
			plantP1Slot61.Size = size;
			this.plant_p1_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot6.TabIndex = 117;
			this.plant_p1_slot6.TabStop = false;
			this.plant_p1_slot6.Visible = false;
			this.plant_p1_slot5.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot5.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot5.Cursor = Cursors.No;
			PictureBox plantP1Slot5 = this.plant_p1_slot5;
			point = new Point(170, 374);
			plantP1Slot5.Location = point;
			this.plant_p1_slot5.Name = "plant_p1_slot5";
			PictureBox plantP1Slot51 = this.plant_p1_slot5;
			size = new Size(72, 74);
			plantP1Slot51.Size = size;
			this.plant_p1_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot5.TabIndex = 116;
			this.plant_p1_slot5.TabStop = false;
			this.plant_p1_slot5.Visible = false;
			this.plant_p1_slot4.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot4.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot4.Cursor = Cursors.No;
			PictureBox plantP1Slot4 = this.plant_p1_slot4;
			point = new Point(170, 296);
			plantP1Slot4.Location = point;
			this.plant_p1_slot4.Name = "plant_p1_slot4";
			PictureBox plantP1Slot41 = this.plant_p1_slot4;
			size = new Size(72, 74);
			plantP1Slot41.Size = size;
			this.plant_p1_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot4.TabIndex = 115;
			this.plant_p1_slot4.TabStop = false;
			this.plant_p1_slot4.Visible = false;
			this.plant_p1_slot9.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot9.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot9.Cursor = Cursors.No;
			PictureBox plantP1Slot9 = this.plant_p1_slot9;
			point = new Point(246, 474);
			plantP1Slot9.Location = point;
			this.plant_p1_slot9.Name = "plant_p1_slot9";
			PictureBox plantP1Slot91 = this.plant_p1_slot9;
			size = new Size(72, 74);
			plantP1Slot91.Size = size;
			this.plant_p1_slot9.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot9.TabIndex = 120;
			this.plant_p1_slot9.TabStop = false;
			this.plant_p1_slot9.Visible = false;
			this.plant_p1_slot8.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot8.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot8.Cursor = Cursors.No;
			PictureBox plantP1Slot8 = this.plant_p1_slot8;
			point = new Point(246, 398);
			plantP1Slot8.Location = point;
			this.plant_p1_slot8.Name = "plant_p1_slot8";
			PictureBox plantP1Slot81 = this.plant_p1_slot8;
			size = new Size(72, 74);
			plantP1Slot81.Size = size;
			this.plant_p1_slot8.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot8.TabIndex = 119;
			this.plant_p1_slot8.TabStop = false;
			this.plant_p1_slot8.Visible = false;
			this.plant_p1_slot7.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot7.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot7.Cursor = Cursors.No;
			PictureBox plantP1Slot7 = this.plant_p1_slot7;
			point = new Point(246, 320);
			plantP1Slot7.Location = point;
			this.plant_p1_slot7.Name = "plant_p1_slot7";
			PictureBox plantP1Slot71 = this.plant_p1_slot7;
			size = new Size(72, 74);
			plantP1Slot71.Size = size;
			this.plant_p1_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot7.TabIndex = 118;
			this.plant_p1_slot7.TabStop = false;
			this.plant_p1_slot7.Visible = false;
			this.plant_p1_slot11.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot11.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot11.Cursor = Cursors.No;
			PictureBox plantP1Slot111 = this.plant_p1_slot11;
			point = new Point(322, 434);
			plantP1Slot111.Location = point;
			this.plant_p1_slot11.Name = "plant_p1_slot11";
			PictureBox pictureBox1 = this.plant_p1_slot11;
			size = new Size(72, 74);
			pictureBox1.Size = size;
			this.plant_p1_slot11.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot11.TabIndex = 123;
			this.plant_p1_slot11.TabStop = false;
			this.plant_p1_slot11.Visible = false;
			this.plant_p1_slot10.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot10.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot10.Cursor = Cursors.No;
			PictureBox plantP1Slot10 = this.plant_p1_slot10;
			point = new Point(322, 358);
			plantP1Slot10.Location = point;
			this.plant_p1_slot10.Name = "plant_p1_slot10";
			PictureBox plantP1Slot101 = this.plant_p1_slot10;
			size = new Size(72, 74);
			plantP1Slot101.Size = size;
			this.plant_p1_slot10.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot10.TabIndex = 122;
			this.plant_p1_slot10.TabStop = false;
			this.plant_p1_slot10.Visible = false;
			this.plant_p1_slot12.BackColor=SystemColors.ActiveCaption;
			this.plant_p1_slot12.BorderStyle=BorderStyle.FixedSingle;
			this.plant_p1_slot12.Cursor = Cursors.No;
			PictureBox plantP1Slot12 = this.plant_p1_slot12;
			point = new Point(398, 392);
			plantP1Slot12.Location = point;
			this.plant_p1_slot12.Name = "plant_p1_slot12";
			PictureBox plantP1Slot121 = this.plant_p1_slot12;
			size = new Size(72, 74);
			plantP1Slot121.Size = size;
			this.plant_p1_slot12.SizeMode=PictureBoxSizeMode.AutoSize;
			this.plant_p1_slot12.TabIndex = 124;
			this.plant_p1_slot12.TabStop = false;
			this.plant_p1_slot12.Visible = false;
			this.Label3.Cursor = Cursors.No;
			this.Label3.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label3 = this.Label3;
			point = new Point(606, 312);
			label3.Location = point;
			this.Label3.Name = "Label3";
			Label label31 = this.Label3;
			size = new Size(84, 16);
			label31.Size = size;
			this.Label3.TabIndex = 125;
			this.Label3.Text = "Trading House";
			this.Label3.TextAlign = ContentAlignment.MiddleCenter;
			this.build_p1_slot1.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot1.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot1 = this.build_p1_slot1;
			point = new Point(16, 38);
			buildP1Slot1.Location = point;
			this.build_p1_slot1.Name = "build_p1_slot1";
			PictureBox buildP1Slot11 = this.build_p1_slot1;
			size = new Size(114, 64);
			buildP1Slot11.Size = size;
			this.build_p1_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot1.TabIndex = 126;
			this.build_p1_slot1.TabStop = false;
			this.build_p1_slot1.Visible = false;
			this.build_p1_slot2.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot2.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot2 = this.build_p1_slot2;
			point = new Point(16, 106);
			buildP1Slot2.Location = point;
			this.build_p1_slot2.Name = "build_p1_slot2";
			PictureBox buildP1Slot21 = this.build_p1_slot2;
			size = new Size(114, 64);
			buildP1Slot21.Size = size;
			this.build_p1_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot2.TabIndex = 127;
			this.build_p1_slot2.TabStop = false;
			this.build_p1_slot2.Visible = false;
			this.build_p1_slot3.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot3.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot3 = this.build_p1_slot3;
			point = new Point(16, 174);
			buildP1Slot3.Location = point;
			this.build_p1_slot3.Name = "build_p1_slot3";
			PictureBox buildP1Slot31 = this.build_p1_slot3;
			size = new Size(114, 64);
			buildP1Slot31.Size = size;
			this.build_p1_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot3.TabIndex = 128;
			this.build_p1_slot3.TabStop = false;
			this.build_p1_slot3.Visible = false;
			this.build_p1_slot6.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot6.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot6 = this.build_p1_slot6;
			point = new Point(132, 174);
			buildP1Slot6.Location = point;
			this.build_p1_slot6.Name = "build_p1_slot6";
			PictureBox buildP1Slot61 = this.build_p1_slot6;
			size = new Size(114, 64);
			buildP1Slot61.Size = size;
			this.build_p1_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot6.TabIndex = 131;
			this.build_p1_slot6.TabStop = false;
			this.build_p1_slot6.Visible = false;
			this.build_p1_slot5.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot5.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot5 = this.build_p1_slot5;
			point = new Point(132, 106);
			buildP1Slot5.Location = point;
			this.build_p1_slot5.Name = "build_p1_slot5";
			PictureBox buildP1Slot51 = this.build_p1_slot5;
			size = new Size(114, 64);
			buildP1Slot51.Size = size;
			this.build_p1_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot5.TabIndex = 130;
			this.build_p1_slot5.TabStop = false;
			this.build_p1_slot5.Visible = false;
			this.build_p1_slot4.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot4.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot4 = this.build_p1_slot4;
			point = new Point(132, 38);
			buildP1Slot4.Location = point;
			this.build_p1_slot4.Name = "build_p1_slot4";
			PictureBox buildP1Slot41 = this.build_p1_slot4;
			size = new Size(114, 64);
			buildP1Slot41.Size = size;
			this.build_p1_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot4.TabIndex = 129;
			this.build_p1_slot4.TabStop = false;
			this.build_p1_slot4.Visible = false;
			this.build_p1_slot9.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot9.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot9 = this.build_p1_slot9;
			point = new Point(248, 174);
			buildP1Slot9.Location = point;
			this.build_p1_slot9.Name = "build_p1_slot9";
			PictureBox buildP1Slot91 = this.build_p1_slot9;
			size = new Size(114, 64);
			buildP1Slot91.Size = size;
			this.build_p1_slot9.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot9.TabIndex = 134;
			this.build_p1_slot9.TabStop = false;
			this.build_p1_slot9.Visible = false;
			this.build_p1_slot8.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot8.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot8 = this.build_p1_slot8;
			point = new Point(248, 106);
			buildP1Slot8.Location = point;
			this.build_p1_slot8.Name = "build_p1_slot8";
			PictureBox buildP1Slot81 = this.build_p1_slot8;
			size = new Size(114, 64);
			buildP1Slot81.Size = size;
			this.build_p1_slot8.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot8.TabIndex = 133;
			this.build_p1_slot8.TabStop = false;
			this.build_p1_slot8.Visible = false;
			this.build_p1_slot7.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot7.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot7 = this.build_p1_slot7;
			point = new Point(248, 38);
			buildP1Slot7.Location = point;
			this.build_p1_slot7.Name = "build_p1_slot7";
			PictureBox buildP1Slot71 = this.build_p1_slot7;
			size = new Size(114, 64);
			buildP1Slot71.Size = size;
			this.build_p1_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot7.TabIndex = 132;
			this.build_p1_slot7.TabStop = false;
			this.build_p1_slot7.Visible = false;
			this.build_p1_slot12.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot12.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot12 = this.build_p1_slot12;
			point = new Point(364, 174);
			buildP1Slot12.Location = point;
			this.build_p1_slot12.Name = "build_p1_slot12";
			PictureBox buildP1Slot121 = this.build_p1_slot12;
			size = new Size(114, 64);
			buildP1Slot121.Size = size;
			this.build_p1_slot12.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot12.TabIndex = 137;
			this.build_p1_slot12.TabStop = false;
			this.build_p1_slot12.Visible = false;
			this.build_p1_slot11.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot11.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot111 = this.build_p1_slot11;
			point = new Point(364, 106);
			buildP1Slot111.Location = point;
			this.build_p1_slot11.Name = "build_p1_slot11";
			PictureBox buildP1Slot112 = this.build_p1_slot11;
			size = new Size(114, 64);
			buildP1Slot112.Size = size;
			this.build_p1_slot11.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot11.TabIndex = 136;
			this.build_p1_slot11.TabStop = false;
			this.build_p1_slot11.Visible = false;
			this.build_p1_slot10.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot10.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot10 = this.build_p1_slot10;
			point = new Point(364, 38);
			buildP1Slot10.Location = point;
			this.build_p1_slot10.Name = "build_p1_slot10";
			PictureBox buildP1Slot101 = this.build_p1_slot10;
			size = new Size(114, 64);
			buildP1Slot101.Size = size;
			this.build_p1_slot10.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot10.TabIndex = 135;
			this.build_p1_slot10.TabStop = false;
			this.build_p1_slot10.Visible = false;
			this.build_p1_slot19.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot19.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot19.Cursor = Cursors.No;
			PictureBox buildP1Slot19 = this.build_p1_slot19;
			point = new Point(364, 38);
			buildP1Slot19.Location = point;
			this.build_p1_slot19.Name = "build_p1_slot19";
			PictureBox buildP1Slot191 = this.build_p1_slot19;
			size = new Size(114, 132);
			buildP1Slot191.Size = size;
			this.build_p1_slot19.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot19.TabIndex = 138;
			this.build_p1_slot19.TabStop = false;
			this.build_p1_slot19.Visible = false;
			this.build_p1_slot17.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot17.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot17.Cursor = Cursors.No;
			PictureBox buildP1Slot17 = this.build_p1_slot17;
			point = new Point(248, 38);
			buildP1Slot17.Location = point;
			this.build_p1_slot17.Name = "build_p1_slot17";
			PictureBox buildP1Slot171 = this.build_p1_slot17;
			size = new Size(114, 132);
			buildP1Slot171.Size = size;
			this.build_p1_slot17.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot17.TabIndex = 139;
			this.build_p1_slot17.TabStop = false;
			this.build_p1_slot17.Visible = false;
			this.build_p1_slot15.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot15.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot15.Cursor = Cursors.No;
			PictureBox buildP1Slot15 = this.build_p1_slot15;
			point = new Point(132, 38);
			buildP1Slot15.Location = point;
			this.build_p1_slot15.Name = "build_p1_slot15";
			PictureBox buildP1Slot151 = this.build_p1_slot15;
			size = new Size(114, 132);
			buildP1Slot151.Size = size;
			this.build_p1_slot15.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot15.TabIndex = 140;
			this.build_p1_slot15.TabStop = false;
			this.build_p1_slot15.Visible = false;
			this.build_p1_slot13.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot13.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot13.Cursor = Cursors.No;
			PictureBox buildP1Slot13 = this.build_p1_slot13;
			point = new Point(16, 38);
			buildP1Slot13.Location = point;
			this.build_p1_slot13.Name = "build_p1_slot13";
			PictureBox buildP1Slot131 = this.build_p1_slot13;
			size = new Size(114, 132);
			buildP1Slot131.Size = size;
			this.build_p1_slot13.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot13.TabIndex = 141;
			this.build_p1_slot13.TabStop = false;
			this.build_p1_slot13.Visible = false;
			Button nextTurnButton = this.next_turn_button;
			point = new Point(350, 304);
			nextTurnButton.Location = point;
			this.next_turn_button.Name = "next_turn_button";
			Button button = this.next_turn_button;
			size = new Size(104, 32);
			button.Size = size;
			this.next_turn_button.TabIndex = 142;
			this.next_turn_button.Visible = false;
			this.build_p1_slot14.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot14.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot14.Cursor = Cursors.No;
			PictureBox buildP1Slot14 = this.build_p1_slot14;
			point = new Point(16, 106);
			buildP1Slot14.Location = point;
			this.build_p1_slot14.Name = "build_p1_slot14";
			PictureBox buildP1Slot141 = this.build_p1_slot14;
			size = new Size(114, 132);
			buildP1Slot141.Size = size;
			this.build_p1_slot14.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot14.TabIndex = 146;
			this.build_p1_slot14.TabStop = false;
			this.build_p1_slot14.Visible = false;
			this.build_p1_slot16.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot16.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot16.Cursor = Cursors.No;
			PictureBox buildP1Slot16 = this.build_p1_slot16;
			point = new Point(132, 106);
			buildP1Slot16.Location = point;
			this.build_p1_slot16.Name = "build_p1_slot16";
			PictureBox buildP1Slot161 = this.build_p1_slot16;
			size = new Size(114, 132);
			buildP1Slot161.Size = size;
			this.build_p1_slot16.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot16.TabIndex = 145;
			this.build_p1_slot16.TabStop = false;
			this.build_p1_slot16.Visible = false;
			this.build_p1_slot18.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot18.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot18.Cursor = Cursors.No;
			PictureBox buildP1Slot18 = this.build_p1_slot18;
			point = new Point(248, 106);
			buildP1Slot18.Location = point;
			this.build_p1_slot18.Name = "build_p1_slot18";
			PictureBox buildP1Slot181 = this.build_p1_slot18;
			size = new Size(114, 132);
			buildP1Slot181.Size = size;
			this.build_p1_slot18.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot18.TabIndex = 144;
			this.build_p1_slot18.TabStop = false;
			this.build_p1_slot18.Visible = false;
			this.build_p1_slot20.BackColor=SystemColors.ActiveCaption;
			this.build_p1_slot20.BorderStyle=BorderStyle.FixedSingle;
			this.build_p1_slot20.Cursor = Cursors.No;
			PictureBox buildP1Slot20 = this.build_p1_slot20;
			point = new Point(364, 106);
			buildP1Slot20.Location = point;
			this.build_p1_slot20.Name = "build_p1_slot20";
			PictureBox buildP1Slot201 = this.build_p1_slot20;
			size = new Size(114, 132);
			buildP1Slot201.Size = size;
			this.build_p1_slot20.SizeMode=PictureBoxSizeMode.AutoSize;
			this.build_p1_slot20.TabIndex = 143;
			this.build_p1_slot20.TabStop = false;
			this.build_p1_slot20.Visible = false;
			this.Label6.Cursor = Cursors.No;
			this.Label6.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label6 = this.Label6;
			point = new Point(710, 238);
			label6.Location = point;
			this.Label6.Name = "Label6";
			Label label61 = this.Label6;
			size = new Size(72, 28);
			label61.Size = size;
			this.Label6.TabIndex = 147;
			this.Label6.Text = "Resource Bank";
			this.Label6.TextAlign = ContentAlignment.MiddleCenter;
			this.Label7.BackColor = SystemColors.ActiveBorder;
			this.Label7.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label7 = this.Label7;
			point = new Point(702, 580);
			label7.Location = point;
			this.Label7.Name = "Label7";
			Label label71 = this.Label7;
			size = new Size(26, 24);
			label71.Size = size;
			this.Label7.TabIndex = 148;
			this.Label7.Text="0";
			this.Label7.TextAlign = ContentAlignment.MiddleCenter;
			this.Label7.Visible = false;
			this.Label8.BackColor = SystemColors.ActiveBorder;
			this.Label8.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label8 = this.Label8;
			point = new Point(734, 580);
			label8.Location = point;
			this.Label8.Name = "Label8";
			Label label81 = this.Label8;
			size = new Size(26, 24);
			label81.Size = size;
			this.Label8.TabIndex = 149;
			this.Label8.Text="0";
			this.Label8.TextAlign = ContentAlignment.MiddleCenter;
			this.Label8.Visible = false;
			this.Label9.BackColor = SystemColors.ActiveBorder;
			this.Label9.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label9 = this.Label9;
			point = new Point(766, 580);
			label9.Location = point;
			this.Label9.Name = "Label9";
			Label label91 = this.Label9;
			size = new Size(26, 24);
			label91.Size = size;
			this.Label9.TabIndex = 150;
			this.Label9.Text="0";
			this.Label9.TextAlign = ContentAlignment.MiddleCenter;
			this.Label9.Visible = false;
			this.shipc_slot8.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot8.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot8.Cursor = Cursors.No;
			PictureBox shipcSlot8 = this.shipc_slot8;
			point = new Point(724, 204);
			shipcSlot8.Location = point;
			this.shipc_slot8.Name = "shipc_slot8";
			PictureBox shipcSlot81 = this.shipc_slot8;
			size = new Size(32, 32);
			shipcSlot81.Size = size;
			this.shipc_slot8.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot8.TabIndex = 201;
			this.shipc_slot8.TabStop = false;
			this.shipc_slot8.Visible = false;
			this.shipc_slot7.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot7.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot7.Cursor = Cursors.No;
			PictureBox shipcSlot7 = this.shipc_slot7;
			point = new Point(688, 204);
			shipcSlot7.Location = point;
			this.shipc_slot7.Name = "shipc_slot7";
			PictureBox shipcSlot71 = this.shipc_slot7;
			size = new Size(32, 32);
			shipcSlot71.Size = size;
			this.shipc_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot7.TabIndex = 200;
			this.shipc_slot7.TabStop = false;
			this.shipc_slot7.Visible = false;
			this.shipc_slot6.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot6.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot6.Cursor = Cursors.No;
			PictureBox shipcSlot6 = this.shipc_slot6;
			point = new Point(724, 168);
			shipcSlot6.Location = point;
			this.shipc_slot6.Name = "shipc_slot6";
			PictureBox shipcSlot61 = this.shipc_slot6;
			size = new Size(32, 32);
			shipcSlot61.Size = size;
			this.shipc_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot6.TabIndex = 199;
			this.shipc_slot6.TabStop = false;
			this.shipc_slot6.Visible = false;
			this.shipc_slot5.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot5.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot5.Cursor = Cursors.No;
			PictureBox shipcSlot5 = this.shipc_slot5;
			point = new Point(692, 168);
			shipcSlot5.Location = point;
			this.shipc_slot5.Name = "shipc_slot5";
			PictureBox shipcSlot51 = this.shipc_slot5;
			size = new Size(32, 32);
			shipcSlot51.Size = size;
			this.shipc_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot5.TabIndex = 198;
			this.shipc_slot5.TabStop = false;
			this.shipc_slot5.Visible = false;
			this.shipc_slot4.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot4.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot4.Cursor = Cursors.No;
			PictureBox shipcSlot4 = this.shipc_slot4;
			point = new Point(724, 138);
			shipcSlot4.Location = point;
			this.shipc_slot4.Name = "shipc_slot4";
			PictureBox shipcSlot41 = this.shipc_slot4;
			size = new Size(32, 32);
			shipcSlot41.Size = size;
			this.shipc_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot4.TabIndex = 197;
			this.shipc_slot4.TabStop = false;
			this.shipc_slot4.Visible = false;
			this.shipc_slot3.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot3.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot3.Cursor = Cursors.No;
			PictureBox shipcSlot3 = this.shipc_slot3;
			point = new Point(692, 138);
			shipcSlot3.Location = point;
			this.shipc_slot3.Name = "shipc_slot3";
			PictureBox shipcSlot31 = this.shipc_slot3;
			size = new Size(32, 32);
			shipcSlot31.Size = size;
			this.shipc_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot3.TabIndex = 196;
			this.shipc_slot3.TabStop = false;
			this.shipc_slot3.Visible = false;
			this.shipc_slot2.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot2.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot2.Cursor = Cursors.No;
			PictureBox shipcSlot2 = this.shipc_slot2;
			point = new Point(724, 106);
			shipcSlot2.Location = point;
			this.shipc_slot2.Name = "shipc_slot2";
			PictureBox shipcSlot21 = this.shipc_slot2;
			size = new Size(32, 32);
			shipcSlot21.Size = size;
			this.shipc_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot2.TabIndex = 195;
			this.shipc_slot2.TabStop = false;
			this.shipc_slot2.Visible = false;
			this.shipc_slot1.BackColor=SystemColors.ActiveCaption;
			this.shipc_slot1.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_slot1.Cursor = Cursors.No;
			PictureBox shipcSlot1 = this.shipc_slot1;
			point = new Point(692, 106);
			shipcSlot1.Location = point;
			this.shipc_slot1.Name = "shipc_slot1";
			PictureBox shipcSlot11 = this.shipc_slot1;
			size = new Size(32, 32);
			shipcSlot11.Size = size;
			this.shipc_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_slot1.TabIndex = 194;
			this.shipc_slot1.TabStop = false;
			this.shipc_slot1.Visible = false;
			this.shipb_slot7.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot7.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot7.Cursor = Cursors.No;
			PictureBox shipbSlot7 = this.shipb_slot7;
			point = new Point(634, 204);
			shipbSlot7.Location = point;
			this.shipb_slot7.Name = "shipb_slot7";
			PictureBox shipbSlot71 = this.shipb_slot7;
			size = new Size(32, 32);
			shipbSlot71.Size = size;
			this.shipb_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot7.TabIndex = 193;
			this.shipb_slot7.TabStop = false;
			this.shipb_slot7.Visible = false;
			this.shipb_slot6.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot6.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot6.Cursor = Cursors.No;
			PictureBox shipbSlot6 = this.shipb_slot6;
			point = new Point(600, 204);
			shipbSlot6.Location = point;
			this.shipb_slot6.Name = "shipb_slot6";
			PictureBox shipbSlot61 = this.shipb_slot6;
			size = new Size(32, 32);
			shipbSlot61.Size = size;
			this.shipb_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot6.TabIndex = 192;
			this.shipb_slot6.TabStop = false;
			this.shipb_slot6.Visible = false;
			this.shipb_slot5.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot5.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot5.Cursor = Cursors.No;
			PictureBox shipbSlot5 = this.shipb_slot5;
			point = new Point(614, 166);
			shipbSlot5.Location = point;
			this.shipb_slot5.Name = "shipb_slot5";
			PictureBox shipbSlot51 = this.shipb_slot5;
			size = new Size(32, 32);
			shipbSlot51.Size = size;
			this.shipb_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot5.TabIndex = 191;
			this.shipb_slot5.TabStop = false;
			this.shipb_slot5.Visible = false;
			this.shipb_slot4.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot4.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot4.Cursor = Cursors.No;
			PictureBox shipbSlot4 = this.shipb_slot4;
			point = new Point(630, 134);
			shipbSlot4.Location = point;
			this.shipb_slot4.Name = "shipb_slot4";
			PictureBox shipbSlot41 = this.shipb_slot4;
			size = new Size(32, 32);
			shipbSlot41.Size = size;
			this.shipb_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot4.TabIndex = 190;
			this.shipb_slot4.TabStop = false;
			this.shipb_slot4.Visible = false;
			this.shipb_slot3.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot3.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot3.Cursor = Cursors.No;
			PictureBox shipbSlot3 = this.shipb_slot3;
			point = new Point(600, 134);
			shipbSlot3.Location = point;
			this.shipb_slot3.Name = "shipb_slot3";
			PictureBox shipbSlot31 = this.shipb_slot3;
			size = new Size(32, 32);
			shipbSlot31.Size = size;
			this.shipb_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot3.TabIndex = 189;
			this.shipb_slot3.TabStop = false;
			this.shipb_slot3.Visible = false;
			this.shipb_slot2.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot2.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot2.Cursor = Cursors.No;
			PictureBox shipbSlot2 = this.shipb_slot2;
			point = new Point(630, 104);
			shipbSlot2.Location = point;
			this.shipb_slot2.Name = "shipb_slot2";
			PictureBox shipbSlot21 = this.shipb_slot2;
			size = new Size(32, 32);
			shipbSlot21.Size = size;
			this.shipb_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot2.TabIndex = 188;
			this.shipb_slot2.TabStop = false;
			this.shipb_slot2.Visible = false;
			this.shipb_slot1.BackColor=SystemColors.ActiveCaption;
			this.shipb_slot1.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_slot1.Cursor = Cursors.No;
			PictureBox shipbSlot1 = this.shipb_slot1;
			point = new Point(600, 104);
			shipbSlot1.Location = point;
			this.shipb_slot1.Name = "shipb_slot1";
			PictureBox shipbSlot11 = this.shipb_slot1;
			size = new Size(32, 32);
			shipbSlot11.Size = size;
			this.shipb_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_slot1.TabIndex = 187;
			this.shipb_slot1.TabStop = false;
			this.shipb_slot1.Visible = false;
			this.shipa_slot6.BackColor=SystemColors.ActiveCaption;
			this.shipa_slot6.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_slot6.Cursor = Cursors.No;
			PictureBox shipaSlot6 = this.shipa_slot6;
			point = new Point(548, 214);
			shipaSlot6.Location = point;
			this.shipa_slot6.Name = "shipa_slot6";
			PictureBox shipaSlot61 = this.shipa_slot6;
			size = new Size(32, 32);
			shipaSlot61.Size = size;
			this.shipa_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_slot6.TabIndex = 186;
			this.shipa_slot6.TabStop = false;
			this.shipa_slot6.Visible = false;
			this.shipa_slot5.BackColor=SystemColors.ActiveCaption;
			this.shipa_slot5.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_slot5.Cursor = Cursors.No;
			PictureBox shipaSlot5 = this.shipa_slot5;
			point = new Point(514, 208);
			shipaSlot5.Location = point;
			this.shipa_slot5.Name = "shipa_slot5";
			PictureBox shipaSlot51 = this.shipa_slot5;
			size = new Size(32, 32);
			shipaSlot51.Size = size;
			this.shipa_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_slot5.TabIndex = 185;
			this.shipa_slot5.TabStop = false;
			this.shipa_slot5.Visible = false;
			this.shipa_slot4.BackColor=SystemColors.ActiveCaption;
			this.shipa_slot4.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_slot4.Cursor = Cursors.No;
			PictureBox shipaSlot4 = this.shipa_slot4;
			point = new Point(544, 148);
			shipaSlot4.Location = point;
			this.shipa_slot4.Name = "shipa_slot4";
			PictureBox shipaSlot41 = this.shipa_slot4;
			size = new Size(32, 32);
			shipaSlot41.Size = size;
			this.shipa_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_slot4.TabIndex = 184;
			this.shipa_slot4.TabStop = false;
			this.shipa_slot4.Visible = false;
			this.shipa_slot3.BackColor=SystemColors.ActiveCaption;
			this.shipa_slot3.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_slot3.Cursor = Cursors.No;
			PictureBox shipaSlot3 = this.shipa_slot3;
			point = new Point(512, 148);
			shipaSlot3.Location = point;
			this.shipa_slot3.Name = "shipa_slot3";
			PictureBox shipaSlot31 = this.shipa_slot3;
			size = new Size(32, 32);
			shipaSlot31.Size = size;
			this.shipa_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_slot3.TabIndex = 183;
			this.shipa_slot3.TabStop = false;
			this.shipa_slot3.Visible = false;
			this.shipa_slot2.BackColor=SystemColors.ActiveCaption;
			this.shipa_slot2.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_slot2.Cursor = Cursors.No;
			PictureBox shipaSlot2 = this.shipa_slot2;
			point = new Point(544, 116);
			shipaSlot2.Location = point;
			this.shipa_slot2.Name = "shipa_slot2";
			PictureBox shipaSlot21 = this.shipa_slot2;
			size = new Size(32, 32);
			shipaSlot21.Size = size;
			this.shipa_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_slot2.TabIndex = 182;
			this.shipa_slot2.TabStop = false;
			this.shipa_slot2.Visible = false;
			this.shipa_slot1.BackColor=SystemColors.ActiveCaption;
			this.shipa_slot1.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_slot1.Cursor = Cursors.No;
			PictureBox shipaSlot1 = this.shipa_slot1;
			point = new Point(512, 116);
			shipaSlot1.Location = point;
			this.shipa_slot1.Name = "shipa_slot1";
			PictureBox shipaSlot11 = this.shipa_slot1;
			size = new Size(32, 32);
			shipaSlot11.Size = size;
			this.shipa_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_slot1.TabIndex = 181;
			this.shipa_slot1.TabStop = false;
			this.shipa_slot1.Visible = false;
			this.shipc_pic.BackColor=SystemColors.ActiveCaption;
			this.shipc_pic.BorderStyle=BorderStyle.FixedSingle;
			this.shipc_pic.Cursor = Cursors.No;
			this.shipc_pic.Image = (Image)resourceManager.GetObject("shipc_pic.Image");
			PictureBox shipcPic = this.shipc_pic;
			point = new Point(686, 88);
			shipcPic.Location = point;
			this.shipc_pic.Name = "shipc_pic";
			PictureBox shipcPic1 = this.shipc_pic;
			size = new Size(76, 134);
			shipcPic1.Size = size;
			this.shipc_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipc_pic.TabIndex = 180;
			this.shipc_pic.TabStop = false;
			this.shipb_pic.BackColor=SystemColors.ActiveCaption;
			this.shipb_pic.BorderStyle=BorderStyle.FixedSingle;
			this.shipb_pic.Cursor = Cursors.No;
			this.shipb_pic.Image = (Image)resourceManager.GetObject("shipb_pic.Image");
			PictureBox shipbPic = this.shipb_pic;
			point = new Point(594, 88);
			shipbPic.Location = point;
			this.shipb_pic.Name = "shipb_pic";
			PictureBox shipbPic1 = this.shipb_pic;
			size = new Size(76, 134);
			shipbPic1.Size = size;
			this.shipb_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipb_pic.TabIndex = 179;
			this.shipb_pic.TabStop = false;
			this.shipa_pic.BackColor=SystemColors.ActiveCaption;
			this.shipa_pic.BorderStyle=BorderStyle.FixedSingle;
			this.shipa_pic.Cursor = Cursors.No;
			this.shipa_pic.Image = (Image)resourceManager.GetObject("shipa_pic.Image");
			PictureBox shipaPic = this.shipa_pic;
			point = new Point(506, 88);
			shipaPic.Location = point;
			this.shipa_pic.Name = "shipa_pic";
			PictureBox shipaPic1 = this.shipa_pic;
			size = new Size(76, 134);
			shipaPic1.Size = size;
			this.shipa_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			this.shipa_pic.TabIndex = 178;
			this.shipa_pic.TabStop = false;
			this.Label10.BackColor = SystemColors.ActiveBorder;
			this.Label10.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label10 = this.Label10;
			point = new Point(272, 582);
			label10.Location = point;
			this.Label10.Name = "Label10";
			Label label101 = this.Label10;
			size = new Size(30, 20);
			label101.Size = size;
			this.Label10.TabIndex = 202;
			this.Label10.Text = "99";
			this.Label10.TextAlign = ContentAlignment.MiddleCenter;
			this.Label10.Visible = false;
			Button button1 = this.Button1;
			point = new Point(128, 582);
			button1.Location = point;
			this.Button1.Name = "Button1";
			Button button11 = this.Button1;
			size = new Size(56, 18);
			button11.Size = size;
			this.Button1.TabIndex = 203;
			this.Button1.TabStop = false;
			this.Button1.Text = "debug";
			this.Button1.Visible = false;
			this.wharf_pic.Cursor = Cursors.Hand;
			this.wharf_pic.Image = (Image)resourceManager.GetObject("wharf_pic.Image");
			PictureBox wharfPic = this.wharf_pic;
			point = new Point(770, 90);
			wharfPic.Location = point;
			this.wharf_pic.Name = "wharf_pic";
			PictureBox wharfPic1 = this.wharf_pic;
			size = new Size(30, 132);
			wharfPic1.Size = size;
			this.wharf_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			this.wharf_pic.TabIndex = 204;
			this.wharf_pic.TabStop = false;
			this.wharf_pic.Visible = false;
			this.vpremain_label.BackColor = SystemColors.ActiveBorder;
			this.vpremain_label.Cursor = Cursors.Help;
			this.vpremain_label.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label vpremainLabel = this.vpremain_label;
			point = new Point(508, 56);
			vpremainLabel.Location = point;
			this.vpremain_label.Name = "vpremain_label";
			Label vpremainLabel1 = this.vpremain_label;
			size = new Size(26, 24);
			vpremainLabel1.Size = size;
			this.vpremain_label.TabIndex = 205;
			this.vpremain_label.Text="0";
			this.vpremain_label.TextAlign = ContentAlignment.MiddleCenter;
			this.Label12.Cursor = Cursors.Help;
			this.Label12.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label12 = this.Label12;
			point = new Point(540, 60);
			label12.Location = point;
			this.Label12.Name = "Label12";
			Label label121 = this.Label12;
			size = new Size(88, 16);
			label121.Size = size;
			this.Label12.TabIndex = 206;
			this.Label12.Text = "VP Remaining";
			this.Label12.TextAlign = ContentAlignment.MiddleCenter;
			this.done_trading_button.Enabled=false;
			this.done_trading_button.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Button doneTradingButton = this.done_trading_button;
			point = new Point(350, 304);
			doneTradingButton.Location = point;
			this.done_trading_button.Name = "done_trading_button";
			Button doneTradingButton1 = this.done_trading_button;
			size = new Size(104, 32);
			doneTradingButton1.Size = size;
			this.done_trading_button.TabIndex = 207;
			this.done_trading_button.Text = "Done Trading";
			this.done_trading_button.Visible = false;
			Button button2 = this.Button2;
			point = new Point(190, 582);
			button2.Location = point;
			this.Button2.Name = "Button2";
			Button button21 = this.Button2;
			size = new Size(70, 18);
			button21.Size = size;
			this.Button2.TabIndex = 208;
			this.Button2.TabStop = false;
			this.Button2.Text = "Close Text";
			this.Button2.Visible = false;
			this.done_choosing_craftsman_button.Enabled=false;
			this.done_choosing_craftsman_button.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Button doneChoosingCraftsmanButton = this.done_choosing_craftsman_button;
			point = new Point(350, 304);
			doneChoosingCraftsmanButton.Location = point;
			this.done_choosing_craftsman_button.Name = "done_choosing_craftsman_button";
			Button doneChoosingCraftsmanButton1 = this.done_choosing_craftsman_button;
			size = new Size(104, 32);
			doneChoosingCraftsmanButton1.Size = size;
			this.done_choosing_craftsman_button.TabIndex = 209;
			this.done_choosing_craftsman_button.Text = "Done Choosing";
			this.done_choosing_craftsman_button.Visible = false;
			this.start_game_button.Enabled=false;
			this.start_game_button.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Button startGameButton = this.start_game_button;
			point = new Point(326, 296);
			startGameButton.Location = point;
			this.start_game_button.Name = "start_game_button";
			Button startGameButton1 = this.start_game_button;
			size = new Size(154, 50);
			startGameButton1.Size = size;
			this.start_game_button.TabIndex = 210;
			this.start_game_button.Text = "Start Game";
			this.start_game_button.Visible = false;
			this.PictureBox1.Cursor = Cursors.No;
			this.PictureBox1.Image = (Image)resourceManager.GetObject("PictureBox1.Image");
			PictureBox pictureBox11 = this.PictureBox1;
			point = new Point(724, 504);
			pictureBox11.Location = point;
			this.PictureBox1.Name = "PictureBox1";
			PictureBox pictureBox12 = this.PictureBox1;
			size = new Size(66, 68);
			pictureBox12.Size = size;
			this.PictureBox1.SizeMode=PictureBoxSizeMode.AutoSize;
			this.PictureBox1.TabIndex = 211;
			this.PictureBox1.TabStop = false;
			this.Label2.Cursor = Cursors.Help;
			this.Label2.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label2 = this.Label2;
			point = new Point(538, 28);
			label2.Location = point;
			this.Label2.Name = "Label2";
			Label label21 = this.Label2;
			size = new Size(116, 16);
			label21.Size = size;
			this.Label2.TabIndex = 213;
			this.Label2.Text = "Colonists Remaining";
			this.Label2.TextAlign = ContentAlignment.MiddleCenter;
			Button button3 = this.Button3;
			point = new Point(314, 580);
			button3.Location = point;
			this.Button3.Name = "Button3";
			Button button31 = this.Button3;
			size = new Size(42, 22);
			button31.Size = size;
			this.Button3.TabIndex = 214;
			this.Button3.Visible = false;
			this.nondis_label.Font = new Font("Microsoft Sans Serif", 21.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label nondisLabel = this.nondis_label;
			point = new Point(-2, 12);
			nondisLabel.Location = point;
			this.nondis_label.Name = "nondis_label";
			Label nondisLabel1 = this.nondis_label;
			size = new Size(800, 586);
			nondisLabel1.Size = size;
			this.nondis_label.TabIndex = 215;
			this.nondis_label.TextAlign = ContentAlignment.MiddleCenter;
			Button nondisButton = this.nondis_button;
			point = new Point(512, 418);
			nondisButton.Location = point;
			this.nondis_button.Name = "nondis_button";
			Button nondisButton1 = this.nondis_button;
			size = new Size(118, 36);
			nondisButton1.Size = size;
			this.nondis_button.TabIndex = 216;
			this.nondis_button.Text = "OK";
			this.auto_captain_button.Enabled=false;
			Button autoCaptainButton = this.auto_captain_button;
			point = new Point(350, 304);
			autoCaptainButton.Location = point;
			this.auto_captain_button.Name = "auto_captain_button";
			Button autoCaptainButton1 = this.auto_captain_button;
			size = new Size(104, 32);
			autoCaptainButton1.Size = size;
			this.auto_captain_button.TabIndex = 217;
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Visible = false;
			this.prcoverbox.Image = (Image)resourceManager.GetObject("prcoverbox.Image");
			PictureBox pictureBox2 = this.prcoverbox;
			point = new Point(16, 24);
			pictureBox2.Location = point;
			this.prcoverbox.Name = "prcoverbox";
			PictureBox pictureBox3 = this.prcoverbox;
			size = new Size(384, 530);
			pictureBox3.Size = size;
			this.prcoverbox.SizeMode=PictureBoxSizeMode.AutoSize;
			this.prcoverbox.TabIndex = 218;
			this.prcoverbox.TabStop = false;
			this.prnondistext.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label13 = this.prnondistext;
			point = new Point(420, 44);
			label13.Location = point;
			this.prnondistext.Name = "prnondistext";
			Label label14 = this.prnondistext;
			size = new Size(334, 144);
			label14.Size = size;
			this.prnondistext.TabIndex = 219;
			this.prnondistext.Text = "Puerto Rico v1.1 designed by Andreas Seyfarth - Programmed by Mark Blanco - Please run at resolution of at least 800x600";
			this.Label11.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label111 = this.Label11;
			point = new Point(422, 206);
			label111.Location = point;
			this.Label11.Name = "Label11";
			Label label112 = this.Label11;
			size = new Size(334, 138);
			label112.Size = size;
			this.Label11.TabIndex = 220;
			this.Label11.Text = "10/09/05 This version contains the Prospector bug fix - Please feel free to report gameplay bugs to markblanco@hotmail.com - http://www.markblanco.com";
			size = new Size(5, 13);
			this.AutoScaleBaseSize = size;
			size = new Size(802, 623);
			this.ClientSize = size;
			this.Controls.Add(this.Label11);
			this.Controls.Add(this.prnondistext);
			this.Controls.Add(this.prcoverbox);
			this.Controls.Add(this.nondis_button);
			this.Controls.Add(this.nondis_label);
			this.Controls.Add(this.start_game_button);
			this.Controls.Add(this.auto_captain_button);
			this.Controls.Add(this.Button3);
			this.Controls.Add(this.Label2);
			this.Controls.Add(this.num_quarry_bank_label);
			this.Controls.Add(this.PictureBox1);
			this.Controls.Add(this.done_choosing_craftsman_button);
			this.Controls.Add(this.Button2);
			this.Controls.Add(this.done_trading_button);
			this.Controls.Add(this.Label12);
			this.Controls.Add(this.vpremain_label);
			this.Controls.Add(this.wharf_pic);
			this.Controls.Add(this.Button1);
			this.Controls.Add(this.Label10);
			this.Controls.Add(this.shipc_slot8);
			this.Controls.Add(this.shipc_slot7);
			this.Controls.Add(this.shipc_slot6);
			this.Controls.Add(this.shipc_slot5);
			this.Controls.Add(this.shipc_slot4);
			this.Controls.Add(this.shipc_slot3);
			this.Controls.Add(this.shipc_slot2);
			this.Controls.Add(this.shipc_slot1);
			this.Controls.Add(this.shipb_slot7);
			this.Controls.Add(this.shipb_slot6);
			this.Controls.Add(this.shipb_slot5);
			this.Controls.Add(this.shipb_slot4);
			this.Controls.Add(this.shipb_slot3);
			this.Controls.Add(this.shipb_slot2);
			this.Controls.Add(this.shipb_slot1);
			this.Controls.Add(this.shipa_slot6);
			this.Controls.Add(this.shipa_slot5);
			this.Controls.Add(this.shipa_slot4);
			this.Controls.Add(this.shipa_slot3);
			this.Controls.Add(this.shipa_slot2);
			this.Controls.Add(this.shipa_slot1);
			this.Controls.Add(this.shipc_pic);
			this.Controls.Add(this.shipb_pic);
			this.Controls.Add(this.shipa_pic);
			this.Controls.Add(this.Label9);
			this.Controls.Add(this.Label8);
			this.Controls.Add(this.Label7);
			this.Controls.Add(this.Label6);
			this.Controls.Add(this.build_p1_slot14);
			this.Controls.Add(this.build_p1_slot16);
			this.Controls.Add(this.build_p1_slot18);
			this.Controls.Add(this.build_p1_slot20);
			this.Controls.Add(this.next_turn_button);
			this.Controls.Add(this.build_p1_slot13);
			this.Controls.Add(this.build_p1_slot15);
			this.Controls.Add(this.build_p1_slot17);
			this.Controls.Add(this.build_p1_slot19);
			this.Controls.Add(this.build_p1_slot12);
			this.Controls.Add(this.build_p1_slot11);
			this.Controls.Add(this.build_p1_slot10);
			this.Controls.Add(this.build_p1_slot9);
			this.Controls.Add(this.build_p1_slot8);
			this.Controls.Add(this.build_p1_slot7);
			this.Controls.Add(this.build_p1_slot6);
			this.Controls.Add(this.build_p1_slot5);
			this.Controls.Add(this.build_p1_slot4);
			this.Controls.Add(this.build_p1_slot3);
			this.Controls.Add(this.build_p1_slot2);
			this.Controls.Add(this.build_p1_slot1);
			this.Controls.Add(this.Label3);
			this.Controls.Add(this.plant_p1_slot12);
			this.Controls.Add(this.plant_p1_slot11);
			this.Controls.Add(this.plant_p1_slot10);
			this.Controls.Add(this.plant_p1_slot9);
			this.Controls.Add(this.plant_p1_slot8);
			this.Controls.Add(this.plant_p1_slot7);
			this.Controls.Add(this.plant_p1_slot6);
			this.Controls.Add(this.plant_p1_slot5);
			this.Controls.Add(this.plant_p1_slot4);
			this.Controls.Add(this.plant_p1_slot3);
			this.Controls.Add(this.plant_p1_slot2);
			this.Controls.Add(this.plant_p1_slot1);
			this.Controls.Add(this.governor_pic);
			this.Controls.Add(this.pros2_bonus_label);
			this.Controls.Add(this.pros1_bonus_label);
			this.Controls.Add(this.captain_bonus_label);
			this.Controls.Add(this.trader_bonus_label);
			this.Controls.Add(this.craftsman_bonus_label);
			this.Controls.Add(this.builder_bonus_label);
			this.Controls.Add(this.mayor_bonus_label);
			this.Controls.Add(this.settler_bonus_label);
			this.Controls.Add(this.Label1);
			this.Controls.Add(this.gold_label);
			this.Controls.Add(this.num_colonist_bank_label);
			this.Controls.Add(this.role_prospector2_pic);
			this.Controls.Add(this.num_colonist_ship_label);
			this.Controls.Add(this.colonist_ship_pic);
			this.Controls.Add(this.role_prospector1_pic);
			this.Controls.Add(this.role_captain_pic);
			this.Controls.Add(this.role_trader_pic);
			this.Controls.Add(this.role_craftsman_pic);
			this.Controls.Add(this.role_builder_pic);
			this.Controls.Add(this.role_mayor_pic);
			this.Controls.Add(this.role_settler_pic);
			this.Controls.Add(this.num_coffee_bank_label);
			this.Controls.Add(this.num_tobacco_bank_label);
			this.Controls.Add(this.num_corn_bank_label);
			this.Controls.Add(this.num_sugar_bank_label);
			this.Controls.Add(this.num_indigo_bank_label);
			this.Controls.Add(this.plantation_available_slot6);
			this.Controls.Add(this.plantation_available_slot5);
			this.Controls.Add(this.plantation_available_slot2);
			this.Controls.Add(this.plantation_available_slot4);
			this.Controls.Add(this.plantation_available_slot1);
			this.Controls.Add(this.tradehouse_slot4);
			this.Controls.Add(this.tradehouse_slot3);
			this.Controls.Add(this.tradehouse_slot2);
			this.Controls.Add(this.tradehouse_slot1);
			this.Controls.Add(this.plantation_available_slot3);
			this.Controls.Add(this.num_coffee_label);
			this.Controls.Add(this.num_tobacco_label);
			this.Controls.Add(this.num_corn_label);
			this.Controls.Add(this.num_sugar_label);
			this.Controls.Add(this.num_indigo_label);
			this.Controls.Add(this.Label5);
			this.Controls.Add(this.Label4);
			this.Controls.Add(this.vp_chips_label);
			this.Controls.Add(this.vp_total_label);
			this.Controls.Add(this.idle_colonists_label);
			this.Controls.Add(this.player_board_pic);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			size = new Size(808, 659);
			this.MaximumSize = size;
			this.Menu = this.MainMenu1;
			size = new Size(808, 659);
			this.MinimumSize = size;
			this.Name = "Form1";
			this.StartPosition = FormStartPosition.CenterScreen;
			this.Text = "Puerto Rico";
			this.ResumeLayout(false);
		}

		private void Label12_Click(object sender, EventArgs e)
		{
			this.help_vp_remaining();
		}

		private void Label2_Click(object sender, EventArgs e)
		{
			this.choose_quarry();
		}

		private void Label2_Click_1(object sender, EventArgs e)
		{
			this.help_colonists_bank();
		}

		public void load_shipa()
		{
			if (!this.captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (this.shipa_array[1] == 0)
			{
				this.p1_num_shipped = 0;
				if (this.ready_to_ship_indigo)
				{
					this.tempinteger = 0;
					this.tempstring2 = "Indigo";
				}
				if (this.ready_to_ship_sugar)
				{
					this.tempinteger = 1;
					this.tempstring2 = "Sugar";
				}
				if (this.ready_to_ship_corn)
				{
					this.tempinteger = 2;
					this.tempstring2 = "Corn";
				}
				if (this.ready_to_ship_tobacco)
				{
					this.tempinteger = 3;
					this.tempstring2 = "Tobacco";
				}
				if (this.ready_to_ship_coffee)
				{
					this.tempinteger = 4;
					this.tempstring2 = "Coffee";
				}
				string[] strArray = new string[] { "Are you sure you want to load the", Conversion.Str(this.shipa_array[0]), " capacity ship with ", this.tempstring2, "?" };
				this.confirmbox_nopic(string.Concat(strArray));
				if (this.confirmed)
				{
					if (!this.p1_done_shipping && this.goods_p1_array[this.tempinteger] >= this.shipa_array[0])
					{
						this.shipa_array[1] = this.shipa_array[0];
						this.shipa_array[2] = checked(this.tempinteger + 1);
						this.goods_p1_array[this.tempinteger] = checked(this.goods_p1_array[this.tempinteger] - this.shipa_array[0]);
						this.p1_num_shipped = this.shipa_array[0];
						this.end_shipping_turn_p1();
					}
					if (!this.p1_done_shipping && this.goods_p1_array[this.tempinteger] < this.shipa_array[0])
					{
						this.shipa_array[1] = this.goods_p1_array[this.tempinteger];
						this.shipa_array[2] = checked(this.tempinteger + 1);
						this.goods_p1_array[this.tempinteger] = 0;
						this.p1_num_shipped = this.shipa_array[1];
						this.end_shipping_turn_p1();
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.end_shipping_turn_p1();
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					strArray = new string[] { "You shipped your ", this.tempstring2, "  for", Conversion.Str(this.p1_num_shipped), " Victory Points" };
					this.infobox_role(string.Concat(strArray), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void load_shipb()
		{
			if (!this.captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (this.shipb_array[1] == 0)
			{
				this.p1_num_shipped = 0;
				if (this.ready_to_ship_indigo)
				{
					this.tempinteger = 0;
					this.tempstring2 = "Indigo";
				}
				if (this.ready_to_ship_sugar)
				{
					this.tempinteger = 1;
					this.tempstring2 = "Sugar";
				}
				if (this.ready_to_ship_corn)
				{
					this.tempinteger = 2;
					this.tempstring2 = "Corn";
				}
				if (this.ready_to_ship_tobacco)
				{
					this.tempinteger = 3;
					this.tempstring2 = "Tobacco";
				}
				if (this.ready_to_ship_coffee)
				{
					this.tempinteger = 4;
					this.tempstring2 = "Coffee";
				}
				string[] strArray = new string[] { "Are you sure you want to load the", Conversion.Str(this.shipb_array[0]), " capacity ship with ", this.tempstring2, "?" };
				this.confirmbox_nopic(string.Concat(strArray));
				if (this.confirmed)
				{
					if (!this.p1_done_shipping && this.goods_p1_array[this.tempinteger] >= this.shipb_array[0])
					{
						this.shipb_array[1] = this.shipb_array[0];
						this.shipb_array[2] = checked(this.tempinteger + 1);
						this.goods_p1_array[this.tempinteger] = checked(this.goods_p1_array[this.tempinteger] - this.shipb_array[0]);
						this.p1_num_shipped = this.shipb_array[0];
						this.end_shipping_turn_p1();
					}
					if (!this.p1_done_shipping && this.goods_p1_array[this.tempinteger] < this.shipb_array[0])
					{
						this.shipb_array[1] = this.goods_p1_array[this.tempinteger];
						this.shipb_array[2] = checked(this.tempinteger + 1);
						this.goods_p1_array[this.tempinteger] = 0;
						this.p1_num_shipped = this.shipb_array[1];
						this.end_shipping_turn_p1();
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.end_shipping_turn_p1();
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					strArray = new string[] { "You shipped your ", this.tempstring2, "  for", Conversion.Str(this.p1_num_shipped), " Victory Points" };
					this.infobox_role(string.Concat(strArray), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void load_shipc()
		{
			if (!this.captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (this.shipc_array[1] == 0)
			{
				this.p1_num_shipped = 0;
				if (this.ready_to_ship_indigo)
				{
					this.tempinteger = 0;
					this.tempstring2 = "Indigo";
				}
				if (this.ready_to_ship_sugar)
				{
					this.tempinteger = 1;
					this.tempstring2 = "Sugar";
				}
				if (this.ready_to_ship_corn)
				{
					this.tempinteger = 2;
					this.tempstring2 = "Corn";
				}
				if (this.ready_to_ship_tobacco)
				{
					this.tempinteger = 3;
					this.tempstring2 = "Tobacco";
				}
				if (this.ready_to_ship_coffee)
				{
					this.tempinteger = 4;
					this.tempstring2 = "Coffee";
				}
				string[] strArray = new string[] { "Are you sure you want to load the", Conversion.Str(this.shipc_array[0]), " capacity ship with ", this.tempstring2, "?" };
				this.confirmbox_nopic(string.Concat(strArray));
				if (this.confirmed)
				{
					if (!this.p1_done_shipping && this.goods_p1_array[this.tempinteger] >= this.shipc_array[0])
					{
						this.shipc_array[1] = this.shipc_array[0];
						this.shipc_array[2] = checked(this.tempinteger + 1);
						this.goods_p1_array[this.tempinteger] = checked(this.goods_p1_array[this.tempinteger] - this.shipc_array[0]);
						this.p1_num_shipped = this.shipc_array[0];
						this.end_shipping_turn_p1();
					}
					if (!this.p1_done_shipping && this.goods_p1_array[this.tempinteger] < this.shipc_array[0])
					{
						this.shipc_array[1] = this.goods_p1_array[this.tempinteger];
						this.shipc_array[2] = checked(this.tempinteger + 1);
						this.goods_p1_array[this.tempinteger] = 0;
						this.p1_num_shipped = this.shipc_array[1];
						this.end_shipping_turn_p1();
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.end_shipping_turn_p1();
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					strArray = new string[] { "You shipped your ", this.tempstring2, "  for", Conversion.Str(this.p1_num_shipped), " Victory Points" };
					this.infobox_role(string.Concat(strArray), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void load_wharf()
		{
			if (!this.captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (!this.p1_used_wharf)
			{
				this.p1_num_shipped = 0;
				if (this.ready_to_ship_indigo)
				{
					this.tempinteger = 0;
					this.tempstring2 = "Indigo";
				}
				if (this.ready_to_ship_sugar)
				{
					this.tempinteger = 1;
					this.tempstring2 = "Sugar";
				}
				if (this.ready_to_ship_corn)
				{
					this.tempinteger = 2;
					this.tempstring2 = "Corn";
				}
				if (this.ready_to_ship_tobacco)
				{
					this.tempinteger = 3;
					this.tempstring2 = "Tobacco";
				}
				if (this.ready_to_ship_coffee)
				{
					this.tempinteger = 4;
					this.tempstring2 = "Coffee";
				}
				this.confirmbox_building1(string.Concat("Are you sure you want use your Wharf to load ", this.tempstring2, "?"), 361);
				if (this.confirmed)
				{
					if (!this.p1_done_shipping)
					{
						this.p1_num_shipped = this.goods_p1_array[this.tempinteger];
						this.goods_bank_array[this.tempinteger] = checked(this.goods_bank_array[this.tempinteger] + this.goods_p1_array[this.tempinteger]);
						this.goods_p1_array[this.tempinteger] = 0;
						this.p1_used_wharf = true;
						this.end_shipping_turn_p1();
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.end_shipping_turn_p1();
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					string[] strArray = new string[] { "You shipped your ", this.tempstring2, "  for", Conversion.Str(this.p1_num_shipped), " Victory Points" };
					this.infobox_role(string.Concat(strArray), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void log_governor()
		{
			if (this.current_governor == 1)
			{
				this.sw.WriteLine("Player1 is the new governor");
			}
			if (this.current_governor == 2)
			{
				this.sw.WriteLine("Player2 is the new governor");
			}
			if (this.current_governor == 3)
			{
				this.sw.WriteLine("Player3 is the new governor");
			}
			if (this.current_governor == 4)
			{
				this.sw.WriteLine("Player4 is the new governor");
			}
			if (this.current_governor == 5)
			{
				this.sw.WriteLine("Player5 is the new governor");
			}
		}

		public void log_process_role(object pnum, object logrole)
		{
			if (ObjectType.ObjTst(pnum, "p1", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("          Player1 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p2", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("          Player2 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p3", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("          Player3 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p4", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("          Player4 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p5", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("          Player5 is processing the ", logrole));
			}
		}

		public void log_role_chooser(object pnum, object logrole)
		{
			if (ObjectType.ObjTst(pnum, "p1", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("     Player1 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p2", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("     Player2 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p3", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("     Player3 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p4", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("     Player4 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p5", false) == 0)
			{
				this.sw.WriteLine(ObjectType.AddObj("     Player5 chose the ", logrole));
			}
		}

		[STAThread]
		public static void Main()
		{
			Application.Run(new Form1());
		}

		public void make_building_pics_active()
		{
			this.build_p1_slot1.Cursor = Cursors.Hand;
			this.build_p1_slot2.Cursor = Cursors.Hand;
			this.build_p1_slot3.Cursor = Cursors.Hand;
			this.build_p1_slot4.Cursor = Cursors.Hand;
			this.build_p1_slot5.Cursor = Cursors.Hand;
			this.build_p1_slot6.Cursor = Cursors.Hand;
			this.build_p1_slot7.Cursor = Cursors.Hand;
			this.build_p1_slot8.Cursor = Cursors.Hand;
			this.build_p1_slot9.Cursor = Cursors.Hand;
			this.build_p1_slot10.Cursor = Cursors.Hand;
			this.build_p1_slot11.Cursor = Cursors.Hand;
			this.build_p1_slot12.Cursor = Cursors.Hand;
			this.build_p1_slot13.Cursor = Cursors.Hand;
			this.build_p1_slot14.Cursor = Cursors.Hand;
			this.build_p1_slot15.Cursor = Cursors.Hand;
			this.build_p1_slot16.Cursor = Cursors.Hand;
			this.build_p1_slot17.Cursor = Cursors.Hand;
			this.build_p1_slot18.Cursor = Cursors.Hand;
			this.build_p1_slot19.Cursor = Cursors.Hand;
			this.build_p1_slot20.Cursor = Cursors.Hand;
		}

		public void make_building_pics_inactive()
		{
			this.build_p1_slot1.Cursor = Cursors.No;
			this.build_p1_slot2.Cursor = Cursors.No;
			this.build_p1_slot3.Cursor = Cursors.No;
			this.build_p1_slot4.Cursor = Cursors.No;
			this.build_p1_slot5.Cursor = Cursors.No;
			this.build_p1_slot6.Cursor = Cursors.No;
			this.build_p1_slot7.Cursor = Cursors.No;
			this.build_p1_slot8.Cursor = Cursors.No;
			this.build_p1_slot9.Cursor = Cursors.No;
			this.build_p1_slot10.Cursor = Cursors.No;
			this.build_p1_slot11.Cursor = Cursors.No;
			this.build_p1_slot12.Cursor = Cursors.No;
			this.build_p1_slot13.Cursor = Cursors.No;
			this.build_p1_slot14.Cursor = Cursors.No;
			this.build_p1_slot15.Cursor = Cursors.No;
			this.build_p1_slot16.Cursor = Cursors.No;
			this.build_p1_slot17.Cursor = Cursors.No;
			this.build_p1_slot18.Cursor = Cursors.No;
			this.build_p1_slot19.Cursor = Cursors.No;
			this.build_p1_slot20.Cursor = Cursors.No;
		}

		public void make_goods_bank_buttons_active()
		{
			this.num_indigo_bank_label.Cursor = Cursors.Hand;
			this.num_sugar_bank_label.Cursor = Cursors.Hand;
			this.num_corn_bank_label.Cursor = Cursors.Hand;
			this.num_tobacco_bank_label.Cursor = Cursors.Hand;
			this.num_coffee_bank_label.Cursor = Cursors.Hand;
		}

		public void make_goods_bank_buttons_inactive()
		{
			this.num_indigo_bank_label.Cursor = Cursors.No;
			this.num_sugar_bank_label.Cursor = Cursors.No;
			this.num_corn_bank_label.Cursor = Cursors.No;
			this.num_tobacco_bank_label.Cursor = Cursors.No;
			this.num_coffee_bank_label.Cursor = Cursors.No;
		}

		public void make_plantation_pics_active()
		{
			this.plant_p1_slot1.Cursor = Cursors.Hand;
			this.plant_p1_slot2.Cursor = Cursors.Hand;
			this.plant_p1_slot3.Cursor = Cursors.Hand;
			this.plant_p1_slot4.Cursor = Cursors.Hand;
			this.plant_p1_slot5.Cursor = Cursors.Hand;
			this.plant_p1_slot6.Cursor = Cursors.Hand;
			this.plant_p1_slot7.Cursor = Cursors.Hand;
			this.plant_p1_slot8.Cursor = Cursors.Hand;
			this.plant_p1_slot9.Cursor = Cursors.Hand;
			this.plant_p1_slot10.Cursor = Cursors.Hand;
			this.plant_p1_slot11.Cursor = Cursors.Hand;
			this.plant_p1_slot12.Cursor = Cursors.Hand;
		}

		public void make_plantation_pics_inactive()
		{
			this.plant_p1_slot1.Cursor = Cursors.No;
			this.plant_p1_slot2.Cursor = Cursors.No;
			this.plant_p1_slot3.Cursor = Cursors.No;
			this.plant_p1_slot4.Cursor = Cursors.No;
			this.plant_p1_slot5.Cursor = Cursors.No;
			this.plant_p1_slot6.Cursor = Cursors.No;
			this.plant_p1_slot7.Cursor = Cursors.No;
			this.plant_p1_slot8.Cursor = Cursors.No;
			this.plant_p1_slot9.Cursor = Cursors.No;
			this.plant_p1_slot10.Cursor = Cursors.No;
			this.plant_p1_slot11.Cursor = Cursors.No;
			this.plant_p1_slot12.Cursor = Cursors.No;
		}

		public void make_player_goods_buttons_active()
		{
			this.num_indigo_label.Cursor = Cursors.Hand;
			this.num_sugar_label.Cursor = Cursors.Hand;
			this.num_corn_label.Cursor = Cursors.Hand;
			this.num_tobacco_label.Cursor = Cursors.Hand;
			this.num_coffee_label.Cursor = Cursors.Hand;
		}

		public void make_player_goods_buttons_inactive()
		{
			this.num_indigo_label.Cursor = Cursors.No;
			this.num_sugar_label.Cursor = Cursors.No;
			this.num_corn_label.Cursor = Cursors.No;
			this.num_tobacco_label.Cursor = Cursors.No;
			this.num_coffee_label.Cursor = Cursors.No;
		}

		public void make_role_buttons_active()
		{
			this.role_settler_pic.Cursor = Cursors.Hand;
			this.role_mayor_pic.Cursor = Cursors.Hand;
			this.role_builder_pic.Cursor = Cursors.Hand;
			this.role_craftsman_pic.Cursor = Cursors.Hand;
			this.role_trader_pic.Cursor = Cursors.Hand;
			this.role_captain_pic.Cursor = Cursors.Hand;
			this.role_prospector1_pic.Cursor = Cursors.Hand;
			this.role_prospector2_pic.Cursor = Cursors.Hand;
			this.settler_bonus_label.Cursor = Cursors.Hand;
			this.mayor_bonus_label.Cursor = Cursors.Hand;
			this.builder_bonus_label.Cursor = Cursors.Hand;
			this.craftsman_bonus_label.Cursor = Cursors.Hand;
			this.trader_bonus_label.Cursor = Cursors.Hand;
			this.captain_bonus_label.Cursor = Cursors.Hand;
			this.pros1_bonus_label.Cursor = Cursors.Hand;
			this.pros2_bonus_label.Cursor = Cursors.Hand;
		}

		public void make_role_buttons_inactive()
		{
			this.role_settler_pic.Cursor = Cursors.Help;
			this.role_mayor_pic.Cursor = Cursors.Help;
			this.role_builder_pic.Cursor = Cursors.Help;
			this.role_craftsman_pic.Cursor = Cursors.Help;
			this.role_trader_pic.Cursor = Cursors.Help;
			this.role_captain_pic.Cursor = Cursors.Help;
			this.role_prospector1_pic.Cursor = Cursors.Help;
			this.role_prospector2_pic.Cursor = Cursors.Help;
			this.settler_bonus_label.Cursor = Cursors.Help;
			this.mayor_bonus_label.Cursor = Cursors.Help;
			this.builder_bonus_label.Cursor = Cursors.Help;
			this.craftsman_bonus_label.Cursor = Cursors.Help;
			this.trader_bonus_label.Cursor = Cursors.Help;
			this.captain_bonus_label.Cursor = Cursors.Help;
			this.pros1_bonus_label.Cursor = Cursors.Help;
			this.pros2_bonus_label.Cursor = Cursors.Help;
		}

		public void make_settler_buttons_active()
		{
			this.plantation_available_slot1.Cursor = Cursors.Hand;
			this.plantation_available_slot2.Cursor = Cursors.Hand;
			this.plantation_available_slot3.Cursor = Cursors.Hand;
			this.plantation_available_slot4.Cursor = Cursors.Hand;
			this.plantation_available_slot5.Cursor = Cursors.Hand;
			this.plantation_available_slot6.Cursor = Cursors.Hand;
			this.check_for_building(231);
			if (this.current_player == 1 & (this.current_role_chooser == 1 | this.found_building))
			{
				this.PictureBox1.Cursor = Cursors.Hand;
				this.num_quarry_bank_label.Cursor = Cursors.Hand;
			}
		}

		public void make_settler_buttons_inactive()
		{
			this.plantation_available_slot1.Cursor = Cursors.No;
			this.plantation_available_slot2.Cursor = Cursors.No;
			this.plantation_available_slot3.Cursor = Cursors.No;
			this.plantation_available_slot4.Cursor = Cursors.No;
			this.plantation_available_slot5.Cursor = Cursors.No;
			this.plantation_available_slot6.Cursor = Cursors.No;
			this.PictureBox1.Cursor = Cursors.No;
			this.num_quarry_bank_label.Cursor = Cursors.No;
		}

		public void make_ship_pics_active()
		{
			this.shipa_pic.Cursor = Cursors.Hand;
			this.shipb_pic.Cursor = Cursors.Hand;
			this.shipc_pic.Cursor = Cursors.Hand;
			this.shipa_slot1.Cursor = Cursors.Hand;
			this.shipa_slot2.Cursor = Cursors.Hand;
			this.shipa_slot3.Cursor = Cursors.Hand;
			this.shipa_slot4.Cursor = Cursors.Hand;
			this.shipa_slot5.Cursor = Cursors.Hand;
			this.shipa_slot6.Cursor = Cursors.Hand;
			this.shipb_slot1.Cursor = Cursors.Hand;
			this.shipb_slot2.Cursor = Cursors.Hand;
			this.shipb_slot3.Cursor = Cursors.Hand;
			this.shipb_slot4.Cursor = Cursors.Hand;
			this.shipb_slot5.Cursor = Cursors.Hand;
			this.shipb_slot6.Cursor = Cursors.Hand;
			this.shipb_slot7.Cursor = Cursors.Hand;
			this.shipc_slot1.Cursor = Cursors.Hand;
			this.shipc_slot2.Cursor = Cursors.Hand;
			this.shipc_slot3.Cursor = Cursors.Hand;
			this.shipc_slot4.Cursor = Cursors.Hand;
			this.shipc_slot5.Cursor = Cursors.Hand;
			this.shipc_slot6.Cursor = Cursors.Hand;
			this.shipc_slot7.Cursor = Cursors.Hand;
			this.shipc_slot8.Cursor = Cursors.Hand;
			this.wharf_pic.Cursor = Cursors.Hand;
		}

		public void make_ship_pics_inactive()
		{
			this.shipa_pic.Cursor = Cursors.No;
			this.shipb_pic.Cursor = Cursors.No;
			this.shipc_pic.Cursor = Cursors.No;
			this.shipa_slot1.Cursor = Cursors.No;
			this.shipa_slot2.Cursor = Cursors.No;
			this.shipa_slot3.Cursor = Cursors.No;
			this.shipa_slot4.Cursor = Cursors.No;
			this.shipa_slot5.Cursor = Cursors.No;
			this.shipa_slot6.Cursor = Cursors.No;
			this.shipb_slot1.Cursor = Cursors.No;
			this.shipb_slot2.Cursor = Cursors.No;
			this.shipb_slot3.Cursor = Cursors.No;
			this.shipb_slot4.Cursor = Cursors.No;
			this.shipb_slot5.Cursor = Cursors.No;
			this.shipb_slot6.Cursor = Cursors.No;
			this.shipb_slot7.Cursor = Cursors.No;
			this.shipc_slot1.Cursor = Cursors.No;
			this.shipc_slot2.Cursor = Cursors.No;
			this.shipc_slot3.Cursor = Cursors.No;
			this.shipc_slot4.Cursor = Cursors.No;
			this.shipc_slot5.Cursor = Cursors.No;
			this.shipc_slot6.Cursor = Cursors.No;
			this.shipc_slot7.Cursor = Cursors.No;
			this.shipc_slot8.Cursor = Cursors.No;
			this.wharf_pic.Cursor = Cursors.No;
		}

		private void mayor_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_mayor();
			}
		}

		private void menu_game_exit_Click(object sender, EventArgs e)
		{
			this.sw.Close();
			ProjectData.EndApp();
		}

		private void menu_game_new_Click(object sender, EventArgs e)
		{
			this.start_new_game();
		}

		private void menu_help_about_Click(object sender, EventArgs e)
		{
			this.tempinteger = this.dialog_box_OK_timer;
			this.dialog_box_OK_timer = 10;
			this.infobox_nopic("Puerto Rico for Windows v1.1 - Designed by Andreas Seyfarth - Programmed by Mark Blanco - 09/02/03 - 10/24/03 - Prospector Bug Fixed on 10/09/05 markblanco@hotmail.com - http://www.markblanco.com");
			this.dialog_box_OK_timer = this.tempinteger;
		}

		private void menu_help_rules_Click(object sender, EventArgs e)
		{
			this.tempinteger = this.dialog_box_OK_timer;
			this.dialog_box_OK_timer = 10;
			this.infobox_nopic("If you don't know the rules, you shouldn't be playing.   - Just kidding...this section under construction.");
			this.dialog_box_OK_timer = this.tempinteger;
		}

		private void MenuItem3_Click(object sender, EventArgs e)
		{
			if (!this.game_started)
			{
				this.setup_form.ShowDialog();
			}
			else
			{
				Interaction.MsgBox("The game is in progress, you cannot modify the player settings.", 0, null);
			}
		}

		private void MenuItem4_Click(object sender, EventArgs e)
		{
			if (!this.player2_form.Visible)
			{
				this.player2_form.Visible = true;
			}
			else
			{
				this.player2_form.Visible = false;
			}
		}

		private void MenuItem5_Click(object sender, EventArgs e)
		{
			if (!this.player3_form.Visible)
			{
				this.player3_form.Visible = true;
			}
			else
			{
				this.player3_form.Visible = false;
			}
		}

		private void MenuItem6_Click(object sender, EventArgs e)
		{
			if (this.number_of_players == 4 | this.number_of_players == 5)
			{
				if (!this.player4_form.Visible)
				{
					this.player4_form.Visible = true;
				}
				else
				{
					this.player4_form.Visible = false;
				}
			}
		}

		private void MenuItem7_Click(object sender, EventArgs e)
		{
			if (this.number_of_players == 5)
			{
				if (!this.player5_form.Visible)
				{
					this.player5_form.Visible = true;
				}
				else
				{
					this.player5_form.Visible = false;
				}
			}
		}

		private void MenuItem8_Click(object sender, EventArgs e)
		{
			this.build_buildings();
		}

		private void next_turn_button_Click(object sender, EventArgs e)
		{
			this.next_turn_routine();
		}

		public void next_turn_routine()
		{
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.restart_turn_routine = false;
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.new_role_chooser)
				{
					this.restart_turn_routine = true;
					this.new_role_chooser = false;
					this.determine_next_role_chooser();
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.new_governor)
				{
					this.restart_turn_routine = true;
					this.new_governor = false;
					if (!(this.game_end_triggered_colonists | this.game_end_triggered_buildings | this.game_end_triggered_victorypoints))
					{
						this.determine_governor();
					}
					else
					{
						this.game_over_routine();
					}
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.settler_round)
				{
					this.next_turn_routine_settler();
					if (this.current_player != this.current_role_chooser & this.current_player != 1 & this.settler_round)
					{
						this.next_turn_routine();
					}
					if (!this.settler_round)
					{
						this.next_turn_button.Text = "End Settler Phase-x";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
					}
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.mayor_round)
				{
					this.next_turn_routine_mayor();
					if (this.current_player != this.current_role_chooser & this.current_player != 1 & this.mayor_round)
					{
						this.next_turn_routine();
					}
					if (!this.mayor_round)
					{
						this.next_turn_button.Text = "End Mayor Phase-x";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
					}
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.builder_round)
				{
					this.next_turn_routine_builder();
					if (this.current_player != this.current_role_chooser & this.current_player != 1 & this.builder_round)
					{
						this.next_turn_routine();
					}
					if (!this.builder_round)
					{
						this.next_turn_button.Text = "End Builder Phase-x";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
					}
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.craftsman_round)
				{
					this.next_turn_routine_craftsman();
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.trader_round)
				{
					this.next_turn_routine_trader();
					if (this.current_player != this.current_role_chooser & this.current_player != 1 & this.trader_round)
					{
						this.next_turn_routine();
					}
					if (!this.trader_round)
					{
						this.next_turn_button.Text = "End Trader Phase-x";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
					}
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.captain_round)
				{
					this.next_turn_routine_captain();
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.prospector1_round)
				{
					this.next_turn_routine_pros1();
					this.restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(this.restart_turn_routine, false, false) == 0)
			{
				if (this.prospector2_round)
				{
					this.next_turn_routine_pros2();
					this.restart_turn_routine = true;
				}
			}
		}

		public void next_turn_routine_builder()
		{
			if (this.player_order_array[checked(this.current_player + 1)] != 9)
			{
				this.current_player = this.player_order_array[checked(this.current_player + 1)];
			}
			else
			{
				this.current_player = 1;
			}
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1 & this.builder_round)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - builder Phase");
					this.infobox_role(string.Concat("It is now ", this.p1_name, "'s turn to perform the builder role."), "role_builder");
					this.p1_process_builder();
				}
				if (this.current_player == 2 & this.builder_round)
				{
					this.Text =string.Concat(this.p2_name, "'s Turn - builder Phase");
					this.p2_process_builder();
				}
				if (this.current_player == 3 & this.builder_round)
				{
					this.Text =string.Concat(this.p3_name, "'s Turn - builder Phase");
					this.p3_process_builder();
				}
				if (this.current_player == 4 & this.builder_round)
				{
					this.Text =string.Concat(this.p4_name, "'s Turn - builder Phase");
					this.p4_process_builder();
				}
				if (this.current_player == 5 & this.builder_round)
				{
					this.Text =string.Concat(this.p5_name, "'s Turn - builder Phase");
					this.p5_process_builder();
				}
			}
			else
			{
				this.builder_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("All players have completed the builder phase.", "role_builder");
				this.previous_role = "builder";
				this.next_turn_button.Text = "End Builder Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
			}
		}

		public void next_turn_routine_captain()
		{
			this.make_player_goods_buttons_inactive();
			this.all_done_all_shipping = false;
			if (this.number_of_players == 3 && this.p1_done_all_shipping & this.p2_done_all_shipping & this.p3_done_all_shipping)
			{
				this.all_done_all_shipping = true;
			}
			if (this.number_of_players == 4 && this.p1_done_all_shipping & this.p2_done_all_shipping & this.p3_done_all_shipping & this.p4_done_all_shipping)
			{
				this.all_done_all_shipping = true;
			}
			if (this.number_of_players == 5 && this.p1_done_all_shipping & this.p2_done_all_shipping & this.p3_done_all_shipping & this.p4_done_all_shipping & this.p5_done_all_shipping)
			{
				this.all_done_all_shipping = true;
			}
			if (this.player_order_array[checked(this.current_player + 1)] != 9)
			{
				this.current_player = this.player_order_array[checked(this.current_player + 1)];
			}
			else
			{
				this.current_player = 1;
			}
			if (!(this.current_player == this.current_role_chooser & this.all_done_all_shipping))
			{
				if (this.current_player == 1)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - captain Phase");
					this.p1_process_captain();
				}
				if (this.current_player == 2)
				{
					this.Text =string.Concat(this.p2_name, "'s Turn - captain Phase");
					this.p2_process_captain();
				}
				if (this.current_player == 3)
				{
					this.Text =string.Concat(this.p3_name, "'s Turn - captain Phase");
					this.p3_process_captain();
				}
				if (this.current_player == 4)
				{
					this.Text =string.Concat(this.p4_name, "'s Turn - captain Phase");
					this.p4_process_captain();
				}
				if (this.current_player == 5)
				{
					this.Text =string.Concat(this.p5_name, "'s Turn - captain Phase");
					this.p5_process_captain();
				}
			}
			else
			{
				this.captain_round = false;
				this.p1_done_shipping = false;
				this.p1_done_all_shipping = false;
				this.p2_done_all_shipping = false;
				this.p3_done_all_shipping = false;
				this.p4_done_all_shipping = false;
				this.p5_done_all_shipping = false;
				this.infobox_role("All players have completed the captain phase. Excess goods must be dumped and full ships emptied.", "role_captain");
				this.previous_role = "captain";
				this.end_captain_phase();
				this.autoclick_captain_phase_on = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
			}
		}

		public void next_turn_routine_craftsman()
		{
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1 & this.craftsman_round)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - craftsman Phase");
					this.infobox_role(string.Concat("It is now ", this.p1_name, "'s turn to perform the craftsman role."), "role_craftsman");
					this.p1_process_craftsman();
				}
				if (this.current_player == 2)
				{
					if (this.current_role_chooser == 2 & this.craftsman_round)
					{
						this.Text =string.Concat(this.p2_name, "'s Turn - craftsman Phase");
						this.infobox_role(string.Concat("It is now ", this.p2_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					this.p2_process_craftsman();
				}
				if (this.current_player == 3)
				{
					if (this.current_role_chooser == 3 & this.craftsman_round)
					{
						this.Text =string.Concat(this.p3_name, "'s Turn - craftsman Phase");
						this.infobox_role(string.Concat("It is now ", this.p3_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					this.p3_process_craftsman();
				}
				if (this.current_player == 4)
				{
					if (this.current_role_chooser == 4 & this.craftsman_round)
					{
						this.Text =string.Concat(this.p4_name, "'s Turn - craftsman Phase");
						this.infobox_role(string.Concat("It is now ", this.p4_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					this.p4_process_craftsman();
				}
				if (this.current_player == 5)
				{
					if (this.current_role_chooser == 5 & this.craftsman_round)
					{
						this.Text =string.Concat(this.p5_name, "'s Turn - craftsman Phase");
						this.infobox_role(string.Concat("It is now ", this.p5_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					this.p5_process_craftsman();
				}
			}
			else
			{
				this.craftsman_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("The Craftsman Phase has completed.", "role_craftsman");
				this.previous_role = "craftsman";
				this.next_turn_button.Text = "End Craftsman Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.end_craftsman_phase();
			}
		}

		public void next_turn_routine_mayor()
		{
			this.make_plantation_pics_inactive();
			this.make_building_pics_inactive();
			if (this.player_order_array[checked(this.current_player + 1)] != 9)
			{
				this.current_player = this.player_order_array[checked(this.current_player + 1)];
			}
			else
			{
				this.current_player = 1;
			}
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1 & this.mayor_round)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - mayor Phase");
					this.p1_process_mayor();
				}
				if (this.current_player == 2 & this.mayor_round)
				{
					this.Text =string.Concat(this.p2_name, "'s Turn - mayor Phase");
					this.p2_process_mayor();
				}
				if (this.current_player == 3 & this.mayor_round)
				{
					this.Text =string.Concat(this.p3_name, "'s Turn - mayor Phase");
					this.p3_process_mayor();
				}
				if (this.current_player == 4 & this.mayor_round)
				{
					this.Text =string.Concat(this.p4_name, "'s Turn - mayor Phase");
					this.p4_process_mayor();
				}
				if (this.current_player == 5 & this.mayor_round)
				{
					this.Text =string.Concat(this.p5_name, "'s Turn - mayor Phase");
					this.p5_process_mayor();
				}
			}
			else
			{
				this.mayor_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("All players have completed the mayor phase. The colonist ship will be refilled.", "role_mayor");
				this.previous_role = "mayor";
				this.next_turn_button.Text = "End Mayor Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.end_mayor_phase();
			}
		}

		public void next_turn_routine_pros1()
		{
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - prospector1 Phase");
					if (this.current_role_chooser == 1)
					{
						this.infobox_role(string.Concat("It is now ", this.p1_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					this.p1_process_prospector1();
				}
				if (this.current_player == 2)
				{
					this.Text =string.Concat(this.p2_name, "'s Turn - prospector1 Phase");
					if (this.current_role_chooser == 2)
					{
						this.infobox_role(string.Concat("It is now ", this.p2_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					this.p2_process_prospector1();
				}
				if (this.current_player == 3)
				{
					this.Text =string.Concat(this.p3_name, "'s Turn - prospector1 Phase");
					if (this.current_role_chooser == 3)
					{
						this.infobox_role(string.Concat("It is now ", this.p3_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					this.p3_process_prospector1();
				}
				if (this.current_player == 4)
				{
					this.Text =string.Concat(this.p4_name, "'s Turn - prospector1 Phase");
					if (this.current_role_chooser == 4)
					{
						this.infobox_role(string.Concat("It is now ", this.p4_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					this.p4_process_prospector1();
				}
				if (this.current_player == 5)
				{
					this.Text =string.Concat(this.p5_name, "'s Turn - prospector1 Phase");
					if (this.current_role_chooser == 5)
					{
						this.infobox_role(string.Concat("It is now ", this.p5_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					this.p5_process_prospector1();
				}
			}
			else
			{
				this.prospector1_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("All players have completed the Prospector Phase.", "role_prospector1");
				this.previous_role = "prospector";
				this.next_turn_button.Text = "End Prospector Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.end_pros1_phase();
			}
		}

		public void next_turn_routine_pros2()
		{
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - prospector2 Phase");
					if (this.current_role_chooser == 1)
					{
						this.infobox_role(string.Concat("It is now ", this.p1_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					this.p1_process_prospector2();
				}
				if (this.current_player == 2)
				{
					this.Text =string.Concat(this.p2_name, "'s Turn - prospector2 Phase");
					if (this.current_role_chooser == 2)
					{
						this.infobox_role(string.Concat("It is now ", this.p2_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					this.p2_process_prospector2();
				}
				if (this.current_player == 3)
				{
					this.Text =string.Concat(this.p3_name, "'s Turn - prospector2 Phase");
					if (this.current_role_chooser == 3)
					{
						this.infobox_role(string.Concat("It is now ", this.p3_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					this.p3_process_prospector2();
				}
				if (this.current_player == 4)
				{
					this.Text =string.Concat(this.p4_name, "'s Turn - prospector2 Phase");
					if (this.current_role_chooser == 4)
					{
						this.infobox_role(string.Concat("It is now ", this.p4_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					this.p4_process_prospector2();
				}
				if (this.current_player == 5)
				{
					this.Text =string.Concat(this.p5_name, "'s Turn - prospector2 Phase");
					if (this.current_role_chooser == 5)
					{
						this.infobox_role(string.Concat("It is now ", this.p5_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					this.p5_process_prospector2();
				}
			}
			else
			{
				this.prospector2_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("All players have completed the prospector phase.", "role_prospector1");
				this.previous_role = "prospector";
				this.next_turn_button.Text = "End Prospector Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.end_pros2_phase();
			}
		}

		public void next_turn_routine_settler()
		{
			if (this.player_order_array[checked(this.current_player + 1)] != 9)
			{
				this.current_player = this.player_order_array[checked(this.current_player + 1)];
			}
			else
			{
				this.current_player = 1;
			}
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1 & this.settler_round)
				{
					this.formtitle("p1", "Settler Phase");
					this.p1_process_settler();
				}
				if (this.current_player == 2 & this.settler_round)
				{
					this.formtitle("p2", "Settler Phase");
					this.p2_process_settler();
				}
				if (this.current_player == 3 & this.settler_round)
				{
					this.formtitle("p3", "Settler Phase");
					this.p3_process_settler();
				}
				if (this.current_player == 4 & this.settler_round)
				{
					this.formtitle("p4", "Settler Phase");
					this.p4_process_settler();
				}
				if (this.current_player == 5 & this.settler_round)
				{
					this.formtitle("p5", "Settler Phase");
					this.p5_process_settler();
				}
			}
			else
			{
				this.Text = "End of Settler Phase";
				this.settler_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("All players have completed the Settler phase. New plantation tiles will be drawn now.", "role_settler");
				this.previous_role = "settler";
				this.next_turn_button.Text = "End Settler Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.end_settler_phase();
			}
		}

		public void next_turn_routine_trader()
		{
			if (this.player_order_array[checked(this.current_player + 1)] != 9)
			{
				this.current_player = this.player_order_array[checked(this.current_player + 1)];
			}
			else
			{
				this.current_player = 1;
			}
			if (this.current_player != this.current_role_chooser)
			{
				if (this.current_player == 1 & this.trader_round)
				{
					this.Text =string.Concat(this.p1_name, "'s Turn - trader Phase");
					this.infobox_role(string.Concat("It is now ", this.p1_name, "'s turn to perform the trader role."), "role_trader");
					this.p1_process_trader();
				}
				if (this.current_player == 2 & this.trader_round)
				{
					this.Text =string.Concat(this.p2_name, "'s Turn - trader Phase");
					this.p2_process_trader();
				}
				if (this.current_player == 3 & this.trader_round)
				{
					this.Text =string.Concat(this.p3_name, "'s Turn - trader Phase");
					this.p3_process_trader();
				}
				if (this.current_player == 4 & this.trader_round)
				{
					this.Text =string.Concat(this.p4_name, "'s Turn - trader Phase");
					this.p4_process_trader();
				}
				if (this.current_player == 5 & this.trader_round)
				{
					this.Text =string.Concat(this.p5_name, "'s Turn - trader Phase");
					this.p5_process_trader();
				}
			}
			else
			{
				this.trader_round = false;
				if (this.player_order_array[checked(this.current_player + 1)] != 9)
				{
					this.current_player = this.player_order_array[checked(this.current_player + 1)];
				}
				else
				{
					this.current_player = 1;
				}
				this.current_role_chooser = this.current_player;
				if (this.current_role_chooser != this.current_governor)
				{
					this.new_governor = false;
					this.new_role_chooser = true;
				}
				else
				{
					this.new_governor = true;
					this.new_role_chooser = false;
				}
				this.infobox_role("All players have completed the trader phase.", "role_trader");
				this.make_player_goods_buttons_inactive();
				this.previous_role = "trader";
				this.next_turn_button.Text = "End Trader Phase";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
				this.end_trader_phase();
			}
		}

		private void nondis_button_Click(object sender, EventArgs e)
		{
			this.nondis_button.Enabled=false;
			this.nondis_button.Visible = false;
			this.nondis_label.Enabled=false;
			this.nondis_label.Visible = false;
			this.prnondistext.Enabled=false;
			this.prnondistext.Visible = false;
			this.Label11.Enabled=false;
			this.Label11.Visible = false;
			this.prcoverbox.Enabled=false;
			this.prcoverbox.Visible = false;
			this.menu_game.Enabled = true;
			this.menu_view.Enabled = true;
			this.menu_help.Enabled = true;
		}

		private void num_coffee_bank_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.craftsman_round)
			{
				if (this.current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (this.p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (this.goods_this_turn_p1_array[4] <= 0)
				{
					Interaction.MsgBox("You can't choose coffee, since you didn't produce it this turn.", 0, null);
				}
				else if (this.goods_bank_array[4] <= 1)
				{
					Interaction.MsgBox("There is no coffee left. Choose another good.", 0, null);
				}
				else
				{
					this.confirmbox_role("Do you want coffee as your extra good?", "role_craftsman");
					if (this.confirmed)
					{
						this.make_goods_bank_buttons_inactive();
						this.goods_bank_array[4] = checked(this.goods_bank_array[4] - 1);
						this.p1_chose_extra_good = true;
						this.formtitle("p1", "Craftsman Phase - Your Turn is Over");
						this.next_turn_button.Text = "End Turn";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
						this.goods_p1_array[4] = checked(this.goods_p1_array[4] + 1);
						this.update_all_labels();
					}
				}
			}
		}

		private void num_coffee_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (this.trader_round)
				{
					this.trade_coffee();
				}
				if (this.captain_round)
				{
					this.ship_coffee();
				}
			}
		}

		private void num_colonist_bank_label_Click(object sender, EventArgs e)
		{
			this.help_colonists_bank();
		}

		private void num_colonist_ship_label_Click(object sender, EventArgs e)
		{
			this.help_colonists_on_ship();
		}

		private void num_corn_bank_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.craftsman_round)
			{
				if (this.current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (this.p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (this.goods_this_turn_p1_array[2] <= 0)
				{
					Interaction.MsgBox("You can't choose corn, since you didn't produce it this turn.", 0, null);
				}
				else if (this.goods_bank_array[2] <= 1)
				{
					Interaction.MsgBox("There is no corn left. Choose another good.", 0, null);
				}
				else
				{
					this.confirmbox_role("Do you want corn as your extra good?", "role_craftsman");
					if (this.confirmed)
					{
						this.make_goods_bank_buttons_inactive();
						this.goods_bank_array[2] = checked(this.goods_bank_array[2] - 1);
						this.goods_p1_array[2] = checked(this.goods_p1_array[2] + 1);
						this.p1_chose_extra_good = true;
						this.formtitle("p1", "Craftsman Phase - Your Turn is Over");
						this.next_turn_button.Text = "End Turn";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
						this.update_all_labels();
					}
				}
			}
		}

		private void num_corn_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (this.trader_round)
				{
					this.trade_corn();
				}
				if (this.captain_round)
				{
					this.ship_corn();
				}
			}
		}

		private void num_indigo_bank_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.craftsman_round)
			{
				if (this.current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (this.p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (this.goods_this_turn_p1_array[0] <= 0)
				{
					Interaction.MsgBox("You can't choose indigo, since you didn't produce it this turn.", 0, null);
				}
				else if (this.goods_bank_array[0] <= 1)
				{
					Interaction.MsgBox("There is no indigo left. Choose another good.", 0, null);
				}
				else
				{
					this.confirmbox_role("Do you want indigo as your extra good?", "role_craftsman");
					if (this.confirmed)
					{
						this.make_goods_bank_buttons_inactive();
						this.goods_bank_array[0] = checked(this.goods_bank_array[0] - 1);
						this.goods_p1_array[0] = checked(this.goods_p1_array[0] + 1);
						this.p1_chose_extra_good = true;
						this.formtitle("p1", "Craftsman Phase - Your Turn is Over");
						this.next_turn_button.Text = "End Turn";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
						this.update_all_labels();
					}
				}
			}
		}

		private void num_indigo_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (this.trader_round)
				{
					this.trade_indigo();
				}
				if (this.captain_round)
				{
					this.ship_indigo();
				}
			}
		}

		private void num_quarry_bank_label_Click(object sender, EventArgs e)
		{
			this.choose_quarry();
		}

		private void num_sugar_bank_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.craftsman_round)
			{
				if (this.current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (this.p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (this.goods_this_turn_p1_array[1] <= 0)
				{
					Interaction.MsgBox("You can't choose sugar, since you didn't produce it this turn.", 0, null);
				}
				else if (this.goods_bank_array[1] <= 1)
				{
					Interaction.MsgBox("There is no sugar left. Choose another good.", 0, null);
				}
				else
				{
					this.confirmbox_role("Do you want sugar as your extra good?", "role_craftsman");
					if (this.confirmed)
					{
						this.make_goods_bank_buttons_inactive();
						this.goods_bank_array[1] = checked(this.goods_bank_array[1] - 1);
						this.goods_p1_array[1] = checked(this.goods_p1_array[1] + 1);
						this.p1_chose_extra_good = true;
						this.formtitle("p1", "Craftsman Phase - Your Turn is Over");
						this.next_turn_button.Text = "End Turn";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
						this.update_all_labels();
					}
				}
			}
		}

		private void num_sugar_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (this.trader_round)
				{
					this.trade_sugar();
				}
				if (this.captain_round)
				{
					this.ship_sugar();
				}
			}
		}

		private void num_tobacco_bank_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.craftsman_round)
			{
				if (this.current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (this.p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (this.goods_this_turn_p1_array[3] <= 0)
				{
					Interaction.MsgBox("You can't choose tobacco, since you didn't produce it this turn.", 0, null);
				}
				else if (this.goods_bank_array[3] <= 1)
				{
					Interaction.MsgBox("There is no tobacco left. Choose another good.", 0, null);
				}
				else
				{
					this.confirmbox_role("Do you want tobacco as your extra good?", "role_craftsman");
					if (this.confirmed)
					{
						this.make_goods_bank_buttons_inactive();
						this.goods_bank_array[3] = checked(this.goods_bank_array[3] - 1);
						this.goods_p1_array[3] = checked(this.goods_p1_array[3] + 1);
						this.p1_chose_extra_good = true;
						this.formtitle("p1", "Craftsman Phase - Your Turn is Over");
						this.next_turn_button.Text = "End Turn";
						this.next_turn_button.Enabled = true;
						this.next_turn_button.Visible = true;
						this.update_all_labels();
					}
				}
			}
		}

		private void num_tobacco_label_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (this.trader_round)
				{
					this.trade_tobacco();
				}
				if (this.captain_round)
				{
					this.ship_tobacco();
				}
			}
		}

		public void p1_choose_role()
		{
			this.make_role_buttons_active();
			this.turn_number = checked(this.turn_number + 1);
			this.update_summary();
			this.next_turn_button.Visible = false;
			this.next_turn_button.Enabled=false;
			this.formtitle("p1", "Choose a role");
			this.p1_choosing_role = true;
		}

		public void p1_process_builder()
		{
			this.log_process_role("p1", "Builder");
			this.update_summary();
			this.next_turn_button.Text = "End Turn";
			this.next_turn_button.Visible = false;
			this.next_turn_button.Enabled=false;
			this.p1_built = false;
			this.p1_built_nothing = false;
			this.processed_builder = false;
			this.formtitle("p1", "Choose a Building to construct");
			this.infobox_role("Please choose a building to construct.", "role_builder");
			this.build_buildings();
		}

		public void p1_process_captain()
		{
			this.log_process_role("p1", "Captain");
			this.update_summary();
			this.ready_to_ship_indigo = false;
			this.ready_to_ship_sugar = false;
			this.ready_to_ship_corn = false;
			this.ready_to_ship_tobacco = false;
			this.ready_to_ship_coffee = false;
			this.need_to_pick_ship = false;
			this.p1_done_shipping = false;
			this.p1_done_all_shipping = false;
			this.next_turn_button.Text = "Next Shipper";
			this.next_turn_button.Visible = false;
			this.next_turn_button.Enabled=false;
			this.determine_goods_to_ship();
			this.update_ship_cargo();
			this.space_to_ship = false;
			if (this.goods_p1_array[0] > 0 & this.indigo_ship_available & !this.indigo_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[1] > 0 & this.sugar_ship_available & !this.sugar_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[2] > 0 & this.corn_ship_available & !this.corn_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[3] > 0 & this.tobacco_ship_available & !this.tobacco_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[4] > 0 & this.coffee_ship_available & !this.coffee_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[0] > 0 & this.empty_ship_available & !this.indigo_ship_available & !this.indigo_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[1] > 0 & this.empty_ship_available & !this.sugar_ship_available & !this.sugar_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[2] > 0 & this.empty_ship_available & !this.corn_ship_available & !this.corn_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[3] > 0 & this.empty_ship_available & !this.tobacco_ship_available & !this.tobacco_ship_full)
			{
				this.space_to_ship = true;
			}
			if (this.goods_p1_array[4] > 0 & this.empty_ship_available & !this.coffee_ship_available & !this.coffee_ship_full)
			{
				this.space_to_ship = true;
			}
			this.check_for_building(361);
			if (!(this.space_to_ship & this.goods_to_ship | this.found_building & this.goods_to_ship))
			{
				this.make_player_goods_buttons_inactive();
				this.infobox_role("You have no goods that are able to be shipped.", "role_captain");
				this.formtitle("p1", "Captain Phase - Your Turn is Over");
				this.auto_captain_button.Text = "Next Shipper Auto";
				this.auto_captain_button.Enabled = true;
				this.auto_captain_button.Visible = true;
				this.end_shipping_turn_p1();
				this.p1_done_all_shipping = true;
			}
			else
			{
				this.make_player_goods_buttons_active();
				this.infobox_role("Please select which goods you want to ship from your resources.", "role_captain");
				this.formtitle("p1", "Captain Phase - Select Goods to Ship");
				this.auto_captain_button.Text = "Next Shipper Auto";
				this.auto_captain_button.Enabled=false;
				this.auto_captain_button.Visible = false;
			}
			this.update_ship_cargo();
		}

		public void p1_process_craftsman()
		{
			this.log_process_role("p1", "Craftsman");
			this.update_summary();
			this.next_turn_button.Text = "End Turn";
			this.next_turn_button.Visible = false;
			this.next_turn_button.Enabled=false;
			this.p1_chose_extra_good = false;
			if (this.current_role_chooser == 1)
			{
				this.determine_production();
			}
			this.tempstring = "nogoodstopick";
			this.counter1 = 0;
			do
			{
				if (this.goods_this_turn_p1_array[this.counter1] > 0 & this.goods_bank_array[this.counter1] > 0)
				{
					this.tempstring = "goodstopick";
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.current_role_chooser == 1 & StringType.StrCmp(this.tempstring, "goodstopick", false) == 0)
			{
				this.formtitle("p1", "Craftsman Phase - Choose your extra good");
				this.make_goods_bank_buttons_active();
				this.infobox_role("You now need to choose your extra production good. You must choose from the goods you produced this turn.", "role_craftsman");
				this.next_turn_button.Text = "End Turn";
				this.next_turn_button.Visible = false;
				this.next_turn_button.Enabled=false;
			}
			if (this.current_role_chooser == 1 & StringType.StrCmp(this.tempstring, "nogoodstopick", false) == 0)
			{
				this.formtitle("p1", "Craftsman Phase - Turn Over");
				this.make_goods_bank_buttons_inactive();
				this.infobox_role("There are not any goods in the bank that you can get an extra one from. Your turn is over.", "role_craftsman");
				this.next_turn_button.Text = "End Turn";
				this.next_turn_button.Visible = true;
				this.next_turn_button.Enabled = true;
			}
		}

		public void p1_process_mayor()
		{
			this.log_process_role("p1", "Mayor");
			this.update_summary();
			this.make_plantation_pics_active();
			this.make_building_pics_active();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			if (this.current_role_chooser == 1)
			{
				this.distribute_new_colonists();
			}
			this.formtitle("p1", "Mayor Phase - Distribute your colonists");
			this.infobox_role("New colonists have arrived via ship. Please distribute them to your needs.", "role_mayor");
			this.determine_p1_mayor_phase_over();
		}

		public void p1_process_prospector1()
		{
			this.log_process_role("p1", "Prospector1");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			if (this.current_role_chooser == 1)
			{
				this.infobox_role("You are awarded 1 doubloon for your prospecting efforts.", "role_prospector1");
				this.gold_p1 = checked(this.gold_p1 + 1);
			}
			this.formtitle("p1", "Prospector Phase - Your turn is over");
			this.next_turn_button.Text = "End Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p1_process_prospector2()
		{
			this.log_process_role("p1", "Prospector2");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			if (this.current_role_chooser == 1)
			{
				this.infobox_role("You are awarded 1 doubloon for your prospecting efforts.", "role_prospector1");
				this.gold_p1 = checked(this.gold_p1 + 1);
			}
			this.formtitle("p1", "Prospector Phase - Your turn is over");
			this.next_turn_button.Text = "End Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p1_process_settler()
		{
			this.log_process_role("p1", "Settler");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p1_ready_to_end_settler = false;
			this.make_settler_buttons_active();
			if (this.current_player != this.current_role_chooser)
			{
				this.infobox_role("Settler Phase - Please choose a plantation", "role_settler");
				this.formtitle("p1", "Settler Phase - Choose a Plantation");
			}
			else
			{
				this.formtitle("p1", "Settler Phase - Choose a Plantation or Quarry");
			}
			this.check_for_building(141);
			if (this.found_building & this.num_plantations_p1 < 12)
			{
				this.confirmbox_building1("You have a manned hacienda. Would you like to draw a random plantation?", 141);
				if (this.confirmed)
				{
					this.draw_random_plantation_tile();
				}
			}
		}

		public void p1_process_trader()
		{
			this.log_process_role("p1", "Trader");
			this.update_summary();
			this.make_player_goods_buttons_active();
			this.tempstring = "nogoodstotrade";
			this.counter1 = 0;
			do
			{
				if (this.goods_p1_array[this.counter1] > 0)
				{
					this.tempstring = "goodstotrade";
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.trading_house_array[3] == 0 & StringType.StrCmp(this.tempstring, "goodstotrade", false) == 0)
			{
				this.check_for_building(241);
				if (this.found_building)
				{
					this.infobox_building1("Your manned Office allows you to sell goods to the trading house that are already there.", 241);
				}
			}
			this.next_turn_button.Visible = false;
			this.next_turn_button.Enabled=false;
			this.done_trading_button.Visible = true;
			this.done_trading_button.Enabled = true;
			this.p1_traded = false;
			this.formtitle("p1", "Trader Phase - Trade or End Your Turn");
		}

		public void p2_choose_role()
		{
			this.turn_number = checked(this.turn_number + 1);
			this.update_summary();
			this.update_player_turn_designations();
			this.determine_empty_colonists_slots_all();
			this.p2_finished_choosing_role = false;
			while (!this.p2_finished_choosing_role)
			{
				this.role_choice = "settler";
				this.need_to_choose_random = true;
				this.dont_choose_settler = false;
				this.dont_choose_mayor = false;
				this.dont_choose_builder = false;
				this.dont_choose_craftsman = false;
				this.dont_choose_trader = false;
				this.dont_choose_captain = false;
				this.dont_choose_prospector1 = false;
				this.dont_choose_prospector2 = false;
				this.goods_to_ship = false;
				this.determine_goods_to_ship();
				this.goods_to_trade = false;
				this.determine_goods_to_trade();
				this.goods_to_produce = false;
				this.determine_production_p2();
				if (!this.goods_to_produce & this.need_to_choose_random && this.bonus_roles_array[3] < 2)
				{
					this.dont_choose_craftsman = true;
				}
				if (!this.goods_to_ship & this.need_to_choose_random && this.bonus_roles_array[5] < 2)
				{
					this.dont_choose_captain = true;
				}
				if (!this.goods_to_trade & this.need_to_choose_random && this.bonus_roles_array[4] < 2)
				{
					this.dont_choose_trader = true;
				}
				if (this.num_plantations_p2 >= 8 & this.need_to_choose_random && this.bonus_roles_array[0] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_settler = true;
					}
				}
				if (this.p2_empty_colonists_slots == 0 & this.need_to_choose_random && this.bonus_roles_array[1] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_mayor = true;
					}
				}
				this.check_for_plantation(30);
				if (this.num_plantations_p2 == 1 & !this.found_plantation & this.num_buildings_p2 == 0)
				{
					this.dont_choose_mayor = true;
				}
				if (this.turn_number == 1 & this.need_to_choose_random)
				{
					this.chance_of_action(90);
					if (this.chance)
					{
						this.role_choice = "settler";
						this.need_to_choose_random = false;
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "mayor";
							this.need_to_choose_random = false;
						}
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (!this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "builder";
							this.need_to_choose_random = false;
						}
					}
				}
				this.chance_of_action(90);
				if (this.role_builder_pic.Visible & this.bonus_roles_array[2] >= 2 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_captain_pic.Visible & this.bonus_roles_array[5] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_craftsman_pic.Visible & this.bonus_roles_array[3] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_mayor_pic.Visible & this.bonus_roles_array[1] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "mayor";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_settler_pic.Visible & this.bonus_roles_array[0] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "settler";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_trader_pic.Visible & this.bonus_roles_array[4] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector1_pic.Visible & this.bonus_roles_array[6] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector1";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector2_pic.Visible & this.bonus_roles_array[7] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector2";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p2 + this.discount1) + this.num_manned_quarries_p2) >= 10 && this.role_builder_pic.Visible & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p2 + this.discount1) + this.num_manned_quarries_p2) >= 8)
				{
					this.chance_of_action(90);
					if (this.chance & this.role_builder_pic.Visible & this.need_to_choose_random)
					{
						this.role_choice = "builder";
						this.need_to_choose_random = false;
					}
				}
				if (checked(checked(this.gold_p2 + this.discount1) + this.num_manned_quarries_p2) >= 10)
				{
					this.chance = false;
				}
				if (checked(checked(this.gold_p2 + this.discount1) + this.num_manned_quarries_p2) < 10)
				{
					this.chance_of_action(90);
				}
				if (this.goods_to_trade & this.role_trader_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(80);
				if (this.goods_to_ship & this.role_captain_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(30);
				if (this.goods_to_produce & this.role_craftsman_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.ai_role_choice_maintenance();
				if (StringType.StrCmp(this.role_choice, "settler", false) == 0 && this.role_settler_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Settler."), "role_settler");
					this.settler_round = true;
					this.role_settler_pic.Visible = false;
					this.settler_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[0]);
					this.bonus_roles_array[0] = 0;
					this.log_role_chooser("p2", "Settler");
					this.p2_process_settler();
					this.p2_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p2", false) == 0 & this.settler_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "mayor", false) == 0 && this.role_mayor_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Mayor."), "role_mayor");
					this.mayor_round = true;
					this.role_mayor_pic.Visible = false;
					this.mayor_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[1]);
					this.bonus_roles_array[1] = 0;
					this.log_role_chooser("p2", "Mayor");
					this.p2_process_mayor();
					this.p2_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p2", false) == 0 & this.mayor_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "builder", false) == 0 && this.role_builder_pic.Visible & this.chance)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Builder."), "role_builder");
					this.builder_round = true;
					this.role_builder_pic.Visible = false;
					this.builder_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[2]);
					this.bonus_roles_array[2] = 0;
					this.log_role_chooser("p2", "Builder");
					this.p2_process_builder();
					this.p2_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p2", false) == 0 & this.builder_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "craftsman", false) == 0 && this.role_craftsman_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Craftsman."), "role_craftsman");
					this.craftsman_round = true;
					this.role_craftsman_pic.Visible = false;
					this.craftsman_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[3]);
					this.bonus_roles_array[3] = 0;
					this.log_role_chooser("p2", "Craftsman");
					this.p2_process_craftsman();
					this.p2_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "trader", false) == 0 && this.role_trader_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Trader."), "role_trader");
					this.trader_round = true;
					this.role_trader_pic.Visible = false;
					this.trader_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[4]);
					this.bonus_roles_array[4] = 0;
					this.log_role_chooser("p2", "Trader");
					this.p2_process_trader();
					this.p2_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p2", false) == 0 & this.trader_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "captain", false) == 0 && this.role_captain_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Captain."), "role_captain");
					this.p1_used_wharf = false;
					this.p2_used_wharf = false;
					this.p3_used_wharf = false;
					this.p4_used_wharf = false;
					this.p5_used_wharf = false;
					this.captain_round = true;
					this.role_captain_pic.Visible = false;
					this.captain_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[5]);
					this.bonus_roles_array[5] = 0;
					this.captain_bonus_taken = false;
					this.log_role_chooser("p2", "Captain");
					this.p2_process_captain();
					this.p2_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector1", false) == 0 && this.role_prospector1_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p2_name, " has chosen the Prospector."), "role_prospector1");
					this.prospector1_round = true;
					this.role_prospector1_pic.Visible = false;
					this.pros1_bonus_label.Visible = false;
					this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[6]);
					this.bonus_roles_array[6] = 0;
					this.log_role_chooser("p2", "Prospector1");
					this.p2_process_prospector1();
					this.p2_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector2", false) != 0 || !this.role_prospector2_pic.Visible)
				{
					continue;
				}
				this.infobox_role(string.Concat(this.p2_name, " has chosen the Prospector."), "role_prospector1");
				this.prospector2_round = true;
				this.role_prospector2_pic.Visible = false;
				this.pros2_bonus_label.Visible = false;
				this.gold_p2 = checked(this.gold_p2 + this.bonus_roles_array[7]);
				this.bonus_roles_array[7] = 0;
				this.log_role_chooser("p2", "Prospector2");
				this.p2_process_prospector2();
				this.p2_finished_choosing_role = true;
			}
		}

		public void p2_place_matching_production()
		{
			this.plantations_p2_array[this.plantation_slot] = checked(this.plantations_p2_array[this.plantation_slot] + 1);
			this.buildings_p2_array[this.building_slot] = checked(this.buildings_p2_array[this.building_slot] + 1);
			this.idle_colonists_array[2] = checked(this.idle_colonists_array[2] - 2);
			this.update_all_labels();
		}

		public void p2_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				this.tempinteger = this.indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				this.tempinteger = this.sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				this.tempinteger = this.corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				this.tempinteger = this.tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				this.tempinteger = this.coffee_available_slot;
			}
			if (!this.p2_manned_hospice)
			{
				this.plantations_p2_array[this.num_plantations_p2] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.p2_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p2_array[this.num_plantations_p2] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p2_name, "'s Hospice has granted a colonist for their plantation."), 231);
				this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				this.p2_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p2_array[this.num_plantations_p2] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p2_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p2_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p2_array[this.num_plantations_p2] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p2_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				this.p2_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p2_place_quarry()
		{
			if (!this.p2_manned_hospice)
			{
				this.plantations_p2_array[this.num_plantations_p2] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.p2_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p2_array[this.num_plantations_p2] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p2_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				this.p2_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p2_array[this.num_plantations_p2] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p2_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p2_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p2_array[this.num_plantations_p2] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p2_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				this.p2_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p2_process_builder()
		{
			this.log_process_role("p2", "Builder");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p2_ai_done = false;
			this.p2_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//this.p2_ai_done;
			this.compute_temporary_large_building_score();
			this.determine_if_afford_large();
			this.update_player_turn_designations();
			if (this.turn_number == 1 & StringType.StrCmp(this.current_role_chooser_string, "p2", false) != 0 & !this.p2_ai_done & this.builder_round)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Small Indigo Plant."), 110);
						this.p2_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done & this.afford_large & this.best_building_num != 999)
			{
				this.p2_process_building_large(this.best_building_num);
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 13;
				this.build_number = 320;
				this.build_cost = 6;
				this.build_name = "Coffee Roaster";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(50);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the ", this.build_name, "."), this.build_number);
						this.p2_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 12;
				this.build_number = 310;
				this.build_cost = 5;
				this.build_name = "Tobacco Storage";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(40);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the ", this.build_name, "."), this.build_number);
						this.p2_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 1;
				this.build_number = 120;
				this.build_cost = 2;
				this.build_name = "Small Sugar Mill";
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(220);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the ", this.build_name, "."), this.build_number);
						this.p2_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 7;
				this.build_number = 220;
				this.build_cost = 4;
				this.build_name = "Sugar Mill";
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(120);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(50);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the ", this.build_name, "."), this.build_number);
						this.p2_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Small Indigo Plant."), 110);
						this.p2_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 6;
				this.build_number = 210;
				this.build_cost = 3;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(110);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(60);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Indigo Plant."), 210);
						this.p2_process_building(210);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			this.update_player_turn_designations();
			if (!this.p2_ai_done)
			{
				this.chance_of_action(25);
				if (this.chance & StringType.StrCmp(this.current_role_chooser_string, "p2", false) != 0)
				{
					this.determine_if_buyable1(2, 130, 1);
					if (this.buyable & this.num_manned_quarries_p2 >= 1 & !this.p2_built)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Small Market."), 130);
						this.p2_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
					this.determine_if_buyable1(0, 110, 1);
					if (this.buyable & this.num_manned_quarries_p2 >= 1 & !this.p2_built)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Small Indigo Plant."), 110);
						this.p2_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
						this.p2_ai_done = true;
						this.p2_built = true;
					}
					if (!this.p2_ai_done & !this.p2_built)
					{
						this.p2_ai_done = true;
						this.p2_built = false;
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 14;
				this.build_number = 330;
				this.build_cost = 7;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Factory."), 330);
						this.p2_process_building(330);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 16;
				this.build_number = 350;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Harbor."), 350);
						this.p2_process_building(350);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 8;
				this.build_number = 230;
				this.build_cost = 4;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_plantations_p2 > 8)
					{
						this.chance_of_action(10);
					}
					else
					{
						this.chance_of_action(50);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Hospice."), 230);
						this.p2_process_building(230);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 10;
				this.build_number = 250;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Large Market."), 250);
						this.p2_process_building(250);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 2;
				this.build_number = 130;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Small Market."), 130);
						this.p2_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 5;
				this.build_number = 160;
				this.build_cost = 3;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(260);
					if (!this.found_building)
					{
						this.check_for_building(261);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					else
					{
						this.chance_of_action(10);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Small Warehouse."), 160);
						this.p2_process_building(160);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 3;
				this.build_number = 140;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Hacienda."), 140);
						this.p2_process_building(140);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 17;
				this.build_number = 361;
				this.build_cost = 9;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(50);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Wharf."), 360);
						this.p2_process_building(360);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 11;
				this.build_number = 260;
				this.build_cost = 6;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(160);
					if (!this.found_building)
					{
						this.check_for_building(161);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(5);
						}
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Large Warehouse."), 260);
						this.p2_process_building(260);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 9;
				this.build_number = 240;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(30);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Office."), 240);
						this.p2_process_building(240);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 4;
				this.build_number = 150;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_quarries_p2 < 2)
					{
						this.chance_of_action(30);
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the Construction Hut."), 150);
						this.p2_process_building(150);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p2_ai_done)
			{
				this.build_available_slot = 15;
				this.build_number = 340;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(20);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p2_name, " built the University."), 340);
						this.p2_process_building(340);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
						this.p2_ai_done = true;
						this.p2_built = true;
						this.update_all_labels();
					}
				}
			}
			this.determine_if_buyable1(2, 130, 1);
			if (this.buyable & this.num_manned_quarries_p2 >= 1 & !this.p2_built & !this.p2_ai_done)
			{
				this.infobox_building1(string.Concat(this.p2_name, " built the Small Market."), 130);
				this.p2_process_building(130);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
				this.p2_ai_done = true;
				this.p2_built = true;
				this.update_all_labels();
			}
			this.determine_if_buyable1(0, 110, 1);
			if (this.buyable & this.num_manned_quarries_p2 >= 1 & !this.p2_built & !this.p2_ai_done)
			{
				this.infobox_building1(string.Concat(this.p2_name, " built the Small Indigo Plant."), 110);
				this.p2_process_building(110);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
				this.p2_ai_done = true;
				this.p2_built = true;
				this.update_all_labels();
			}
			if (!this.p2_built)
			{
				this.infobox_role(string.Concat(this.p2_name, " has decided not to build."), "role_builder");
			}
			this.formtitle("p2", "Done performing the Builder role - AI BLANK");
		}

		public void p2_process_building(object buildnum)
		{
			this.check_for_building(341);
			if (!this.found_building)
			{
				this.buildings_p2_array[this.num_buildings_p2] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				}
				else if (this.colonists_ship_num > 0)
				{
					this.colonists_ship_num = checked(this.colonists_ship_num - 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				}
				this.buildings_p2_array[this.num_buildings_p2] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p2_process_building_large(object buildnum)
		{
			this.determine_where_to_build_large_p2();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				this.tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				this.tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				this.tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				this.tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				this.tempinteger = 22;
			}
			if (this.large_build_spot != 99)
			{
				this.check_for_building(341);
				if (!this.found_building)
				{
					this.infobox_building2(string.Concat(this.p2_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p2_array[this.large_build_spot] = IntegerType.FromObject(buildnum);
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
					this.p2_ai_done = true;
					this.p2_built = true;
				}
				else
				{
					if (this.colonists_bank_num > 0)
					{
						this.colonists_bank_num = checked(this.colonists_bank_num - 1);
						this.infobox_building1(string.Concat(this.p2_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[2] = checked(this.colonists_array[2] + 1);
					}
					else if (this.colonists_ship_num > 0)
					{
						this.colonists_ship_num = checked(this.colonists_ship_num - 1);
						this.infobox_building1(string.Concat(this.p2_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[2] = checked(this.colonists_array[2] + 1);
					}
					this.infobox_building2(string.Concat(this.p2_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p2_array[this.large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p2 = checked(this.gold_p2 - this.build_final_cost);
					this.p2_ai_done = true;
					this.p2_built = true;
				}
			}
			this.update_all_labels();
		}

		public void p2_process_captain()
		{
			this.log_process_role("p2", "Captain");
			this.update_summary();
			this.update_ship_cargo();
			this.p2_done_shipping = false;
			this.p2_done_all_shipping = false;
			this.p2_num_shipped = 0;
			this.goods_to_ship = false;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.goods_p2_array[this.counter1] > 0)
				{
					this.goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.goods_to_ship & !this.p2_done_shipping)
			{
				this.calculate_best_captain_points_p2();
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipa", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_corn_via_shipa();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipb", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_corn_via_shipb();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipc", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_corn_via_shipc();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_wharf", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_corn_via_wharf();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipa", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_indigo_via_shipa();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipb", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_indigo_via_shipb();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipc", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_indigo_via_shipc();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_wharf", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_Indigo_via_wharf();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipa", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_sugar_via_shipa();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipb", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_sugar_via_shipb();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipc", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_sugar_via_shipc();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_wharf", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_sugar_via_wharf();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipa", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_tobacco_via_shipa();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipb", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_tobacco_via_shipb();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipc", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_tobacco_via_shipc();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_wharf", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_tobacco_via_wharf();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipa", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_coffee_via_shipa();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipb", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_coffee_via_shipb();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipc", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_coffee_via_shipc();
				this.p2_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_wharf", false) == 0 & !this.p2_done_shipping)
			{
				this.ship_coffee_via_wharf();
				this.p2_done_shipping = true;
			}
			if (!this.p2_done_shipping & StringType.StrCmp(this.best_shipping_method, "null", false) == 0 & this.goods_to_ship)
			{
				this.p2_done_shipping = true;
				this.p2_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p2_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!this.goods_to_ship & !this.p2_done_shipping)
			{
				this.p2_done_shipping = true;
				this.p2_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p2_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Enabled = true;
			this.auto_captain_button.Visible = true;
			this.formtitle("p2", "Done Shipping - Press Next Shipper");
			this.update_ship_cargo();
		}

		public void p2_process_craftsman()
		{
			this.log_process_role("p2", "Craftsman");
			this.formtitle("p2", "Craftsman Phase");
			this.p2_ai_done = false;
			this.update_summary();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				this.determine_production();
			}
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				if (this.goods_this_turn_p2_array[4] > 0 & this.goods_bank_array[4] > 0 & !this.p2_ai_done)
				{
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] - 1);
					this.goods_p2_array[4] = checked(this.goods_p2_array[4] + 1);
					this.p2_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p2_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p2_array[3] > 0 & this.goods_bank_array[3] > 0 & !this.p2_ai_done)
				{
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] - 1);
					this.goods_p2_array[3] = checked(this.goods_p2_array[3] + 1);
					this.p2_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p2_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p2_array[1] > 0 & this.goods_bank_array[1] > 0 & !this.p2_ai_done)
				{
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] - 1);
					this.goods_p2_array[1] = checked(this.goods_p2_array[1] + 1);
					this.p2_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p2_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p2_array[0] > 0 & this.goods_bank_array[0] > 0 & !this.p2_ai_done)
				{
					this.goods_bank_array[0] = checked(this.goods_bank_array[0] - 1);
					this.goods_p2_array[0] = checked(this.goods_p2_array[0] + 1);
					this.p2_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p2_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p2_array[2] > 0 & this.goods_bank_array[2] > 0 & !this.p2_ai_done)
				{
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] - 1);
					this.goods_p2_array[2] = checked(this.goods_p2_array[2] + 1);
					this.p2_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p2_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!this.p2_ai_done)
				{
					if (!((this.goods_this_turn_p2_array[0] > 0 | this.goods_this_turn_p2_array[1] > 0 | this.goods_this_turn_p2_array[2] > 0 | this.goods_this_turn_p2_array[3] > 0 | this.goods_this_turn_p2_array[4] > 0) & (this.goods_bank_array[0] == 0 | this.goods_bank_array[1] == 0 | this.goods_bank_array[2] == 0 | this.goods_bank_array[3] == 0 | this.goods_bank_array[4] == 0)))
					{
						this.infobox_role(string.Concat(this.p2_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						this.p2_ai_done = true;
						this.infobox_role(string.Concat("There were no goods available for ", this.p2_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			this.next_turn_button.Text = "End Craftsman Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void p2_process_mayor()
		{
			this.log_process_role("p2", "Mayor");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				this.distribute_new_colonists();
			}
			this.p2_remove_all_colonists_to_idle();
			this.p2_ai_done = false;
			if (this.idle_colonists_array[this.current_player] == 0)
			{
				this.p2_ai_done = true;
			}
			this.counter3 = 12;
			while (!(this.counter3 == 20 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				if (this.buildings_p2_array[this.counter3] == 410 | this.buildings_p2_array[this.counter3] == 420 | this.buildings_p2_array[this.counter3] == 430 | this.buildings_p2_array[this.counter3] == 440 | this.buildings_p2_array[this.counter3] == 450)
				{
					this.buildings_p2_array[this.counter3] = checked(this.buildings_p2_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				if (this.buildings_p2_array[this.counter3] == 350)
				{
					this.buildings_p2_array[this.counter3] = checked(this.buildings_p2_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				if (this.buildings_p2_array[this.counter3] == 330)
				{
					this.buildings_p2_array[this.counter3] = checked(this.buildings_p2_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				if (this.buildings_p2_array[this.counter3] == 360)
				{
					this.buildings_p2_array[this.counter3] = checked(this.buildings_p2_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.num_empty_corn_plant_p2 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p2 = checked(this.num_empty_corn_plant_p2 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_empty_corn_plant_p2 >= 1 & this.num_quarries_p2 >= 1 & this.idle_colonists_array[this.current_player] >= 2)
			{
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p2_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p2_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p2_ai_done = true;
					this.finished = true;
				}
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(60);
					if (this.found_plantation)
					{
						this.plantations_p2_array[this.plantation_slot] = 61;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p2_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p2_ai_done = true;
					this.finished = true;
				}
			}
			this.num_empty_corn_plant_p2 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p2 = checked(this.num_empty_corn_plant_p2 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.idle_colonists_array[this.current_player] >= 2 & this.num_empty_corn_plant_p2 >= 2)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p2_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p2_colonists();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p2_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p2_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p2_ai_done))
				{
					this.check_for_coffee_production();
					if (this.found_coffee_match)
					{
						this.p2_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p2_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p2_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p2_ai_done))
				{
					this.check_for_tobacco_production();
					if (this.found_tobacco_match)
					{
						this.p2_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p2_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p2_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p2_ai_done))
				{
					this.check_for_sugar_production();
					if (this.found_sugar_match)
					{
						this.p2_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p2_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p2_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p2_ai_done))
				{
					this.check_for_indigo_production();
					if (this.found_indigo_match)
					{
						this.p2_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p2_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				this.check_for_plantation(30);
				if (this.found_plantation)
				{
					this.plantations_p2_array[this.plantation_slot] = 31;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				this.check_for_plantation(60);
				if (this.found_plantation)
				{
					this.plantations_p2_array[this.plantation_slot] = 61;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				if (this.buildings_p2_array[this.counter3] == 130 | this.buildings_p2_array[this.counter3] == 140 | this.buildings_p2_array[this.counter3] == 150 | this.buildings_p2_array[this.counter3] == 160 | this.buildings_p2_array[this.counter3] == 230 | this.buildings_p2_array[this.counter3] == 240 | this.buildings_p2_array[this.counter3] == 250 | this.buildings_p2_array[this.counter3] == 260 | this.buildings_p2_array[this.counter3] == 330 | this.buildings_p2_array[this.counter3] == 340 | this.buildings_p2_array[this.counter3] == 350 | this.buildings_p2_array[this.counter3] == 360)
				{
					this.buildings_p2_array[this.counter3] = checked(this.buildings_p2_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
			{
				if (this.buildings_p2_array[this.counter3] == 110 | this.buildings_p2_array[this.counter3] == 120 | this.buildings_p2_array[this.counter3] == 210 | this.buildings_p2_array[this.counter3] == 211 | this.buildings_p2_array[this.counter3] == 212 | this.buildings_p2_array[this.counter3] == 220 | this.buildings_p2_array[this.counter3] == 221 | this.buildings_p2_array[this.counter3] == 222 | this.buildings_p2_array[this.counter3] == 310 | this.buildings_p2_array[this.counter3] == 311 | this.buildings_p2_array[this.counter3] == 312 | this.buildings_p2_array[this.counter3] == 320 | this.buildings_p2_array[this.counter3] == 321)
				{
					this.buildings_p2_array[this.counter3] = checked(this.buildings_p2_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p2_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p2_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			if (this.idle_colonists_array[this.current_player] <= 0)
			{
				this.p2_ai_done = true;
			}
			else
			{
				this.counter3 = 0;
				while (!(this.counter3 == 12 | this.idle_colonists_array[this.current_player] == 0 | this.p2_ai_done))
				{
					if (this.plantations_p2_array[this.counter3] == 10 | this.plantations_p2_array[this.counter3] == 20 | this.plantations_p2_array[this.counter3] == 30 | this.plantations_p2_array[this.counter3] == 40 | this.plantations_p2_array[this.counter3] == 50 | this.plantations_p2_array[this.counter3] == 60)
					{
						this.plantations_p2_array[this.counter3] = checked(this.plantations_p2_array[this.counter3] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p2_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.update_all_labels();
			this.determine_p2_mayor_phase_over();
			this.formtitle("p2", "Mayor Phase - Turn Over");
		}

		public void p2_process_prospector1()
		{
			this.log_process_role("p2", "Prospector1");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				this.infobox_role(string.Concat(this.p2_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p2 = checked(this.gold_p2 + 1);
			}
			this.formtitle("p2", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p2_process_prospector2()
		{
			this.log_process_role("p2", "Prospector2");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				this.infobox_role(string.Concat(this.p2_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p2 = checked(this.gold_p2 + 1);
			}
			this.formtitle("p2", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p2_process_settler()
		{
			this.log_process_role("p2", "Settler");
			this.update_summary();
			this.p2_ai_done = false;
			this.p2_ready_to_end_settler = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p2_chose_settler = false;
			this.p2_manned_construction_hut = false;
			this.p2_manned_hospice = false;
			this.p2_manned_hacienda = false;
			this.p2_chose_quarry = false;
			this.p2_chose_corn = false;
			this.p2_chose_random = false;
			this.p2_use_hacienda = false;
			this.p2_num_indigo_plants = 0;
			this.p2_num_sugar_plants = 0;
			this.p2_num_tobacco_plants = 0;
			this.p2_num_coffee_plants = 0;
			this.what_plantations_available();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				this.p2_chose_settler = true;
			}
			this.check_for_building(151);
			if (this.found_building)
			{
				this.p2_manned_construction_hut = true;
			}
			this.check_for_building(231);
			if (this.found_building)
			{
				this.p2_manned_hospice = true;
			}
			this.check_for_building(141);
			if (this.found_building)
			{
				this.p2_manned_hacienda = true;
			}
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] == 10 | this.plantations_p2_array[this.counter1] == 11)
				{
					this.p2_num_indigo_plants = checked(this.p2_num_indigo_plants + 1);
				}
				if (this.plantations_p2_array[this.counter1] == 20 | this.plantations_p2_array[this.counter1] == 21)
				{
					this.p2_num_sugar_plants = checked(this.p2_num_sugar_plants + 1);
				}
				if (this.plantations_p2_array[this.counter1] == 40 | this.plantations_p2_array[this.counter1] == 41)
				{
					this.p2_num_tobacco_plants = checked(this.p2_num_tobacco_plants + 1);
				}
				if (this.plantations_p2_array[this.counter1] == 50 | this.plantations_p2_array[this.counter1] == 51)
				{
					this.p2_num_coffee_plants = checked(this.p2_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_plantations_p2 >= 8 & this.num_plantations_p2 <= 10 & this.p2_manned_hacienda)
			{
				this.chance_of_action(20);
				if (this.chance)
				{
					this.p2_use_hacienda = true;
				}
			}
			if (this.num_plantations_p2 < 8 & this.p2_manned_hacienda)
			{
				this.chance_of_action(80);
				if (this.chance)
				{
					this.p2_use_hacienda = true;
				}
			}
			if (this.p2_use_hacienda & this.p2_chose_settler & this.quarry_available)
			{
				this.p2_chose_quarry = true;
				this.p2_chose_corn = false;
			}
			this.chance_of_action(10);
			if ((this.p2_chose_settler | this.p2_manned_construction_hut) & this.num_quarries_p2 == 3 & !this.corn_available & this.quarry_available & this.chance)
			{
				this.p2_chose_quarry = true;
				this.p2_chose_corn = false;
			}
			this.chance_of_action(40);
			if ((this.p2_chose_settler | this.p2_manned_construction_hut) & this.num_quarries_p2 == 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p2_chose_quarry = true;
				this.p2_chose_corn = false;
			}
			this.chance_of_action(90);
			if ((this.p2_chose_settler | this.p2_manned_construction_hut) & this.num_quarries_p2 < 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p2_chose_quarry = true;
				this.p2_chose_corn = false;
			}
			this.chance_of_action(90);
			if (this.chance & this.turn_number == 1 & this.p2_chose_settler)
			{
				this.p2_chose_quarry = true;
				this.p2_chose_corn = false;
				this.p2_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.corn_available & this.chance & this.turn_number == 1 & !this.p2_chose_settler)
			{
				this.p2_chose_quarry = false;
				this.p2_chose_corn = true;
				this.p2_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.turn_number != 1 & this.corn_available & !this.p2_manned_construction_hut)
			{
				this.p2_chose_quarry = false;
				this.p2_chose_corn = true;
				this.p2_chose_random = false;
			}
			if (this.num_plantations_p2 >= 12)
			{
				this.infobox_role(string.Concat(this.p2_name, " already has 12 plantations. ", this.p2_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (this.p2_use_hacienda)
				{
					this.infobox_building1(string.Concat(this.p2_name, "is using the Hacienda to get a random plantation."), 141);
					this.draw_random_plantation_tile();
				}
				if (!this.p2_use_hacienda & this.p2_manned_hacienda)
				{
					this.infobox_building1(string.Concat(this.p2_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (this.p2_chose_quarry & this.p2_chose_settler & !this.p2_ai_done)
				{
					this.infobox_plant(string.Concat(this.p2_name, " used the Settler bonus to choose a Quarry."), 60);
					this.p2_place_quarry();
				}
				if (this.p2_chose_quarry & !this.p2_chose_settler & this.p2_manned_construction_hut & !this.p2_ai_done)
				{
					this.infobox_building1(string.Concat(this.p2_name, " used the Construction Hut to choose a Quarry."), 151);
					this.p2_place_quarry();
				}
				if (this.p2_chose_corn & this.corn_available & !this.p2_ai_done)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Corn."), 30);
					this.p2_place_plantation(30);
				}
				this.chance_of_action(20);
				if (!this.p2_ai_done & this.indigo_available & this.p2_num_indigo_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Indigo."), 10);
					this.p2_place_plantation(10);
				}
				this.chance_of_action(20);
				if (!this.p2_ai_done & this.sugar_available & this.p2_num_sugar_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Sugar."), 20);
					this.p2_place_plantation(20);
				}
				if (!this.p2_ai_done & this.tobacco_available & this.p2_num_tobacco_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Tobacco."), 40);
					this.p2_place_plantation(40);
				}
				if (!this.p2_ai_done & this.sugar_available & this.p2_num_sugar_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Sugar."), 20);
					this.p2_place_plantation(20);
				}
				if (!this.p2_ai_done & this.coffee_available & this.p2_num_coffee_plants < 2)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Coffee."), 50);
					this.p2_place_plantation(50);
				}
				if (!this.p2_ai_done & this.indigo_available & this.p2_num_indigo_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Indigo."), 10);
					this.p2_place_plantation(10);
				}
				if (!this.p2_ai_done & this.coffee_available)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Coffee."), 50);
					this.p2_place_plantation(50);
				}
				if (!this.p2_ai_done & this.tobacco_available)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Tobacco."), 40);
					this.p2_place_plantation(40);
				}
				if (!this.p2_ai_done & this.sugar_available)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Sugar."), 20);
					this.p2_place_plantation(20);
				}
				if (!this.p2_ai_done & this.indigo_available)
				{
					this.infobox_plant(string.Concat(this.p2_name, " is choosing Indigo."), 10);
					this.p2_place_plantation(10);
				}
			}
			this.update_all_labels();
			this.formtitle("p2", "Done performing the Settler role - ");
		}

		public void p2_process_trader()
		{
			this.log_process_role("p2", "Trader");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p2_ai_done = false;
			this.p2_traded = false;
			this.p2_chose_trader = false;
			this.p2_manned_small_market = false;
			this.p2_manned_large_market = false;
			this.p2_manned_office = false;
			this.trading_house_full = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
			{
				this.p2_chose_trader = true;
			}
			this.check_for_building(131);
			if (this.found_building)
			{
				this.p2_manned_small_market = true;
			}
			this.check_for_building(251);
			if (this.found_building)
			{
				this.p2_manned_large_market = true;
			}
			this.check_for_building(241);
			if (this.found_building)
			{
				this.p2_manned_office = true;
			}
			if (this.trading_house_array[3] != 0)
			{
				this.trading_house_full = true;
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 5 & !this.p2_manned_office)
				{
					this.already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p2_array[4] > 0 & !this.p2_traded & (this.chance | this.p2_chose_trader))
			{
				this.goods_p2_array[4] = checked(this.goods_p2_array[4] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 5;
						this.counter1 = 4;
					}
				}
				this.counter3 = 4;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p2_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (this.p2_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Coffee for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p2 = checked(this.gold_p2 + this.counter3);
				this.p2_ai_done = true;
				this.p2_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 4 & !this.p2_manned_office)
				{
					this.already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p2_array[3] > 0 & !this.p2_traded & (this.chance | this.p2_chose_trader))
			{
				this.goods_p2_array[3] = checked(this.goods_p2_array[3] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 4;
						this.counter1 = 4;
					}
				}
				this.counter3 = 3;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p2_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (this.p2_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Tobacco for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p2 = checked(this.gold_p2 + this.counter3);
				this.p2_ai_done = true;
				this.p2_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 2 & !this.p2_manned_office)
				{
					this.already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p2_array[1] > 0 & !this.p2_traded & (this.chance | this.p2_chose_trader))
			{
				this.goods_p2_array[1] = checked(this.goods_p2_array[1] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 2;
						this.counter1 = 4;
					}
				}
				this.counter3 = 2;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p2_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (this.p2_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Sugar for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p2 = checked(this.gold_p2 + this.counter3);
				this.p2_ai_done = true;
				this.p2_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 1 & !this.p2_manned_office)
				{
					this.already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(75);
			if (!this.already_there & !this.trading_house_full & this.goods_p2_array[0] > 0 & !this.p2_traded & (this.chance | this.p2_chose_trader))
			{
				this.goods_p2_array[0] = checked(this.goods_p2_array[0] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 1;
						this.counter1 = 4;
					}
				}
				this.counter3 = 1;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p2_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (this.p2_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Indigo for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p2 = checked(this.gold_p2 + this.counter3);
				this.p2_ai_done = true;
				this.p2_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 3 & !this.p2_manned_office)
				{
					this.already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(10);
			if (!this.already_there & this.goods_p2_array[2] > 0 & !this.p2_traded & !this.trading_house_full & (this.p2_chose_trader | this.p2_manned_small_market | this.p2_manned_large_market | this.chance))
			{
				this.goods_p2_array[2] = checked(this.goods_p2_array[2] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 3;
						this.counter1 = 4;
					}
				}
				this.counter3 = 0;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p2", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				this.check_for_building(131);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				this.check_for_building(251);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p2_name, " sold their Corn for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p2 = checked(this.gold_p2 + this.counter3);
				this.p2_ai_done = true;
				this.p2_traded = true;
				this.update_all_labels();
			}
			if (!this.p2_traded)
			{
				this.infobox_role(string.Concat(this.p2_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			this.formtitle("p2", "Done performing the Trader role - Turn Over");
		}

		public void p2_remove_all_colonists_to_idle()
		{
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), "1", false) == 0)
					{
						this.plantations_p2_array[this.counter1] = checked(this.plantations_p2_array[this.counter1] - 1);
						this.idle_colonists_array[2] = checked(this.idle_colonists_array[2] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				this.counter2 = 0;
				do
				{
					if (this.buildings_p2_array[this.counter1] != 0 & this.buildings_p2_array[this.counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), "0", false) != 0)
						{
							this.buildings_p2_array[this.counter1] = checked(this.buildings_p2_array[this.counter1] - 1);
							this.idle_colonists_array[2] = checked(this.idle_colonists_array[2] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (this.counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void p3_choose_role()
		{
			this.turn_number = checked(this.turn_number + 1);
			this.update_summary();
			this.update_player_turn_designations();
			this.determine_empty_colonists_slots_all();
			this.p3_finished_choosing_role = false;
			while (!this.p3_finished_choosing_role)
			{
				this.role_choice = "settler";
				this.need_to_choose_random = true;
				this.dont_choose_settler = false;
				this.dont_choose_mayor = false;
				this.dont_choose_builder = false;
				this.dont_choose_craftsman = false;
				this.dont_choose_trader = false;
				this.dont_choose_captain = false;
				this.dont_choose_prospector1 = false;
				this.dont_choose_prospector2 = false;
				this.goods_to_ship = false;
				this.determine_goods_to_ship();
				this.goods_to_trade = false;
				this.determine_goods_to_trade();
				this.goods_to_produce = false;
				this.determine_production_p3();
				if (!this.goods_to_produce & this.need_to_choose_random && this.bonus_roles_array[3] < 2)
				{
					this.dont_choose_craftsman = true;
				}
				if (!this.goods_to_ship & this.need_to_choose_random && this.bonus_roles_array[5] < 2)
				{
					this.dont_choose_captain = true;
				}
				if (!this.goods_to_trade & this.need_to_choose_random && this.bonus_roles_array[4] < 2)
				{
					this.dont_choose_trader = true;
				}
				if (this.num_plantations_p3 >= 8 & this.need_to_choose_random && this.bonus_roles_array[0] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_settler = true;
					}
				}
				if (this.p3_empty_colonists_slots == 0 & this.need_to_choose_random && this.bonus_roles_array[1] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_mayor = true;
					}
				}
				this.check_for_plantation(30);
				if (this.num_plantations_p3 == 1 & !this.found_plantation & this.num_buildings_p3 == 0)
				{
					this.dont_choose_mayor = true;
				}
				if (this.turn_number == 1 & this.need_to_choose_random)
				{
					this.chance_of_action(90);
					if (this.chance)
					{
						this.role_choice = "settler";
						this.need_to_choose_random = false;
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "mayor";
							this.need_to_choose_random = false;
						}
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (!this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "builder";
							this.need_to_choose_random = false;
						}
					}
				}
				this.chance_of_action(90);
				if (this.role_builder_pic.Visible & this.bonus_roles_array[2] >= 2 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_captain_pic.Visible & this.bonus_roles_array[5] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_craftsman_pic.Visible & this.bonus_roles_array[3] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_mayor_pic.Visible & this.bonus_roles_array[1] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "mayor";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_settler_pic.Visible & this.bonus_roles_array[0] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "settler";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_trader_pic.Visible & this.bonus_roles_array[4] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector1_pic.Visible & this.bonus_roles_array[6] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector1";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector2_pic.Visible & this.bonus_roles_array[7] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector2";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p3 + this.discount1) + this.num_manned_quarries_p3) >= 10 && this.role_builder_pic.Visible & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p3 + this.discount1) + this.num_manned_quarries_p3) >= 8)
				{
					this.chance_of_action(90);
					if (this.chance & this.role_builder_pic.Visible & this.need_to_choose_random)
					{
						this.role_choice = "builder";
						this.need_to_choose_random = false;
					}
				}
				if (checked(checked(this.gold_p3 + this.discount1) + this.num_manned_quarries_p3) >= 10)
				{
					this.chance = false;
				}
				if (checked(checked(this.gold_p3 + this.discount1) + this.num_manned_quarries_p3) < 10)
				{
					this.chance_of_action(90);
				}
				if (this.goods_to_trade & this.role_trader_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(80);
				if (this.goods_to_ship & this.role_captain_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(30);
				if (this.goods_to_produce & this.role_craftsman_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.ai_role_choice_maintenance();
				if (StringType.StrCmp(this.role_choice, "settler", false) == 0 && this.role_settler_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Settler."), "role_settler");
					this.settler_round = true;
					this.role_settler_pic.Visible = false;
					this.settler_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[0]);
					this.bonus_roles_array[0] = 0;
					this.log_role_chooser("p3", "Settler");
					this.p3_process_settler();
					this.p3_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p3", false) == 0 & this.settler_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "mayor", false) == 0 && this.role_mayor_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Mayor."), "role_mayor");
					this.mayor_round = true;
					this.role_mayor_pic.Visible = false;
					this.mayor_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[1]);
					this.bonus_roles_array[1] = 0;
					this.log_role_chooser("p3", "Mayor");
					this.p3_process_mayor();
					this.p3_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p3", false) == 0 & this.mayor_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "builder", false) == 0 && this.role_builder_pic.Visible & this.chance)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Builder."), "role_builder");
					this.builder_round = true;
					this.role_builder_pic.Visible = false;
					this.builder_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[2]);
					this.bonus_roles_array[2] = 0;
					this.log_role_chooser("p3", "Builder");
					this.p3_process_builder();
					this.p3_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p3", false) == 0 & this.builder_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "craftsman", false) == 0 && this.role_craftsman_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Craftsman."), "role_craftsman");
					this.craftsman_round = true;
					this.role_craftsman_pic.Visible = false;
					this.craftsman_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[3]);
					this.bonus_roles_array[3] = 0;
					this.log_role_chooser("p3", "Craftsman");
					this.p3_process_craftsman();
					this.p3_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "trader", false) == 0 && this.role_trader_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Trader."), "role_trader");
					this.trader_round = true;
					this.role_trader_pic.Visible = false;
					this.trader_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[4]);
					this.bonus_roles_array[4] = 0;
					this.log_role_chooser("p3", "Trader");
					this.p3_process_trader();
					this.p3_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p3", false) == 0 & this.trader_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "captain", false) == 0 && this.role_captain_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Captain."), "role_captain");
					this.p1_used_wharf = false;
					this.p2_used_wharf = false;
					this.p3_used_wharf = false;
					this.p4_used_wharf = false;
					this.p5_used_wharf = false;
					this.captain_round = true;
					this.role_captain_pic.Visible = false;
					this.captain_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[5]);
					this.bonus_roles_array[5] = 0;
					this.captain_bonus_taken = false;
					this.log_role_chooser("p3", "Captain");
					this.p3_process_captain();
					this.p3_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector1", false) == 0 && this.role_prospector1_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p3_name, " has chosen the Prospector."), "role_prospector1");
					this.prospector1_round = true;
					this.role_prospector1_pic.Visible = false;
					this.pros1_bonus_label.Visible = false;
					this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[6]);
					this.bonus_roles_array[6] = 0;
					this.log_role_chooser("p3", "Prospector1");
					this.p3_process_prospector1();
					this.p3_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector2", false) != 0 || !this.role_prospector2_pic.Visible)
				{
					continue;
				}
				this.infobox_role(string.Concat(this.p3_name, " has chosen the Prospector."), "role_prospector1");
				this.prospector2_round = true;
				this.role_prospector2_pic.Visible = false;
				this.pros2_bonus_label.Visible = false;
				this.gold_p3 = checked(this.gold_p3 + this.bonus_roles_array[7]);
				this.bonus_roles_array[7] = 0;
				this.log_role_chooser("p3", "Prospector2");
				this.p3_process_prospector2();
				this.p3_finished_choosing_role = true;
			}
		}

		public void p3_place_matching_production()
		{
			this.plantations_p3_array[this.plantation_slot] = checked(this.plantations_p3_array[this.plantation_slot] + 1);
			this.buildings_p3_array[this.building_slot] = checked(this.buildings_p3_array[this.building_slot] + 1);
			this.idle_colonists_array[3] = checked(this.idle_colonists_array[3] - 2);
			this.update_all_labels();
		}

		public void p3_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				this.tempinteger = this.indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				this.tempinteger = this.sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				this.tempinteger = this.corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				this.tempinteger = this.tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				this.tempinteger = this.coffee_available_slot;
			}
			if (!this.p3_manned_hospice)
			{
				this.plantations_p3_array[this.num_plantations_p3] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.p3_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p3_array[this.num_plantations_p3] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p3_name, "'s Hospice has granted a colonist for their plantation."), 231);
				this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				this.p3_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p3_array[this.num_plantations_p3] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p3_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p3_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p3_array[this.num_plantations_p3] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p3_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				this.p3_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p3_place_quarry()
		{
			if (!this.p3_manned_hospice)
			{
				this.plantations_p3_array[this.num_plantations_p3] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.p3_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p3_array[this.num_plantations_p3] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p3_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				this.p3_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p3_array[this.num_plantations_p3] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p3_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p3_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p3_array[this.num_plantations_p3] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p3_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				this.p3_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p3_process_builder()
		{
			this.log_process_role("p3", "Builder");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p3_ai_done = false;
			this.p3_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//this.p3_ai_done;
			this.compute_temporary_large_building_score();
			this.determine_if_afford_large();
			this.update_player_turn_designations();
			if (this.turn_number == 1 & StringType.StrCmp(this.current_role_chooser_string, "p3", false) != 0 & !this.p3_ai_done & this.builder_round)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Small Indigo Plant."), 110);
						this.p3_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done & this.afford_large & this.best_building_num != 999)
			{
				this.p3_process_building_large(this.best_building_num);
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 13;
				this.build_number = 320;
				this.build_cost = 6;
				this.build_name = "Coffee Roaster";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(50);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the ", this.build_name, "."), this.build_number);
						this.p3_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 12;
				this.build_number = 310;
				this.build_cost = 5;
				this.build_name = "Tobacco Storage";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(40);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the ", this.build_name, "."), this.build_number);
						this.p3_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 1;
				this.build_number = 120;
				this.build_cost = 2;
				this.build_name = "Small Sugar Mill";
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(220);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the ", this.build_name, "."), this.build_number);
						this.p3_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 7;
				this.build_number = 220;
				this.build_cost = 4;
				this.build_name = "Sugar Mill";
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(120);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(50);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the ", this.build_name, "."), this.build_number);
						this.p3_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Small Indigo Plant."), 110);
						this.p3_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 6;
				this.build_number = 210;
				this.build_cost = 3;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(110);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(60);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Indigo Plant."), 210);
						this.p3_process_building(210);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			this.update_player_turn_designations();
			if (!this.p3_ai_done)
			{
				this.chance_of_action(25);
				if (this.chance & StringType.StrCmp(this.current_role_chooser_string, "p3", false) != 0)
				{
					this.determine_if_buyable1(2, 130, 1);
					if (this.buyable & this.num_manned_quarries_p3 >= 1 & !this.p3_built)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Small Market."), 130);
						this.p3_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
					this.determine_if_buyable1(0, 110, 1);
					if (this.buyable & this.num_manned_quarries_p3 >= 1 & !this.p3_built)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Small Indigo Plant."), 110);
						this.p3_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
						this.p3_ai_done = true;
						this.p3_built = true;
					}
					if (!this.p3_ai_done & !this.p3_built)
					{
						this.p3_ai_done = true;
						this.p3_built = false;
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 14;
				this.build_number = 330;
				this.build_cost = 7;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Factory."), 330);
						this.p3_process_building(330);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 16;
				this.build_number = 350;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Harbor."), 350);
						this.p3_process_building(350);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 8;
				this.build_number = 230;
				this.build_cost = 4;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_plantations_p3 > 8)
					{
						this.chance_of_action(10);
					}
					else
					{
						this.chance_of_action(50);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Hospice."), 230);
						this.p3_process_building(230);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 10;
				this.build_number = 250;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Large Market."), 250);
						this.p3_process_building(250);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 2;
				this.build_number = 130;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Small Market."), 130);
						this.p3_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 5;
				this.build_number = 160;
				this.build_cost = 3;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(260);
					if (!this.found_building)
					{
						this.check_for_building(261);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					else
					{
						this.chance_of_action(10);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Small Warehouse."), 160);
						this.p3_process_building(160);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 3;
				this.build_number = 140;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Hacienda."), 140);
						this.p3_process_building(140);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 17;
				this.build_number = 361;
				this.build_cost = 9;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(50);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Wharf."), 360);
						this.p3_process_building(360);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 11;
				this.build_number = 260;
				this.build_cost = 6;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(160);
					if (!this.found_building)
					{
						this.check_for_building(161);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(5);
						}
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Large Warehouse."), 260);
						this.p3_process_building(260);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 9;
				this.build_number = 240;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(30);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Office."), 240);
						this.p3_process_building(240);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 4;
				this.build_number = 150;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_quarries_p3 < 2)
					{
						this.chance_of_action(30);
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the Construction Hut."), 150);
						this.p3_process_building(150);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p3_ai_done)
			{
				this.build_available_slot = 15;
				this.build_number = 340;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(20);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p3_name, " built the University."), 340);
						this.p3_process_building(340);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
						this.p3_ai_done = true;
						this.p3_built = true;
						this.update_all_labels();
					}
				}
			}
			this.determine_if_buyable1(2, 130, 1);
			if (this.buyable & this.num_manned_quarries_p3 >= 1 & !this.p3_built & !this.p3_ai_done)
			{
				this.infobox_building1(string.Concat(this.p3_name, " built the Small Market."), 130);
				this.p3_process_building(130);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
				this.p3_ai_done = true;
				this.p3_built = true;
				this.update_all_labels();
			}
			this.determine_if_buyable1(0, 110, 1);
			if (this.buyable & this.num_manned_quarries_p3 >= 1 & !this.p3_built & !this.p3_ai_done)
			{
				this.infobox_building1(string.Concat(this.p3_name, " built the Small Indigo Plant."), 110);
				this.p3_process_building(110);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
				this.p3_ai_done = true;
				this.p3_built = true;
				this.update_all_labels();
			}
			if (!this.p3_built)
			{
				this.infobox_role(string.Concat(this.p3_name, " has decided not to build."), "role_builder");
			}
			this.formtitle("p3", "Done performing the Builder role - AI BLANK");
		}

		public void p3_process_building(object buildnum)
		{
			this.check_for_building(341);
			if (!this.found_building)
			{
				this.buildings_p3_array[this.num_buildings_p3] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				}
				else if (this.colonists_ship_num > 0)
				{
					this.colonists_ship_num = checked(this.colonists_ship_num - 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				}
				this.buildings_p3_array[this.num_buildings_p3] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p3_process_building_large(object buildnum)
		{
			this.determine_where_to_build_large_p3();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				this.tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				this.tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				this.tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				this.tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				this.tempinteger = 22;
			}
			if (this.large_build_spot != 99)
			{
				this.check_for_building(341);
				if (!this.found_building)
				{
					this.infobox_building2(string.Concat(this.p3_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p3_array[this.large_build_spot] = IntegerType.FromObject(buildnum);
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
					this.p3_ai_done = true;
					this.p3_built = true;
				}
				else
				{
					if (this.colonists_bank_num > 0)
					{
						this.colonists_bank_num = checked(this.colonists_bank_num - 1);
						this.infobox_building1(string.Concat(this.p3_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[3] = checked(this.colonists_array[3] + 1);
					}
					else if (this.colonists_ship_num > 0)
					{
						this.colonists_ship_num = checked(this.colonists_ship_num - 1);
						this.infobox_building1(string.Concat(this.p3_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[3] = checked(this.colonists_array[3] + 1);
					}
					this.infobox_building2(string.Concat(this.p3_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p3_array[this.large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p3 = checked(this.gold_p3 - this.build_final_cost);
					this.p3_ai_done = true;
					this.p3_built = true;
				}
			}
			this.update_all_labels();
		}

		public void p3_process_captain()
		{
			this.log_process_role("p3", "Captain");
			this.update_summary();
			this.update_ship_cargo();
			this.p3_done_shipping = false;
			this.p3_done_all_shipping = false;
			this.p3_num_shipped = 0;
			this.goods_to_ship = false;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.goods_p3_array[this.counter1] > 0)
				{
					this.goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.goods_to_ship & !this.p3_done_shipping)
			{
				this.calculate_best_captain_points_p3();
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipa", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_corn_via_shipa();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipb", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_corn_via_shipb();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipc", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_corn_via_shipc();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_wharf", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_corn_via_wharf();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipa", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_indigo_via_shipa();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipb", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_indigo_via_shipb();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipc", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_indigo_via_shipc();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_wharf", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_Indigo_via_wharf();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipa", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_sugar_via_shipa();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipb", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_sugar_via_shipb();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipc", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_sugar_via_shipc();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_wharf", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_sugar_via_wharf();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipa", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_tobacco_via_shipa();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipb", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_tobacco_via_shipb();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipc", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_tobacco_via_shipc();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_wharf", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_tobacco_via_wharf();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipa", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_coffee_via_shipa();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipb", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_coffee_via_shipb();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipc", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_coffee_via_shipc();
				this.p3_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_wharf", false) == 0 & !this.p3_done_shipping)
			{
				this.ship_coffee_via_wharf();
				this.p3_done_shipping = true;
			}
			if (!this.p3_done_shipping & StringType.StrCmp(this.best_shipping_method, "null", false) == 0 & this.goods_to_ship)
			{
				this.p3_done_shipping = true;
				this.p3_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p3_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!this.goods_to_ship & !this.p3_done_shipping)
			{
				this.p3_done_shipping = true;
				this.p3_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p3_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Enabled = true;
			this.auto_captain_button.Visible = true;
			this.formtitle("p3", "Done Shipping - Press Next Shipper");
			this.update_ship_cargo();
		}

		public void p3_process_craftsman()
		{
			this.log_process_role("p3", "Craftsman");
			this.formtitle("p3", "Craftsman Phase");
			this.p3_ai_done = false;
			this.update_summary();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				this.determine_production();
			}
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				if (this.goods_this_turn_p3_array[4] > 0 & this.goods_bank_array[4] > 0 & !this.p3_ai_done)
				{
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] - 1);
					this.goods_p3_array[4] = checked(this.goods_p3_array[4] + 1);
					this.p3_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p3_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p3_array[3] > 0 & this.goods_bank_array[3] > 0 & !this.p3_ai_done)
				{
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] - 1);
					this.goods_p3_array[3] = checked(this.goods_p3_array[3] + 1);
					this.p3_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p3_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p3_array[1] > 0 & this.goods_bank_array[1] > 0 & !this.p3_ai_done)
				{
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] - 1);
					this.goods_p3_array[1] = checked(this.goods_p3_array[1] + 1);
					this.p3_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p3_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p3_array[0] > 0 & this.goods_bank_array[0] > 0 & !this.p3_ai_done)
				{
					this.goods_bank_array[0] = checked(this.goods_bank_array[0] - 1);
					this.goods_p3_array[0] = checked(this.goods_p3_array[0] + 1);
					this.p3_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p3_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p3_array[2] > 0 & this.goods_bank_array[2] > 0 & !this.p3_ai_done)
				{
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] - 1);
					this.goods_p3_array[2] = checked(this.goods_p3_array[2] + 1);
					this.p3_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p3_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!this.p3_ai_done)
				{
					if (!((this.goods_this_turn_p3_array[0] > 0 | this.goods_this_turn_p3_array[1] > 0 | this.goods_this_turn_p3_array[2] > 0 | this.goods_this_turn_p3_array[3] > 0 | this.goods_this_turn_p3_array[4] > 0) & (this.goods_bank_array[0] == 0 | this.goods_bank_array[1] == 0 | this.goods_bank_array[2] == 0 | this.goods_bank_array[3] == 0 | this.goods_bank_array[4] == 0)))
					{
						this.infobox_role(string.Concat(this.p3_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						this.p3_ai_done = true;
						this.infobox_role(string.Concat("There were no goods available for ", this.p3_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			this.next_turn_button.Text = "End Craftsman Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void p3_process_mayor()
		{
			this.log_process_role("p3", "Mayor");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				this.distribute_new_colonists();
			}
			this.p3_remove_all_colonists_to_idle();
			this.p3_ai_done = false;
			if (this.idle_colonists_array[this.current_player] == 0)
			{
				this.p3_ai_done = true;
			}
			this.counter3 = 12;
			while (!(this.counter3 == 20 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				if (this.buildings_p3_array[this.counter3] == 410 | this.buildings_p3_array[this.counter3] == 420 | this.buildings_p3_array[this.counter3] == 430 | this.buildings_p3_array[this.counter3] == 440 | this.buildings_p3_array[this.counter3] == 450)
				{
					this.buildings_p3_array[this.counter3] = checked(this.buildings_p3_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				if (this.buildings_p3_array[this.counter3] == 350)
				{
					this.buildings_p3_array[this.counter3] = checked(this.buildings_p3_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				if (this.buildings_p3_array[this.counter3] == 330)
				{
					this.buildings_p3_array[this.counter3] = checked(this.buildings_p3_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				if (this.buildings_p3_array[this.counter3] == 360)
				{
					this.buildings_p3_array[this.counter3] = checked(this.buildings_p3_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.num_empty_corn_plant_p3 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p3 = checked(this.num_empty_corn_plant_p3 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_empty_corn_plant_p3 >= 1 & this.num_quarries_p3 >= 1 & this.idle_colonists_array[this.current_player] >= 2)
			{
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p3_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p3_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p3_ai_done = true;
					this.finished = true;
				}
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(60);
					if (this.found_plantation)
					{
						this.plantations_p3_array[this.plantation_slot] = 61;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p3_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p3_ai_done = true;
					this.finished = true;
				}
			}
			this.num_empty_corn_plant_p3 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p3 = checked(this.num_empty_corn_plant_p3 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.idle_colonists_array[this.current_player] >= 2 & this.num_empty_corn_plant_p3 >= 2)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p3_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p3_colonists();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p3_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p3_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p3_ai_done))
				{
					this.check_for_coffee_production();
					if (this.found_coffee_match)
					{
						this.p3_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p3_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p3_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p3_ai_done))
				{
					this.check_for_tobacco_production();
					if (this.found_tobacco_match)
					{
						this.p3_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p3_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p3_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p3_ai_done))
				{
					this.check_for_sugar_production();
					if (this.found_sugar_match)
					{
						this.p3_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p3_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p3_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p3_ai_done))
				{
					this.check_for_indigo_production();
					if (this.found_indigo_match)
					{
						this.p3_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p3_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				this.check_for_plantation(30);
				if (this.found_plantation)
				{
					this.plantations_p3_array[this.plantation_slot] = 31;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				this.check_for_plantation(60);
				if (this.found_plantation)
				{
					this.plantations_p3_array[this.plantation_slot] = 61;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				if (this.buildings_p3_array[this.counter3] == 130 | this.buildings_p3_array[this.counter3] == 140 | this.buildings_p3_array[this.counter3] == 150 | this.buildings_p3_array[this.counter3] == 160 | this.buildings_p3_array[this.counter3] == 230 | this.buildings_p3_array[this.counter3] == 240 | this.buildings_p3_array[this.counter3] == 250 | this.buildings_p3_array[this.counter3] == 260 | this.buildings_p3_array[this.counter3] == 330 | this.buildings_p3_array[this.counter3] == 340 | this.buildings_p3_array[this.counter3] == 350 | this.buildings_p3_array[this.counter3] == 360)
				{
					this.buildings_p3_array[this.counter3] = checked(this.buildings_p3_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
			{
				if (this.buildings_p3_array[this.counter3] == 110 | this.buildings_p3_array[this.counter3] == 120 | this.buildings_p3_array[this.counter3] == 210 | this.buildings_p3_array[this.counter3] == 211 | this.buildings_p3_array[this.counter3] == 212 | this.buildings_p3_array[this.counter3] == 220 | this.buildings_p3_array[this.counter3] == 221 | this.buildings_p3_array[this.counter3] == 222 | this.buildings_p3_array[this.counter3] == 310 | this.buildings_p3_array[this.counter3] == 311 | this.buildings_p3_array[this.counter3] == 312 | this.buildings_p3_array[this.counter3] == 320 | this.buildings_p3_array[this.counter3] == 321)
				{
					this.buildings_p3_array[this.counter3] = checked(this.buildings_p3_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p3_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p3_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			if (this.idle_colonists_array[this.current_player] <= 0)
			{
				this.p3_ai_done = true;
			}
			else
			{
				this.counter3 = 0;
				while (!(this.counter3 == 12 | this.idle_colonists_array[this.current_player] == 0 | this.p3_ai_done))
				{
					if (this.plantations_p3_array[this.counter3] == 10 | this.plantations_p3_array[this.counter3] == 20 | this.plantations_p3_array[this.counter3] == 30 | this.plantations_p3_array[this.counter3] == 40 | this.plantations_p3_array[this.counter3] == 50 | this.plantations_p3_array[this.counter3] == 60)
					{
						this.plantations_p3_array[this.counter3] = checked(this.plantations_p3_array[this.counter3] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p3_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.update_all_labels();
			this.determine_p3_mayor_phase_over();
			this.formtitle("p3", "Mayor Phase - Turn Over");
		}

		public void p3_process_prospector1()
		{
			this.log_process_role("p3", "Prospector1");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				this.infobox_role(string.Concat(this.p3_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p3 = checked(this.gold_p3 + 1);
			}
			this.formtitle("p3", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p3_process_prospector2()
		{
			this.log_process_role("p3", "Prospector2");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				this.infobox_role(string.Concat(this.p3_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p3 = checked(this.gold_p3 + 1);
			}
			this.formtitle("p3", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p3_process_settler()
		{
			this.log_process_role("p3", "Settler");
			this.update_summary();
			this.p3_ai_done = false;
			this.p3_ready_to_end_settler = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p3_chose_settler = false;
			this.p3_manned_construction_hut = false;
			this.p3_manned_hospice = false;
			this.p3_manned_hacienda = false;
			this.p3_chose_quarry = false;
			this.p3_chose_corn = false;
			this.p3_chose_random = false;
			this.p3_use_hacienda = false;
			this.p3_num_indigo_plants = 0;
			this.p3_num_sugar_plants = 0;
			this.p3_num_tobacco_plants = 0;
			this.p3_num_coffee_plants = 0;
			this.what_plantations_available();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				this.p3_chose_settler = true;
			}
			this.check_for_building(151);
			if (this.found_building)
			{
				this.p3_manned_construction_hut = true;
			}
			this.check_for_building(231);
			if (this.found_building)
			{
				this.p3_manned_hospice = true;
			}
			this.check_for_building(141);
			if (this.found_building)
			{
				this.p3_manned_hacienda = true;
			}
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] == 10 | this.plantations_p3_array[this.counter1] == 11)
				{
					this.p3_num_indigo_plants = checked(this.p3_num_indigo_plants + 1);
				}
				if (this.plantations_p3_array[this.counter1] == 20 | this.plantations_p3_array[this.counter1] == 21)
				{
					this.p3_num_sugar_plants = checked(this.p3_num_sugar_plants + 1);
				}
				if (this.plantations_p3_array[this.counter1] == 40 | this.plantations_p3_array[this.counter1] == 41)
				{
					this.p3_num_tobacco_plants = checked(this.p3_num_tobacco_plants + 1);
				}
				if (this.plantations_p3_array[this.counter1] == 50 | this.plantations_p3_array[this.counter1] == 51)
				{
					this.p3_num_coffee_plants = checked(this.p3_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_plantations_p3 >= 8 & this.num_plantations_p3 <= 10 & this.p3_manned_hacienda)
			{
				this.chance_of_action(20);
				if (this.chance)
				{
					this.p3_use_hacienda = true;
				}
			}
			if (this.num_plantations_p3 < 8 & this.p3_manned_hacienda)
			{
				this.chance_of_action(80);
				if (this.chance)
				{
					this.p3_use_hacienda = true;
				}
			}
			if (this.p3_use_hacienda & this.p3_chose_settler & this.quarry_available)
			{
				this.p3_chose_quarry = true;
				this.p3_chose_corn = false;
			}
			this.chance_of_action(10);
			if ((this.p3_chose_settler | this.p3_manned_construction_hut) & this.num_quarries_p3 == 3 & !this.corn_available & this.quarry_available & this.chance)
			{
				this.p3_chose_quarry = true;
				this.p3_chose_corn = false;
			}
			this.chance_of_action(40);
			if ((this.p3_chose_settler | this.p3_manned_construction_hut) & this.num_quarries_p3 == 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p3_chose_quarry = true;
				this.p3_chose_corn = false;
			}
			this.chance_of_action(90);
			if ((this.p3_chose_settler | this.p3_manned_construction_hut) & this.num_quarries_p3 < 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p3_chose_quarry = true;
				this.p3_chose_corn = false;
			}
			this.chance_of_action(90);
			if (this.chance & this.turn_number == 1 & this.p3_chose_settler)
			{
				this.p3_chose_quarry = true;
				this.p3_chose_corn = false;
				this.p3_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.corn_available & this.chance & this.turn_number == 1 & !this.p3_chose_settler)
			{
				this.p3_chose_quarry = false;
				this.p3_chose_corn = true;
				this.p3_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.turn_number != 1 & this.corn_available & !this.p3_manned_construction_hut)
			{
				this.p3_chose_quarry = false;
				this.p3_chose_corn = true;
				this.p3_chose_random = false;
			}
			if (this.num_plantations_p3 >= 12)
			{
				this.infobox_role(string.Concat(this.p3_name, " already has 12 plantations. ", this.p3_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (this.p3_use_hacienda)
				{
					this.infobox_building1(string.Concat(this.p3_name, "is using the Hacienda to get a random plantation."), 141);
					this.draw_random_plantation_tile();
				}
				if (!this.p3_use_hacienda & this.p3_manned_hacienda)
				{
					this.infobox_building1(string.Concat(this.p3_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (this.p3_chose_quarry & this.p3_chose_settler & !this.p3_ai_done)
				{
					this.infobox_plant(string.Concat(this.p3_name, " used the Settler bonus to choose a Quarry."), 60);
					this.p3_place_quarry();
				}
				if (this.p3_chose_quarry & !this.p3_chose_settler & this.p3_manned_construction_hut & !this.p3_ai_done)
				{
					this.infobox_building1(string.Concat(this.p3_name, " used the Construction Hut to choose a Quarry."), 151);
					this.p3_place_quarry();
				}
				if (this.p3_chose_corn & this.corn_available & !this.p3_ai_done)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Corn."), 30);
					this.p3_place_plantation(30);
				}
				this.chance_of_action(20);
				if (!this.p3_ai_done & this.indigo_available & this.p3_num_indigo_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Indigo."), 10);
					this.p3_place_plantation(10);
				}
				this.chance_of_action(20);
				if (!this.p3_ai_done & this.sugar_available & this.p3_num_sugar_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Sugar."), 20);
					this.p3_place_plantation(20);
				}
				if (!this.p3_ai_done & this.tobacco_available & this.p3_num_tobacco_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Tobacco."), 40);
					this.p3_place_plantation(40);
				}
				if (!this.p3_ai_done & this.sugar_available & this.p3_num_sugar_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Sugar."), 20);
					this.p3_place_plantation(20);
				}
				if (!this.p3_ai_done & this.coffee_available & this.p3_num_coffee_plants < 2)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Coffee."), 50);
					this.p3_place_plantation(50);
				}
				if (!this.p3_ai_done & this.indigo_available & this.p3_num_indigo_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Indigo."), 10);
					this.p3_place_plantation(10);
				}
				if (!this.p3_ai_done & this.coffee_available)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Coffee."), 50);
					this.p3_place_plantation(50);
				}
				if (!this.p3_ai_done & this.tobacco_available)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Tobacco."), 40);
					this.p3_place_plantation(40);
				}
				if (!this.p3_ai_done & this.sugar_available)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Sugar."), 20);
					this.p3_place_plantation(20);
				}
				if (!this.p3_ai_done & this.indigo_available)
				{
					this.infobox_plant(string.Concat(this.p3_name, " is choosing Indigo."), 10);
					this.p3_place_plantation(10);
				}
			}
			this.update_all_labels();
			this.formtitle("p3", "Done performing the Settler role - ");
		}

		public void p3_process_trader()
		{
			this.log_process_role("p3", "Trader");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p3_ai_done = false;
			this.p3_traded = false;
			this.p3_chose_trader = false;
			this.p3_manned_small_market = false;
			this.p3_manned_large_market = false;
			this.p3_manned_office = false;
			this.trading_house_full = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
			{
				this.p3_chose_trader = true;
			}
			this.check_for_building(131);
			if (this.found_building)
			{
				this.p3_manned_small_market = true;
			}
			this.check_for_building(251);
			if (this.found_building)
			{
				this.p3_manned_large_market = true;
			}
			this.check_for_building(241);
			if (this.found_building)
			{
				this.p3_manned_office = true;
			}
			if (this.trading_house_array[3] != 0)
			{
				this.trading_house_full = true;
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 5 & !this.p3_manned_office)
				{
					this.already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p3_array[4] > 0 & !this.p3_traded & (this.chance | this.p3_chose_trader))
			{
				this.goods_p3_array[4] = checked(this.goods_p3_array[4] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 5;
						this.counter1 = 4;
					}
				}
				this.counter3 = 4;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p3_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (this.p3_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Coffee for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p3 = checked(this.gold_p3 + this.counter3);
				this.p3_ai_done = true;
				this.p3_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 4 & !this.p3_manned_office)
				{
					this.already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p3_array[3] > 0 & !this.p3_traded & (this.chance | this.p3_chose_trader))
			{
				this.goods_p3_array[3] = checked(this.goods_p3_array[3] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 4;
						this.counter1 = 4;
					}
				}
				this.counter3 = 3;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p3_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (this.p3_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Tobacco for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p3 = checked(this.gold_p3 + this.counter3);
				this.p3_ai_done = true;
				this.p3_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 2 & !this.p3_manned_office)
				{
					this.already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p3_array[1] > 0 & !this.p3_traded & (this.chance | this.p3_chose_trader))
			{
				this.goods_p3_array[1] = checked(this.goods_p3_array[1] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 2;
						this.counter1 = 4;
					}
				}
				this.counter3 = 2;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p3_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (this.p3_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Sugar for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p3 = checked(this.gold_p3 + this.counter3);
				this.p3_ai_done = true;
				this.p3_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 1 & !this.p3_manned_office)
				{
					this.already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(75);
			if (!this.already_there & !this.trading_house_full & this.goods_p3_array[0] > 0 & !this.p3_traded & (this.chance | this.p3_chose_trader))
			{
				this.goods_p3_array[0] = checked(this.goods_p3_array[0] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 1;
						this.counter1 = 4;
					}
				}
				this.counter3 = 1;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p3_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (this.p3_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Indigo for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p3 = checked(this.gold_p3 + this.counter3);
				this.p3_ai_done = true;
				this.p3_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 3 & !this.p3_manned_office)
				{
					this.already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(10);
			if (!this.already_there & this.goods_p3_array[2] > 0 & !this.p3_traded & !this.trading_house_full & (this.p3_chose_trader | this.p3_manned_small_market | this.p3_manned_large_market | this.chance))
			{
				this.goods_p3_array[2] = checked(this.goods_p3_array[2] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 3;
						this.counter1 = 4;
					}
				}
				this.counter3 = 0;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p3", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				this.check_for_building(131);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				this.check_for_building(251);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p3_name, " sold their Corn for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p3 = checked(this.gold_p3 + this.counter3);
				this.p3_ai_done = true;
				this.p3_traded = true;
				this.update_all_labels();
			}
			if (!this.p3_traded)
			{
				this.infobox_role(string.Concat(this.p3_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			this.formtitle("p3", "Done performing the Trader role - Turn Over");
		}

		public void p3_remove_all_colonists_to_idle()
		{
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), "1", false) == 0)
					{
						this.plantations_p3_array[this.counter1] = checked(this.plantations_p3_array[this.counter1] - 1);
						this.idle_colonists_array[3] = checked(this.idle_colonists_array[3] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				this.counter2 = 0;
				do
				{
					if (this.buildings_p3_array[this.counter1] != 0 & this.buildings_p3_array[this.counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), "0", false) != 0)
						{
							this.buildings_p3_array[this.counter1] = checked(this.buildings_p3_array[this.counter1] - 1);
							this.idle_colonists_array[3] = checked(this.idle_colonists_array[3] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (this.counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void p4_choose_role()
		{
			this.turn_number = checked(this.turn_number + 1);
			this.update_summary();
			this.update_player_turn_designations();
			this.determine_empty_colonists_slots_all();
			this.p4_finished_choosing_role = false;
			while (!this.p4_finished_choosing_role)
			{
				this.role_choice = "settler";
				this.need_to_choose_random = true;
				this.dont_choose_settler = false;
				this.dont_choose_mayor = false;
				this.dont_choose_builder = false;
				this.dont_choose_craftsman = false;
				this.dont_choose_trader = false;
				this.dont_choose_captain = false;
				this.dont_choose_prospector1 = false;
				this.dont_choose_prospector2 = false;
				this.goods_to_ship = false;
				this.determine_goods_to_ship();
				this.goods_to_trade = false;
				this.determine_goods_to_trade();
				this.goods_to_produce = false;
				this.determine_production_p4();
				if (!this.goods_to_produce & this.need_to_choose_random && this.bonus_roles_array[3] < 2)
				{
					this.dont_choose_craftsman = true;
				}
				if (!this.goods_to_ship & this.need_to_choose_random && this.bonus_roles_array[5] < 2)
				{
					this.dont_choose_captain = true;
				}
				if (!this.goods_to_trade & this.need_to_choose_random && this.bonus_roles_array[4] < 2)
				{
					this.dont_choose_trader = true;
				}
				if (this.num_plantations_p4 >= 8 & this.need_to_choose_random && this.bonus_roles_array[0] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_settler = true;
					}
				}
				if (this.p4_empty_colonists_slots == 0 & this.need_to_choose_random && this.bonus_roles_array[1] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_mayor = true;
					}
				}
				this.check_for_plantation(30);
				if (this.num_plantations_p4 == 1 & !this.found_plantation & this.num_buildings_p4 == 0)
				{
					this.dont_choose_mayor = true;
				}
				if (this.turn_number == 1 & this.need_to_choose_random)
				{
					this.chance_of_action(90);
					if (this.chance)
					{
						this.role_choice = "settler";
						this.need_to_choose_random = false;
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "mayor";
							this.need_to_choose_random = false;
						}
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (!this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "builder";
							this.need_to_choose_random = false;
						}
					}
				}
				this.chance_of_action(90);
				if (this.role_builder_pic.Visible & this.bonus_roles_array[2] >= 2 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_captain_pic.Visible & this.bonus_roles_array[5] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_craftsman_pic.Visible & this.bonus_roles_array[3] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_mayor_pic.Visible & this.bonus_roles_array[1] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "mayor";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_settler_pic.Visible & this.bonus_roles_array[0] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "settler";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_trader_pic.Visible & this.bonus_roles_array[4] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector1_pic.Visible & this.bonus_roles_array[6] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector1";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector2_pic.Visible & this.bonus_roles_array[7] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector2";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p4 + this.discount1) + this.num_manned_quarries_p4) >= 10 && this.role_builder_pic.Visible & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p4 + this.discount1) + this.num_manned_quarries_p4) >= 8)
				{
					this.chance_of_action(90);
					if (this.chance & this.role_builder_pic.Visible & this.need_to_choose_random)
					{
						this.role_choice = "builder";
						this.need_to_choose_random = false;
					}
				}
				if (checked(checked(this.gold_p4 + this.discount1) + this.num_manned_quarries_p4) >= 10)
				{
					this.chance = false;
				}
				if (checked(checked(this.gold_p4 + this.discount1) + this.num_manned_quarries_p4) < 10)
				{
					this.chance_of_action(90);
				}
				if (this.goods_to_trade & this.role_trader_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(80);
				if (this.goods_to_ship & this.role_captain_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(30);
				if (this.goods_to_produce & this.role_craftsman_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.ai_role_choice_maintenance();
				if (StringType.StrCmp(this.role_choice, "settler", false) == 0 && this.role_settler_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Settler."), "role_settler");
					this.settler_round = true;
					this.role_settler_pic.Visible = false;
					this.settler_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[0]);
					this.bonus_roles_array[0] = 0;
					this.log_role_chooser("p4", "Settler");
					this.p4_process_settler();
					this.p4_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p4", false) == 0 & this.settler_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "mayor", false) == 0 && this.role_mayor_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Mayor."), "role_mayor");
					this.mayor_round = true;
					this.role_mayor_pic.Visible = false;
					this.mayor_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[1]);
					this.bonus_roles_array[1] = 0;
					this.log_role_chooser("p4", "Mayor");
					this.p4_process_mayor();
					this.p4_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p4", false) == 0 & this.mayor_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "builder", false) == 0 && this.role_builder_pic.Visible & this.chance)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Builder."), "role_builder");
					this.builder_round = true;
					this.role_builder_pic.Visible = false;
					this.builder_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[2]);
					this.bonus_roles_array[2] = 0;
					this.log_role_chooser("p4", "Builder");
					this.p4_process_builder();
					this.p4_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p4", false) == 0 & this.builder_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "craftsman", false) == 0 && this.role_craftsman_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Craftsman."), "role_craftsman");
					this.craftsman_round = true;
					this.role_craftsman_pic.Visible = false;
					this.craftsman_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[3]);
					this.bonus_roles_array[3] = 0;
					this.log_role_chooser("p4", "Craftsman");
					this.p4_process_craftsman();
					this.p4_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "trader", false) == 0 && this.role_trader_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Trader."), "role_trader");
					this.trader_round = true;
					this.role_trader_pic.Visible = false;
					this.trader_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[4]);
					this.bonus_roles_array[4] = 0;
					this.log_role_chooser("p4", "Trader");
					this.p4_process_trader();
					this.p4_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p4", false) == 0 & this.trader_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "captain", false) == 0 && this.role_captain_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Captain."), "role_captain");
					this.p1_used_wharf = false;
					this.p2_used_wharf = false;
					this.p3_used_wharf = false;
					this.p4_used_wharf = false;
					this.p5_used_wharf = false;
					this.captain_round = true;
					this.role_captain_pic.Visible = false;
					this.captain_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[5]);
					this.bonus_roles_array[5] = 0;
					this.captain_bonus_taken = false;
					this.log_role_chooser("p4", "Captain");
					this.p4_process_captain();
					this.p4_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector1", false) == 0 && this.role_prospector1_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p4_name, " has chosen the Prospector."), "role_prospector1");
					this.prospector1_round = true;
					this.role_prospector1_pic.Visible = false;
					this.pros1_bonus_label.Visible = false;
					this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[6]);
					this.bonus_roles_array[6] = 0;
					this.log_role_chooser("p4", "Prospector1");
					this.p4_process_prospector1();
					this.p4_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector2", false) != 0 || !this.role_prospector2_pic.Visible)
				{
					continue;
				}
				this.infobox_role(string.Concat(this.p4_name, " has chosen the Prospector."), "role_prospector1");
				this.prospector2_round = true;
				this.role_prospector2_pic.Visible = false;
				this.pros2_bonus_label.Visible = false;
				this.gold_p4 = checked(this.gold_p4 + this.bonus_roles_array[7]);
				this.bonus_roles_array[7] = 0;
				this.log_role_chooser("p4", "Prospector2");
				this.p4_process_prospector2();
				this.p4_finished_choosing_role = true;
			}
		}

		public void p4_place_matching_production()
		{
			this.plantations_p4_array[this.plantation_slot] = checked(this.plantations_p4_array[this.plantation_slot] + 1);
			this.buildings_p4_array[this.building_slot] = checked(this.buildings_p4_array[this.building_slot] + 1);
			this.idle_colonists_array[4] = checked(this.idle_colonists_array[4] - 2);
			this.update_all_labels();
		}

		public void p4_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				this.tempinteger = this.indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				this.tempinteger = this.sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				this.tempinteger = this.corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				this.tempinteger = this.tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				this.tempinteger = this.coffee_available_slot;
			}
			if (!this.p4_manned_hospice)
			{
				this.plantations_p4_array[this.num_plantations_p4] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.p4_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p4_array[this.num_plantations_p4] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p4_name, "'s Hospice has granted a colonist for their plantation."), 231);
				this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				this.p4_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p4_array[this.num_plantations_p4] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p4_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p4_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p4_array[this.num_plantations_p4] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p4_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				this.p4_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p4_place_quarry()
		{
			if (!this.p4_manned_hospice)
			{
				this.plantations_p4_array[this.num_plantations_p4] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.p4_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p4_array[this.num_plantations_p4] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p4_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				this.p4_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p4_array[this.num_plantations_p4] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p4_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p4_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p4_array[this.num_plantations_p4] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p4_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				this.p4_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p4_process_builder()
		{
			this.log_process_role("p4", "Builder");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p4_ai_done = false;
			this.p4_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//this.p4_ai_done;
			this.compute_temporary_large_building_score();
			this.determine_if_afford_large();
			this.update_player_turn_designations();
			if (this.turn_number == 1 & StringType.StrCmp(this.current_role_chooser_string, "p4", false) != 0 & !this.p4_ai_done & this.builder_round)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Small Indigo Plant."), 110);
						this.p4_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done & this.afford_large & this.best_building_num != 999)
			{
				this.p4_process_building_large(this.best_building_num);
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 13;
				this.build_number = 320;
				this.build_cost = 6;
				this.build_name = "Coffee Roaster";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(50);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the ", this.build_name, "."), this.build_number);
						this.p4_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 12;
				this.build_number = 310;
				this.build_cost = 5;
				this.build_name = "Tobacco Storage";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(40);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the ", this.build_name, "."), this.build_number);
						this.p4_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 1;
				this.build_number = 120;
				this.build_cost = 2;
				this.build_name = "Small Sugar Mill";
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(220);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the ", this.build_name, "."), this.build_number);
						this.p4_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 7;
				this.build_number = 220;
				this.build_cost = 4;
				this.build_name = "Sugar Mill";
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(120);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(50);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the ", this.build_name, "."), this.build_number);
						this.p4_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Small Indigo Plant."), 110);
						this.p4_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 6;
				this.build_number = 210;
				this.build_cost = 3;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(110);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(60);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Indigo Plant."), 210);
						this.p4_process_building(210);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			this.update_player_turn_designations();
			if (!this.p4_ai_done)
			{
				this.chance_of_action(25);
				if (this.chance & StringType.StrCmp(this.current_role_chooser_string, "p4", false) != 0)
				{
					this.determine_if_buyable1(2, 130, 1);
					if (this.buyable & this.num_manned_quarries_p4 >= 1 & !this.p4_built)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Small Market."), 130);
						this.p4_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
					this.determine_if_buyable1(0, 110, 1);
					if (this.buyable & this.num_manned_quarries_p4 >= 1 & !this.p4_built)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Small Indigo Plant."), 110);
						this.p4_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
						this.p4_ai_done = true;
						this.p4_built = true;
					}
					if (!this.p4_ai_done & !this.p4_built)
					{
						this.p4_ai_done = true;
						this.p4_built = false;
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 14;
				this.build_number = 330;
				this.build_cost = 7;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Factory."), 330);
						this.p4_process_building(330);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 16;
				this.build_number = 350;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Harbor."), 350);
						this.p4_process_building(350);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 8;
				this.build_number = 230;
				this.build_cost = 4;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_plantations_p4 > 8)
					{
						this.chance_of_action(10);
					}
					else
					{
						this.chance_of_action(50);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Hospice."), 230);
						this.p4_process_building(230);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 10;
				this.build_number = 250;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Large Market."), 250);
						this.p4_process_building(250);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 2;
				this.build_number = 130;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Small Market."), 130);
						this.p4_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 5;
				this.build_number = 160;
				this.build_cost = 3;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(260);
					if (!this.found_building)
					{
						this.check_for_building(261);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					else
					{
						this.chance_of_action(10);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Small Warehouse."), 160);
						this.p4_process_building(160);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 3;
				this.build_number = 140;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Hacienda."), 140);
						this.p4_process_building(140);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 17;
				this.build_number = 361;
				this.build_cost = 9;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(50);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Wharf."), 360);
						this.p4_process_building(360);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 11;
				this.build_number = 260;
				this.build_cost = 6;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(160);
					if (!this.found_building)
					{
						this.check_for_building(161);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(5);
						}
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Large Warehouse."), 260);
						this.p4_process_building(260);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 9;
				this.build_number = 240;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(30);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Office."), 240);
						this.p4_process_building(240);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 4;
				this.build_number = 150;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_quarries_p4 < 2)
					{
						this.chance_of_action(30);
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the Construction Hut."), 150);
						this.p4_process_building(150);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p4_ai_done)
			{
				this.build_available_slot = 15;
				this.build_number = 340;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(20);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p4_name, " built the University."), 340);
						this.p4_process_building(340);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
						this.p4_ai_done = true;
						this.p4_built = true;
						this.update_all_labels();
					}
				}
			}
			this.determine_if_buyable1(2, 130, 1);
			if (this.buyable & this.num_manned_quarries_p4 >= 1 & !this.p4_built & !this.p4_ai_done)
			{
				this.infobox_building1(string.Concat(this.p4_name, " built the Small Market."), 130);
				this.p4_process_building(130);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
				this.p4_ai_done = true;
				this.p4_built = true;
				this.update_all_labels();
			}
			this.determine_if_buyable1(0, 110, 1);
			if (this.buyable & this.num_manned_quarries_p4 >= 1 & !this.p4_built & !this.p4_ai_done)
			{
				this.infobox_building1(string.Concat(this.p4_name, " built the Small Indigo Plant."), 110);
				this.p4_process_building(110);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
				this.p4_ai_done = true;
				this.p4_built = true;
				this.update_all_labels();
			}
			if (!this.p4_built)
			{
				this.infobox_role(string.Concat(this.p4_name, " has decided not to build."), "role_builder");
			}
			this.formtitle("p4", "Done performing the Builder role - AI BLANK");
		}

		public void p4_process_building(object buildnum)
		{
			this.check_for_building(341);
			if (!this.found_building)
			{
				this.buildings_p4_array[this.num_buildings_p4] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				}
				else if (this.colonists_ship_num > 0)
				{
					this.colonists_ship_num = checked(this.colonists_ship_num - 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				}
				this.buildings_p4_array[this.num_buildings_p4] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p4_process_building_large(object buildnum)
		{
			this.determine_where_to_build_large_p4();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				this.tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				this.tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				this.tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				this.tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				this.tempinteger = 22;
			}
			if (this.large_build_spot != 99)
			{
				this.check_for_building(341);
				if (!this.found_building)
				{
					this.infobox_building2(string.Concat(this.p4_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p4_array[this.large_build_spot] = IntegerType.FromObject(buildnum);
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
					this.p4_ai_done = true;
					this.p4_built = true;
				}
				else
				{
					if (this.colonists_bank_num > 0)
					{
						this.colonists_bank_num = checked(this.colonists_bank_num - 1);
						this.infobox_building1(string.Concat(this.p4_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[4] = checked(this.colonists_array[4] + 1);
					}
					else if (this.colonists_ship_num > 0)
					{
						this.colonists_ship_num = checked(this.colonists_ship_num - 1);
						this.infobox_building1(string.Concat(this.p4_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[4] = checked(this.colonists_array[4] + 1);
					}
					this.infobox_building2(string.Concat(this.p4_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p4_array[this.large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p4 = checked(this.gold_p4 - this.build_final_cost);
					this.p4_ai_done = true;
					this.p4_built = true;
				}
			}
			this.update_all_labels();
		}

		public void p4_process_captain()
		{
			this.log_process_role("p4", "Captain");
			this.update_summary();
			this.update_ship_cargo();
			this.p4_done_shipping = false;
			this.p4_done_all_shipping = false;
			this.p4_num_shipped = 0;
			this.goods_to_ship = false;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.goods_p4_array[this.counter1] > 0)
				{
					this.goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.goods_to_ship & !this.p4_done_shipping)
			{
				this.calculate_best_captain_points_p4();
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipa", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_corn_via_shipa();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipb", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_corn_via_shipb();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipc", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_corn_via_shipc();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_wharf", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_corn_via_wharf();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipa", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_indigo_via_shipa();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipb", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_indigo_via_shipb();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipc", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_indigo_via_shipc();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_wharf", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_Indigo_via_wharf();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipa", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_sugar_via_shipa();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipb", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_sugar_via_shipb();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipc", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_sugar_via_shipc();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_wharf", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_sugar_via_wharf();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipa", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_tobacco_via_shipa();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipb", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_tobacco_via_shipb();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipc", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_tobacco_via_shipc();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_wharf", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_tobacco_via_wharf();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipa", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_coffee_via_shipa();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipb", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_coffee_via_shipb();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipc", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_coffee_via_shipc();
				this.p4_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_wharf", false) == 0 & !this.p4_done_shipping)
			{
				this.ship_coffee_via_wharf();
				this.p4_done_shipping = true;
			}
			if (!this.p4_done_shipping & StringType.StrCmp(this.best_shipping_method, "null", false) == 0 & this.goods_to_ship)
			{
				this.p4_done_shipping = true;
				this.p4_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p4_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!this.goods_to_ship & !this.p4_done_shipping)
			{
				this.p4_done_shipping = true;
				this.p4_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p4_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Enabled = true;
			this.auto_captain_button.Visible = true;
			this.formtitle("p4", "Done Shipping - Press Next Shipper");
			this.update_ship_cargo();
		}

		public void p4_process_craftsman()
		{
			this.log_process_role("p4", "Craftsman");
			this.formtitle("p4", "Craftsman Phase");
			this.p4_ai_done = false;
			this.update_summary();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				this.determine_production();
			}
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				if (this.goods_this_turn_p4_array[4] > 0 & this.goods_bank_array[4] > 0 & !this.p4_ai_done)
				{
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] - 1);
					this.goods_p4_array[4] = checked(this.goods_p4_array[4] + 1);
					this.p4_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p4_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p4_array[3] > 0 & this.goods_bank_array[3] > 0 & !this.p4_ai_done)
				{
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] - 1);
					this.goods_p4_array[3] = checked(this.goods_p4_array[3] + 1);
					this.p4_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p4_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p4_array[1] > 0 & this.goods_bank_array[1] > 0 & !this.p4_ai_done)
				{
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] - 1);
					this.goods_p4_array[1] = checked(this.goods_p4_array[1] + 1);
					this.p4_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p4_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p4_array[0] > 0 & this.goods_bank_array[0] > 0 & !this.p4_ai_done)
				{
					this.goods_bank_array[0] = checked(this.goods_bank_array[0] - 1);
					this.goods_p4_array[0] = checked(this.goods_p4_array[0] + 1);
					this.p4_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p4_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p4_array[2] > 0 & this.goods_bank_array[2] > 0 & !this.p4_ai_done)
				{
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] - 1);
					this.goods_p4_array[2] = checked(this.goods_p4_array[2] + 1);
					this.p4_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p4_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!this.p4_ai_done)
				{
					if (!((this.goods_this_turn_p4_array[0] > 0 | this.goods_this_turn_p4_array[1] > 0 | this.goods_this_turn_p4_array[2] > 0 | this.goods_this_turn_p4_array[3] > 0 | this.goods_this_turn_p4_array[4] > 0) & (this.goods_bank_array[0] == 0 | this.goods_bank_array[1] == 0 | this.goods_bank_array[2] == 0 | this.goods_bank_array[3] == 0 | this.goods_bank_array[4] == 0)))
					{
						this.infobox_role(string.Concat(this.p4_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						this.p4_ai_done = true;
						this.infobox_role(string.Concat("There were no goods available for ", this.p4_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			this.next_turn_button.Text = "End Craftsman Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void p4_process_mayor()
		{
			this.log_process_role("p4", "Mayor");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				this.distribute_new_colonists();
			}
			this.p4_remove_all_colonists_to_idle();
			this.p4_ai_done = false;
			if (this.idle_colonists_array[this.current_player] == 0)
			{
				this.p4_ai_done = true;
			}
			this.counter3 = 12;
			while (!(this.counter3 == 20 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				if (this.buildings_p4_array[this.counter3] == 410 | this.buildings_p4_array[this.counter3] == 420 | this.buildings_p4_array[this.counter3] == 430 | this.buildings_p4_array[this.counter3] == 440 | this.buildings_p4_array[this.counter3] == 450)
				{
					this.buildings_p4_array[this.counter3] = checked(this.buildings_p4_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				if (this.buildings_p4_array[this.counter3] == 350)
				{
					this.buildings_p4_array[this.counter3] = checked(this.buildings_p4_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				if (this.buildings_p4_array[this.counter3] == 330)
				{
					this.buildings_p4_array[this.counter3] = checked(this.buildings_p4_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				if (this.buildings_p4_array[this.counter3] == 360)
				{
					this.buildings_p4_array[this.counter3] = checked(this.buildings_p4_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.num_empty_corn_plant_p4 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p4 = checked(this.num_empty_corn_plant_p4 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_empty_corn_plant_p4 >= 1 & this.num_quarries_p4 >= 1 & this.idle_colonists_array[this.current_player] >= 2)
			{
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p4_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p4_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p4_ai_done = true;
					this.finished = true;
				}
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(60);
					if (this.found_plantation)
					{
						this.plantations_p4_array[this.plantation_slot] = 61;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p4_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p4_ai_done = true;
					this.finished = true;
				}
			}
			this.num_empty_corn_plant_p4 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p4 = checked(this.num_empty_corn_plant_p4 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.idle_colonists_array[this.current_player] >= 2 & this.num_empty_corn_plant_p4 >= 2)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p4_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p4_colonists();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p4_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p4_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p4_ai_done))
				{
					this.check_for_coffee_production();
					if (this.found_coffee_match)
					{
						this.p4_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p4_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p4_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p4_ai_done))
				{
					this.check_for_tobacco_production();
					if (this.found_tobacco_match)
					{
						this.p4_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p4_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p4_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p4_ai_done))
				{
					this.check_for_sugar_production();
					if (this.found_sugar_match)
					{
						this.p4_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p4_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p4_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p4_ai_done))
				{
					this.check_for_indigo_production();
					if (this.found_indigo_match)
					{
						this.p4_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p4_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				this.check_for_plantation(30);
				if (this.found_plantation)
				{
					this.plantations_p4_array[this.plantation_slot] = 31;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				this.check_for_plantation(60);
				if (this.found_plantation)
				{
					this.plantations_p4_array[this.plantation_slot] = 61;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				if (this.buildings_p4_array[this.counter3] == 130 | this.buildings_p4_array[this.counter3] == 140 | this.buildings_p4_array[this.counter3] == 150 | this.buildings_p4_array[this.counter3] == 160 | this.buildings_p4_array[this.counter3] == 230 | this.buildings_p4_array[this.counter3] == 240 | this.buildings_p4_array[this.counter3] == 250 | this.buildings_p4_array[this.counter3] == 260 | this.buildings_p4_array[this.counter3] == 330 | this.buildings_p4_array[this.counter3] == 340 | this.buildings_p4_array[this.counter3] == 350 | this.buildings_p4_array[this.counter3] == 360)
				{
					this.buildings_p4_array[this.counter3] = checked(this.buildings_p4_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
			{
				if (this.buildings_p4_array[this.counter3] == 110 | this.buildings_p4_array[this.counter3] == 120 | this.buildings_p4_array[this.counter3] == 210 | this.buildings_p4_array[this.counter3] == 211 | this.buildings_p4_array[this.counter3] == 212 | this.buildings_p4_array[this.counter3] == 220 | this.buildings_p4_array[this.counter3] == 221 | this.buildings_p4_array[this.counter3] == 222 | this.buildings_p4_array[this.counter3] == 310 | this.buildings_p4_array[this.counter3] == 311 | this.buildings_p4_array[this.counter3] == 312 | this.buildings_p4_array[this.counter3] == 320 | this.buildings_p4_array[this.counter3] == 321)
				{
					this.buildings_p4_array[this.counter3] = checked(this.buildings_p4_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p4_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p4_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			if (this.idle_colonists_array[this.current_player] <= 0)
			{
				this.p4_ai_done = true;
			}
			else
			{
				this.counter3 = 0;
				while (!(this.counter3 == 12 | this.idle_colonists_array[this.current_player] == 0 | this.p4_ai_done))
				{
					if (this.plantations_p4_array[this.counter3] == 10 | this.plantations_p4_array[this.counter3] == 20 | this.plantations_p4_array[this.counter3] == 30 | this.plantations_p4_array[this.counter3] == 40 | this.plantations_p4_array[this.counter3] == 50 | this.plantations_p4_array[this.counter3] == 60)
					{
						this.plantations_p4_array[this.counter3] = checked(this.plantations_p4_array[this.counter3] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p4_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.update_all_labels();
			this.determine_p4_mayor_phase_over();
			this.formtitle("p4", "Mayor Phase - Turn Over");
		}

		public void p4_process_prospector1()
		{
			this.log_process_role("p4", "Prospector1");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				this.infobox_role(string.Concat(this.p4_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p4 = checked(this.gold_p4 + 1);
			}
			this.formtitle("p4", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p4_process_prospector2()
		{
			this.log_process_role("p4", "Prospector2");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				this.infobox_role(string.Concat(this.p4_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p4 = checked(this.gold_p4 + 1);
			}
			this.formtitle("p4", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p4_process_settler()
		{
			this.log_process_role("p4", "Settler");
			this.update_summary();
			this.p4_ai_done = false;
			this.p4_ready_to_end_settler = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p4_chose_settler = false;
			this.p4_manned_construction_hut = false;
			this.p4_manned_hospice = false;
			this.p4_manned_hacienda = false;
			this.p4_chose_quarry = false;
			this.p4_chose_corn = false;
			this.p4_chose_random = false;
			this.p4_use_hacienda = false;
			this.p4_num_indigo_plants = 0;
			this.p4_num_sugar_plants = 0;
			this.p4_num_tobacco_plants = 0;
			this.p4_num_coffee_plants = 0;
			this.what_plantations_available();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				this.p4_chose_settler = true;
			}
			this.check_for_building(151);
			if (this.found_building)
			{
				this.p4_manned_construction_hut = true;
			}
			this.check_for_building(231);
			if (this.found_building)
			{
				this.p4_manned_hospice = true;
			}
			this.check_for_building(141);
			if (this.found_building)
			{
				this.p4_manned_hacienda = true;
			}
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] == 10 | this.plantations_p4_array[this.counter1] == 11)
				{
					this.p4_num_indigo_plants = checked(this.p4_num_indigo_plants + 1);
				}
				if (this.plantations_p4_array[this.counter1] == 20 | this.plantations_p4_array[this.counter1] == 21)
				{
					this.p4_num_sugar_plants = checked(this.p4_num_sugar_plants + 1);
				}
				if (this.plantations_p4_array[this.counter1] == 40 | this.plantations_p4_array[this.counter1] == 41)
				{
					this.p4_num_tobacco_plants = checked(this.p4_num_tobacco_plants + 1);
				}
				if (this.plantations_p4_array[this.counter1] == 50 | this.plantations_p4_array[this.counter1] == 51)
				{
					this.p4_num_coffee_plants = checked(this.p4_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_plantations_p4 >= 8 & this.num_plantations_p4 <= 10 & this.p4_manned_hacienda)
			{
				this.chance_of_action(20);
				if (this.chance)
				{
					this.p4_use_hacienda = true;
				}
			}
			if (this.num_plantations_p4 < 8 & this.p4_manned_hacienda)
			{
				this.chance_of_action(80);
				if (this.chance)
				{
					this.p4_use_hacienda = true;
				}
			}
			if (this.p4_use_hacienda & this.p4_chose_settler & this.quarry_available)
			{
				this.p4_chose_quarry = true;
				this.p4_chose_corn = false;
			}
			this.chance_of_action(10);
			if ((this.p4_chose_settler | this.p4_manned_construction_hut) & this.num_quarries_p4 == 3 & !this.corn_available & this.quarry_available & this.chance)
			{
				this.p4_chose_quarry = true;
				this.p4_chose_corn = false;
			}
			this.chance_of_action(40);
			if ((this.p4_chose_settler | this.p4_manned_construction_hut) & this.num_quarries_p4 == 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p4_chose_quarry = true;
				this.p4_chose_corn = false;
			}
			this.chance_of_action(90);
			if ((this.p4_chose_settler | this.p4_manned_construction_hut) & this.num_quarries_p4 < 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p4_chose_quarry = true;
				this.p4_chose_corn = false;
			}
			this.chance_of_action(90);
			if (this.chance & this.turn_number == 1 & this.p4_chose_settler)
			{
				this.p4_chose_quarry = true;
				this.p4_chose_corn = false;
				this.p4_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.corn_available & this.chance & this.turn_number == 1 & !this.p4_chose_settler)
			{
				this.p4_chose_quarry = false;
				this.p4_chose_corn = true;
				this.p4_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.turn_number != 1 & this.corn_available & !this.p4_manned_construction_hut)
			{
				this.p4_chose_quarry = false;
				this.p4_chose_corn = true;
				this.p4_chose_random = false;
			}
			if (this.num_plantations_p4 >= 12)
			{
				this.infobox_role(string.Concat(this.p4_name, " already has 12 plantations. ", this.p4_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (this.p4_use_hacienda)
				{
					this.infobox_building1(string.Concat(this.p4_name, "is using the Hacienda to get a random plantation."), 141);
					this.draw_random_plantation_tile();
				}
				if (!this.p4_use_hacienda & this.p4_manned_hacienda)
				{
					this.infobox_building1(string.Concat(this.p4_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (this.p4_chose_quarry & this.p4_chose_settler & !this.p4_ai_done)
				{
					this.infobox_plant(string.Concat(this.p4_name, " used the Settler bonus to choose a Quarry."), 60);
					this.p4_place_quarry();
				}
				if (this.p4_chose_quarry & !this.p4_chose_settler & this.p4_manned_construction_hut & !this.p4_ai_done)
				{
					this.infobox_building1(string.Concat(this.p4_name, " used the Construction Hut to choose a Quarry."), 151);
					this.p4_place_quarry();
				}
				if (this.p4_chose_corn & this.corn_available & !this.p4_ai_done)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Corn."), 30);
					this.p4_place_plantation(30);
				}
				this.chance_of_action(20);
				if (!this.p4_ai_done & this.indigo_available & this.p4_num_indigo_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Indigo."), 10);
					this.p4_place_plantation(10);
				}
				this.chance_of_action(20);
				if (!this.p4_ai_done & this.sugar_available & this.p4_num_sugar_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Sugar."), 20);
					this.p4_place_plantation(20);
				}
				if (!this.p4_ai_done & this.tobacco_available & this.p4_num_tobacco_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Tobacco."), 40);
					this.p4_place_plantation(40);
				}
				if (!this.p4_ai_done & this.sugar_available & this.p4_num_sugar_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Sugar."), 20);
					this.p4_place_plantation(20);
				}
				if (!this.p4_ai_done & this.coffee_available & this.p4_num_coffee_plants < 2)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Coffee."), 50);
					this.p4_place_plantation(50);
				}
				if (!this.p4_ai_done & this.indigo_available & this.p4_num_indigo_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Indigo."), 10);
					this.p4_place_plantation(10);
				}
				if (!this.p4_ai_done & this.coffee_available)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Coffee."), 50);
					this.p4_place_plantation(50);
				}
				if (!this.p4_ai_done & this.tobacco_available)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Tobacco."), 40);
					this.p4_place_plantation(40);
				}
				if (!this.p4_ai_done & this.sugar_available)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Sugar."), 20);
					this.p4_place_plantation(20);
				}
				if (!this.p4_ai_done & this.indigo_available)
				{
					this.infobox_plant(string.Concat(this.p4_name, " is choosing Indigo."), 10);
					this.p4_place_plantation(10);
				}
			}
			this.update_all_labels();
			this.formtitle("p4", "Done performing the Settler role - ");
		}

		public void p4_process_trader()
		{
			this.log_process_role("p4", "Trader");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p4_ai_done = false;
			this.p4_traded = false;
			this.p4_chose_trader = false;
			this.p4_manned_small_market = false;
			this.p4_manned_large_market = false;
			this.p4_manned_office = false;
			this.trading_house_full = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
			{
				this.p4_chose_trader = true;
			}
			this.check_for_building(131);
			if (this.found_building)
			{
				this.p4_manned_small_market = true;
			}
			this.check_for_building(251);
			if (this.found_building)
			{
				this.p4_manned_large_market = true;
			}
			this.check_for_building(241);
			if (this.found_building)
			{
				this.p4_manned_office = true;
			}
			if (this.trading_house_array[3] != 0)
			{
				this.trading_house_full = true;
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 5 & !this.p4_manned_office)
				{
					this.already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p4_array[4] > 0 & !this.p4_traded & (this.chance | this.p4_chose_trader))
			{
				this.goods_p4_array[4] = checked(this.goods_p4_array[4] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 5;
						this.counter1 = 4;
					}
				}
				this.counter3 = 4;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p4_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (this.p4_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Coffee for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p4 = checked(this.gold_p4 + this.counter3);
				this.p4_ai_done = true;
				this.p4_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 4 & !this.p4_manned_office)
				{
					this.already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p4_array[3] > 0 & !this.p4_traded & (this.chance | this.p4_chose_trader))
			{
				this.goods_p4_array[3] = checked(this.goods_p4_array[3] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 4;
						this.counter1 = 4;
					}
				}
				this.counter3 = 3;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p4_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (this.p4_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Tobacco for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p4 = checked(this.gold_p4 + this.counter3);
				this.p4_ai_done = true;
				this.p4_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 2 & !this.p4_manned_office)
				{
					this.already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p4_array[1] > 0 & !this.p4_traded & (this.chance | this.p4_chose_trader))
			{
				this.goods_p4_array[1] = checked(this.goods_p4_array[1] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 2;
						this.counter1 = 4;
					}
				}
				this.counter3 = 2;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p4_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (this.p4_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Sugar for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p4 = checked(this.gold_p4 + this.counter3);
				this.p4_ai_done = true;
				this.p4_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 1 & !this.p4_manned_office)
				{
					this.already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(75);
			if (!this.already_there & !this.trading_house_full & this.goods_p4_array[0] > 0 & !this.p4_traded & (this.chance | this.p4_chose_trader))
			{
				this.goods_p4_array[0] = checked(this.goods_p4_array[0] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 1;
						this.counter1 = 4;
					}
				}
				this.counter3 = 1;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p4_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (this.p4_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Indigo for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p4 = checked(this.gold_p4 + this.counter3);
				this.p4_ai_done = true;
				this.p4_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 3 & !this.p4_manned_office)
				{
					this.already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(10);
			if (!this.already_there & this.goods_p4_array[2] > 0 & !this.p4_traded & !this.trading_house_full & (this.p4_chose_trader | this.p4_manned_small_market | this.p4_manned_large_market | this.chance))
			{
				this.goods_p4_array[2] = checked(this.goods_p4_array[2] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 3;
						this.counter1 = 4;
					}
				}
				this.counter3 = 0;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p4", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				this.check_for_building(131);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				this.check_for_building(251);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p4_name, " sold their Corn for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p4 = checked(this.gold_p4 + this.counter3);
				this.p4_ai_done = true;
				this.p4_traded = true;
				this.update_all_labels();
			}
			if (!this.p4_traded)
			{
				this.infobox_role(string.Concat(this.p4_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			this.formtitle("p4", "Done performing the Trader role - Turn Over");
		}

		public void p4_remove_all_colonists_to_idle()
		{
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), "1", false) == 0)
					{
						this.plantations_p4_array[this.counter1] = checked(this.plantations_p4_array[this.counter1] - 1);
						this.idle_colonists_array[4] = checked(this.idle_colonists_array[4] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				this.counter2 = 0;
				do
				{
					if (this.buildings_p4_array[this.counter1] != 0 & this.buildings_p4_array[this.counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), "0", false) != 0)
						{
							this.buildings_p4_array[this.counter1] = checked(this.buildings_p4_array[this.counter1] - 1);
							this.idle_colonists_array[4] = checked(this.idle_colonists_array[4] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (this.counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		public void p5_choose_role()
		{
			this.turn_number = checked(this.turn_number + 1);
			this.update_summary();
			this.update_player_turn_designations();
			this.determine_empty_colonists_slots_all();
			this.p5_finished_choosing_role = false;
			while (!this.p5_finished_choosing_role)
			{
				this.role_choice = "settler";
				this.need_to_choose_random = true;
				this.dont_choose_settler = false;
				this.dont_choose_mayor = false;
				this.dont_choose_builder = false;
				this.dont_choose_craftsman = false;
				this.dont_choose_trader = false;
				this.dont_choose_captain = false;
				this.dont_choose_prospector1 = false;
				this.dont_choose_prospector2 = false;
				this.goods_to_ship = false;
				this.determine_goods_to_ship();
				this.goods_to_trade = false;
				this.determine_goods_to_trade();
				this.goods_to_produce = false;
				this.determine_production_p5();
				if (!this.goods_to_produce & this.need_to_choose_random && this.bonus_roles_array[3] < 2)
				{
					this.dont_choose_craftsman = true;
				}
				if (!this.goods_to_ship & this.need_to_choose_random && this.bonus_roles_array[5] < 2)
				{
					this.dont_choose_captain = true;
				}
				if (!this.goods_to_trade & this.need_to_choose_random && this.bonus_roles_array[4] < 2)
				{
					this.dont_choose_trader = true;
				}
				if (this.num_plantations_p5 >= 8 & this.need_to_choose_random && this.bonus_roles_array[0] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_settler = true;
					}
				}
				if (this.p5_empty_colonists_slots == 0 & this.need_to_choose_random && this.bonus_roles_array[1] < 2)
				{
					this.chance_of_action(75);
					if (this.chance)
					{
						this.dont_choose_mayor = true;
					}
				}
				this.check_for_plantation(30);
				if (this.num_plantations_p5 == 1 & !this.found_plantation & this.num_buildings_p5 == 0)
				{
					this.dont_choose_mayor = true;
				}
				if (this.turn_number == 1 & this.need_to_choose_random)
				{
					this.chance_of_action(90);
					if (this.chance)
					{
						this.role_choice = "settler";
						this.need_to_choose_random = false;
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "mayor";
							this.need_to_choose_random = false;
						}
					}
				}
				if (this.turn_number == 2 & StringType.StrCmp(this.previous_role, "settler", false) == 0 & this.need_to_choose_random)
				{
					this.check_for_plantation(30);
					if (!this.found_building)
					{
						this.chance_of_action(90);
						if (this.chance)
						{
							this.role_choice = "builder";
							this.need_to_choose_random = false;
						}
					}
				}
				this.chance_of_action(90);
				if (this.role_builder_pic.Visible & this.bonus_roles_array[2] >= 2 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_captain_pic.Visible & this.bonus_roles_array[5] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_craftsman_pic.Visible & this.bonus_roles_array[3] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_mayor_pic.Visible & this.bonus_roles_array[1] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "mayor";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_settler_pic.Visible & this.bonus_roles_array[0] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "settler";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_trader_pic.Visible & this.bonus_roles_array[4] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector1_pic.Visible & this.bonus_roles_array[6] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector1";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(90);
				if (this.role_prospector2_pic.Visible & this.bonus_roles_array[7] >= 3 & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "prospector2";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p5 + this.discount1) + this.num_manned_quarries_p5) >= 10 && this.role_builder_pic.Visible & this.need_to_choose_random)
				{
					this.role_choice = "builder";
					this.need_to_choose_random = false;
				}
				this.discount1 = 0;
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.discount1 = 1;
				}
				if (checked(checked(this.gold_p5 + this.discount1) + this.num_manned_quarries_p5) >= 8)
				{
					this.chance_of_action(90);
					if (this.chance & this.role_builder_pic.Visible & this.need_to_choose_random)
					{
						this.role_choice = "builder";
						this.need_to_choose_random = false;
					}
				}
				if (checked(checked(this.gold_p5 + this.discount1) + this.num_manned_quarries_p5) >= 10)
				{
					this.chance = false;
				}
				if (checked(checked(this.gold_p5 + this.discount1) + this.num_manned_quarries_p5) < 10)
				{
					this.chance_of_action(90);
				}
				if (this.goods_to_trade & this.role_trader_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "trader";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(80);
				if (this.goods_to_ship & this.role_captain_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "captain";
					this.need_to_choose_random = false;
				}
				this.chance_of_action(30);
				if (this.goods_to_produce & this.role_craftsman_pic.Visible & this.chance & this.need_to_choose_random)
				{
					this.role_choice = "craftsman";
					this.need_to_choose_random = false;
				}
				this.ai_role_choice_maintenance();
				if (StringType.StrCmp(this.role_choice, "settler", false) == 0 && this.role_settler_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Settler."), "role_settler");
					this.settler_round = true;
					this.role_settler_pic.Visible = false;
					this.settler_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[0]);
					this.bonus_roles_array[0] = 0;
					this.log_role_chooser("p5", "Settler");
					this.p5_process_settler();
					this.p5_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p5", false) == 0 & this.settler_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "mayor", false) == 0 && this.role_mayor_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Mayor."), "role_mayor");
					this.mayor_round = true;
					this.role_mayor_pic.Visible = false;
					this.mayor_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[1]);
					this.bonus_roles_array[1] = 0;
					this.log_role_chooser("p5", "Mayor");
					this.p5_process_mayor();
					this.p5_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p5", false) == 0 & this.mayor_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "builder", false) == 0 && this.role_builder_pic.Visible & this.chance)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Builder."), "role_builder");
					this.builder_round = true;
					this.role_builder_pic.Visible = false;
					this.builder_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[2]);
					this.bonus_roles_array[2] = 0;
					this.log_role_chooser("p5", "Builder");
					this.p5_process_builder();
					this.p5_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p5", false) == 0 & this.builder_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "craftsman", false) == 0 && this.role_craftsman_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Craftsman."), "role_craftsman");
					this.craftsman_round = true;
					this.role_craftsman_pic.Visible = false;
					this.craftsman_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[3]);
					this.bonus_roles_array[3] = 0;
					this.log_role_chooser("p5", "Craftsman");
					this.p5_process_craftsman();
					this.p5_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "trader", false) == 0 && this.role_trader_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Trader."), "role_trader");
					this.trader_round = true;
					this.role_trader_pic.Visible = false;
					this.trader_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[4]);
					this.bonus_roles_array[4] = 0;
					this.log_role_chooser("p5", "Trader");
					this.p5_process_trader();
					this.p5_finished_choosing_role = true;
				}
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_player_string, "p5", false) == 0 & this.trader_round)
				{
					this.next_turn_routine();
				}
				if (StringType.StrCmp(this.role_choice, "captain", false) == 0 && this.role_captain_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Captain."), "role_captain");
					this.p1_used_wharf = false;
					this.p2_used_wharf = false;
					this.p3_used_wharf = false;
					this.p4_used_wharf = false;
					this.p5_used_wharf = false;
					this.captain_round = true;
					this.role_captain_pic.Visible = false;
					this.captain_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[5]);
					this.bonus_roles_array[5] = 0;
					this.captain_bonus_taken = false;
					this.log_role_chooser("p5", "Captain");
					this.p5_process_captain();
					this.p5_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector1", false) == 0 && this.role_prospector1_pic.Visible)
				{
					this.infobox_role(string.Concat(this.p5_name, " has chosen the Prospector."), "role_prospector1");
					this.prospector1_round = true;
					this.role_prospector1_pic.Visible = false;
					this.pros1_bonus_label.Visible = false;
					this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[6]);
					this.bonus_roles_array[6] = 0;
					this.log_role_chooser("p5", "Prospector1");
					this.p5_process_prospector1();
					this.p5_finished_choosing_role = true;
				}
				if (StringType.StrCmp(this.role_choice, "prospector2", false) != 0 || !this.role_prospector2_pic.Visible)
				{
					continue;
				}
				this.infobox_role(string.Concat(this.p5_name, " has chosen the Prospector."), "role_prospector1");
				this.prospector2_round = true;
				this.role_prospector2_pic.Visible = false;
				this.pros2_bonus_label.Visible = false;
				this.gold_p5 = checked(this.gold_p5 + this.bonus_roles_array[7]);
				this.bonus_roles_array[7] = 0;
				this.log_role_chooser("p5", "Prospector2");
				this.p5_process_prospector2();
				this.p5_finished_choosing_role = true;
			}
		}

		public void p5_place_matching_production()
		{
			this.plantations_p5_array[this.plantation_slot] = checked(this.plantations_p5_array[this.plantation_slot] + 1);
			this.buildings_p5_array[this.building_slot] = checked(this.buildings_p5_array[this.building_slot] + 1);
			this.idle_colonists_array[5] = checked(this.idle_colonists_array[5] - 2);
			this.update_all_labels();
		}

		public void p5_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				this.tempinteger = this.indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				this.tempinteger = this.sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				this.tempinteger = this.corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				this.tempinteger = this.tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				this.tempinteger = this.coffee_available_slot;
			}
			if (!this.p5_manned_hospice)
			{
				this.plantations_p5_array[this.num_plantations_p5] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.p5_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p5_array[this.num_plantations_p5] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p5_name, "'s Hospice has granted a colonist for their plantation."), 231);
				this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				this.p5_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p5_array[this.num_plantations_p5] = IntegerType.FromObject(plant_type);
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p5_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p5_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p5_array[this.num_plantations_p5] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				this.update_num_plantations();
				this.plantation_available_array[this.tempinteger] = 0;
				this.infobox_building1(string.Concat(this.p5_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				this.p5_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p5_place_quarry()
		{
			if (!this.p5_manned_hospice)
			{
				this.plantations_p5_array[this.num_plantations_p5] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.p5_ai_done = true;
			}
			else if (this.colonists_bank_num > 0)
			{
				this.colonists_bank_num = checked(this.colonists_bank_num - 1);
				this.plantations_p5_array[this.num_plantations_p5] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p5_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				this.p5_ai_done = true;
			}
			else if (this.colonists_ship_num <= 0)
			{
				this.plantations_p5_array[this.num_plantations_p5] = 60;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p5_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				this.p5_ai_done = true;
			}
			else
			{
				this.colonists_ship_num = checked(this.colonists_ship_num - 1);
				this.plantations_p5_array[this.num_plantations_p5] = 61;
				this.update_num_plantations();
				this.goods_bank_array[5] = checked(this.goods_bank_array[5] - 1);
				this.infobox_building1(string.Concat(this.p5_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				this.p5_ai_done = true;
			}
			this.update_all_labels();
		}

		public void p5_process_builder()
		{
			this.log_process_role("p5", "Builder");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p5_ai_done = false;
			this.p5_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//this.p5_ai_done;
			this.compute_temporary_large_building_score();
			this.determine_if_afford_large();
			this.update_player_turn_designations();
			if (this.turn_number == 1 & StringType.StrCmp(this.current_role_chooser_string, "p5", false) != 0 & !this.p5_ai_done & this.builder_round)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Small Indigo Plant."), 110);
						this.p5_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done & this.afford_large & this.best_building_num != 999)
			{
				this.p5_process_building_large(this.best_building_num);
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 13;
				this.build_number = 320;
				this.build_cost = 6;
				this.build_name = "Coffee Roaster";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(50);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the ", this.build_name, "."), this.build_number);
						this.p5_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 12;
				this.build_number = 310;
				this.build_cost = 5;
				this.build_name = "Tobacco Storage";
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(40);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.chance = true;
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the ", this.build_name, "."), this.build_number);
						this.p5_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 1;
				this.build_number = 120;
				this.build_cost = 2;
				this.build_name = "Small Sugar Mill";
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(220);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the ", this.build_name, "."), this.build_number);
						this.p5_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 7;
				this.build_number = 220;
				this.build_cost = 4;
				this.build_name = "Sugar Mill";
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(20);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(120);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(50);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the ", this.build_name, "."), this.build_number);
						this.p5_process_building(this.build_number);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 0;
				this.build_number = 110;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(210);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Small Indigo Plant."), 110);
						this.p5_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 6;
				this.build_number = 210;
				this.build_cost = 3;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_plantation1(10);
					if (!this.found_plantation)
					{
						this.chance = false;
					}
					else
					{
						this.check_for_building3(110);
						if (!this.found_building)
						{
							this.chance = true;
						}
						else
						{
							this.chance_of_action(60);
						}
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Indigo Plant."), 210);
						this.p5_process_building(210);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			this.update_player_turn_designations();
			if (!this.p5_ai_done)
			{
				this.chance_of_action(25);
				if (this.chance & StringType.StrCmp(this.current_role_chooser_string, "p5", false) != 0)
				{
					this.determine_if_buyable1(2, 130, 1);
					if (this.buyable & this.num_manned_quarries_p5 >= 1 & !this.p5_built)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Small Market."), 130);
						this.p5_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
					this.determine_if_buyable1(0, 110, 1);
					if (this.buyable & this.num_manned_quarries_p5 >= 1 & !this.p5_built)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Small Indigo Plant."), 110);
						this.p5_process_building(110);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
						this.p5_ai_done = true;
						this.p5_built = true;
					}
					if (!this.p5_ai_done & !this.p5_built)
					{
						this.p5_ai_done = true;
						this.p5_built = false;
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 14;
				this.build_number = 330;
				this.build_cost = 7;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Factory."), 330);
						this.p5_process_building(330);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 16;
				this.build_number = 350;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(80);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Harbor."), 350);
						this.p5_process_building(350);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 8;
				this.build_number = 230;
				this.build_cost = 4;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_plantations_p5 > 8)
					{
						this.chance_of_action(10);
					}
					else
					{
						this.chance_of_action(50);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Hospice."), 230);
						this.p5_process_building(230);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 10;
				this.build_number = 250;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Large Market."), 250);
						this.p5_process_building(250);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 2;
				this.build_number = 130;
				this.build_cost = 1;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Small Market."), 130);
						this.p5_process_building(130);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 5;
				this.build_number = 160;
				this.build_cost = 3;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(260);
					if (!this.found_building)
					{
						this.check_for_building(261);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(10);
						}
					}
					else
					{
						this.chance_of_action(10);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Small Warehouse."), 160);
						this.p5_process_building(160);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 3;
				this.build_number = 140;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(60);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Hacienda."), 140);
						this.p5_process_building(140);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 17;
				this.build_number = 361;
				this.build_cost = 9;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(50);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Wharf."), 360);
						this.p5_process_building(360);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 11;
				this.build_number = 260;
				this.build_cost = 6;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.check_for_building(160);
					if (!this.found_building)
					{
						this.check_for_building(161);
						if (!this.found_building)
						{
							this.chance_of_action(60);
						}
						else
						{
							this.chance_of_action(5);
						}
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Large Warehouse."), 260);
						this.p5_process_building(260);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 9;
				this.build_number = 240;
				this.build_cost = 5;
				this.determine_if_buyable2(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(30);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Office."), 240);
						this.p5_process_building(240);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 4;
				this.build_number = 150;
				this.build_cost = 2;
				this.determine_if_buyable1(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					if (this.num_quarries_p5 < 2)
					{
						this.chance_of_action(30);
					}
					else
					{
						this.chance_of_action(5);
					}
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the Construction Hut."), 150);
						this.p5_process_building(150);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			if (!this.p5_ai_done)
			{
				this.build_available_slot = 15;
				this.build_number = 340;
				this.build_cost = 8;
				this.determine_if_buyable3(this.build_available_slot, this.build_number, this.build_cost);
				if (this.buyable)
				{
					this.chance_of_action(20);
					if (this.chance)
					{
						this.infobox_building1(string.Concat(this.p5_name, " built the University."), 340);
						this.p5_process_building(340);
						this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
						this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
						this.p5_ai_done = true;
						this.p5_built = true;
						this.update_all_labels();
					}
				}
			}
			this.determine_if_buyable1(2, 130, 1);
			if (this.buyable & this.num_manned_quarries_p5 >= 1 & !this.p5_built & !this.p5_ai_done)
			{
				this.infobox_building1(string.Concat(this.p5_name, " built the Small Market."), 130);
				this.p5_process_building(130);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
				this.p5_ai_done = true;
				this.p5_built = true;
				this.update_all_labels();
			}
			this.determine_if_buyable1(0, 110, 1);
			if (this.buyable & this.num_manned_quarries_p5 >= 1 & !this.p5_built & !this.p5_ai_done)
			{
				this.infobox_building1(string.Concat(this.p5_name, " built the Small Indigo Plant."), 110);
				this.p5_process_building(110);
				this.buildings_available_array[this.build_available_slot] = checked(this.buildings_available_array[this.build_available_slot] - 1);
				this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
				this.p5_ai_done = true;
				this.p5_built = true;
				this.update_all_labels();
			}
			if (!this.p5_built)
			{
				this.infobox_role(string.Concat(this.p5_name, " has decided not to build."), "role_builder");
			}
			this.formtitle("p5", "Done performing the Builder role - AI BLANK");
		}

		public void p5_process_building(object buildnum)
		{
			this.check_for_building(341);
			if (!this.found_building)
			{
				this.buildings_p5_array[this.num_buildings_p5] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (this.colonists_bank_num > 0)
				{
					this.colonists_bank_num = checked(this.colonists_bank_num - 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[5] = checked(this.colonists_array[5] + 1);
				}
				else if (this.colonists_ship_num > 0)
				{
					this.colonists_ship_num = checked(this.colonists_ship_num - 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned University granted a colonist for their building."), 341);
					this.colonists_array[5] = checked(this.colonists_array[5] + 1);
				}
				this.buildings_p5_array[this.num_buildings_p5] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p5_process_building_large(object buildnum)
		{
			this.determine_where_to_build_large_p5();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				this.tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				this.tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				this.tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				this.tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				this.tempinteger = 22;
			}
			if (this.large_build_spot != 99)
			{
				this.check_for_building(341);
				if (!this.found_building)
				{
					this.infobox_building2(string.Concat(this.p5_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p5_array[this.large_build_spot] = IntegerType.FromObject(buildnum);
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
					this.p5_ai_done = true;
					this.p5_built = true;
				}
				else
				{
					if (this.colonists_bank_num > 0)
					{
						this.colonists_bank_num = checked(this.colonists_bank_num - 1);
						this.infobox_building1(string.Concat(this.p5_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[5] = checked(this.colonists_array[5] + 1);
					}
					else if (this.colonists_ship_num > 0)
					{
						this.colonists_ship_num = checked(this.colonists_ship_num - 1);
						this.infobox_building1(string.Concat(this.p5_name, "'s manned University granted a colonist for their building."), 341);
						this.colonists_array[5] = checked(this.colonists_array[5] + 1);
					}
					this.infobox_building2(string.Concat(this.p5_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					this.buildings_p5_array[this.large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					this.buildings_available_array[this.tempinteger] = checked(this.buildings_available_array[this.tempinteger] - 1);
					this.gold_p5 = checked(this.gold_p5 - this.build_final_cost);
					this.p5_ai_done = true;
					this.p5_built = true;
				}
			}
			this.update_all_labels();
		}

		public void p5_process_captain()
		{
			this.log_process_role("p5", "Captain");
			this.update_summary();
			this.update_ship_cargo();
			this.p5_done_shipping = false;
			this.p5_done_all_shipping = false;
			this.p5_num_shipped = 0;
			this.goods_to_ship = false;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.goods_p5_array[this.counter1] > 0)
				{
					this.goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			if (this.goods_to_ship & !this.p5_done_shipping)
			{
				this.calculate_best_captain_points_p5();
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipa", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_corn_via_shipa();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipb", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_corn_via_shipb();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_shipc", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_corn_via_shipc();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "corn_wharf", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_corn_via_wharf();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipa", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_indigo_via_shipa();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipb", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_indigo_via_shipb();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_shipc", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_indigo_via_shipc();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "indigo_wharf", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_Indigo_via_wharf();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipa", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_sugar_via_shipa();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipb", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_sugar_via_shipb();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_shipc", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_sugar_via_shipc();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "sugar_wharf", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_sugar_via_wharf();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipa", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_tobacco_via_shipa();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipb", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_tobacco_via_shipb();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_shipc", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_tobacco_via_shipc();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "tobacco_wharf", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_tobacco_via_wharf();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipa", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_coffee_via_shipa();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipb", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_coffee_via_shipb();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_shipc", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_coffee_via_shipc();
				this.p5_done_shipping = true;
			}
			if (this.goods_to_ship & StringType.StrCmp(this.best_shipping_method, "coffee_wharf", false) == 0 & !this.p5_done_shipping)
			{
				this.ship_coffee_via_wharf();
				this.p5_done_shipping = true;
			}
			if (!this.p5_done_shipping & StringType.StrCmp(this.best_shipping_method, "null", false) == 0 & this.goods_to_ship)
			{
				this.p5_done_shipping = true;
				this.p5_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p5_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!this.goods_to_ship & !this.p5_done_shipping)
			{
				this.p5_done_shipping = true;
				this.p5_done_all_shipping = true;
				this.infobox_role(string.Concat(this.p5_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Enabled = true;
			this.auto_captain_button.Visible = true;
			this.formtitle("p5", "Done Shipping - Press Next Shipper");
			this.update_ship_cargo();
		}

		public void p5_process_craftsman()
		{
			this.log_process_role("p5", "Craftsman");
			this.formtitle("p5", "Craftsman Phase");
			this.p5_ai_done = false;
			this.update_summary();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				this.determine_production();
			}
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				if (this.goods_this_turn_p5_array[4] > 0 & this.goods_bank_array[4] > 0 & !this.p5_ai_done)
				{
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] - 1);
					this.goods_p5_array[4] = checked(this.goods_p5_array[4] + 1);
					this.p5_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p5_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p5_array[3] > 0 & this.goods_bank_array[3] > 0 & !this.p5_ai_done)
				{
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] - 1);
					this.goods_p5_array[3] = checked(this.goods_p5_array[3] + 1);
					this.p5_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p5_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p5_array[1] > 0 & this.goods_bank_array[1] > 0 & !this.p5_ai_done)
				{
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] - 1);
					this.goods_p5_array[1] = checked(this.goods_p5_array[1] + 1);
					this.p5_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p5_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p5_array[0] > 0 & this.goods_bank_array[0] > 0 & !this.p5_ai_done)
				{
					this.goods_bank_array[0] = checked(this.goods_bank_array[0] - 1);
					this.goods_p5_array[0] = checked(this.goods_p5_array[0] + 1);
					this.p5_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p5_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (this.goods_this_turn_p5_array[2] > 0 & this.goods_bank_array[2] > 0 & !this.p5_ai_done)
				{
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] - 1);
					this.goods_p5_array[2] = checked(this.goods_p5_array[2] + 1);
					this.p5_ai_done = true;
					this.update_all_labels();
					this.infobox_role(string.Concat(this.p5_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!this.p5_ai_done)
				{
					if (!((this.goods_this_turn_p5_array[0] > 0 | this.goods_this_turn_p5_array[1] > 0 | this.goods_this_turn_p5_array[2] > 0 | this.goods_this_turn_p5_array[3] > 0 | this.goods_this_turn_p5_array[4] > 0) & (this.goods_bank_array[0] == 0 | this.goods_bank_array[1] == 0 | this.goods_bank_array[2] == 0 | this.goods_bank_array[3] == 0 | this.goods_bank_array[4] == 0)))
					{
						this.infobox_role(string.Concat(this.p5_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						this.p5_ai_done = true;
						this.infobox_role(string.Concat("There were no goods available for ", this.p5_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			this.next_turn_button.Text = "End Craftsman Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void p5_process_mayor()
		{
			this.log_process_role("p5", "Mayor");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				this.distribute_new_colonists();
			}
			this.p5_remove_all_colonists_to_idle();
			this.p5_ai_done = false;
			if (this.idle_colonists_array[this.current_player] == 0)
			{
				this.p5_ai_done = true;
			}
			this.counter3 = 12;
			while (!(this.counter3 == 20 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				if (this.buildings_p5_array[this.counter3] == 410 | this.buildings_p5_array[this.counter3] == 420 | this.buildings_p5_array[this.counter3] == 430 | this.buildings_p5_array[this.counter3] == 440 | this.buildings_p5_array[this.counter3] == 450)
				{
					this.buildings_p5_array[this.counter3] = checked(this.buildings_p5_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				if (this.buildings_p5_array[this.counter3] == 350)
				{
					this.buildings_p5_array[this.counter3] = checked(this.buildings_p5_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				if (this.buildings_p5_array[this.counter3] == 330)
				{
					this.buildings_p5_array[this.counter3] = checked(this.buildings_p5_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				if (this.buildings_p5_array[this.counter3] == 360)
				{
					this.buildings_p5_array[this.counter3] = checked(this.buildings_p5_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.num_empty_corn_plant_p5 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p5 = checked(this.num_empty_corn_plant_p5 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_empty_corn_plant_p5 >= 1 & this.num_quarries_p5 >= 1 & this.idle_colonists_array[this.current_player] >= 2)
			{
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p5_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p5_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p5_ai_done = true;
					this.finished = true;
				}
				this.finished = false;
				while (!this.finished)
				{
					this.check_for_plantation(60);
					if (this.found_plantation)
					{
						this.plantations_p5_array[this.plantation_slot] = 61;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p5_colonists();
						this.finished = true;
					}
					if (this.idle_colonists_array[this.current_player] != 0)
					{
						continue;
					}
					this.p5_ai_done = true;
					this.finished = true;
				}
			}
			this.num_empty_corn_plant_p5 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] == 30)
				{
					this.num_empty_corn_plant_p5 = checked(this.num_empty_corn_plant_p5 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.idle_colonists_array[this.current_player] >= 2 & this.num_empty_corn_plant_p5 >= 2)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
				{
					this.check_for_plantation(30);
					if (this.found_plantation)
					{
						this.plantations_p5_array[this.plantation_slot] = 31;
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.update_p5_colonists();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p5_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p5_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p5_ai_done))
				{
					this.check_for_coffee_production();
					if (this.found_coffee_match)
					{
						this.p5_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p5_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p5_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p5_ai_done))
				{
					this.check_for_tobacco_production();
					if (this.found_tobacco_match)
					{
						this.p5_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p5_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p5_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p5_ai_done))
				{
					this.check_for_sugar_production();
					if (this.found_sugar_match)
					{
						this.p5_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p5_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			if (this.idle_colonists_array[this.current_player] >= 2 & !this.p5_ai_done)
			{
				this.counter3 = 0;
				while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] < 2 | this.p5_ai_done))
				{
					this.check_for_indigo_production();
					if (this.found_indigo_match)
					{
						this.p5_place_matching_production();
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p5_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				this.check_for_plantation(30);
				if (this.found_plantation)
				{
					this.plantations_p5_array[this.plantation_slot] = 31;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 15 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				this.check_for_plantation(60);
				if (this.found_plantation)
				{
					this.plantations_p5_array[this.plantation_slot] = 61;
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				if (this.buildings_p5_array[this.counter3] == 130 | this.buildings_p5_array[this.counter3] == 140 | this.buildings_p5_array[this.counter3] == 150 | this.buildings_p5_array[this.counter3] == 160 | this.buildings_p5_array[this.counter3] == 230 | this.buildings_p5_array[this.counter3] == 240 | this.buildings_p5_array[this.counter3] == 250 | this.buildings_p5_array[this.counter3] == 260 | this.buildings_p5_array[this.counter3] == 330 | this.buildings_p5_array[this.counter3] == 340 | this.buildings_p5_array[this.counter3] == 350 | this.buildings_p5_array[this.counter3] == 360)
				{
					this.buildings_p5_array[this.counter3] = checked(this.buildings_p5_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			this.counter3 = 0;
			while (!(this.counter3 == 11 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
			{
				if (this.buildings_p5_array[this.counter3] == 110 | this.buildings_p5_array[this.counter3] == 120 | this.buildings_p5_array[this.counter3] == 210 | this.buildings_p5_array[this.counter3] == 211 | this.buildings_p5_array[this.counter3] == 212 | this.buildings_p5_array[this.counter3] == 220 | this.buildings_p5_array[this.counter3] == 221 | this.buildings_p5_array[this.counter3] == 222 | this.buildings_p5_array[this.counter3] == 310 | this.buildings_p5_array[this.counter3] == 311 | this.buildings_p5_array[this.counter3] == 312 | this.buildings_p5_array[this.counter3] == 320 | this.buildings_p5_array[this.counter3] == 321)
				{
					this.buildings_p5_array[this.counter3] = checked(this.buildings_p5_array[this.counter3] + 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					this.update_p5_colonists();
				}
				if (this.idle_colonists_array[this.current_player] == 0)
				{
					this.p5_ai_done = true;
				}
				this.counter3 = checked(this.counter3 + 1);
			}
			if (this.idle_colonists_array[this.current_player] <= 0)
			{
				this.p5_ai_done = true;
			}
			else
			{
				this.counter3 = 0;
				while (!(this.counter3 == 12 | this.idle_colonists_array[this.current_player] == 0 | this.p5_ai_done))
				{
					if (this.plantations_p5_array[this.counter3] == 10 | this.plantations_p5_array[this.counter3] == 20 | this.plantations_p5_array[this.counter3] == 30 | this.plantations_p5_array[this.counter3] == 40 | this.plantations_p5_array[this.counter3] == 50 | this.plantations_p5_array[this.counter3] == 60)
					{
						this.plantations_p5_array[this.counter3] = checked(this.plantations_p5_array[this.counter3] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
					}
					if (this.idle_colonists_array[this.current_player] == 0)
					{
						this.p5_ai_done = true;
					}
					this.counter3 = checked(this.counter3 + 1);
				}
			}
			this.update_all_labels();
			this.determine_p5_mayor_phase_over();
			this.formtitle("p5", "Mayor Phase - Turn Over");
		}

		public void p5_process_prospector1()
		{
			this.log_process_role("p5", "Prospector1");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				this.infobox_role(string.Concat(this.p5_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p5 = checked(this.gold_p5 + 1);
			}
			this.formtitle("p5", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p5_process_prospector2()
		{
			this.log_process_role("p5", "Prospector2");
			this.update_summary();
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				this.infobox_role(string.Concat(this.p5_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				this.gold_p5 = checked(this.gold_p5 + 1);
			}
			this.formtitle("p5", "Prospector Phase - Turn Over");
			this.next_turn_button.Text = "Next Turn";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
			this.update_all_labels();
		}

		public void p5_process_settler()
		{
			this.log_process_role("p5", "Settler");
			this.update_summary();
			this.p5_ai_done = false;
			this.p5_ready_to_end_settler = false;
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p5_chose_settler = false;
			this.p5_manned_construction_hut = false;
			this.p5_manned_hospice = false;
			this.p5_manned_hacienda = false;
			this.p5_chose_quarry = false;
			this.p5_chose_corn = false;
			this.p5_chose_random = false;
			this.p5_use_hacienda = false;
			this.p5_num_indigo_plants = 0;
			this.p5_num_sugar_plants = 0;
			this.p5_num_tobacco_plants = 0;
			this.p5_num_coffee_plants = 0;
			this.what_plantations_available();
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				this.p5_chose_settler = true;
			}
			this.check_for_building(151);
			if (this.found_building)
			{
				this.p5_manned_construction_hut = true;
			}
			this.check_for_building(231);
			if (this.found_building)
			{
				this.p5_manned_hospice = true;
			}
			this.check_for_building(141);
			if (this.found_building)
			{
				this.p5_manned_hacienda = true;
			}
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] == 10 | this.plantations_p5_array[this.counter1] == 11)
				{
					this.p5_num_indigo_plants = checked(this.p5_num_indigo_plants + 1);
				}
				if (this.plantations_p5_array[this.counter1] == 20 | this.plantations_p5_array[this.counter1] == 21)
				{
					this.p5_num_sugar_plants = checked(this.p5_num_sugar_plants + 1);
				}
				if (this.plantations_p5_array[this.counter1] == 40 | this.plantations_p5_array[this.counter1] == 41)
				{
					this.p5_num_tobacco_plants = checked(this.p5_num_tobacco_plants + 1);
				}
				if (this.plantations_p5_array[this.counter1] == 50 | this.plantations_p5_array[this.counter1] == 51)
				{
					this.p5_num_coffee_plants = checked(this.p5_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			if (this.num_plantations_p5 >= 8 & this.num_plantations_p5 <= 10 & this.p5_manned_hacienda)
			{
				this.chance_of_action(20);
				if (this.chance)
				{
					this.p5_use_hacienda = true;
				}
			}
			if (this.num_plantations_p5 < 8 & this.p5_manned_hacienda)
			{
				this.chance_of_action(80);
				if (this.chance)
				{
					this.p5_use_hacienda = true;
				}
			}
			if (this.p5_use_hacienda & this.p5_chose_settler & this.quarry_available)
			{
				this.p5_chose_quarry = true;
				this.p5_chose_corn = false;
			}
			this.chance_of_action(10);
			if ((this.p5_chose_settler | this.p5_manned_construction_hut) & this.num_quarries_p5 == 3 & !this.corn_available & this.quarry_available & this.chance)
			{
				this.p5_chose_quarry = true;
				this.p5_chose_corn = false;
			}
			this.chance_of_action(40);
			if ((this.p5_chose_settler | this.p5_manned_construction_hut) & this.num_quarries_p5 == 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p5_chose_quarry = true;
				this.p5_chose_corn = false;
			}
			this.chance_of_action(90);
			if ((this.p5_chose_settler | this.p5_manned_construction_hut) & this.num_quarries_p5 < 2 & !this.corn_available & this.goods_bank_array[5] > 0 & this.chance)
			{
				this.p5_chose_quarry = true;
				this.p5_chose_corn = false;
			}
			this.chance_of_action(90);
			if (this.chance & this.turn_number == 1 & this.p5_chose_settler)
			{
				this.p5_chose_quarry = true;
				this.p5_chose_corn = false;
				this.p5_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.corn_available & this.chance & this.turn_number == 1 & !this.p5_chose_settler)
			{
				this.p5_chose_quarry = false;
				this.p5_chose_corn = true;
				this.p5_chose_random = false;
			}
			this.chance_of_action(90);
			if (this.turn_number != 1 & this.corn_available & !this.p5_manned_construction_hut)
			{
				this.p5_chose_quarry = false;
				this.p5_chose_corn = true;
				this.p5_chose_random = false;
			}
			if (this.num_plantations_p5 >= 12)
			{
				this.infobox_role(string.Concat(this.p5_name, " already has 12 plantations. ", this.p5_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (this.p5_use_hacienda)
				{
					this.infobox_building1(string.Concat(this.p5_name, "is using the Hacienda to get a random plantation."), 141);
					this.draw_random_plantation_tile();
				}
				if (!this.p5_use_hacienda & this.p5_manned_hacienda)
				{
					this.infobox_building1(string.Concat(this.p5_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (this.p5_chose_quarry & this.p5_chose_settler & !this.p5_ai_done)
				{
					this.infobox_plant(string.Concat(this.p5_name, " used the Settler bonus to choose a Quarry."), 60);
					this.p5_place_quarry();
				}
				if (this.p5_chose_quarry & !this.p5_chose_settler & this.p5_manned_construction_hut & !this.p5_ai_done)
				{
					this.infobox_building1(string.Concat(this.p5_name, " used the Construction Hut to choose a Quarry."), 151);
					this.p5_place_quarry();
				}
				if (this.p5_chose_corn & this.corn_available & !this.p5_ai_done)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Corn."), 30);
					this.p5_place_plantation(30);
				}
				this.chance_of_action(20);
				if (!this.p5_ai_done & this.indigo_available & this.p5_num_indigo_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Indigo."), 10);
					this.p5_place_plantation(10);
				}
				this.chance_of_action(20);
				if (!this.p5_ai_done & this.sugar_available & this.p5_num_sugar_plants == 2 & this.chance)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Sugar."), 20);
					this.p5_place_plantation(20);
				}
				if (!this.p5_ai_done & this.tobacco_available & this.p5_num_tobacco_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Tobacco."), 40);
					this.p5_place_plantation(40);
				}
				if (!this.p5_ai_done & this.sugar_available & this.p5_num_sugar_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Sugar."), 20);
					this.p5_place_plantation(20);
				}
				if (!this.p5_ai_done & this.coffee_available & this.p5_num_coffee_plants < 2)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Coffee."), 50);
					this.p5_place_plantation(50);
				}
				if (!this.p5_ai_done & this.indigo_available & this.p5_num_indigo_plants < 3)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Indigo."), 10);
					this.p5_place_plantation(10);
				}
				if (!this.p5_ai_done & this.coffee_available)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Coffee."), 50);
					this.p5_place_plantation(50);
				}
				if (!this.p5_ai_done & this.tobacco_available)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Tobacco."), 40);
					this.p5_place_plantation(40);
				}
				if (!this.p5_ai_done & this.sugar_available)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Sugar."), 20);
					this.p5_place_plantation(20);
				}
				if (!this.p5_ai_done & this.indigo_available)
				{
					this.infobox_plant(string.Concat(this.p5_name, " is choosing Indigo."), 10);
					this.p5_place_plantation(10);
				}
			}
			this.update_all_labels();
			this.formtitle("p5", "Done performing the Settler role - ");
		}

		public void p5_process_trader()
		{
			this.log_process_role("p5", "Trader");
			this.update_summary();
			this.next_turn_button.Enabled=false;
			this.next_turn_button.Visible = false;
			this.p5_ai_done = false;
			this.p5_traded = false;
			this.p5_chose_trader = false;
			this.p5_manned_small_market = false;
			this.p5_manned_large_market = false;
			this.p5_manned_office = false;
			this.trading_house_full = false;
			this.update_player_turn_designations();
			if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
			{
				this.p5_chose_trader = true;
			}
			this.check_for_building(131);
			if (this.found_building)
			{
				this.p5_manned_small_market = true;
			}
			this.check_for_building(251);
			if (this.found_building)
			{
				this.p5_manned_large_market = true;
			}
			this.check_for_building(241);
			if (this.found_building)
			{
				this.p5_manned_office = true;
			}
			if (this.trading_house_array[3] != 0)
			{
				this.trading_house_full = true;
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 5 & !this.p5_manned_office)
				{
					this.already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p5_array[4] > 0 & !this.p5_traded & (this.chance | this.p5_chose_trader))
			{
				this.goods_p5_array[4] = checked(this.goods_p5_array[4] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 5;
						this.counter1 = 4;
					}
				}
				this.counter3 = 4;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p5_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (this.p5_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Coffee for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p5 = checked(this.gold_p5 + this.counter3);
				this.p5_ai_done = true;
				this.p5_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 4 & !this.p5_manned_office)
				{
					this.already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p5_array[3] > 0 & !this.p5_traded & (this.chance | this.p5_chose_trader))
			{
				this.goods_p5_array[3] = checked(this.goods_p5_array[3] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 4;
						this.counter1 = 4;
					}
				}
				this.counter3 = 3;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p5_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (this.p5_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Tobacco for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p5 = checked(this.gold_p5 + this.counter3);
				this.p5_ai_done = true;
				this.p5_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 2 & !this.p5_manned_office)
				{
					this.already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(90);
			if (!this.already_there & !this.trading_house_full & this.goods_p5_array[1] > 0 & !this.p5_traded & (this.chance | this.p5_chose_trader))
			{
				this.goods_p5_array[1] = checked(this.goods_p5_array[1] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 2;
						this.counter1 = 4;
					}
				}
				this.counter3 = 2;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p5_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (this.p5_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Sugar for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p5 = checked(this.gold_p5 + this.counter3);
				this.p5_ai_done = true;
				this.p5_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 1 & !this.p5_manned_office)
				{
					this.already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(75);
			if (!this.already_there & !this.trading_house_full & this.goods_p5_array[0] > 0 & !this.p5_traded & (this.chance | this.p5_chose_trader))
			{
				this.goods_p5_array[0] = checked(this.goods_p5_array[0] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 1;
						this.counter1 = 4;
					}
				}
				this.counter3 = 1;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				if (this.p5_manned_small_market)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (this.p5_manned_large_market)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Indigo for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p5 = checked(this.gold_p5 + this.counter3);
				this.p5_ai_done = true;
				this.p5_traded = true;
				this.update_all_labels();
			}
			this.already_there = false;
			this.counter1 = 0;
			do
			{
				if (this.trading_house_array[this.counter1] == 3 & !this.p5_manned_office)
				{
					this.already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 3);
			this.chance_of_action(10);
			if (!this.already_there & this.goods_p5_array[2] > 0 & !this.p5_traded & !this.trading_house_full & (this.p5_chose_trader | this.p5_manned_small_market | this.p5_manned_large_market | this.chance))
			{
				this.goods_p5_array[2] = checked(this.goods_p5_array[2] - 1);
				this.counter1 = 0;
				while (this.counter1 != 4)
				{
					if (this.trading_house_array[this.counter1] != 0)
					{
						this.counter1 = checked(this.counter1 + 1);
					}
					else
					{
						this.trading_house_array[this.counter1] = 3;
						this.counter1 = 4;
					}
				}
				this.counter3 = 0;
				this.update_player_turn_designations();
				if (StringType.StrCmp(this.current_role_chooser_string, "p5", false) == 0)
				{
					this.counter3 = checked(this.counter3 + 1);
				}
				this.check_for_building(131);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				this.check_for_building(251);
				if (this.found_building)
				{
					this.counter3 = checked(this.counter3 + 2);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (this.counter3 == 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (this.counter3 > 1 | this.counter3 < 1)
				{
					this.infobox_role(string.Concat(this.p5_name, " sold their Corn for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
				}
				this.gold_p5 = checked(this.gold_p5 + this.counter3);
				this.p5_ai_done = true;
				this.p5_traded = true;
				this.update_all_labels();
			}
			if (!this.p5_traded)
			{
				this.infobox_role(string.Concat(this.p5_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			this.formtitle("p5", "Done performing the Trader role - Turn Over");
		}

		public void p5_remove_all_colonists_to_idle()
		{
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), "1", false) == 0)
					{
						this.plantations_p5_array[this.counter1] = checked(this.plantations_p5_array[this.counter1] - 1);
						this.idle_colonists_array[5] = checked(this.idle_colonists_array[5] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			do
			{
				this.counter2 = 0;
				do
				{
					if (this.buildings_p5_array[this.counter1] != 0 & this.buildings_p5_array[this.counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), "0", false) != 0)
						{
							this.buildings_p5_array[this.counter1] = checked(this.buildings_p5_array[this.counter1] - 1);
							this.idle_colonists_array[5] = checked(this.idle_colonists_array[5] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (this.counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 19);
		}

		private void PictureBox1_Click(object sender, EventArgs e)
		{
			this.choose_quarry();
		}

		private void plant_p1_slot1_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[0] == 10 | this.plantations_p1_array[0] == 20 | this.plantations_p1_array[0] == 30 | this.plantations_p1_array[0] == 40 | this.plantations_p1_array[0] == 50 | this.plantations_p1_array[0] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[0] = checked(this.plantations_p1_array[0] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[0] == 11 | this.plantations_p1_array[0] == 21 | this.plantations_p1_array[0] == 31 | this.plantations_p1_array[0] == 41 | this.plantations_p1_array[0] == 51 | this.plantations_p1_array[0] == 61)
				{
					this.plantations_p1_array[0] = checked(this.plantations_p1_array[0] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot10_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[9] == 10 | this.plantations_p1_array[9] == 20 | this.plantations_p1_array[9] == 30 | this.plantations_p1_array[9] == 40 | this.plantations_p1_array[9] == 50 | this.plantations_p1_array[9] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[9] = checked(this.plantations_p1_array[9] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[9] == 11 | this.plantations_p1_array[9] == 21 | this.plantations_p1_array[9] == 31 | this.plantations_p1_array[9] == 41 | this.plantations_p1_array[9] == 51 | this.plantations_p1_array[9] == 61)
				{
					this.plantations_p1_array[9] = checked(this.plantations_p1_array[9] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot11_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[10] == 10 | this.plantations_p1_array[10] == 20 | this.plantations_p1_array[10] == 30 | this.plantations_p1_array[10] == 40 | this.plantations_p1_array[10] == 50 | this.plantations_p1_array[10] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[10] = checked(this.plantations_p1_array[10] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[10] == 11 | this.plantations_p1_array[10] == 21 | this.plantations_p1_array[10] == 31 | this.plantations_p1_array[10] == 41 | this.plantations_p1_array[10] == 51 | this.plantations_p1_array[10] == 61)
				{
					this.plantations_p1_array[10] = checked(this.plantations_p1_array[10] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot12_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[11] == 10 | this.plantations_p1_array[11] == 20 | this.plantations_p1_array[11] == 30 | this.plantations_p1_array[11] == 40 | this.plantations_p1_array[11] == 50 | this.plantations_p1_array[11] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[11] = checked(this.plantations_p1_array[11] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[11] == 11 | this.plantations_p1_array[11] == 21 | this.plantations_p1_array[11] == 31 | this.plantations_p1_array[11] == 41 | this.plantations_p1_array[11] == 51 | this.plantations_p1_array[11] == 61)
				{
					this.plantations_p1_array[11] = checked(this.plantations_p1_array[11] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot2_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[1] == 10 | this.plantations_p1_array[1] == 20 | this.plantations_p1_array[1] == 30 | this.plantations_p1_array[1] == 40 | this.plantations_p1_array[1] == 50 | this.plantations_p1_array[1] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[1] = checked(this.plantations_p1_array[1] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[1] == 11 | this.plantations_p1_array[1] == 21 | this.plantations_p1_array[1] == 31 | this.plantations_p1_array[1] == 41 | this.plantations_p1_array[1] == 51 | this.plantations_p1_array[1] == 61)
				{
					this.plantations_p1_array[1] = checked(this.plantations_p1_array[1] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot3_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[2] == 10 | this.plantations_p1_array[2] == 20 | this.plantations_p1_array[2] == 30 | this.plantations_p1_array[2] == 40 | this.plantations_p1_array[2] == 50 | this.plantations_p1_array[2] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[2] = checked(this.plantations_p1_array[2] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[2] == 11 | this.plantations_p1_array[2] == 21 | this.plantations_p1_array[2] == 31 | this.plantations_p1_array[2] == 41 | this.plantations_p1_array[2] == 51 | this.plantations_p1_array[2] == 61)
				{
					this.plantations_p1_array[2] = checked(this.plantations_p1_array[2] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot4_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[3] == 10 | this.plantations_p1_array[3] == 20 | this.plantations_p1_array[3] == 30 | this.plantations_p1_array[3] == 40 | this.plantations_p1_array[3] == 50 | this.plantations_p1_array[3] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[3] = checked(this.plantations_p1_array[3] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[3] == 11 | this.plantations_p1_array[3] == 21 | this.plantations_p1_array[3] == 31 | this.plantations_p1_array[3] == 41 | this.plantations_p1_array[3] == 51 | this.plantations_p1_array[3] == 61)
				{
					this.plantations_p1_array[3] = checked(this.plantations_p1_array[3] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot5_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[4] == 10 | this.plantations_p1_array[4] == 20 | this.plantations_p1_array[4] == 30 | this.plantations_p1_array[4] == 40 | this.plantations_p1_array[4] == 50 | this.plantations_p1_array[4] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[4] = checked(this.plantations_p1_array[4] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[4] == 11 | this.plantations_p1_array[4] == 21 | this.plantations_p1_array[4] == 31 | this.plantations_p1_array[4] == 41 | this.plantations_p1_array[4] == 51 | this.plantations_p1_array[4] == 61)
				{
					this.plantations_p1_array[4] = checked(this.plantations_p1_array[4] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot6_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[5] == 10 | this.plantations_p1_array[5] == 20 | this.plantations_p1_array[5] == 30 | this.plantations_p1_array[5] == 40 | this.plantations_p1_array[5] == 50 | this.plantations_p1_array[5] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[5] = checked(this.plantations_p1_array[5] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[5] == 11 | this.plantations_p1_array[5] == 21 | this.plantations_p1_array[5] == 31 | this.plantations_p1_array[5] == 41 | this.plantations_p1_array[5] == 51 | this.plantations_p1_array[5] == 61)
				{
					this.plantations_p1_array[5] = checked(this.plantations_p1_array[5] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot7_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[6] == 10 | this.plantations_p1_array[6] == 20 | this.plantations_p1_array[6] == 30 | this.plantations_p1_array[6] == 40 | this.plantations_p1_array[6] == 50 | this.plantations_p1_array[6] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[6] = checked(this.plantations_p1_array[6] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[6] == 11 | this.plantations_p1_array[6] == 21 | this.plantations_p1_array[6] == 31 | this.plantations_p1_array[6] == 41 | this.plantations_p1_array[6] == 51 | this.plantations_p1_array[6] == 61)
				{
					this.plantations_p1_array[6] = checked(this.plantations_p1_array[6] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot8_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[7] == 10 | this.plantations_p1_array[7] == 20 | this.plantations_p1_array[7] == 30 | this.plantations_p1_array[7] == 40 | this.plantations_p1_array[7] == 50 | this.plantations_p1_array[7] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[7] = checked(this.plantations_p1_array[7] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[7] == 11 | this.plantations_p1_array[7] == 21 | this.plantations_p1_array[7] == 31 | this.plantations_p1_array[7] == 41 | this.plantations_p1_array[7] == 51 | this.plantations_p1_array[7] == 61)
				{
					this.plantations_p1_array[7] = checked(this.plantations_p1_array[7] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot9_Click(object sender, EventArgs e)
		{
			this.finished = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.mayor_round)
			{
				if (!this.finished && this.plantations_p1_array[8] == 10 | this.plantations_p1_array[8] == 20 | this.plantations_p1_array[8] == 30 | this.plantations_p1_array[8] == 40 | this.plantations_p1_array[8] == 50 | this.plantations_p1_array[8] == 60)
				{
					if (this.idle_colonists_array[this.current_player] > 0)
					{
						this.plantations_p1_array[8] = checked(this.plantations_p1_array[8] + 1);
						this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] - 1);
						this.finished = true;
						this.update_all_labels();
					}
				}
				if (!this.finished && this.plantations_p1_array[8] == 11 | this.plantations_p1_array[8] == 21 | this.plantations_p1_array[8] == 31 | this.plantations_p1_array[8] == 41 | this.plantations_p1_array[8] == 51 | this.plantations_p1_array[8] == 61)
				{
					this.plantations_p1_array[8] = checked(this.plantations_p1_array[8] - 1);
					this.idle_colonists_array[this.current_player] = checked(this.idle_colonists_array[this.current_player] + 1);
					this.finished = true;
					this.update_all_labels();
				}
				this.determine_p1_mayor_phase_over();
			}
		}

		private void plantation_available_slot1_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_ready_to_end_settler = true;
					this.p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					this.formtitle("p1", "Your turn is over");
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
					this.p1_taken_turn = true;
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[0]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[0];
							this.plantation_available_array[0] = 0;
							this.update_num_plantations();
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[0]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[0] + 1);
							this.plantation_available_array[0] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[0]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[0];
							this.plantation_available_array[0] = 0;
							this.update_num_plantations();
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[0]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[0] + 1);
							this.plantation_available_array[0] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.plantation_available_slot1.Visible = false;
						this.p1_chose_plantation = true;
						this.update_plantations_p1_labels();
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
						this.p1_taken_turn = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		private void plantation_available_slot2_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_ready_to_end_settler = true;
					this.p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					this.formtitle("p1", "Your turn is over");
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
					this.p1_taken_turn = true;
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[1]);
						if (this.confirmed)
						{
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[1];
							this.plantation_available_array[1] = 0;
							this.update_num_plantations();
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[1]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[1] + 1);
							this.plantation_available_array[1] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[1]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[1];
							this.plantation_available_array[1] = 0;
							this.update_num_plantations();
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[1]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[1] + 1);
							this.plantation_available_array[1] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.plantation_available_slot1.Visible = false;
						this.p1_chose_plantation = true;
						this.update_plantations_p1_labels();
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
						this.p1_taken_turn = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		private void plantation_available_slot3_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_chose_plantation = true;
					this.p1_ready_to_end_settler = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					this.formtitle("p1", "Your turn is over");
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
					this.p1_taken_turn = true;
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[2]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[2];
							this.plantation_available_array[2] = 0;
							this.update_num_plantations();
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[2]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[2] + 1);
							this.plantation_available_array[2] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[2]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[2];
							this.plantation_available_array[2] = 0;
							this.update_num_plantations();
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[2]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[2] + 1);
							this.plantation_available_array[2] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.plantation_available_slot1.Visible = false;
						this.p1_chose_plantation = true;
						this.update_plantations_p1_labels();
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
						this.p1_taken_turn = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		private void plantation_available_slot4_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_ready_to_end_settler = true;
					this.p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					this.formtitle("p1", "Your turn is over");
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
					this.p1_taken_turn = true;
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[3]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[3];
							this.plantation_available_array[3] = 0;
							this.update_num_plantations();
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[3]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[3] + 1);
							this.plantation_available_array[3] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[3]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[3];
							this.plantation_available_array[3] = 0;
							this.update_num_plantations();
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[3]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[3] + 1);
							this.plantation_available_array[3] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.plantation_available_slot1.Visible = false;
						this.p1_chose_plantation = true;
						this.update_plantations_p1_labels();
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
						this.p1_taken_turn = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		private void plantation_available_slot5_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_ready_to_end_settler = true;
					this.p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					this.formtitle("p1", "Your turn is over");
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
					this.p1_taken_turn = true;
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[4]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[4];
							this.plantation_available_array[4] = 0;
							this.update_num_plantations();
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[4]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[4] + 1);
							this.plantation_available_array[4] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[4]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[4];
							this.plantation_available_array[4] = 0;
							this.update_num_plantations();
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[4]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[4] + 1);
							this.plantation_available_array[4] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.plantation_available_slot1.Visible = false;
						this.p1_chose_plantation = true;
						this.update_plantations_p1_labels();
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
						this.p1_taken_turn = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		private void plantation_available_slot6_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (this.settler_round)
			{
				if (this.p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (this.num_plantations_p1 >= 12)
				{
					this.p1_ready_to_end_settler = true;
					this.p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					this.formtitle("p1", "Your turn is over");
					this.next_turn_button.Visible = true;
					this.next_turn_button.Enabled = true;
					this.p1_taken_turn = true;
				}
				else
				{
					this.check_for_building(231);
					if (!this.found_building)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[5]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[5];
							this.plantation_available_array[5] = 0;
							this.update_num_plantations();
						}
					}
					else if (this.colonists_bank_num > 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[5]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_bank_num = checked(this.colonists_bank_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[5] + 1);
							this.plantation_available_array[5] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					else if (this.colonists_ship_num <= 0)
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[5]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.plantations_p1_array[this.num_plantations_p1] = this.plantation_available_array[5];
							this.plantation_available_array[5] = 0;
							this.update_num_plantations();
							this.infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						this.confirmbox_plant("Is this the Plantation you want to choose?", this.plantation_available_array[5]);
						if (this.confirmed)
						{
							this.p1_ready_to_end_settler = true;
							this.colonists_ship_num = checked(this.colonists_ship_num - 1);
							this.plantations_p1_array[this.num_plantations_p1] = checked(this.plantation_available_array[5] + 1);
							this.plantation_available_array[5] = 0;
							this.update_num_plantations();
							this.infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							this.colonists_array[1] = checked(this.colonists_array[1] + 1);
						}
					}
					if (this.confirmed)
					{
						this.make_settler_buttons_inactive();
						this.p1_ready_to_end_settler = true;
						this.plantation_available_slot1.Visible = false;
						this.p1_chose_plantation = true;
						this.update_plantations_p1_labels();
						this.formtitle("p1", "Your turn is over");
						this.next_turn_button.Visible = true;
						this.next_turn_button.Enabled = true;
						this.p1_taken_turn = true;
					}
				}
			}
			this.update_all_labels();
			if (this.p1_ready_to_end_settler & this.settler_round & this.current_player == 1)
			{
				this.p1_ready_to_end_settler = false;
				this.next_turn_routine();
			}
		}

		private void prnondistext_Click(object sender, EventArgs e)
		{
		}

		public void process_p1_dumping()
		{
			this.storage_form.indigo1.Checked = false;
			this.storage_form.indigo2.Checked = false;
			this.storage_form.indigo3.Checked = false;
			this.storage_form.indigo4.Checked = false;
			this.storage_form.sugar1.Checked = false;
			this.storage_form.sugar2.Checked = false;
			this.storage_form.sugar3.Checked = false;
			this.storage_form.sugar4.Checked = false;
			this.storage_form.corn1.Checked = false;
			this.storage_form.corn2.Checked = false;
			this.storage_form.corn3.Checked = false;
			this.storage_form.corn4.Checked = false;
			this.storage_form.tobacco1.Checked = false;
			this.storage_form.tobacco2.Checked = false;
			this.storage_form.tobacco3.Checked = false;
			this.storage_form.tobacco4.Checked = false;
			this.storage_form.coffee1.Checked = false;
			this.storage_form.coffee2.Checked = false;
			this.storage_form.coffee3.Checked = false;
			this.storage_form.coffee4.Checked = false;
			this.storage_form.indigo1.Visible = false;
			this.storage_form.indigo2.Visible = false;
			this.storage_form.indigo3.Visible = false;
			this.storage_form.indigo4.Visible = false;
			this.storage_form.sugar1.Visible = false;
			this.storage_form.sugar2.Visible = false;
			this.storage_form.sugar3.Visible = false;
			this.storage_form.sugar4.Visible = false;
			this.storage_form.corn1.Visible = false;
			this.storage_form.corn2.Visible = false;
			this.storage_form.corn3.Visible = false;
			this.storage_form.corn4.Visible = false;
			this.storage_form.tobacco1.Visible = false;
			this.storage_form.tobacco2.Visible = false;
			this.storage_form.tobacco3.Visible = false;
			this.storage_form.tobacco4.Visible = false;
			this.storage_form.coffee1.Visible = false;
			this.storage_form.coffee2.Visible = false;
			this.storage_form.coffee3.Visible = false;
			this.storage_form.coffee4.Visible = false;
			this.storage_form.indigo_label.Text =StringType.FromInteger(this.goods_p1_array[0]);
			this.storage_form.sugar_label.Text =StringType.FromInteger(this.goods_p1_array[1]);
			this.storage_form.corn_label.Text =StringType.FromInteger(this.goods_p1_array[2]);
			this.storage_form.tobacco_label.Text =StringType.FromInteger(this.goods_p1_array[3]);
			this.storage_form.coffee_label.Text =StringType.FromInteger(this.goods_p1_array[4]);
			this.storage_form.GroupBox2.Visible = false;
			this.storage_form.GroupBox3.Visible = false;
			this.storage_form.GroupBox4.Visible = false;
			this.check_for_building_p1(161);
			if (!this.found_building)
			{
				this.storage_form.GroupBox2.Visible = false;
			}
			else
			{
				this.storage_form.GroupBox2.Visible = true;
			}
			this.check_for_building_p1(261);
			if (!this.found_building)
			{
				this.storage_form.GroupBox3.Visible = false;
				this.storage_form.GroupBox4.Visible = false;
			}
			else
			{
				this.storage_form.GroupBox3.Visible = true;
				this.storage_form.GroupBox4.Visible = true;
			}
			if (this.goods_p1_array[0] > 0)
			{
				this.storage_form.indigo1.Visible = true;
				this.storage_form.indigo2.Visible = true;
				this.storage_form.indigo3.Visible = true;
				this.storage_form.indigo4.Visible = true;
			}
			if (this.goods_p1_array[1] > 0)
			{
				this.storage_form.sugar1.Visible = true;
				this.storage_form.sugar2.Visible = true;
				this.storage_form.sugar3.Visible = true;
				this.storage_form.sugar4.Visible = true;
			}
			if (this.goods_p1_array[2] > 0)
			{
				this.storage_form.corn1.Visible = true;
				this.storage_form.corn2.Visible = true;
				this.storage_form.corn3.Visible = true;
				this.storage_form.corn4.Visible = true;
			}
			if (this.goods_p1_array[3] > 0)
			{
				this.storage_form.tobacco1.Visible = true;
				this.storage_form.tobacco2.Visible = true;
				this.storage_form.tobacco3.Visible = true;
				this.storage_form.tobacco4.Visible = true;
			}
			if (this.goods_p1_array[4] > 0)
			{
				this.storage_form.coffee1.Visible = true;
				this.storage_form.coffee2.Visible = true;
				this.storage_form.coffee3.Visible = true;
				this.storage_form.coffee4.Visible = true;
			}
			if (!(this.goods_p1_array[0] == 0 & this.goods_p1_array[1] == 0 & this.goods_p1_array[2] == 0 & this.goods_p1_array[3] == 0 & this.goods_p1_array[4] == 0))
			{
				this.storage_form.storage_close_button.Enabled=false;
				this.storage_form.storage_close_button.Visible = false;
				this.storage_form.ShowDialog();
			}
			else
			{
				this.infobox_role("You have no goods to store. Please click End Turn.", "role_captain");
				this.auto_captain_button.Text = "Next Shipper Auto";
				this.auto_captain_button.Enabled=false;
				this.auto_captain_button.Visible = false;
				this.next_turn_button.Text = "End Captain Turn";
				this.next_turn_button.Enabled = true;
				this.next_turn_button.Visible = true;
			}
			if (this.storage_form.indigo1.Checked)
			{
				this.p1_storage_array[0] = 1;
				this.infobox_role("You stored 1 barrel of Indigo.", "role_captain");
			}
			if (this.storage_form.indigo2.Checked)
			{
				this.p1_storage_array[0] = 2;
				this.infobox_building1("You stored all of your Indigo in your Small Warehouse.", 161);
			}
			if (this.storage_form.indigo3.Checked)
			{
				this.p1_storage_array[0] = 2;
				this.infobox_building1("You stored all of your Indigo in your Large Warehouse.", 261);
			}
			if (this.storage_form.indigo4.Checked)
			{
				this.p1_storage_array[0] = 2;
				this.infobox_building1("You stored all of your Indigo in your Large Warehouse.", 261);
			}
			if (this.storage_form.sugar1.Checked)
			{
				this.p1_storage_array[1] = 1;
				this.infobox_role("You stored 1 barrel of Sugar.", "role_captain");
			}
			if (this.storage_form.sugar2.Checked)
			{
				this.p1_storage_array[1] = 2;
				this.infobox_building1("You stored all of your Sugar in your Small Warehouse.", 161);
			}
			if (this.storage_form.sugar3.Checked)
			{
				this.p1_storage_array[1] = 2;
				this.infobox_building1("You stored all of your Sugar in your Large Warehouse.", 261);
			}
			if (this.storage_form.sugar4.Checked)
			{
				this.p1_storage_array[1] = 2;
				this.infobox_building1("You stored all of your Sugar in your Large Warehouse.", 261);
			}
			if (this.storage_form.corn1.Checked)
			{
				this.p1_storage_array[2] = 1;
				this.infobox_role("You stored 1 barrel of Corn.", "role_captain");
			}
			if (this.storage_form.corn2.Checked)
			{
				this.p1_storage_array[2] = 2;
				this.infobox_building1("You stored all of your Corn in your Small Warehouse.", 161);
			}
			if (this.storage_form.corn3.Checked)
			{
				this.p1_storage_array[2] = 2;
				this.infobox_building1("You stored all of your Corn in your Large Warehouse.", 261);
			}
			if (this.storage_form.corn4.Checked)
			{
				this.p1_storage_array[2] = 2;
				this.infobox_building1("You stored all of your Corn in your Large Warehouse.", 261);
			}
			if (this.storage_form.tobacco1.Checked)
			{
				this.p1_storage_array[3] = 1;
				this.infobox_role("You stored 1 barrel of Tobacco.", "role_captain");
			}
			if (this.storage_form.tobacco2.Checked)
			{
				this.p1_storage_array[3] = 2;
				this.infobox_building1("You stored all of your Tobacco in your Small Warehouse.", 161);
			}
			if (this.storage_form.tobacco3.Checked)
			{
				this.p1_storage_array[3] = 2;
				this.infobox_building1("You stored all of your Tobacco in your Large Warehouse.", 261);
			}
			if (this.storage_form.tobacco4.Checked)
			{
				this.p1_storage_array[3] = 2;
				this.infobox_building1("You stored all of your Tobacco in your Large Warehouse.", 261);
			}
			if (this.storage_form.coffee1.Checked)
			{
				this.p1_storage_array[4] = 1;
				this.infobox_role("You stored 1 barrel of Coffee.", "role_captain");
			}
			if (this.storage_form.coffee2.Checked)
			{
				this.p1_storage_array[4] = 2;
				this.infobox_building1("You stored all of your Coffee in your Small Warehouse.", 161);
			}
			if (this.storage_form.coffee3.Checked)
			{
				this.p1_storage_array[4] = 2;
				this.infobox_building1("You stored all of your Coffee in your Large Warehouse.", 261);
			}
			if (this.storage_form.coffee4.Checked)
			{
				this.p1_storage_array[4] = 2;
				this.infobox_building1("You stored all of your Coffee in your Large Warehouse.", 261);
			}
			this.counter1 = 0;
			do
			{
				if (this.p1_storage_array[this.counter1] == 0)
				{
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] + this.goods_p1_array[this.counter1]);
					this.goods_p1_array[this.counter1] = 0;
				}
				if (this.p1_storage_array[this.counter1] == 1)
				{
					this.goods_bank_array[this.counter1] = checked(this.goods_bank_array[this.counter1] + (checked(this.goods_p1_array[this.counter1] - 1)));
					this.goods_p1_array[this.counter1] = 1;
				}
#warning Best guess: what is now contained in an if statement was simply a statement in the .NET framework 1 version of the application
				if (this.p1_storage_array[this.counter1] != 2)
				{
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
			}
			while (this.counter1 <= 4);
			this.p1_dumped = true;
			this.auto_captain_button.Text = "Next Shipper Auto";
			this.auto_captain_button.Enabled=false;
			this.auto_captain_button.Visible = false;
			this.next_turn_button.Text = "End Captain Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void process_p2_dumping()
		{
			this.done_dumping = false;
			this.stored_indigo = false;
			this.stored_sugar = false;
			this.stored_corn = false;
			this.stored_tobacco = false;
			this.stored_coffee = false;
			this.slots_to_store = 0;
			this.check_for_building_p2(161);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 1);
			}
			this.check_for_building_p2(261);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 2);
			}
			this.finished = false;
			this.counter1 = 1;
			while (!(this.counter1 == checked(this.slots_to_store + 1) | this.finished))
			{
				this.determine_best_goods_to_store();
				if (this.best_storage_type == 999)
				{
					this.finished = true;
				}
				if (this.best_storage_type == 0)
				{
					this.stored_indigo = true;
					this.infobox_role(string.Concat(this.p2_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 1)
				{
					this.stored_sugar = true;
					this.infobox_role(string.Concat(this.p2_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 2)
				{
					this.stored_corn = true;
					this.infobox_role(string.Concat(this.p2_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 3)
				{
					this.stored_tobacco = true;
					this.infobox_role(string.Concat(this.p2_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 4)
				{
					this.stored_coffee = true;
					this.infobox_role(string.Concat(this.p2_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				this.counter1 = checked(this.counter1 + 1);
			}
			if ((this.stored_indigo | this.goods_p2_array[0] == 0) & (this.stored_sugar | this.goods_p2_array[1] == 0) & (this.stored_corn | this.goods_p2_array[2] == 0) & (this.stored_tobacco | this.goods_p2_array[3] == 0) & (this.stored_coffee | this.goods_p2_array[4] == 0))
			{
				this.done_dumping = true;
			}
			while (!this.done_dumping)
			{
				this.generate_random1(1, 100);
				if (this.random1 > 60 & this.goods_p2_array[4] > 0 & !this.done_dumping)
				{
					this.goods_p2_array[4] = checked(this.goods_p2_array[4] - 1);
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p2_array[4]);
					this.goods_p2_array[4] = 1;
					this.stored_coffee = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p2_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (this.random1 > 40 & this.random1 < 60 & this.goods_p2_array[3] > 0 & !this.done_dumping)
				{
					this.goods_p2_array[3] = checked(this.goods_p2_array[3] - 1);
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p2_array[3]);
					this.goods_p2_array[3] = 1;
					this.stored_tobacco = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p2_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (this.random1 > 30 & this.random1 < 40 & this.goods_p2_array[2] > 0 & !this.done_dumping)
				{
					this.goods_p2_array[2] = checked(this.goods_p2_array[2] - 1);
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p2_array[2]);
					this.goods_p2_array[2] = 1;
					this.stored_corn = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p2_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (this.random1 > 20 & this.random1 < 30 & this.goods_p2_array[1] > 0 & !this.done_dumping)
				{
					this.goods_p2_array[1] = checked(this.goods_p2_array[1] - 1);
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p2_array[1]);
					this.goods_p2_array[1] = 1;
					this.stored_sugar = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p2_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(this.random1 > 10 & this.random1 < 20 & this.goods_p2_array[0] > 0 & !this.done_dumping))
				{
					continue;
				}
				this.goods_p2_array[0] = checked(this.goods_p2_array[0] - 1);
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p2_array[0]);
				this.goods_p2_array[0] = 1;
				this.stored_indigo = true;
				this.done_dumping = true;
				this.infobox_role(string.Concat(this.p2_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!this.stored_indigo)
			{
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p2_array[0]);
				this.goods_p2_array[0] = 0;
			}
			if (!this.stored_sugar)
			{
				this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p2_array[1]);
				this.goods_p2_array[1] = 0;
			}
			if (!this.stored_corn)
			{
				this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p2_array[2]);
				this.goods_p2_array[2] = 0;
			}
			if (!this.stored_tobacco)
			{
				this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p2_array[3]);
				this.goods_p2_array[3] = 0;
			}
			if (!this.stored_coffee)
			{
				this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p2_array[4]);
				this.goods_p2_array[4] = 0;
			}
			this.next_turn_button.Text = "End Captain Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void process_p3_dumping()
		{
			this.done_dumping = false;
			this.stored_indigo = false;
			this.stored_sugar = false;
			this.stored_corn = false;
			this.stored_tobacco = false;
			this.stored_coffee = false;
			this.slots_to_store = 0;
			this.check_for_building_p3(161);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 1);
			}
			this.check_for_building_p3(261);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 2);
			}
			this.finished = false;
			this.counter1 = 1;
			while (!(this.counter1 == checked(this.slots_to_store + 1) | this.finished))
			{
				this.determine_best_goods_to_store();
				if (this.best_storage_type == 999)
				{
					this.finished = true;
				}
				if (this.best_storage_type == 0)
				{
					this.stored_indigo = true;
					this.infobox_role(string.Concat(this.p3_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 1)
				{
					this.stored_sugar = true;
					this.infobox_role(string.Concat(this.p3_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 2)
				{
					this.stored_corn = true;
					this.infobox_role(string.Concat(this.p3_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 3)
				{
					this.stored_tobacco = true;
					this.infobox_role(string.Concat(this.p3_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 4)
				{
					this.stored_coffee = true;
					this.infobox_role(string.Concat(this.p3_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				this.counter1 = checked(this.counter1 + 1);
			}
			if ((this.stored_indigo | this.goods_p3_array[0] == 0) & (this.stored_sugar | this.goods_p3_array[1] == 0) & (this.stored_corn | this.goods_p3_array[2] == 0) & (this.stored_tobacco | this.goods_p3_array[3] == 0) & (this.stored_coffee | this.goods_p3_array[4] == 0))
			{
				this.done_dumping = true;
			}
			while (!this.done_dumping)
			{
				this.generate_random1(1, 100);
				if (this.random1 > 60 & this.goods_p3_array[4] > 0 & !this.done_dumping)
				{
					this.goods_p3_array[4] = checked(this.goods_p3_array[4] - 1);
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p3_array[4]);
					this.goods_p3_array[4] = 1;
					this.stored_coffee = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p3_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (this.random1 > 40 & this.random1 < 60 & this.goods_p3_array[3] > 0 & !this.done_dumping)
				{
					this.goods_p3_array[3] = checked(this.goods_p3_array[3] - 1);
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p3_array[3]);
					this.goods_p3_array[3] = 1;
					this.stored_tobacco = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p3_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (this.random1 > 30 & this.random1 < 40 & this.goods_p3_array[2] > 0 & !this.done_dumping)
				{
					this.goods_p3_array[2] = checked(this.goods_p3_array[2] - 1);
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p3_array[2]);
					this.goods_p3_array[2] = 1;
					this.stored_corn = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p3_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (this.random1 > 20 & this.random1 < 30 & this.goods_p3_array[1] > 0 & !this.done_dumping)
				{
					this.goods_p3_array[1] = checked(this.goods_p3_array[1] - 1);
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p3_array[1]);
					this.goods_p3_array[1] = 1;
					this.stored_sugar = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p3_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(this.random1 > 10 & this.random1 < 20 & this.goods_p3_array[0] > 0 & !this.done_dumping))
				{
					continue;
				}
				this.goods_p3_array[0] = checked(this.goods_p3_array[0] - 1);
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p3_array[0]);
				this.goods_p3_array[0] = 1;
				this.stored_indigo = true;
				this.done_dumping = true;
				this.infobox_role(string.Concat(this.p3_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!this.stored_indigo)
			{
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p3_array[0]);
				this.goods_p3_array[0] = 0;
			}
			if (!this.stored_sugar)
			{
				this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p3_array[1]);
				this.goods_p3_array[1] = 0;
			}
			if (!this.stored_corn)
			{
				this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p3_array[2]);
				this.goods_p3_array[2] = 0;
			}
			if (!this.stored_tobacco)
			{
				this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p3_array[3]);
				this.goods_p3_array[3] = 0;
			}
			if (!this.stored_coffee)
			{
				this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p3_array[4]);
				this.goods_p3_array[4] = 0;
			}
			this.next_turn_button.Text = "End Captain Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void process_p4_dumping()
		{
			this.done_dumping = false;
			this.stored_indigo = false;
			this.stored_sugar = false;
			this.stored_corn = false;
			this.stored_tobacco = false;
			this.stored_coffee = false;
			this.slots_to_store = 0;
			this.check_for_building_p4(161);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 1);
			}
			this.check_for_building_p4(261);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 2);
			}
			this.finished = false;
			this.counter1 = 1;
			while (!(this.counter1 == checked(this.slots_to_store + 1) | this.finished))
			{
				this.determine_best_goods_to_store();
				if (this.best_storage_type == 999)
				{
					this.finished = true;
				}
				if (this.best_storage_type == 0)
				{
					this.stored_indigo = true;
					this.infobox_role(string.Concat(this.p4_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 1)
				{
					this.stored_sugar = true;
					this.infobox_role(string.Concat(this.p4_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 2)
				{
					this.stored_corn = true;
					this.infobox_role(string.Concat(this.p4_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 3)
				{
					this.stored_tobacco = true;
					this.infobox_role(string.Concat(this.p4_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 4)
				{
					this.stored_coffee = true;
					this.infobox_role(string.Concat(this.p4_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				this.counter1 = checked(this.counter1 + 1);
			}
			if ((this.stored_indigo | this.goods_p4_array[0] == 0) & (this.stored_sugar | this.goods_p4_array[1] == 0) & (this.stored_corn | this.goods_p4_array[2] == 0) & (this.stored_tobacco | this.goods_p4_array[3] == 0) & (this.stored_coffee | this.goods_p4_array[4] == 0))
			{
				this.done_dumping = true;
			}
			while (!this.done_dumping)
			{
				this.generate_random1(1, 100);
				if (this.random1 > 60 & this.goods_p4_array[4] > 0 & !this.done_dumping)
				{
					this.goods_p4_array[4] = checked(this.goods_p4_array[4] - 1);
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p4_array[4]);
					this.goods_p4_array[4] = 1;
					this.stored_coffee = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p4_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (this.random1 > 40 & this.random1 < 60 & this.goods_p4_array[3] > 0 & !this.done_dumping)
				{
					this.goods_p4_array[3] = checked(this.goods_p4_array[3] - 1);
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p4_array[3]);
					this.goods_p4_array[3] = 1;
					this.stored_tobacco = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p4_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (this.random1 > 30 & this.random1 < 40 & this.goods_p4_array[2] > 0 & !this.done_dumping)
				{
					this.goods_p4_array[2] = checked(this.goods_p4_array[2] - 1);
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p4_array[2]);
					this.goods_p4_array[2] = 1;
					this.stored_corn = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p4_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (this.random1 > 20 & this.random1 < 30 & this.goods_p4_array[1] > 0 & !this.done_dumping)
				{
					this.goods_p4_array[1] = checked(this.goods_p4_array[1] - 1);
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p4_array[1]);
					this.goods_p4_array[1] = 1;
					this.stored_sugar = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p4_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(this.random1 > 10 & this.random1 < 20 & this.goods_p4_array[0] > 0 & !this.done_dumping))
				{
					continue;
				}
				this.goods_p4_array[0] = checked(this.goods_p4_array[0] - 1);
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p4_array[0]);
				this.goods_p4_array[0] = 1;
				this.stored_indigo = true;
				this.done_dumping = true;
				this.infobox_role(string.Concat(this.p4_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!this.stored_indigo)
			{
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p4_array[0]);
				this.goods_p4_array[0] = 0;
			}
			if (!this.stored_sugar)
			{
				this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p4_array[1]);
				this.goods_p4_array[1] = 0;
			}
			if (!this.stored_corn)
			{
				this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p4_array[2]);
				this.goods_p4_array[2] = 0;
			}
			if (!this.stored_tobacco)
			{
				this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p4_array[3]);
				this.goods_p4_array[3] = 0;
			}
			if (!this.stored_coffee)
			{
				this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p4_array[4]);
				this.goods_p4_array[4] = 0;
			}
			this.next_turn_button.Text = "End Captain Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		public void process_p5_dumping()
		{
			this.done_dumping = false;
			this.stored_indigo = false;
			this.stored_sugar = false;
			this.stored_corn = false;
			this.stored_tobacco = false;
			this.stored_coffee = false;
			this.slots_to_store = 0;
			this.check_for_building_p5(161);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 1);
			}
			this.check_for_building_p5(261);
			if (this.found_building)
			{
				this.slots_to_store = checked(this.slots_to_store + 2);
			}
			this.finished = false;
			this.counter1 = 1;
			while (!(this.counter1 == checked(this.slots_to_store + 1) | this.finished))
			{
				this.determine_best_goods_to_store();
				if (this.best_storage_type == 999)
				{
					this.finished = true;
				}
				if (this.best_storage_type == 0)
				{
					this.stored_indigo = true;
					this.infobox_role(string.Concat(this.p5_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 1)
				{
					this.stored_sugar = true;
					this.infobox_role(string.Concat(this.p5_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 2)
				{
					this.stored_corn = true;
					this.infobox_role(string.Concat(this.p5_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 3)
				{
					this.stored_tobacco = true;
					this.infobox_role(string.Concat(this.p5_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (this.best_storage_type == 4)
				{
					this.stored_coffee = true;
					this.infobox_role(string.Concat(this.p5_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				this.counter1 = checked(this.counter1 + 1);
			}
			if ((this.stored_indigo | this.goods_p5_array[0] == 0) & (this.stored_sugar | this.goods_p5_array[1] == 0) & (this.stored_corn | this.goods_p5_array[2] == 0) & (this.stored_tobacco | this.goods_p5_array[3] == 0) & (this.stored_coffee | this.goods_p5_array[4] == 0))
			{
				this.done_dumping = true;
			}
			while (!this.done_dumping)
			{
				this.generate_random1(1, 100);
				if (this.random1 > 60 & this.goods_p5_array[4] > 0 & !this.done_dumping)
				{
					this.goods_p5_array[4] = checked(this.goods_p5_array[4] - 1);
					this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p5_array[4]);
					this.goods_p5_array[4] = 1;
					this.stored_coffee = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p5_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (this.random1 > 40 & this.random1 < 60 & this.goods_p5_array[3] > 0 & !this.done_dumping)
				{
					this.goods_p5_array[3] = checked(this.goods_p5_array[3] - 1);
					this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p5_array[3]);
					this.goods_p5_array[3] = 1;
					this.stored_tobacco = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p5_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (this.random1 > 30 & this.random1 < 40 & this.goods_p5_array[2] > 0 & !this.done_dumping)
				{
					this.goods_p5_array[2] = checked(this.goods_p5_array[2] - 1);
					this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p5_array[2]);
					this.goods_p5_array[2] = 1;
					this.stored_corn = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p5_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (this.random1 > 20 & this.random1 < 30 & this.goods_p5_array[1] > 0 & !this.done_dumping)
				{
					this.goods_p5_array[1] = checked(this.goods_p5_array[1] - 1);
					this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p5_array[1]);
					this.goods_p5_array[1] = 1;
					this.stored_sugar = true;
					this.done_dumping = true;
					this.infobox_role(string.Concat(this.p5_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(this.random1 > 10 & this.random1 < 20 & this.goods_p5_array[0] > 0 & !this.done_dumping))
				{
					continue;
				}
				this.goods_p5_array[0] = checked(this.goods_p5_array[0] - 1);
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p5_array[0]);
				this.goods_p5_array[0] = 1;
				this.stored_indigo = true;
				this.done_dumping = true;
				this.infobox_role(string.Concat(this.p5_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!this.stored_indigo)
			{
				this.goods_bank_array[0] = checked(this.goods_bank_array[0] + this.goods_p5_array[0]);
				this.goods_p5_array[0] = 0;
			}
			if (!this.stored_sugar)
			{
				this.goods_bank_array[1] = checked(this.goods_bank_array[1] + this.goods_p5_array[1]);
				this.goods_p5_array[1] = 0;
			}
			if (!this.stored_corn)
			{
				this.goods_bank_array[2] = checked(this.goods_bank_array[2] + this.goods_p5_array[2]);
				this.goods_p5_array[2] = 0;
			}
			if (!this.stored_tobacco)
			{
				this.goods_bank_array[3] = checked(this.goods_bank_array[3] + this.goods_p5_array[3]);
				this.goods_p5_array[3] = 0;
			}
			if (!this.stored_coffee)
			{
				this.goods_bank_array[4] = checked(this.goods_bank_array[4] + this.goods_p5_array[4]);
				this.goods_p5_array[4] = 0;
			}
			this.next_turn_button.Text = "End Captain Phase";
			this.next_turn_button.Enabled = true;
			this.next_turn_button.Visible = true;
		}

		private void pros1_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_prospector1();
			}
		}

		private void pros2_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_prospector2();
			}
		}

		public void reset_all_variables()
		{
		}

		public void reset_captain_ai_variables()
		{
			this.indigo_points_shipa = 0;
			this.indigo_points_shipb = 0;
			this.indigo_points_shipc = 0;
			this.indigo_points_wharf = 0;
			this.sugar_points_shipa = 0;
			this.sugar_points_shipb = 0;
			this.sugar_points_shipc = 0;
			this.sugar_points_wharf = 0;
			this.corn_points_shipa = 0;
			this.corn_points_shipb = 0;
			this.corn_points_shipc = 0;
			this.corn_points_wharf = 0;
			this.tobacco_points_shipa = 0;
			this.tobacco_points_shipb = 0;
			this.tobacco_points_shipc = 0;
			this.tobacco_points_wharf = 0;
			this.coffee_points_shipa = 0;
			this.coffee_points_shipb = 0;
			this.coffee_points_shipc = 0;
			this.coffee_points_wharf = 0;
		}

		public void reset_for_new_governor()
		{
			if (!this.role_settler_pic.Visible)
			{
				this.role_settler_pic.Visible = true;
			}
			else
			{
				this.bonus_roles_array[0] = checked(this.bonus_roles_array[0] + 1);
			}
			if (!this.role_mayor_pic.Visible)
			{
				this.role_mayor_pic.Visible = true;
			}
			else
			{
				this.bonus_roles_array[1] = checked(this.bonus_roles_array[1] + 1);
			}
			if (!this.role_builder_pic.Visible)
			{
				this.role_builder_pic.Visible = true;
			}
			else
			{
				this.bonus_roles_array[2] = checked(this.bonus_roles_array[2] + 1);
			}
			if (!this.role_craftsman_pic.Visible)
			{
				this.role_craftsman_pic.Visible = true;
			}
			else
			{
				this.bonus_roles_array[3] = checked(this.bonus_roles_array[3] + 1);
			}
			if (!this.role_trader_pic.Visible)
			{
				this.role_trader_pic.Visible = true;
			}
			else
			{
				this.bonus_roles_array[4] = checked(this.bonus_roles_array[4] + 1);
			}
			if (!this.role_captain_pic.Visible)
			{
				this.role_captain_pic.Visible = true;
			}
			else
			{
				this.bonus_roles_array[5] = checked(this.bonus_roles_array[5] + 1);
			}
			if (this.role_prospector1_pic.Visible)
			{
				this.bonus_roles_array[6] = checked(this.bonus_roles_array[6] + 1);
			}
			else if (this.number_of_players == 4 | this.number_of_players == 5)
			{
				this.role_prospector1_pic.Visible = true;
			}
			if (this.role_prospector2_pic.Visible)
			{
				this.bonus_roles_array[7] = checked(this.bonus_roles_array[7] + 1);
			}
			else if (this.number_of_players == 5)
			{
				this.role_prospector2_pic.Visible = true;
			}
			this.update_summary();
		}

		private void role_builder_pic_Click(object sender, EventArgs e)
		{
			this.choose_builder();
		}

		private void role_captain_pic_Click(object sender, EventArgs e)
		{
			this.choose_captain();
		}

		private void role_craftsman_pic_Click(object sender, EventArgs e)
		{
			this.choose_craftsman();
		}

		private void role_mayor_pic_Click(object sender, EventArgs e)
		{
			this.choose_mayor();
		}

		private void role_prospector1_pic_Click(object sender, EventArgs e)
		{
			this.choose_prospector1();
		}

		private void role_prospector2_pic_Click(object sender, EventArgs e)
		{
			this.choose_prospector2();
		}

		private void role_settler_pic_Click(object sender, EventArgs e)
		{
			this.choose_settler();
		}

		private void role_trader_pic_Click(object sender, EventArgs e)
		{
			this.choose_trader();
		}

		public void score_summary()
		{
			this.update_all_labels();
			if (this.number_of_players == 3)
			{
				this.score_form.groupbox4.Visible = false;
				this.score_form.groupbox5.Visible = false;
			}
			if (this.number_of_players == 4)
			{
				this.score_form.groupbox4.Visible = true;
				this.score_form.groupbox5.Visible = false;
			}
			if (this.number_of_players == 5)
			{
				this.score_form.groupbox4.Visible = true;
				this.score_form.groupbox5.Visible = true;
			}
			this.p1_tiebreaker = this.gold_p1;
			this.counter1 = 0;
			do
			{
				this.p1_tiebreaker = checked(this.p1_tiebreaker + this.goods_p1_array[this.counter1]);
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.score_form.p1_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p1 + this.vp_buildings_p1));
			this.score_form.p1_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p1);
			this.score_form.p1_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p1);
			this.score_form.p1_tie_breaker_label.Text =StringType.FromInteger(this.p1_tiebreaker);
			this.p2_tiebreaker = this.gold_p2;
			this.counter1 = 0;
			do
			{
				this.p2_tiebreaker = checked(this.p2_tiebreaker + this.goods_p2_array[this.counter1]);
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.score_form.p2_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p2 + this.vp_buildings_p2));
			this.score_form.p2_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p2);
			this.score_form.p2_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p2);
			this.score_form.p2_tie_breaker_label.Text =StringType.FromInteger(this.p2_tiebreaker);
			this.p3_tiebreaker = this.gold_p3;
			this.counter1 = 0;
			do
			{
				this.p3_tiebreaker = checked(this.p3_tiebreaker + this.goods_p3_array[this.counter1]);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.score_form.p3_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p3 + this.vp_buildings_p3));
			this.score_form.p3_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p3);
			this.score_form.p3_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p3);
			this.score_form.p3_tie_breaker_label.Text =StringType.FromInteger(this.p3_tiebreaker);
			this.p4_tiebreaker = this.gold_p4;
			this.counter1 = 0;
			do
			{
				this.p4_tiebreaker = checked(this.p4_tiebreaker + this.goods_p4_array[this.counter1]);
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.score_form.p4_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p4 + this.vp_buildings_p4));
			this.score_form.p4_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p4);
			this.score_form.p4_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p4);
			this.score_form.p4_tie_breaker_label.Text =StringType.FromInteger(this.p4_tiebreaker);
			this.p5_tiebreaker = this.gold_p5;
			this.counter1 = 0;
			do
			{
				this.p5_tiebreaker = checked(this.p5_tiebreaker + this.goods_p5_array[this.counter1]);
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 4);
			this.score_form.p5_vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p5 + this.vp_buildings_p5));
			this.score_form.p5_vp_chips_label.Text =StringType.FromInteger(this.vpchips_p5);
			this.score_form.p5_vp_buildings_label.Text =StringType.FromInteger(this.vp_buildings_p5);
			this.score_form.p5_tie_breaker_label.Text =StringType.FromInteger(this.p5_tiebreaker);
			this.score_form.ShowDialog();
		}

		private void settler_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_settler();
			}
		}

		public void ship_coffee()
		{
			this.update_ship_cargo();
			this.p1_num_shipped = 0;
			if (this.need_to_pick_ship)
			{
				if (this.p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (this.p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(this.goods_p1_array[4] > 0 & this.coffee_ship_available))
			{
				this.check_for_building(361);
				if (this.found_building && this.goods_p1_array[4] > 0 & (this.coffee_ship_full | !this.empty_ship_available) & !this.p1_used_wharf)
				{
					this.ready_to_ship_coffee = true;
					this.load_wharf();
				}
				if (!(this.goods_to_ship & this.empty_ship_available & this.goods_p1_array[4] > 0 & !this.coffee_ship_full))
				{
					if (this.need_to_pick_ship & !this.p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (this.p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					this.confirmbox_plant("Are you sure you want to ship your Coffee?", 50);
					if (this.confirmed)
					{
						this.formtitle("p1", "Captain's Phase - Choose a ship to load");
						this.make_player_goods_buttons_inactive();
						this.make_ship_pics_active();
						this.infobox_role("Choose the ship that you want to load with your Coffee", "role_captain");
						this.need_to_pick_ship = true;
						this.ready_to_ship_coffee = true;
					}
				}
			}
			else
			{
				this.confirmbox_plant("Are you sure you want to ship your Coffee?", 50);
				if (this.confirmed)
				{
					this.make_player_goods_buttons_inactive();
					if (this.coffee_shipnum == 1)
					{
						if (this.goods_p1_array[4] <= this.shipa_array[3])
						{
							this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p1_array[4]);
							this.p1_num_shipped = this.goods_p1_array[4];
							this.goods_p1_array[4] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[4] > this.shipa_array[3])
						{
							this.shipa_array[1] = this.shipa_array[0];
							this.goods_p1_array[4] = checked(this.goods_p1_array[4] - this.shipa_array[3]);
							this.p1_num_shipped = this.shipa_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.coffee_shipnum == 2)
					{
						if (this.goods_p1_array[4] <= this.shipb_array[3])
						{
							this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p1_array[4]);
							this.p1_num_shipped = this.goods_p1_array[4];
							this.goods_p1_array[4] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[4] > this.shipb_array[3])
						{
							this.shipb_array[1] = this.shipb_array[0];
							this.goods_p1_array[4] = checked(this.goods_p1_array[4] - this.shipb_array[3]);
							this.p1_num_shipped = this.shipb_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.coffee_shipnum == 3)
					{
						if (this.goods_p1_array[4] <= this.shipc_array[3])
						{
							this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p1_array[4]);
							this.p1_num_shipped = this.goods_p1_array[4];
							this.goods_p1_array[4] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[4] > this.shipc_array[3])
						{
							this.shipc_array[1] = this.shipc_array[0];
							this.goods_p1_array[4] = checked(this.goods_p1_array[4] - this.shipc_array[3]);
							this.p1_num_shipped = this.shipc_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					this.infobox_role(string.Concat("You shipped your Coffee for", Conversion.Str(this.p1_num_shipped), " Victory Points"), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void ship_coffee_via_shipa()
		{
			if (this.current_player == 2)
			{
				if (this.shipa_array[3] < this.goods_p2_array[4])
				{
					this.p2_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p2_array[4] = checked(this.goods_p2_array[4] - this.p2_num_shipped);
					this.shipa_array[2] = 5;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[4];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p2_array[4]);
					this.shipa_array[2] = 5;
					this.goods_p2_array[4] = 0;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Coffee for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipa_array[3] < this.goods_p3_array[4])
				{
					this.p3_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p3_array[4] = checked(this.goods_p3_array[4] - this.p3_num_shipped);
					this.shipa_array[2] = 5;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[4];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p3_array[4]);
					this.goods_p3_array[4] = 0;
					this.shipa_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Coffee for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipa_array[3] < this.goods_p4_array[4])
				{
					this.p4_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p4_array[4] = checked(this.goods_p4_array[4] - this.p4_num_shipped);
					this.shipa_array[2] = 5;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[4];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p4_array[4]);
					this.goods_p4_array[4] = 0;
					this.shipa_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Coffee for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipa_array[3] < this.goods_p5_array[4])
				{
					this.p5_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p5_array[4] = checked(this.goods_p5_array[4] - this.p5_num_shipped);
					this.shipa_array[2] = 5;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[4];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p5_array[4]);
					this.goods_p5_array[4] = 0;
					this.shipa_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Coffee for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_coffee_via_shipb()
		{
			if (this.current_player == 2)
			{
				if (this.shipb_array[3] < this.goods_p2_array[4])
				{
					this.p2_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p2_array[4] = checked(this.goods_p2_array[4] - this.p2_num_shipped);
					this.shipb_array[2] = 5;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[4];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p2_array[4]);
					this.shipb_array[2] = 5;
					this.goods_p2_array[4] = 0;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Coffee for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipb_array[3] < this.goods_p3_array[4])
				{
					this.p3_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p3_array[4] = checked(this.goods_p3_array[4] - this.p3_num_shipped);
					this.shipb_array[2] = 5;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[4];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p3_array[4]);
					this.goods_p3_array[4] = 0;
					this.shipb_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Coffee for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipb_array[3] < this.goods_p4_array[4])
				{
					this.p4_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p4_array[4] = checked(this.goods_p4_array[4] - this.p4_num_shipped);
					this.shipb_array[2] = 5;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[4];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p4_array[4]);
					this.goods_p4_array[4] = 0;
					this.shipb_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Coffee for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipb_array[3] < this.goods_p5_array[4])
				{
					this.p5_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p5_array[4] = checked(this.goods_p5_array[4] - this.p5_num_shipped);
					this.shipb_array[2] = 5;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[4];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p5_array[4]);
					this.goods_p5_array[4] = 0;
					this.shipb_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Coffee for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_coffee_via_shipc()
		{
			if (this.current_player == 2)
			{
				if (this.shipc_array[3] < this.goods_p2_array[4])
				{
					this.p2_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p2_array[4] = checked(this.goods_p2_array[4] - this.p2_num_shipped);
					this.shipc_array[2] = 5;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[4];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p2_array[4]);
					this.shipc_array[2] = 5;
					this.goods_p2_array[4] = 0;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Coffee for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipc_array[3] < this.goods_p3_array[4])
				{
					this.p3_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p3_array[4] = checked(this.goods_p3_array[4] - this.p3_num_shipped);
					this.shipc_array[2] = 5;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[4];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p3_array[4]);
					this.goods_p3_array[4] = 0;
					this.shipc_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Coffee for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipc_array[3] < this.goods_p4_array[4])
				{
					this.p4_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p4_array[4] = checked(this.goods_p4_array[4] - this.p4_num_shipped);
					this.shipc_array[2] = 5;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[4];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p4_array[4]);
					this.goods_p4_array[4] = 0;
					this.shipc_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Coffee for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipc_array[3] < this.goods_p5_array[4])
				{
					this.p5_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p5_array[4] = checked(this.goods_p5_array[4] - this.p5_num_shipped);
					this.shipc_array[2] = 5;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[4];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p5_array[4]);
					this.goods_p5_array[4] = 0;
					this.shipc_array[2] = 5;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Coffee for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_coffee_via_wharf()
		{
			if (this.current_player == 2)
			{
				this.p2_num_shipped = this.goods_p2_array[2];
				this.goods_p2_array[2] = 0;
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p2_name, "is using their manned Wharf to ship all their Coffee."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Coffee for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				this.p3_num_shipped = this.goods_p3_array[2];
				this.goods_p3_array[2] = 0;
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p3_name, "is using their manned Wharf to ship all their Coffee."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Coffee for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				this.p4_num_shipped = this.goods_p4_array[2];
				this.goods_p4_array[2] = 0;
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p4_name, "is using their manned Wharf to ship all their Coffee."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Coffee for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				this.p5_num_shipped = this.goods_p5_array[2];
				this.goods_p5_array[2] = 0;
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p5_name, "is using their manned Wharf to ship all their Coffee."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Coffee for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_corn()
		{
			this.update_ship_cargo();
			this.p1_num_shipped = 0;
			if (this.need_to_pick_ship)
			{
				if (this.p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (this.p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(this.goods_p1_array[2] > 0 & this.corn_ship_available))
			{
				this.check_for_building(361);
				if (this.found_building && this.goods_p1_array[2] > 0 & (this.corn_ship_full | !this.empty_ship_available) & !this.p1_used_wharf)
				{
					this.ready_to_ship_corn = true;
					this.load_wharf();
				}
				if (!(this.goods_to_ship & this.empty_ship_available & this.goods_p1_array[2] > 0 & !this.corn_ship_full))
				{
					if (this.need_to_pick_ship & !this.p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (this.p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					this.confirmbox_plant("Are you sure you want to ship your Corn?", 30);
					if (this.confirmed)
					{
						this.formtitle("p1", "Captain's Phase - Choose a ship to load");
						this.make_player_goods_buttons_inactive();
						this.make_ship_pics_active();
						this.infobox_role("Choose the ship that you want to load with your Corn", "role_captain");
						this.need_to_pick_ship = true;
						this.ready_to_ship_corn = true;
					}
				}
			}
			else
			{
				this.confirmbox_plant("Are you sure you want to ship your Corn?", 30);
				if (this.confirmed)
				{
					this.make_player_goods_buttons_inactive();
					if (this.corn_shipnum == 1)
					{
						if (this.goods_p1_array[2] <= this.shipa_array[3])
						{
							this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p1_array[2]);
							this.p1_num_shipped = this.goods_p1_array[2];
							this.goods_p1_array[2] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[2] > this.shipa_array[3])
						{
							this.shipa_array[1] = this.shipa_array[0];
							this.goods_p1_array[2] = checked(this.goods_p1_array[2] - this.shipa_array[3]);
							this.p1_num_shipped = this.shipa_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.corn_shipnum == 2)
					{
						if (this.goods_p1_array[2] <= this.shipb_array[3])
						{
							this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p1_array[2]);
							this.p1_num_shipped = this.goods_p1_array[2];
							this.goods_p1_array[2] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[2] > this.shipb_array[3])
						{
							this.shipb_array[1] = this.shipb_array[0];
							this.goods_p1_array[2] = checked(this.goods_p1_array[2] - this.shipb_array[3]);
							this.p1_num_shipped = this.shipb_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.corn_shipnum == 3)
					{
						if (this.goods_p1_array[2] <= this.shipc_array[3])
						{
							this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p1_array[2]);
							this.p1_num_shipped = this.goods_p1_array[2];
							this.goods_p1_array[2] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[2] > this.shipc_array[3])
						{
							this.shipc_array[1] = this.shipc_array[0];
							this.goods_p1_array[2] = checked(this.goods_p1_array[2] - this.shipc_array[3]);
							this.p1_num_shipped = this.shipc_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					this.infobox_role(string.Concat("You shipped your Corn for", Conversion.Str(this.p1_num_shipped), " Victory Points"), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void ship_corn_via_shipa()
		{
			if (this.current_player == 2)
			{
				if (this.shipa_array[3] < this.goods_p2_array[2])
				{
					this.p2_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p2_array[2] = checked(this.goods_p2_array[2] - this.p2_num_shipped);
					this.shipa_array[2] = 3;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[2];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p2_array[2]);
					this.goods_p2_array[2] = 0;
					this.shipa_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Corn for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipa_array[3] < this.goods_p3_array[2])
				{
					this.p3_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p3_array[2] = checked(this.goods_p3_array[2] - this.p3_num_shipped);
					this.shipa_array[2] = 3;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[2];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p3_array[2]);
					this.goods_p3_array[2] = 0;
					this.shipa_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Corn for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipa_array[3] < this.goods_p4_array[2])
				{
					this.p4_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p4_array[2] = checked(this.goods_p4_array[2] - this.p4_num_shipped);
					this.shipa_array[2] = 3;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[2];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p4_array[2]);
					this.goods_p4_array[2] = 0;
					this.shipa_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Corn for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipa_array[3] < this.goods_p5_array[2])
				{
					this.p5_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p5_array[2] = checked(this.goods_p5_array[2] - this.p5_num_shipped);
					this.shipa_array[2] = 3;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[2];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p5_array[2]);
					this.goods_p5_array[2] = 0;
					this.shipa_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Corn for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_corn_via_shipb()
		{
			if (this.current_player == 2)
			{
				if (this.shipb_array[3] < this.goods_p2_array[2])
				{
					this.p2_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p2_array[2] = checked(this.goods_p2_array[2] - this.p2_num_shipped);
					this.shipb_array[2] = 3;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[2];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p2_array[2]);
					this.goods_p2_array[2] = 0;
					this.shipb_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Corn for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipb_array[3] < this.goods_p3_array[2])
				{
					this.p3_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p3_array[2] = checked(this.goods_p3_array[2] - this.p3_num_shipped);
					this.shipb_array[2] = 3;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[2];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p3_array[2]);
					this.goods_p3_array[2] = 0;
					this.shipb_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Corn for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipb_array[3] < this.goods_p4_array[2])
				{
					this.p4_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p4_array[2] = checked(this.goods_p4_array[2] - this.p4_num_shipped);
					this.shipb_array[2] = 3;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[2];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p4_array[2]);
					this.goods_p4_array[2] = 0;
					this.shipb_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Corn for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipb_array[3] < this.goods_p5_array[2])
				{
					this.p5_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p5_array[2] = checked(this.goods_p5_array[2] - this.p5_num_shipped);
					this.shipb_array[2] = 3;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[2];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p5_array[2]);
					this.goods_p5_array[2] = 0;
					this.shipb_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Corn for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_corn_via_shipc()
		{
			if (this.current_player == 2)
			{
				if (this.shipc_array[3] < this.goods_p2_array[2])
				{
					this.p2_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p2_array[2] = checked(this.goods_p2_array[2] - this.p2_num_shipped);
					this.shipc_array[2] = 3;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[2];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p2_array[2]);
					this.goods_p2_array[2] = 0;
					this.shipc_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Corn for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipc_array[3] < this.goods_p3_array[2])
				{
					this.p3_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p3_array[2] = checked(this.goods_p3_array[2] - this.p3_num_shipped);
					this.shipc_array[2] = 3;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[2];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p3_array[2]);
					this.goods_p3_array[2] = 0;
					this.shipc_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Corn for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipc_array[3] < this.goods_p4_array[2])
				{
					this.p4_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p4_array[2] = checked(this.goods_p4_array[2] - this.p4_num_shipped);
					this.shipc_array[2] = 3;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[2];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p4_array[2]);
					this.goods_p4_array[2] = 0;
					this.shipc_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Corn for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipc_array[3] < this.goods_p5_array[2])
				{
					this.p5_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p5_array[2] = checked(this.goods_p5_array[2] - this.p5_num_shipped);
					this.shipc_array[2] = 3;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[2];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p5_array[2]);
					this.goods_p5_array[2] = 0;
					this.shipc_array[2] = 3;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Corn for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_corn_via_wharf()
		{
			if (this.current_player == 2)
			{
				this.p2_num_shipped = this.goods_p2_array[2];
				this.goods_p2_array[2] = 0;
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p2_name, "is using their manned Wharf to ship all their Corn."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Corn for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				this.p3_num_shipped = this.goods_p3_array[2];
				this.goods_p3_array[2] = 0;
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p3_name, "is using their manned Wharf to ship all their Corn."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Corn for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				this.p4_num_shipped = this.goods_p4_array[2];
				this.goods_p4_array[2] = 0;
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p4_name, "is using their manned Wharf to ship all their Corn."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Corn for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				this.p5_num_shipped = this.goods_p5_array[2];
				this.goods_p5_array[2] = 0;
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p5_name, "is using their manned Wharf to ship all their Corn."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Corn for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_indigo()
		{
			this.update_ship_cargo();
			this.p1_num_shipped = 0;
			if (this.need_to_pick_ship)
			{
				if (this.p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (this.p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(this.goods_p1_array[0] > 0 & this.indigo_ship_available))
			{
				this.check_for_building(361);
				if (this.found_building && this.goods_p1_array[0] > 0 & (this.indigo_ship_full | !this.empty_ship_available) & !this.p1_used_wharf)
				{
					this.ready_to_ship_indigo = true;
					this.load_wharf();
				}
				if (!(this.goods_to_ship & this.empty_ship_available & this.goods_p1_array[0] > 0 & !this.indigo_ship_full))
				{
					if (this.need_to_pick_ship & !this.p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (this.p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					this.confirmbox_plant("Are you sure you want to ship your Indigo?", 10);
					if (this.confirmed)
					{
						this.formtitle("p1", "Captain's Phase - Choose a ship to load");
						this.make_player_goods_buttons_inactive();
						this.make_ship_pics_active();
						this.infobox_role("Choose the ship that you want to load with your Indigo", "role_captain");
						this.need_to_pick_ship = true;
						this.ready_to_ship_indigo = true;
					}
				}
			}
			else
			{
				this.confirmbox_plant("Are you sure you want to ship your Indigo?", 10);
				if (this.confirmed)
				{
					this.make_player_goods_buttons_inactive();
					if (this.indigo_shipnum == 1)
					{
						if (this.goods_p1_array[0] <= this.shipa_array[3])
						{
							this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p1_array[0]);
							this.p1_num_shipped = this.goods_p1_array[0];
							this.goods_p1_array[0] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[0] > this.shipa_array[3])
						{
							this.shipa_array[1] = this.shipa_array[0];
							this.goods_p1_array[0] = checked(this.goods_p1_array[0] - this.shipa_array[3]);
							this.p1_num_shipped = this.shipa_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.indigo_shipnum == 2)
					{
						if (this.goods_p1_array[0] <= this.shipb_array[3])
						{
							this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p1_array[0]);
							this.p1_num_shipped = this.goods_p1_array[0];
							this.goods_p1_array[0] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[0] > this.shipb_array[3])
						{
							this.shipb_array[1] = this.shipb_array[0];
							this.goods_p1_array[0] = checked(this.goods_p1_array[0] - this.shipb_array[3]);
							this.p1_num_shipped = this.shipb_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.indigo_shipnum == 3)
					{
						if (this.goods_p1_array[0] <= this.shipc_array[3])
						{
							this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p1_array[0]);
							this.p1_num_shipped = this.goods_p1_array[0];
							this.goods_p1_array[0] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[0] > this.shipc_array[3])
						{
							this.shipc_array[1] = this.shipc_array[0];
							this.goods_p1_array[0] = checked(this.goods_p1_array[0] - this.shipc_array[3]);
							this.p1_num_shipped = this.shipc_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					this.infobox_role(string.Concat("You shipped your Indigo for", Conversion.Str(this.p1_num_shipped), " Victory Points"), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void ship_indigo_via_shipa()
		{
			if (this.current_player == 2)
			{
				if (this.shipa_array[3] < this.goods_p2_array[0])
				{
					this.p2_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p2_array[0] = checked(this.goods_p2_array[0] - this.p2_num_shipped);
					this.shipa_array[2] = 1;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[0];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p2_array[0]);
					this.goods_p2_array[0] = 0;
					this.shipa_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their indigo for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipa_array[3] < this.goods_p3_array[0])
				{
					this.p3_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p3_array[0] = checked(this.goods_p3_array[0] - this.p3_num_shipped);
					this.shipa_array[2] = 1;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[0];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p3_array[0]);
					this.goods_p3_array[0] = 0;
					this.shipa_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their indigo for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipa_array[3] < this.goods_p4_array[0])
				{
					this.p4_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p4_array[0] = checked(this.goods_p4_array[0] - this.p4_num_shipped);
					this.shipa_array[2] = 1;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[0];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p4_array[0]);
					this.goods_p4_array[0] = 0;
					this.shipa_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their indigo for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipa_array[3] < this.goods_p5_array[0])
				{
					this.p5_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p5_array[0] = checked(this.goods_p5_array[0] - this.p5_num_shipped);
					this.shipa_array[2] = 1;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[0];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p5_array[0]);
					this.goods_p5_array[0] = 0;
					this.shipa_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their indigo for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_indigo_via_shipb()
		{
			if (this.current_player == 2)
			{
				if (this.shipb_array[3] < this.goods_p2_array[0])
				{
					this.p2_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p2_array[0] = checked(this.goods_p2_array[0] - this.p2_num_shipped);
					this.shipb_array[2] = 1;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[0];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p2_array[0]);
					this.goods_p2_array[0] = 0;
					this.shipb_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their indigo for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipb_array[3] < this.goods_p3_array[0])
				{
					this.p3_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p3_array[0] = checked(this.goods_p3_array[0] - this.p3_num_shipped);
					this.shipb_array[2] = 1;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[0];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p3_array[0]);
					this.goods_p3_array[0] = 0;
					this.shipb_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their indigo for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipb_array[3] < this.goods_p4_array[0])
				{
					this.p4_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p4_array[0] = checked(this.goods_p4_array[0] - this.p4_num_shipped);
					this.shipb_array[2] = 1;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[0];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p4_array[0]);
					this.goods_p4_array[0] = 0;
					this.shipb_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their indigo for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipb_array[3] < this.goods_p5_array[0])
				{
					this.p5_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p5_array[0] = checked(this.goods_p5_array[0] - this.p5_num_shipped);
					this.shipb_array[2] = 1;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[0];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p5_array[0]);
					this.goods_p5_array[0] = 0;
					this.shipb_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their indigo for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_indigo_via_shipc()
		{
			if (this.current_player == 2)
			{
				if (this.shipc_array[3] < this.goods_p2_array[0])
				{
					this.p2_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p2_array[0] = checked(this.goods_p2_array[0] - this.p2_num_shipped);
					this.shipc_array[2] = 1;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[0];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p2_array[0]);
					this.goods_p2_array[0] = 0;
					this.shipc_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their indigo for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipc_array[3] < this.goods_p3_array[0])
				{
					this.p3_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p3_array[0] = checked(this.goods_p3_array[0] - this.p3_num_shipped);
					this.shipc_array[2] = 1;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[0];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p3_array[0]);
					this.goods_p3_array[0] = 0;
					this.shipc_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their indigo for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipc_array[3] < this.goods_p4_array[0])
				{
					this.p4_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p4_array[0] = checked(this.goods_p4_array[0] - this.p4_num_shipped);
					this.shipc_array[2] = 1;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[0];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p4_array[0]);
					this.goods_p4_array[0] = 0;
					this.shipc_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their indigo for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipc_array[3] < this.goods_p5_array[0])
				{
					this.p5_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p5_array[0] = checked(this.goods_p5_array[0] - this.p5_num_shipped);
					this.shipc_array[2] = 1;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[0];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p5_array[0]);
					this.goods_p5_array[0] = 0;
					this.shipc_array[2] = 1;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their indigo for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_Indigo_via_wharf()
		{
			if (this.current_player == 2)
			{
				this.p2_num_shipped = this.goods_p2_array[2];
				this.goods_p2_array[2] = 0;
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p2_name, "is using their manned Wharf to ship all their Indigo."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Indigo for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				this.p3_num_shipped = this.goods_p3_array[2];
				this.goods_p3_array[2] = 0;
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p3_name, "is using their manned Wharf to ship all their Indigo."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Indigo for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				this.p4_num_shipped = this.goods_p4_array[2];
				this.goods_p4_array[2] = 0;
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p4_name, "is using their manned Wharf to ship all their Indigo."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Indigo for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				this.p5_num_shipped = this.goods_p5_array[2];
				this.goods_p5_array[2] = 0;
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p5_name, "is using their manned Wharf to ship all their Indigo."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Indigo for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_sugar()
		{
			this.update_ship_cargo();
			this.p1_num_shipped = 0;
			if (this.need_to_pick_ship)
			{
				if (this.p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (this.p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(this.goods_p1_array[1] > 0 & this.sugar_ship_available))
			{
				this.check_for_building(361);
				if (this.found_building && this.goods_p1_array[1] > 0 & (this.sugar_ship_full | !this.empty_ship_available) & !this.p1_used_wharf)
				{
					this.ready_to_ship_sugar = true;
					this.load_wharf();
				}
				if (!(this.goods_to_ship & this.empty_ship_available & this.goods_p1_array[1] > 0 & !this.sugar_ship_full))
				{
					if (this.need_to_pick_ship & !this.p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (this.p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					this.confirmbox_plant("Are you sure you want to ship your Sugar?", 20);
					if (this.confirmed)
					{
						this.formtitle("p1", "Captain's Phase - Choose a ship to load");
						this.make_player_goods_buttons_inactive();
						this.make_ship_pics_active();
						this.infobox_role("Choose the ship that you want to load with your Sugar", "role_captain");
						this.need_to_pick_ship = true;
						this.ready_to_ship_sugar = true;
					}
				}
			}
			else
			{
				this.confirmbox_plant("Are you sure you want to ship your Sugar", 20);
				if (this.confirmed)
				{
					this.make_player_goods_buttons_inactive();
					if (this.sugar_shipnum == 1)
					{
						if (this.goods_p1_array[1] <= this.shipa_array[3])
						{
							this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p1_array[1]);
							this.p1_num_shipped = this.goods_p1_array[1];
							this.goods_p1_array[1] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[1] > this.shipa_array[3])
						{
							this.shipa_array[1] = this.shipa_array[0];
							this.goods_p1_array[1] = checked(this.goods_p1_array[1] - this.shipa_array[3]);
							this.p1_num_shipped = this.shipa_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.sugar_shipnum == 2)
					{
						if (this.goods_p1_array[1] <= this.shipb_array[3])
						{
							this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p1_array[1]);
							this.p1_num_shipped = this.goods_p1_array[1];
							this.goods_p1_array[1] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[1] > this.shipb_array[3])
						{
							this.shipb_array[1] = this.shipb_array[0];
							this.goods_p1_array[1] = checked(this.goods_p1_array[1] - this.shipb_array[3]);
							this.p1_num_shipped = this.shipb_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.sugar_shipnum == 3)
					{
						if (this.goods_p1_array[1] <= this.shipc_array[3])
						{
							this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p1_array[1]);
							this.p1_num_shipped = this.goods_p1_array[1];
							this.goods_p1_array[1] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[1] > this.shipc_array[3])
						{
							this.shipc_array[1] = this.shipc_array[0];
							this.goods_p1_array[1] = checked(this.goods_p1_array[1] - this.shipc_array[3]);
							this.p1_num_shipped = this.shipc_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					this.infobox_role(string.Concat("You shipped your Sugar for", Conversion.Str(this.p1_num_shipped), " Victory Points"), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void ship_sugar_via_shipa()
		{
			if (this.current_player == 2)
			{
				if (this.shipa_array[3] < this.goods_p2_array[1])
				{
					this.p2_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p2_array[1] = checked(this.goods_p2_array[1] - this.p2_num_shipped);
					this.shipa_array[2] = 2;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[1];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p2_array[1]);
					this.goods_p2_array[1] = 0;
					this.shipa_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their sugar for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipa_array[3] < this.goods_p3_array[1])
				{
					this.p3_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p3_array[1] = checked(this.goods_p3_array[1] - this.p3_num_shipped);
					this.shipa_array[2] = 2;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[1];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p3_array[1]);
					this.goods_p3_array[1] = 0;
					this.shipa_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their sugar for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipa_array[3] < this.goods_p4_array[1])
				{
					this.p4_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p4_array[1] = checked(this.goods_p4_array[1] - this.p4_num_shipped);
					this.shipa_array[2] = 2;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[1];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p4_array[1]);
					this.goods_p4_array[1] = 0;
					this.shipa_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their sugar for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipa_array[3] < this.goods_p5_array[1])
				{
					this.p5_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p5_array[1] = checked(this.goods_p5_array[1] - this.p5_num_shipped);
					this.shipa_array[2] = 2;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[1];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p5_array[1]);
					this.goods_p5_array[1] = 0;
					this.shipa_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their sugar for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_sugar_via_shipb()
		{
			if (this.current_player == 2)
			{
				if (this.shipb_array[3] < this.goods_p2_array[1])
				{
					this.p2_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p2_array[1] = checked(this.goods_p2_array[1] - this.p2_num_shipped);
					this.shipb_array[2] = 2;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[1];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p2_array[1]);
					this.goods_p2_array[1] = 0;
					this.shipb_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their sugar for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipb_array[3] < this.goods_p3_array[1])
				{
					this.p3_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p3_array[1] = checked(this.goods_p3_array[1] - this.p3_num_shipped);
					this.shipb_array[2] = 2;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[1];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p3_array[1]);
					this.goods_p3_array[1] = 0;
					this.shipb_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their sugar for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipb_array[3] < this.goods_p4_array[1])
				{
					this.p4_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p4_array[1] = checked(this.goods_p4_array[1] - this.p4_num_shipped);
					this.shipb_array[2] = 2;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[1];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p4_array[1]);
					this.goods_p4_array[1] = 0;
					this.shipb_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their sugar for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipb_array[3] < this.goods_p5_array[1])
				{
					this.p5_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p5_array[1] = checked(this.goods_p5_array[1] - this.p5_num_shipped);
					this.shipb_array[2] = 2;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[1];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p5_array[1]);
					this.goods_p5_array[1] = 0;
					this.shipb_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their sugar for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_sugar_via_shipc()
		{
			if (this.current_player == 2)
			{
				if (this.shipc_array[3] < this.goods_p2_array[1])
				{
					this.p2_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p2_array[1] = checked(this.goods_p2_array[1] - this.p2_num_shipped);
					this.shipc_array[2] = 2;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[1];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p2_array[1]);
					this.goods_p2_array[1] = 0;
					this.shipc_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their sugar for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipc_array[3] < this.goods_p3_array[1])
				{
					this.p3_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p3_array[1] = checked(this.goods_p3_array[1] - this.p3_num_shipped);
					this.shipc_array[2] = 2;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[1];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p3_array[1]);
					this.goods_p3_array[1] = 0;
					this.shipc_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their sugar for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipc_array[3] < this.goods_p4_array[1])
				{
					this.p4_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p4_array[1] = checked(this.goods_p4_array[1] - this.p4_num_shipped);
					this.shipc_array[2] = 2;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[1];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p4_array[1]);
					this.goods_p4_array[1] = 0;
					this.shipc_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their sugar for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipc_array[3] < this.goods_p5_array[1])
				{
					this.p5_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p5_array[1] = checked(this.goods_p5_array[1] - this.p5_num_shipped);
					this.shipc_array[2] = 2;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[1];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p5_array[1]);
					this.goods_p5_array[1] = 0;
					this.shipc_array[2] = 2;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their sugar for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_sugar_via_wharf()
		{
			if (this.current_player == 2)
			{
				this.p2_num_shipped = this.goods_p2_array[2];
				this.goods_p2_array[2] = 0;
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p2_name, "is using their manned Wharf to ship all their Sugar."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Sugar for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				this.p3_num_shipped = this.goods_p3_array[2];
				this.goods_p3_array[2] = 0;
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p3_name, "is using their manned Wharf to ship all their Sugar."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Sugar for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				this.p4_num_shipped = this.goods_p4_array[2];
				this.goods_p4_array[2] = 0;
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p4_name, "is using their manned Wharf to ship all their Sugar."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Sugar for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				this.p5_num_shipped = this.goods_p5_array[2];
				this.goods_p5_array[2] = 0;
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p5_name, "is using their manned Wharf to ship all their Sugar."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Sugar for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_tobacco()
		{
			this.update_ship_cargo();
			this.p1_num_shipped = 0;
			if (this.need_to_pick_ship)
			{
				if (this.p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (this.p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(this.goods_p1_array[3] > 0 & this.tobacco_ship_available))
			{
				this.check_for_building(361);
				if (this.found_building && this.goods_p1_array[3] > 0 & (this.tobacco_ship_full | !this.empty_ship_available) & !this.p1_used_wharf)
				{
					this.ready_to_ship_tobacco = true;
					this.load_wharf();
				}
				if (!(this.goods_to_ship & this.empty_ship_available & this.goods_p1_array[3] > 0 & !this.tobacco_ship_full))
				{
					if (this.need_to_pick_ship & !this.p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (this.p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					this.confirmbox_plant("Are you sure you want to ship your Tobacco?", 40);
					if (this.confirmed)
					{
						this.formtitle("p1", "Captain's Phase - Choose a ship to load");
						this.make_player_goods_buttons_inactive();
						this.make_ship_pics_active();
						this.infobox_role("Choose the ship that you want to load with your Tobacco", "role_captain");
						this.need_to_pick_ship = true;
						this.ready_to_ship_tobacco = true;
					}
				}
			}
			else
			{
				this.confirmbox_plant("Are you sure you want to ship your Tobacco?", 40);
				if (this.confirmed)
				{
					this.make_player_goods_buttons_inactive();
					if (this.tobacco_shipnum == 1)
					{
						if (this.goods_p1_array[3] <= this.shipa_array[3])
						{
							this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p1_array[3]);
							this.p1_num_shipped = this.goods_p1_array[3];
							this.goods_p1_array[3] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[3] > this.shipa_array[3])
						{
							this.shipa_array[1] = this.shipa_array[0];
							this.goods_p1_array[3] = checked(this.goods_p1_array[3] - this.shipa_array[3]);
							this.p1_num_shipped = this.shipa_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.tobacco_shipnum == 2)
					{
						if (this.goods_p1_array[3] <= this.shipb_array[3])
						{
							this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p1_array[3]);
							this.p1_num_shipped = this.goods_p1_array[3];
							this.goods_p1_array[3] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[3] > this.shipb_array[3])
						{
							this.shipb_array[1] = this.shipb_array[0];
							this.goods_p1_array[3] = checked(this.goods_p1_array[3] - this.shipb_array[3]);
							this.p1_num_shipped = this.shipb_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.tobacco_shipnum == 3)
					{
						if (this.goods_p1_array[3] <= this.shipc_array[3])
						{
							this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p1_array[3]);
							this.p1_num_shipped = this.goods_p1_array[3];
							this.goods_p1_array[3] = 0;
							this.end_shipping_turn_p1();
						}
						if (this.goods_p1_array[3] > this.shipc_array[3])
						{
							this.shipc_array[1] = this.shipc_array[0];
							this.goods_p1_array[3] = checked(this.goods_p1_array[3] - this.shipc_array[3]);
							this.p1_num_shipped = this.shipc_array[3];
							this.end_shipping_turn_p1();
						}
					}
					if (this.current_role_chooser == 1 && !this.captain_bonus_taken)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.captain_bonus_taken = true;
					}
					this.check_for_building(351);
					if (this.found_building)
					{
						this.p1_num_shipped = checked(this.p1_num_shipped + 1);
						this.infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					this.vpchips_p1 = checked(this.vpchips_p1 + this.p1_num_shipped);
					this.update_vp_bank_num_via_shipping();
					this.make_player_goods_buttons_inactive();
					this.make_ship_pics_inactive();
					this.infobox_role(string.Concat("You shipped your Tobacco for", Conversion.Str(this.p1_num_shipped), " Victory Points"), "role_captain");
					this.update_all_labels();
				}
			}
		}

		public void ship_tobacco_via_shipa()
		{
			if (this.current_player == 2)
			{
				if (this.shipa_array[3] < this.goods_p2_array[3])
				{
					this.p2_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p2_array[3] = checked(this.goods_p2_array[3] - this.p2_num_shipped);
					this.shipa_array[2] = 4;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[3];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p2_array[3]);
					this.shipa_array[2] = 4;
					this.goods_p2_array[3] = 0;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their tobacco for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipa_array[3] < this.goods_p3_array[3])
				{
					this.p3_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p3_array[3] = checked(this.goods_p3_array[3] - this.p3_num_shipped);
					this.shipa_array[2] = 4;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[3];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p3_array[3]);
					this.goods_p3_array[3] = 0;
					this.shipa_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their tobacco for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipa_array[3] < this.goods_p4_array[3])
				{
					this.p4_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p4_array[3] = checked(this.goods_p4_array[3] - this.p4_num_shipped);
					this.shipa_array[2] = 4;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[3];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p4_array[3]);
					this.goods_p4_array[3] = 0;
					this.shipa_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their tobacco for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipa_array[3] < this.goods_p5_array[3])
				{
					this.p5_num_shipped = this.shipa_array[3];
					this.shipa_array[1] = this.shipa_array[0];
					this.goods_p5_array[3] = checked(this.goods_p5_array[3] - this.p5_num_shipped);
					this.shipa_array[2] = 4;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[3];
					this.shipa_array[1] = checked(this.shipa_array[1] + this.goods_p5_array[3]);
					this.goods_p5_array[3] = 0;
					this.shipa_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their tobacco for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_tobacco_via_shipb()
		{
			if (this.current_player == 2)
			{
				if (this.shipb_array[3] < this.goods_p2_array[3])
				{
					this.p2_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p2_array[3] = checked(this.goods_p2_array[3] - this.p2_num_shipped);
					this.shipb_array[2] = 4;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[3];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p2_array[3]);
					this.shipb_array[2] = 4;
					this.goods_p2_array[3] = 0;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their tobacco for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipb_array[3] < this.goods_p3_array[3])
				{
					this.p3_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p3_array[3] = checked(this.goods_p3_array[3] - this.p3_num_shipped);
					this.shipb_array[2] = 4;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[3];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p3_array[3]);
					this.goods_p3_array[3] = 0;
					this.shipb_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their tobacco for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipb_array[3] < this.goods_p4_array[3])
				{
					this.p4_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p4_array[3] = checked(this.goods_p4_array[3] - this.p4_num_shipped);
					this.shipb_array[2] = 4;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[3];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p4_array[3]);
					this.goods_p4_array[3] = 0;
					this.shipb_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their tobacco for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipb_array[3] < this.goods_p5_array[3])
				{
					this.p5_num_shipped = this.shipb_array[3];
					this.shipb_array[1] = this.shipb_array[0];
					this.goods_p5_array[3] = checked(this.goods_p5_array[3] - this.p5_num_shipped);
					this.shipb_array[2] = 4;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[3];
					this.shipb_array[1] = checked(this.shipb_array[1] + this.goods_p5_array[3]);
					this.goods_p5_array[3] = 0;
					this.shipb_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their tobacco for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_tobacco_via_shipc()
		{
			if (this.current_player == 2)
			{
				if (this.shipc_array[3] < this.goods_p2_array[3])
				{
					this.p2_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p2_array[3] = checked(this.goods_p2_array[3] - this.p2_num_shipped);
					this.shipc_array[2] = 4;
				}
				else
				{
					this.p2_num_shipped = this.goods_p2_array[3];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p2_array[3]);
					this.shipc_array[2] = 4;
					this.goods_p2_array[3] = 0;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their tobacco for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				if (this.shipc_array[3] < this.goods_p3_array[3])
				{
					this.p3_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p3_array[3] = checked(this.goods_p3_array[3] - this.p3_num_shipped);
					this.shipc_array[2] = 4;
				}
				else
				{
					this.p3_num_shipped = this.goods_p3_array[3];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p3_array[3]);
					this.goods_p3_array[3] = 0;
					this.shipc_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their tobacco for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				if (this.shipc_array[3] < this.goods_p4_array[3])
				{
					this.p4_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p4_array[3] = checked(this.goods_p4_array[3] - this.p4_num_shipped);
					this.shipc_array[2] = 4;
				}
				else
				{
					this.p4_num_shipped = this.goods_p4_array[3];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p4_array[3]);
					this.goods_p4_array[3] = 0;
					this.shipc_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their tobacco for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				if (this.shipc_array[3] < this.goods_p5_array[3])
				{
					this.p5_num_shipped = this.shipc_array[3];
					this.shipc_array[1] = this.shipc_array[0];
					this.goods_p5_array[3] = checked(this.goods_p5_array[3] - this.p5_num_shipped);
					this.shipc_array[2] = 4;
				}
				else
				{
					this.p5_num_shipped = this.goods_p5_array[3];
					this.shipc_array[1] = checked(this.shipc_array[1] + this.goods_p5_array[3]);
					this.goods_p5_array[3] = 0;
					this.shipc_array[2] = 4;
				}
				this.update_ship_cargo();
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their tobacco for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		public void ship_tobacco_via_wharf()
		{
			if (this.current_player == 2)
			{
				this.p2_num_shipped = this.goods_p2_array[2];
				this.goods_p2_array[2] = 0;
				if (this.current_role_chooser == 2 & !this.captain_bonus_taken)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p2_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p2_num_shipped = checked(this.p2_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p2 = checked(this.vpchips_p2 + this.p2_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p2_name, " shipped their Tobacco for", Conversion.Str(this.p2_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 3)
			{
				this.p3_num_shipped = this.goods_p3_array[2];
				this.goods_p3_array[2] = 0;
				if (this.current_role_chooser == 3 & !this.captain_bonus_taken)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p3_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p3_num_shipped = checked(this.p3_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p3 = checked(this.vpchips_p3 + this.p3_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p3_name, " shipped their Tobacco for", Conversion.Str(this.p3_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 4)
			{
				this.p4_num_shipped = this.goods_p4_array[2];
				this.goods_p4_array[2] = 0;
				if (this.current_role_chooser == 4 & !this.captain_bonus_taken)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p4_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p4_num_shipped = checked(this.p4_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p4 = checked(this.vpchips_p4 + this.p4_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p4_name, " shipped their Tobacco for", Conversion.Str(this.p4_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
			if (this.current_player == 5)
			{
				this.p5_num_shipped = this.goods_p5_array[2];
				this.goods_p5_array[2] = 0;
				if (this.current_role_chooser == 5 & !this.captain_bonus_taken)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.captain_bonus_taken = true;
				}
				this.infobox_building1(string.Concat(this.p5_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				this.check_for_building(351);
				if (this.found_building)
				{
					this.p5_num_shipped = checked(this.p5_num_shipped + 1);
					this.infobox_building1(string.Concat(this.p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				this.vpchips_p5 = checked(this.vpchips_p5 + this.p5_num_shipped);
				this.update_vp_bank_num_via_shipping();
				this.infobox_role(string.Concat(this.p5_name, " shipped their Tobacco for", Conversion.Str(this.p5_num_shipped), " Victory Point(s)"), "role_captain");
				this.update_all_labels();
			}
		}

		private void shipa_pic_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipa_slot1_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipa_slot2_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipa_slot3_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipa_slot4_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipa_slot5_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipa_slot6_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipa();
			}
		}

		private void shipb_pic_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot1_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot2_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot3_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot4_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot5_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot6_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipb_slot7_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipb();
			}
		}

		private void shipc_pic_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot1_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot2_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot3_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot4_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot5_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot6_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot7_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		private void shipc_slot8_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_shipc();
			}
		}

		public void shuffle_plantation_tiles()
		{
			this.counter1 = 0;
			while (this.counter1 != 48)
			{
				this.generate_random1(0, 49);
				if (this.random1 == this.counter1)
				{
					this.random1 = checked(this.random1 + 1);
				}
				this.tempstring = StringType.FromInteger(this.plantations_tilebag_array[this.random1]);
				this.plantations_tilebag_array[this.random1] = this.plantations_tilebag_array[this.counter1];
				this.plantations_tilebag_array[this.counter1] = IntegerType.FromString(this.tempstring);
				this.counter1 = checked(this.counter1 + 1);
			}
		}

		private void start_game_button_Click(object sender, EventArgs e)
		{
			this.start_game_button.Visible = false;
			this.start_game_button.Enabled=false;
			this.next_turn_routine();
			this.starting_round_next_turn_routine();
		}

		public void start_new_game()
		{
			if (!this.game_started)
			{
				this.reset_all_variables();
				this.determine_setup_parameters();
				this.shuffle_plantation_tiles();
				this.draw_plantation_tiles();
				this.debug_setup_variables();
				this.update_all_labels();
				this.game_started = true;
				if (this.number_of_players == 3)
				{
					this.MenuItem4.Enabled = true;
					this.MenuItem5.Enabled = true;
				}
				if (this.number_of_players == 4)
				{
					this.MenuItem4.Enabled = true;
					this.MenuItem5.Enabled = true;
					this.MenuItem6.Enabled = true;
				}
				if (this.number_of_players == 5)
				{
					this.MenuItem4.Enabled = true;
					this.MenuItem5.Enabled = true;
					this.MenuItem6.Enabled = true;
					this.MenuItem7.Enabled = true;
				}
				this.MenuItem8.Enabled = true;
				this.tempinteger = this.dialog_box_OK_timer;
				this.dialog_box_OK_timer = 5;
				this.infobox_nopic(String.Format("This will be a {0} player game. {1} you are seat number {2}. Feel free to place all the windows where you would like them, then click Start Game when you are ready.", this.number_of_players, this.p1_name, this.seat_num));
				this.dialog_box_OK_timer = this.tempinteger;
				this.sw.WriteLine("************************************************************************");
				this.sw.WriteLine("New game started: {0:dd/MM/yyyy}", DateTime.Now);
				this.sw.WriteLine("   ");
				this.sw.WriteLine("This will be a {0} player game. {1} you are seat number {2}.", this.number_of_players, this.p1_name, this.seat_num);
				this.sw.WriteLine("   ");
				if (this.number_of_players == 3)
				{
					this.player2_form.Visible = true;
					this.player3_form.Visible = true;
				}
				if (this.number_of_players == 4)
				{
					this.player2_form.Visible = true;
					this.player3_form.Visible = true;
					this.player4_form.Visible = true;
				}
				if (this.number_of_players == 5)
				{
					this.player2_form.Visible = true;
					this.player3_form.Visible = true;
					this.player4_form.Visible = true;
					this.player5_form.Visible = true;
				}
				this.Activate();
				this.make_role_buttons_inactive();
				this.make_settler_buttons_inactive();
				this.make_player_goods_buttons_inactive();
				this.make_ship_pics_inactive();
				this.make_goods_bank_buttons_inactive();
				this.make_plantation_pics_inactive();
				this.make_building_pics_inactive();
				this.start_game_button.Visible = true;
				this.start_game_button.Enabled = true;
			}
			else
			{
				Interaction.MsgBox("The game has already started - you need to exit the game to start a new one.", 0, null);
			}
		}

		public void starting_round_next_turn_routine()
		{
			if (this.current_player != 1 & this.settler_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.settler_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.settler_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.settler_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.settler_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.mayor_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.mayor_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.mayor_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.mayor_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.mayor_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.trader_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.trader_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.trader_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.trader_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.trader_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.builder_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.builder_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.builder_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.builder_round)
			{
				this.next_turn_routine();
			}
			if (this.current_player != 1 & this.builder_round)
			{
				this.next_turn_routine();
			}
		}

		public void trade_coffee()
		{
			this.already_there = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] == 5)
					{
						this.already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
				this.check_for_building(241);
				if (this.found_building)
				{
					this.already_there = false;
				}
				if (this.already_there)
				{
					Interaction.MsgBox("coffee is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (this.goods_p1_array[4] <= 0)
				{
					Interaction.MsgBox("You don't have any coffee to sell.", 0, null);
				}
				else
				{
					this.counter3 = 4;
					if (this.current_role_chooser == 1)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(131);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(251);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 2);
					}
					this.confirmbox_role(string.Concat("Are you sure you want to sell Coffee for", Conversion.Str(this.counter3), " doubloon(s) total?"), "role_trader");
					if (this.confirmed)
					{
						this.finished = false;
						this.counter1 = 0;
						while (!this.finished)
						{
							if (this.trading_house_array[this.counter1] != 0)
							{
								this.counter1 = checked(this.counter1 + 1);
								if (this.counter1 != 4)
								{
									continue;
								}
								this.finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								this.trading_house_array[this.counter1] = 5;
								this.goods_p1_array[4] = checked(this.goods_p1_array[4] - 1);
								this.counter3 = 4;
								if (this.current_role_chooser == 1)
								{
									this.counter3 = checked(this.counter3 + 1);
								}
								this.check_for_building(131);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 1);
									this.infobox_building1("Your manned Small Market gave you +1 doubloons for your coffee sale.", 131);
								}
								this.check_for_building(251);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 2);
									this.infobox_building1("Your manned Large Market gave you +2 doubloons for your coffee sale.", 131);
								}
								if (this.counter3 == 1)
								{
									this.infobox_role("You sold your coffee for 1 doubloon.", "role_trader");
									this.p1_traded = true;
								}
								if (this.counter3 > 1 | this.counter3 < 1)
								{
									this.infobox_role(string.Concat("You sold your coffee for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
									this.p1_traded = true;
								}
								this.finished = true;
								this.make_player_goods_buttons_inactive();
								this.formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						this.gold_p1 = checked(this.gold_p1 + this.counter3);
						this.update_all_labels();
					}
				}
			}
		}

		public void trade_corn()
		{
			this.already_there = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] == 3)
					{
						this.already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
				this.check_for_building(241);
				if (this.found_building)
				{
					this.already_there = false;
				}
				if (this.already_there)
				{
					Interaction.MsgBox("corn is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (this.goods_p1_array[2] <= 0)
				{
					Interaction.MsgBox("You don't have any corn to sell.", 0, null);
				}
				else
				{
					this.counter3 = 0;
					if (this.current_role_chooser == 1)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(131);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(251);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 2);
					}
					this.confirmbox_role(string.Concat("Are you sure you want to sell Corn for", Conversion.Str(this.counter3), " doubloon(s) total?"), "role_trader");
					if (this.confirmed)
					{
						this.finished = false;
						this.counter1 = 0;
						while (!this.finished)
						{
							if (this.trading_house_array[this.counter1] != 0)
							{
								this.counter1 = checked(this.counter1 + 1);
								if (this.counter1 != 4)
								{
									continue;
								}
								this.finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								this.trading_house_array[this.counter1] = 3;
								this.goods_p1_array[2] = checked(this.goods_p1_array[2] - 1);
								this.counter3 = 0;
								if (this.current_role_chooser == 1)
								{
									this.counter3 = checked(this.counter3 + 1);
								}
								this.check_for_building(131);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 1);
									this.infobox_building1("Your manned Small Market gave you +1 doubloons for your corn sale.", 131);
								}
								this.check_for_building(251);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 2);
									this.infobox_building1("Your manned Large Market gave you +2 doubloons for your corn sale.", 131);
								}
								if (this.counter3 == 1)
								{
									this.infobox_role("You sold your corn for 1 doubloon.", "role_trader");
									this.p1_traded = true;
								}
								if (this.counter3 > 1 | this.counter3 < 1)
								{
									this.infobox_role(string.Concat("You sold your corn for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
									this.p1_traded = true;
								}
								this.finished = true;
								this.make_player_goods_buttons_inactive();
								this.formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						this.gold_p1 = checked(this.gold_p1 + this.counter3);
						this.update_all_labels();
					}
				}
			}
		}

		public void trade_indigo()
		{
			this.already_there = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] == 1)
					{
						this.already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
				this.check_for_building(241);
				if (this.found_building)
				{
					this.already_there = false;
				}
				if (this.already_there)
				{
					Interaction.MsgBox("Indigo is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (this.goods_p1_array[0] <= 0)
				{
					Interaction.MsgBox("You don't have any indigo to sell.", 0, null);
				}
				else
				{
					this.counter3 = 1;
					if (this.current_role_chooser == 1)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(131);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(251);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 2);
					}
					this.confirmbox_role(string.Concat("Are you sure you want to sell Indigo for", Conversion.Str(this.counter3), " doubloon(s) total?"), "role_trader");
					if (this.confirmed)
					{
						this.finished = false;
						this.counter1 = 0;
						while (!this.finished)
						{
							if (this.trading_house_array[this.counter1] != 0)
							{
								this.counter1 = checked(this.counter1 + 1);
								if (this.counter1 != 4)
								{
									continue;
								}
								this.finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								this.trading_house_array[this.counter1] = 1;
								this.goods_p1_array[0] = checked(this.goods_p1_array[0] - 1);
								this.counter3 = 1;
								if (this.current_role_chooser == 1)
								{
									this.counter3 = checked(this.counter3 + 1);
								}
								this.check_for_building(131);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 1);
									this.infobox_building1("Your manned Small Market gave you +1 doubloons for your indigo sale.", 131);
								}
								this.check_for_building(251);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 2);
									this.infobox_building1("Your manned Large Market gave you +2 doubloons for your indigo sale.", 131);
								}
								if (this.counter3 == 1)
								{
									this.infobox_role("You sold your indigo for 1 doubloon.", "role_trader");
									this.p1_traded = true;
								}
								if (this.counter3 > 1 | this.counter3 < 1)
								{
									this.infobox_role(string.Concat("You sold your indigo for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
									this.p1_traded = true;
								}
								this.finished = true;
								this.make_player_goods_buttons_inactive();
								this.formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						this.gold_p1 = checked(this.gold_p1 + this.counter3);
						this.update_all_labels();
					}
				}
			}
		}

		public void trade_sugar()
		{
			this.already_there = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] == 2)
					{
						this.already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
				this.check_for_building(241);
				if (this.found_building)
				{
					this.already_there = false;
				}
				if (this.already_there)
				{
					Interaction.MsgBox("sugar is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (this.goods_p1_array[1] <= 0)
				{
					Interaction.MsgBox("You don't have any sugar to sell.", 0, null);
				}
				else
				{
					this.counter3 = 2;
					if (this.current_role_chooser == 1)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(131);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(251);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 2);
					}
					this.confirmbox_role(string.Concat("Are you sure you want to sell Sugar for", Conversion.Str(this.counter3), " doubloon(s) total?"), "role_trader");
					if (this.confirmed)
					{
						this.finished = false;
						this.counter1 = 0;
						while (!this.finished)
						{
							if (this.trading_house_array[this.counter1] != 0)
							{
								this.counter1 = checked(this.counter1 + 1);
								if (this.counter1 != 4)
								{
									continue;
								}
								this.finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								this.trading_house_array[this.counter1] = 2;
								this.goods_p1_array[1] = checked(this.goods_p1_array[1] - 1);
								this.counter3 = 2;
								if (this.current_role_chooser == 1)
								{
									this.counter3 = checked(this.counter3 + 1);
								}
								this.check_for_building(131);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 1);
									this.infobox_building1("Your manned Small Market gave you +1 doubloons for your sugar sale.", 131);
								}
								this.check_for_building(251);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 2);
									this.infobox_building1("Your manned Large Market gave you +2 doubloons for your sugar sale.", 131);
								}
								if (this.counter3 == 1)
								{
									this.infobox_role("You sold your sugar for 1 doubloon.", "role_trader");
									this.p1_traded = true;
								}
								if (this.counter3 > 1 | this.counter3 < 1)
								{
									this.infobox_role(string.Concat("You sold your sugar for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
									this.p1_traded = true;
								}
								this.finished = true;
								this.make_player_goods_buttons_inactive();
								this.formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						this.gold_p1 = checked(this.gold_p1 + this.counter3);
						this.update_all_labels();
					}
				}
			}
		}

		public void trade_tobacco()
		{
			this.already_there = false;
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (this.p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] == 4)
					{
						this.already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
				this.check_for_building(241);
				if (this.found_building)
				{
					this.already_there = false;
				}
				if (this.already_there)
				{
					Interaction.MsgBox("tobacco is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (this.goods_p1_array[3] <= 0)
				{
					Interaction.MsgBox("You don't have any tobacco to sell.", 0, null);
				}
				else
				{
					this.counter3 = 3;
					if (this.current_role_chooser == 1)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(131);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 1);
					}
					this.check_for_building(251);
					if (this.found_building)
					{
						this.counter3 = checked(this.counter3 + 2);
					}
					this.confirmbox_role(string.Concat("Are you sure you want to sell Tobacco for", Conversion.Str(this.counter3), " doubloon(s) total?"), "role_trader");
					if (this.confirmed)
					{
						this.finished = false;
						this.counter1 = 0;
						while (!this.finished)
						{
							if (this.trading_house_array[this.counter1] != 0)
							{
								this.counter1 = checked(this.counter1 + 1);
								if (this.counter1 != 4)
								{
									continue;
								}
								this.finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								this.trading_house_array[this.counter1] = 4;
								this.goods_p1_array[3] = checked(this.goods_p1_array[3] - 1);
								this.counter3 = 3;
								if (this.current_role_chooser == 1)
								{
									this.counter3 = checked(this.counter3 + 1);
								}
								this.check_for_building(131);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 1);
									this.infobox_building1("Your manned Small Market gave you +1 doubloons for your tobacco sale.", 131);
								}
								this.check_for_building(251);
								if (this.found_building)
								{
									this.counter3 = checked(this.counter3 + 2);
									this.infobox_building1("Your manned Large Market gave you +2 doubloons for your tobacco sale.", 131);
								}
								if (this.counter3 == 1)
								{
									this.infobox_role("You sold your tobacco for 1 doubloon.", "role_trader");
									this.p1_traded = true;
								}
								if (this.counter3 > 1 | this.counter3 < 1)
								{
									this.infobox_role(string.Concat("You sold your tobacco for", Conversion.Str(this.counter3), " doubloons."), "role_trader");
									this.p1_traded = true;
								}
								this.finished = true;
								this.make_player_goods_buttons_inactive();
								this.formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						this.gold_p1 = checked(this.gold_p1 + this.counter3);
						this.update_all_labels();
					}
				}
			}
		}

		private void trader_bonus_label_Click(object sender, EventArgs e)
		{
			if (!this.p1_choosing_role)
			{
				this.help_bonus();
			}
			else
			{
				this.choose_trader();
			}
		}

		public void update_all_colonists()
		{
			this.update_p1_colonists();
			this.update_p2_colonists();
			this.update_p3_colonists();
			this.update_p4_colonists();
			this.update_p5_colonists();
		}

		public void update_all_labels()
		{
			this.calculate_score();
			this.update_ship_cargo();
			this.update_p1_labels();
			this.update_p2_labels();
			this.update_p3_labels();
			this.update_p4_labels();
			this.update_p5_labels();
			this.update_buildings_available_labels();
			this.update_num_buildings();
			this.update_num_plantations();
			this.check_for_game_end_triggered();
			this.update_player_turn_designations();
			this.update_summary();
		}

		public void update_bonus_role_labels()
		{
			this.settler_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[0]);
			this.mayor_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[1]);
			this.builder_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[2]);
			this.craftsman_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[3]);
			this.trader_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[4]);
			this.captain_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[5]);
			this.pros1_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[6]);
			this.pros2_bonus_label.Text =StringType.FromInteger(this.bonus_roles_array[7]);
			if (this.bonus_roles_array[0] != 0)
			{
				this.settler_bonus_label.Visible = true;
			}
			else
			{
				this.settler_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[1] != 0)
			{
				this.mayor_bonus_label.Visible = true;
			}
			else
			{
				this.mayor_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[2] != 0)
			{
				this.builder_bonus_label.Visible = true;
			}
			else
			{
				this.builder_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[3] != 0)
			{
				this.craftsman_bonus_label.Visible = true;
			}
			else
			{
				this.craftsman_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[4] != 0)
			{
				this.trader_bonus_label.Visible = true;
			}
			else
			{
				this.trader_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[5] != 0)
			{
				this.captain_bonus_label.Visible = true;
			}
			else
			{
				this.captain_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[6] != 0)
			{
				this.pros1_bonus_label.Visible = true;
			}
			else
			{
				this.pros1_bonus_label.Visible = false;
			}
			if (this.bonus_roles_array[7] != 0)
			{
				this.pros2_bonus_label.Visible = true;
			}
			else
			{
				this.pros2_bonus_label.Visible = false;
			}
		}

		public void update_buildings_available_labels()
		{
			this.buildings_form.current_playerb = this.current_player;
			this.buildings_form.current_role_chooserb = this.current_role_chooser;
			if (!this.builder_round)
			{
				this.buildings_form.builder_roundb = false;
			}
			else
			{
				this.buildings_form.builder_roundb = true;
			}
			this.counter1 = 0;
			do
			{
				this.buildings_form.buildings_available_array2[this.counter1] = this.buildings_available_array[this.counter1];
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 22);
			this.counter1 = 0;
			do
			{
				this.buildings_form.buildings_p1_arrayb[this.counter1] = this.buildings_p1_array[this.counter1];
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.verification_alerts();
			this.draw_buildings_available_labels();
		}

		public void update_buildings_available_labels2()
		{
			this.counter1 = 0;
			do
			{
				this.buildings_available_array[this.counter1] = this.buildings_form.buildings_available_array2[this.counter1];
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 22);
			this.counter1 = 0;
			do
			{
				this.buildings_p1_array[this.counter1] = this.buildings_form.buildings_p1_arrayb[this.counter1];
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.verification_alerts();
			this.draw_buildings_available_labels();
		}

		public void update_buildings_p1_labels()
		{
			string[] strArray;
			this.counter1 = 0;
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot1.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot1.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot1.Visible = true;
			}
			else
			{
				this.build_p1_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot2.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot2.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot2.Visible = true;
			}
			else
			{
				this.build_p1_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot3.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot3.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot3.Visible = true;
			}
			else
			{
				this.build_p1_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot4.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot4.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot4.Visible = true;
			}
			else
			{
				this.build_p1_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot5.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot5.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot5.Visible = true;
			}
			else
			{
				this.build_p1_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot6.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot6.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot6.Visible = true;
			}
			else
			{
				this.build_p1_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot7.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot7.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot7.Visible = true;
			}
			else
			{
				this.build_p1_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot8.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot8.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot8.Visible = true;
			}
			else
			{
				this.build_p1_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot9.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot9.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot9.Visible = true;
			}
			else
			{
				this.build_p1_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot10.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot10.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot10.Visible = true;
			}
			else
			{
				this.build_p1_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot11.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot11.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot11.Visible = true;
			}
			else
			{
				this.build_p1_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p1_array[this.counter1] == 0)
			{
				this.build_p1_slot12.Visible = false;
			}
			else if (this.buildings_p1_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot12.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot12.Visible = true;
			}
			else
			{
				this.build_p1_slot12.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot13.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot13.Visible = true;
			}
			else
			{
				this.build_p1_slot13.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot14.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot14.Visible = true;
			}
			else
			{
				this.build_p1_slot14.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot15.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot15.Visible = true;
			}
			else
			{
				this.build_p1_slot15.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot16.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot16.Visible = true;
			}
			else
			{
				this.build_p1_slot16.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot17.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot17.Visible = true;
			}
			else
			{
				this.build_p1_slot17.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot18.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot18.Visible = true;
			}
			else
			{
				this.build_p1_slot18.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot19.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot19.Visible = true;
			}
			else
			{
				this.build_p1_slot19.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p1_array[this.counter1] == 0 | this.buildings_p1_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p1_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.build_p1_slot20.Image = Image.FromFile(this.tempstring);
				this.build_p1_slot20.Visible = true;
			}
			else
			{
				this.build_p1_slot20.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
		}

		public void update_buildings_p2_labels()
		{
			string[] strArray;
			this.counter1 = 0;
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot1.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot1.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot1.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot2.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot2.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot2.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot3.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot3.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot3.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot4.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot4.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot4.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot5.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot5.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot5.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot6.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot6.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot6.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot7.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot7.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot7.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot8.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot8.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot8.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot9.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot9.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot9.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot10.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot10.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot10.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot11.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot11.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot11.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p2_array[this.counter1] == 0)
			{
				this.player2_form.build_p2_slot12.Visible = false;
			}
			else if (this.buildings_p2_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot12.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot12.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot12.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot13.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot13.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot13.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot14.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot14.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot14.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot15.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot15.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot15.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot16.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot16.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot16.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot17.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot17.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot17.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot18.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot18.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot18.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot19.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot19.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot19.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p2_array[this.counter1] == 0 | this.buildings_p2_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p2_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player2_form.build_p2_slot20.Image = Image.FromFile(this.tempstring);
				this.player2_form.build_p2_slot20.Visible = true;
			}
			else
			{
				this.player2_form.build_p2_slot20.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
		}

		public void update_buildings_p3_labels()
		{
			string[] strArray;
			this.counter1 = 0;
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot1.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot1.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot1.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot2.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot2.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot2.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot3.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot3.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot3.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot4.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot4.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot4.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot5.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot5.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot5.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot6.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot6.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot6.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot7.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot7.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot7.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot8.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot8.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot8.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot9.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot9.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot9.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot10.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot10.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot10.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot11.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot11.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot11.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p3_array[this.counter1] == 0)
			{
				this.player3_form.build_p3_slot12.Visible = false;
			}
			else if (this.buildings_p3_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot12.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot12.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot12.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot13.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot13.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot13.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot14.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot14.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot14.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot15.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot15.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot15.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot16.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot16.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot16.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot17.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot17.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot17.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot18.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot18.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot18.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot19.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot19.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot19.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p3_array[this.counter1] == 0 | this.buildings_p3_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p3_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player3_form.build_p3_slot20.Image = Image.FromFile(this.tempstring);
				this.player3_form.build_p3_slot20.Visible = true;
			}
			else
			{
				this.player3_form.build_p3_slot20.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
		}

		public void update_buildings_p4_labels()
		{
			string[] strArray;
			this.counter1 = 0;
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot1.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot1.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot1.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot2.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot2.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot2.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot3.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot3.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot3.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot4.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot4.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot4.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot5.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot5.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot5.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot6.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot6.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot6.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot7.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot7.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot7.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot8.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot8.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot8.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot9.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot9.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot9.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot10.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot10.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot10.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot11.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot11.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot11.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p4_array[this.counter1] == 0)
			{
				this.player4_form.build_p4_slot12.Visible = false;
			}
			else if (this.buildings_p4_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot12.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot12.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot12.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot13.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot13.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot13.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot14.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot14.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot14.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot15.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot15.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot15.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot16.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot16.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot16.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot17.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot17.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot17.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot18.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot18.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot18.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot19.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot19.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot19.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p4_array[this.counter1] == 0 | this.buildings_p4_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p4_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player4_form.build_p4_slot20.Image = Image.FromFile(this.tempstring);
				this.player4_form.build_p4_slot20.Visible = true;
			}
			else
			{
				this.player4_form.build_p4_slot20.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
		}

		public void update_buildings_p5_labels()
		{
			string[] strArray;
			this.counter1 = 0;
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot1.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot1.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot1.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot2.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot2.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot2.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot3.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot3.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot3.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot4.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot4.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot4.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot5.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot5.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot5.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot6.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot6.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot6.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot7.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot7.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot7.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot8.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot8.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot8.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot9.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot9.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot9.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot10.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot10.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot10.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot11.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot11.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot11.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.buildings_p5_array[this.counter1] == 0)
			{
				this.player5_form.build_p5_slot12.Visible = false;
			}
			else if (this.buildings_p5_array[this.counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot12.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot12.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot12.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot13.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot13.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot13.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot14.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot14.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot14.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot15.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot15.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot15.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot16.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot16.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot16.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot17.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot17.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot17.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot18.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot18.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot18.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot19.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot19.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot19.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (!(this.buildings_p5_array[this.counter1] == 0 | this.buildings_p5_array[this.counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[2]), StringType.FromChar(Conversion.Str(this.buildings_p5_array[this.counter1])[3]), ".bmp" };
				this.tempstring = string.Concat(strArray);
				this.player5_form.build_p5_slot20.Image = Image.FromFile(this.tempstring);
				this.player5_form.build_p5_slot20.Visible = true;
			}
			else
			{
				this.player5_form.build_p5_slot20.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
		}

		public void update_num_buildings()
		{
			this.num_buildings_p1 = 0;
			this.counter1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter1] != 0 & this.buildings_p1_array[this.counter1] != 999)
				{
					this.num_buildings_p1 = checked(this.num_buildings_p1 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p1_array[this.counter1] != 0 & this.buildings_p1_array[this.counter1] != 999)
				{
					this.num_buildings_p1 = checked(this.num_buildings_p1 + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			this.num_buildings_p2 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter1] != 0 & this.buildings_p2_array[this.counter1] != 999)
				{
					this.num_buildings_p2 = checked(this.num_buildings_p2 + 1);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p2_array[this.counter1] != 0 & this.buildings_p2_array[this.counter1] != 999)
				{
					this.num_buildings_p2 = checked(this.num_buildings_p2 + 2);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			this.num_buildings_p3 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter1] != 0 & this.buildings_p3_array[this.counter1] != 999)
				{
					this.num_buildings_p3 = checked(this.num_buildings_p3 + 1);
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p3_array[this.counter1] != 0 & this.buildings_p3_array[this.counter1] != 999)
				{
					this.num_buildings_p3 = checked(this.num_buildings_p3 + 2);
				}
				Form1 form15 = this;
				form15.counter1 = checked(form15.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			this.num_buildings_p4 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter1] != 0 & this.buildings_p4_array[this.counter1] != 999)
				{
					this.num_buildings_p4 = checked(this.num_buildings_p4 + 1);
				}
				Form1 form16 = this;
				form16.counter1 = checked(form16.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p4_array[this.counter1] != 0 & this.buildings_p4_array[this.counter1] != 999)
				{
					this.num_buildings_p4 = checked(this.num_buildings_p4 + 2);
				}
				Form1 form17 = this;
				form17.counter1 = checked(form17.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			this.num_buildings_p5 = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter1] != 0 & this.buildings_p5_array[this.counter1] != 999)
				{
					this.num_buildings_p5 = checked(this.num_buildings_p5 + 1);
				}
				Form1 form18 = this;
				form18.counter1 = checked(form18.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 12;
			do
			{
				if (this.buildings_p5_array[this.counter1] != 0 & this.buildings_p5_array[this.counter1] != 999)
				{
					this.num_buildings_p5 = checked(this.num_buildings_p5 + 2);
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (this.counter1 <= 19);
			if (this.num_buildings_p1 == 12 | this.num_buildings_p2 == 12 | this.num_buildings_p3 == 12 | this.num_buildings_p4 == 12 | this.num_buildings_p5 == 12)
			{
				this.game_end_triggered_buildings = true;
			}
			this.verification_alerts();
		}

		public void update_num_plantations()
		{
			this.counter1 = 0;
			this.counter3 = this.plantations_p1_array[this.counter1];
			this.num_plantations_p1 = 0;
			this.num_quarries_p1 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter1] != 0)
				{
					this.num_plantations_p1 = checked(this.num_plantations_p1 + 1);
					if (this.plantations_p1_array[this.counter1] == 60 | this.plantations_p1_array[this.counter1] == 61)
					{
						this.num_quarries_p1 = checked(this.num_quarries_p1 + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			this.num_plantations_p2 = 0;
			this.num_quarries_p2 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] != 0)
				{
					this.num_plantations_p2 = checked(this.num_plantations_p2 + 1);
					if (this.plantations_p2_array[this.counter1] == 60 | this.plantations_p2_array[this.counter1] == 61)
					{
						this.num_quarries_p2 = checked(this.num_quarries_p2 + 1);
					}
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			this.num_plantations_p3 = 0;
			this.num_quarries_p3 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] != 0)
				{
					this.num_plantations_p3 = checked(this.num_plantations_p3 + 1);
					if (this.plantations_p3_array[this.counter1] == 60 | this.plantations_p3_array[this.counter1] == 61)
					{
						this.num_quarries_p3 = checked(this.num_quarries_p1 + 1);
					}
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			this.num_plantations_p4 = 0;
			this.num_quarries_p4 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] != 0)
				{
					this.num_plantations_p4 = checked(this.num_plantations_p4 + 1);
					if (this.plantations_p4_array[this.counter1] == 60 | this.plantations_p4_array[this.counter1] == 61)
					{
						this.num_quarries_p4 = checked(this.num_quarries_p1 + 1);
					}
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.counter1 = 0;
			this.num_plantations_p5 = 0;
			this.num_quarries_p5 = 0;
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] != 0)
				{
					this.num_plantations_p5 = checked(this.num_plantations_p5 + 1);
					if (this.plantations_p5_array[this.counter1] == 60 | this.plantations_p5_array[this.counter1] == 61)
					{
						this.num_quarries_p5 = checked(this.num_quarries_p1 + 1);
					}
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.verification_alerts();
		}

		public void update_p1_colonists()
		{
			this.colonists_array[1] = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p1_array[this.counter1] == 111 | this.buildings_p1_array[this.counter1] == 121 | this.buildings_p1_array[this.counter1] == 131 | this.buildings_p1_array[this.counter1] == 141 | this.buildings_p1_array[this.counter1] == 151 | this.buildings_p1_array[this.counter1] == 161 | this.buildings_p1_array[this.counter1] == 211 | this.buildings_p1_array[this.counter1] == 221 | this.buildings_p1_array[this.counter1] == 231 | this.buildings_p1_array[this.counter1] == 241 | this.buildings_p1_array[this.counter1] == 251 | this.buildings_p1_array[this.counter1] == 261 | this.buildings_p1_array[this.counter1] == 311 | this.buildings_p1_array[this.counter1] == 321 | this.buildings_p1_array[this.counter1] == 331 | this.buildings_p1_array[this.counter1] == 341 | this.buildings_p1_array[this.counter1] == 351 | this.buildings_p1_array[this.counter1] == 361 | this.buildings_p1_array[this.counter1] == 411 | this.buildings_p1_array[this.counter1] == 421 | this.buildings_p1_array[this.counter1] == 441 | this.buildings_p1_array[this.counter1] == 451)
				{
					this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				}
				if (this.buildings_p1_array[this.counter1] == 212 | this.buildings_p1_array[this.counter1] == 222 | this.buildings_p1_array[this.counter1] == 312 | this.buildings_p1_array[this.counter1] == 322)
				{
					this.colonists_array[1] = checked(this.colonists_array[1] + 2);
				}
				if (this.buildings_p1_array[this.counter1] == 213 | this.buildings_p1_array[this.counter1] == 223 | this.buildings_p1_array[this.counter1] == 313)
				{
					this.colonists_array[1] = checked(this.colonists_array[1] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			do
			{
				if (this.plantations_p1_array[this.counter1] == 11 | this.plantations_p1_array[this.counter1] == 21 | this.plantations_p1_array[this.counter1] == 31 | this.plantations_p1_array[this.counter1] == 41 | this.plantations_p1_array[this.counter1] == 51 | this.plantations_p1_array[this.counter1] == 61)
				{
					this.colonists_array[1] = checked(this.colonists_array[1] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.colonists_array[1] = checked(this.colonists_array[1] + this.idle_colonists_array[1]);
			this.verification_alerts();
		}

		public void update_p1_labels()
		{
			this.vp_chips_label.Text =StringType.FromInteger(this.vpchips_p1);
			this.vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p1 + this.vp_buildings_p1));
			this.gold_label.Text =StringType.FromInteger(this.gold_p1);
			this.num_indigo_label.Text =StringType.FromInteger(this.goods_p1_array[0]);
			this.num_sugar_label.Text =StringType.FromInteger(this.goods_p1_array[1]);
			this.num_corn_label.Text =StringType.FromInteger(this.goods_p1_array[2]);
			this.num_tobacco_label.Text =StringType.FromInteger(this.goods_p1_array[3]);
			this.num_coffee_label.Text =StringType.FromInteger(this.goods_p1_array[4]);
			this.num_indigo_bank_label.Text =StringType.FromInteger(this.goods_bank_array[0]);
			this.num_sugar_bank_label.Text =StringType.FromInteger(this.goods_bank_array[1]);
			this.num_corn_bank_label.Text =StringType.FromInteger(this.goods_bank_array[2]);
			this.num_tobacco_bank_label.Text =StringType.FromInteger(this.goods_bank_array[3]);
			this.num_coffee_bank_label.Text =StringType.FromInteger(this.goods_bank_array[4]);
			this.num_quarry_bank_label.Text =StringType.FromInteger(this.goods_bank_array[5]);
			this.idle_colonists_label.Text =StringType.FromInteger(this.idle_colonists_array[1]);
			this.num_colonist_ship_label.Text =StringType.FromInteger(this.colonists_ship_num);
			this.num_colonist_bank_label.Text =StringType.FromInteger(this.colonists_bank_num);
			this.update_bonus_role_labels();
			this.update_ship_labels();
			this.update_tradehouse_labels();
			this.update_plantation_available_labels();
			this.update_plantations_p1_labels();
			this.update_buildings_p1_labels();
			if (this.current_governor != 1)
			{
				this.governor_pic.Visible = false;
			}
			else
			{
				this.governor_pic.Visible = true;
			}
			if (this.captain_round)
			{
				this.check_for_building_p1(361);
				if (!this.found_building)
				{
					this.wharf_pic.Visible = false;
				}
				else if (this.p1_used_wharf)
				{
					this.wharf_pic.Visible = false;
				}
				else
				{
					this.wharf_pic.Visible = true;
				}
			}
			this.tempinteger = this.colonists_array[1];
			this.Label10.Text =Conversion.Str(this.colonists_array[1]);
			this.verification_alerts();
		}

		public void update_p2_colonists()
		{
			this.colonists_array[2] = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p2_array[this.counter1] == 111 | this.buildings_p2_array[this.counter1] == 121 | this.buildings_p2_array[this.counter1] == 131 | this.buildings_p2_array[this.counter1] == 141 | this.buildings_p2_array[this.counter1] == 151 | this.buildings_p2_array[this.counter1] == 161 | this.buildings_p2_array[this.counter1] == 211 | this.buildings_p2_array[this.counter1] == 221 | this.buildings_p2_array[this.counter1] == 231 | this.buildings_p2_array[this.counter1] == 241 | this.buildings_p2_array[this.counter1] == 251 | this.buildings_p2_array[this.counter1] == 261 | this.buildings_p2_array[this.counter1] == 311 | this.buildings_p2_array[this.counter1] == 321 | this.buildings_p2_array[this.counter1] == 331 | this.buildings_p2_array[this.counter1] == 341 | this.buildings_p2_array[this.counter1] == 351 | this.buildings_p2_array[this.counter1] == 361 | this.buildings_p2_array[this.counter1] == 411 | this.buildings_p2_array[this.counter1] == 421 | this.buildings_p2_array[this.counter1] == 441 | this.buildings_p2_array[this.counter1] == 451)
				{
					this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				}
				if (this.buildings_p2_array[this.counter1] == 212 | this.buildings_p2_array[this.counter1] == 222 | this.buildings_p2_array[this.counter1] == 312 | this.buildings_p2_array[this.counter1] == 322)
				{
					this.colonists_array[2] = checked(this.colonists_array[2] + 2);
				}
				if (this.buildings_p2_array[this.counter1] == 213 | this.buildings_p2_array[this.counter1] == 223 | this.buildings_p2_array[this.counter1] == 313)
				{
					this.colonists_array[2] = checked(this.colonists_array[2] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			do
			{
				if (this.plantations_p2_array[this.counter1] == 11 | this.plantations_p2_array[this.counter1] == 21 | this.plantations_p2_array[this.counter1] == 31 | this.plantations_p2_array[this.counter1] == 41 | this.plantations_p2_array[this.counter1] == 51 | this.plantations_p2_array[this.counter1] == 61)
				{
					this.colonists_array[2] = checked(this.colonists_array[2] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.colonists_array[2] = checked(this.colonists_array[2] + this.idle_colonists_array[2]);
			this.verification_alerts();
		}

		public void update_p2_labels()
		{
			this.player2_form.Text =this.p2_name;
			this.update_plantations_p2_labels();
			this.update_buildings_p2_labels();
			this.player2_form.vp_chips_label.Text =StringType.FromInteger(this.vpchips_p2);
			this.player2_form.vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p2 + this.vp_buildings_p2));
			this.player2_form.gold_label.Text =StringType.FromInteger(this.gold_p2);
			this.player2_form.num_indigo_label.Text =StringType.FromInteger(this.goods_p2_array[0]);
			this.player2_form.num_sugar_label.Text =StringType.FromInteger(this.goods_p2_array[1]);
			this.player2_form.num_corn_label.Text =StringType.FromInteger(this.goods_p2_array[2]);
			this.player2_form.num_tobacco_label.Text =StringType.FromInteger(this.goods_p2_array[3]);
			this.player2_form.num_coffee_label.Text =StringType.FromInteger(this.goods_p2_array[4]);
			this.player2_form.idle_colonists_label.Text =StringType.FromInteger(this.idle_colonists_array[2]);
			if (this.current_governor != 2)
			{
				this.player2_form.governor_pic.Visible = false;
			}
			else
			{
				this.player2_form.governor_pic.Visible = true;
			}
			this.verification_alerts();
		}

		public void update_p3_colonists()
		{
			this.colonists_array[3] = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p3_array[this.counter1] == 111 | this.buildings_p3_array[this.counter1] == 121 | this.buildings_p3_array[this.counter1] == 131 | this.buildings_p3_array[this.counter1] == 141 | this.buildings_p3_array[this.counter1] == 151 | this.buildings_p3_array[this.counter1] == 161 | this.buildings_p3_array[this.counter1] == 211 | this.buildings_p3_array[this.counter1] == 221 | this.buildings_p3_array[this.counter1] == 231 | this.buildings_p3_array[this.counter1] == 241 | this.buildings_p3_array[this.counter1] == 251 | this.buildings_p3_array[this.counter1] == 261 | this.buildings_p3_array[this.counter1] == 311 | this.buildings_p3_array[this.counter1] == 321 | this.buildings_p3_array[this.counter1] == 331 | this.buildings_p3_array[this.counter1] == 341 | this.buildings_p3_array[this.counter1] == 351 | this.buildings_p3_array[this.counter1] == 361 | this.buildings_p3_array[this.counter1] == 411 | this.buildings_p3_array[this.counter1] == 421 | this.buildings_p3_array[this.counter1] == 441 | this.buildings_p3_array[this.counter1] == 451)
				{
					this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				}
				if (this.buildings_p3_array[this.counter1] == 212 | this.buildings_p3_array[this.counter1] == 222 | this.buildings_p3_array[this.counter1] == 312 | this.buildings_p3_array[this.counter1] == 322)
				{
					this.colonists_array[3] = checked(this.colonists_array[3] + 2);
				}
				if (this.buildings_p3_array[this.counter1] == 213 | this.buildings_p3_array[this.counter1] == 223 | this.buildings_p3_array[this.counter1] == 313)
				{
					this.colonists_array[3] = checked(this.colonists_array[3] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			do
			{
				if (this.plantations_p3_array[this.counter1] == 11 | this.plantations_p3_array[this.counter1] == 21 | this.plantations_p3_array[this.counter1] == 31 | this.plantations_p3_array[this.counter1] == 41 | this.plantations_p3_array[this.counter1] == 51 | this.plantations_p3_array[this.counter1] == 61)
				{
					this.colonists_array[3] = checked(this.colonists_array[3] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.colonists_array[3] = checked(this.colonists_array[3] + this.idle_colonists_array[3]);
			this.verification_alerts();
		}

		public void update_p3_labels()
		{
			this.player3_form.Text =this.p3_name;
			this.update_plantations_p3_labels();
			this.update_buildings_p3_labels();
			this.player3_form.vp_chips_label.Text =StringType.FromInteger(this.vpchips_p3);
			this.player3_form.vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p3 + this.vp_buildings_p3));
			this.player3_form.gold_label.Text =StringType.FromInteger(this.gold_p3);
			this.player3_form.num_indigo_label.Text =StringType.FromInteger(this.goods_p3_array[0]);
			this.player3_form.num_sugar_label.Text =StringType.FromInteger(this.goods_p3_array[1]);
			this.player3_form.num_corn_label.Text =StringType.FromInteger(this.goods_p3_array[2]);
			this.player3_form.num_tobacco_label.Text =StringType.FromInteger(this.goods_p3_array[3]);
			this.player3_form.num_coffee_label.Text =StringType.FromInteger(this.goods_p3_array[4]);
			this.player3_form.idle_colonists_label.Text =StringType.FromInteger(this.idle_colonists_array[3]);
			if (this.current_governor != 3)
			{
				this.player3_form.governor_pic.Visible = false;
			}
			else
			{
				this.player3_form.governor_pic.Visible = true;
			}
			this.verification_alerts();
		}

		public void update_p4_colonists()
		{
			this.colonists_array[4] = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p4_array[this.counter1] == 111 | this.buildings_p4_array[this.counter1] == 121 | this.buildings_p4_array[this.counter1] == 131 | this.buildings_p4_array[this.counter1] == 141 | this.buildings_p4_array[this.counter1] == 151 | this.buildings_p4_array[this.counter1] == 161 | this.buildings_p4_array[this.counter1] == 211 | this.buildings_p4_array[this.counter1] == 221 | this.buildings_p4_array[this.counter1] == 231 | this.buildings_p4_array[this.counter1] == 241 | this.buildings_p4_array[this.counter1] == 251 | this.buildings_p4_array[this.counter1] == 261 | this.buildings_p4_array[this.counter1] == 311 | this.buildings_p4_array[this.counter1] == 321 | this.buildings_p4_array[this.counter1] == 331 | this.buildings_p4_array[this.counter1] == 341 | this.buildings_p4_array[this.counter1] == 351 | this.buildings_p4_array[this.counter1] == 361 | this.buildings_p4_array[this.counter1] == 411 | this.buildings_p4_array[this.counter1] == 421 | this.buildings_p4_array[this.counter1] == 441 | this.buildings_p4_array[this.counter1] == 451)
				{
					this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				}
				if (this.buildings_p4_array[this.counter1] == 212 | this.buildings_p4_array[this.counter1] == 222 | this.buildings_p4_array[this.counter1] == 312 | this.buildings_p4_array[this.counter1] == 322)
				{
					this.colonists_array[4] = checked(this.colonists_array[4] + 2);
				}
				if (this.buildings_p4_array[this.counter1] == 213 | this.buildings_p4_array[this.counter1] == 223 | this.buildings_p4_array[this.counter1] == 313)
				{
					this.colonists_array[4] = checked(this.colonists_array[4] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			do
			{
				if (this.plantations_p4_array[this.counter1] == 11 | this.plantations_p4_array[this.counter1] == 21 | this.plantations_p4_array[this.counter1] == 31 | this.plantations_p4_array[this.counter1] == 41 | this.plantations_p4_array[this.counter1] == 51 | this.plantations_p4_array[this.counter1] == 61)
				{
					this.colonists_array[4] = checked(this.colonists_array[4] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.colonists_array[4] = checked(this.colonists_array[4] + this.idle_colonists_array[4]);
			this.verification_alerts();
		}

		public void update_p4_labels()
		{
			this.player4_form.Text =this.p4_name;
			this.update_plantations_p4_labels();
			this.update_buildings_p4_labels();
			this.player4_form.vp_chips_label.Text =StringType.FromInteger(this.vpchips_p4);
			this.player4_form.vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p4 + this.vp_buildings_p4));
			this.player4_form.gold_label.Text =StringType.FromInteger(this.gold_p4);
			this.player4_form.num_indigo_label.Text =StringType.FromInteger(this.goods_p4_array[0]);
			this.player4_form.num_sugar_label.Text =StringType.FromInteger(this.goods_p4_array[1]);
			this.player4_form.num_corn_label.Text =StringType.FromInteger(this.goods_p4_array[2]);
			this.player4_form.num_tobacco_label.Text =StringType.FromInteger(this.goods_p4_array[3]);
			this.player4_form.num_coffee_label.Text =StringType.FromInteger(this.goods_p4_array[4]);
			this.player4_form.idle_colonists_label.Text =StringType.FromInteger(this.idle_colonists_array[4]);
			if (this.current_governor != 4)
			{
				this.player4_form.governor_pic.Visible = false;
			}
			else
			{
				this.player4_form.governor_pic.Visible = true;
			}
			this.verification_alerts();
		}

		public void update_p5_colonists()
		{
			this.colonists_array[5] = 0;
			this.counter1 = 0;
			do
			{
				if (this.buildings_p5_array[this.counter1] == 111 | this.buildings_p5_array[this.counter1] == 121 | this.buildings_p5_array[this.counter1] == 131 | this.buildings_p5_array[this.counter1] == 141 | this.buildings_p5_array[this.counter1] == 151 | this.buildings_p5_array[this.counter1] == 161 | this.buildings_p5_array[this.counter1] == 211 | this.buildings_p5_array[this.counter1] == 221 | this.buildings_p5_array[this.counter1] == 231 | this.buildings_p5_array[this.counter1] == 241 | this.buildings_p5_array[this.counter1] == 251 | this.buildings_p5_array[this.counter1] == 261 | this.buildings_p5_array[this.counter1] == 311 | this.buildings_p5_array[this.counter1] == 321 | this.buildings_p5_array[this.counter1] == 331 | this.buildings_p5_array[this.counter1] == 341 | this.buildings_p5_array[this.counter1] == 351 | this.buildings_p5_array[this.counter1] == 361 | this.buildings_p5_array[this.counter1] == 411 | this.buildings_p5_array[this.counter1] == 421 | this.buildings_p5_array[this.counter1] == 441 | this.buildings_p5_array[this.counter1] == 451)
				{
					this.colonists_array[5] = checked(this.colonists_array[5] + 1);
				}
				if (this.buildings_p5_array[this.counter1] == 212 | this.buildings_p5_array[this.counter1] == 222 | this.buildings_p5_array[this.counter1] == 312 | this.buildings_p5_array[this.counter1] == 322)
				{
					this.colonists_array[5] = checked(this.colonists_array[5] + 2);
				}
				if (this.buildings_p5_array[this.counter1] == 213 | this.buildings_p5_array[this.counter1] == 223 | this.buildings_p5_array[this.counter1] == 313)
				{
					this.colonists_array[5] = checked(this.colonists_array[5] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 19);
			this.counter1 = 0;
			do
			{
				if (this.plantations_p5_array[this.counter1] == 11 | this.plantations_p5_array[this.counter1] == 21 | this.plantations_p5_array[this.counter1] == 31 | this.plantations_p5_array[this.counter1] == 41 | this.plantations_p5_array[this.counter1] == 51 | this.plantations_p5_array[this.counter1] == 61)
				{
					this.colonists_array[5] = checked(this.colonists_array[5] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (this.counter1 <= 11);
			this.colonists_array[5] = checked(this.colonists_array[5] + this.idle_colonists_array[5]);
			this.verification_alerts();
		}

		public void update_p5_labels()
		{
			this.player5_form.Text =this.p5_name;
			this.update_plantations_p5_labels();
			this.update_buildings_p5_labels();
			this.player5_form.vp_chips_label.Text =StringType.FromInteger(this.vpchips_p5);
			this.player5_form.vp_total_label.Text =StringType.FromInteger(checked(this.vpchips_p5 + this.vp_buildings_p5));
			this.player5_form.gold_label.Text =StringType.FromInteger(this.gold_p5);
			this.player5_form.num_indigo_label.Text =StringType.FromInteger(this.goods_p5_array[0]);
			this.player5_form.num_sugar_label.Text =StringType.FromInteger(this.goods_p5_array[1]);
			this.player5_form.num_corn_label.Text =StringType.FromInteger(this.goods_p5_array[2]);
			this.player5_form.num_tobacco_label.Text =StringType.FromInteger(this.goods_p5_array[3]);
			this.player5_form.num_coffee_label.Text =StringType.FromInteger(this.goods_p5_array[4]);
			this.player5_form.idle_colonists_label.Text =StringType.FromInteger(this.idle_colonists_array[5]);
			if (this.current_governor != 5)
			{
				this.player5_form.governor_pic.Visible = false;
			}
			else
			{
				this.player5_form.governor_pic.Visible = true;
			}
			this.verification_alerts();
		}

		public void update_plantation_available_labels()
		{
			if (this.plantation_available_array[0] == 0)
			{
				this.plantation_available_slot1.Visible = false;
			}
			else
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantation_available_array[0])[1]), StringType.FromChar(Conversion.Str(this.plantation_available_array[0])[2]), ".bmp");
				this.plantation_available_slot1.Visible = true;
				this.plantation_available_slot1.Image = Image.FromFile(this.tempstring);
			}
			if (this.plantation_available_array[1] == 0)
			{
				this.plantation_available_slot2.Visible = false;
			}
			else
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantation_available_array[1])[1]), StringType.FromChar(Conversion.Str(this.plantation_available_array[1])[2]), ".bmp");
				this.plantation_available_slot2.Visible = true;
				this.plantation_available_slot2.Image = Image.FromFile(this.tempstring);
			}
			if (this.plantation_available_array[2] == 0)
			{
				this.plantation_available_slot3.Visible = false;
			}
			else
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantation_available_array[2])[1]), StringType.FromChar(Conversion.Str(this.plantation_available_array[2])[2]), ".bmp");
				this.plantation_available_slot3.Visible = true;
				this.plantation_available_slot3.Image = Image.FromFile(this.tempstring);
			}
			if (this.plantation_available_array[3] == 0)
			{
				this.plantation_available_slot4.Visible = false;
			}
			else
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantation_available_array[3])[1]), StringType.FromChar(Conversion.Str(this.plantation_available_array[3])[2]), ".bmp");
				this.plantation_available_slot4.Visible = true;
				this.plantation_available_slot4.Image = Image.FromFile(this.tempstring);
			}
			if (this.plantation_available_array[4] == 0)
			{
				this.plantation_available_slot5.Visible = false;
			}
			else
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantation_available_array[4])[1]), StringType.FromChar(Conversion.Str(this.plantation_available_array[4])[2]), ".bmp");
				this.plantation_available_slot5.Visible = true;
				this.plantation_available_slot5.Image = Image.FromFile(this.tempstring);
			}
			if (this.plantation_available_array[5] == 0)
			{
				this.plantation_available_slot6.Visible = false;
			}
			else
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantation_available_array[5])[1]), StringType.FromChar(Conversion.Str(this.plantation_available_array[5])[2]), ".bmp");
				this.plantation_available_slot6.Visible = true;
				this.plantation_available_slot6.Image = Image.FromFile(this.tempstring);
			}
		}

		public void update_plantations_p1_labels()
		{
			this.counter1 = 0;
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot1.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot1.Visible = true;
			}
			else
			{
				this.plant_p1_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot2.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot2.Visible = true;
			}
			else
			{
				this.plant_p1_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot3.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot3.Visible = true;
			}
			else
			{
				this.plant_p1_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot4.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot4.Visible = true;
			}
			else
			{
				this.plant_p1_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot5.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot5.Visible = true;
			}
			else
			{
				this.plant_p1_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot6.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot6.Visible = true;
			}
			else
			{
				this.plant_p1_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot7.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot7.Visible = true;
			}
			else
			{
				this.plant_p1_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot8.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot8.Visible = true;
			}
			else
			{
				this.plant_p1_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot9.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot9.Visible = true;
			}
			else
			{
				this.plant_p1_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot10.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot10.Visible = true;
			}
			else
			{
				this.plant_p1_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot11.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot11.Visible = true;
			}
			else
			{
				this.plant_p1_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p1_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p1_array[this.counter1])[2]), ".bmp");
				this.plant_p1_slot12.Image = Image.FromFile(this.tempstring);
				this.plant_p1_slot12.Visible = true;
			}
			else
			{
				this.plant_p1_slot12.Visible = false;
			}
		}

		public void update_plantations_p2_labels()
		{
			this.counter1 = 0;
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot1.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot1.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot2.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot2.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot3.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot3.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot4.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot4.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot5.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot5.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot6.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot6.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot7.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot7.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot8.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot8.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot9.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot9.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot10.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot10.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot11.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot11.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p2_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p2_array[this.counter1])[2]), ".bmp");
				this.player2_form.plant_p2_slot12.Image = Image.FromFile(this.tempstring);
				this.player2_form.plant_p2_slot12.Visible = true;
			}
			else
			{
				this.player2_form.plant_p2_slot12.Visible = false;
			}
		}

		public void update_plantations_p3_labels()
		{
			this.counter1 = 0;
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot1.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot1.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot2.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot2.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot3.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot3.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot4.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot4.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot5.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot5.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot6.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot6.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot7.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot7.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot8.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot8.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot9.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot9.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot10.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot10.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot11.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot11.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p3_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p3_array[this.counter1])[2]), ".bmp");
				this.player3_form.plant_p3_slot12.Image = Image.FromFile(this.tempstring);
				this.player3_form.plant_p3_slot12.Visible = true;
			}
			else
			{
				this.player3_form.plant_p3_slot12.Visible = false;
			}
		}

		public void update_plantations_p4_labels()
		{
			this.counter1 = 0;
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot1.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot1.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot2.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot2.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot3.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot3.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot4.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot4.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot5.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot5.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot6.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot6.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot7.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot7.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot8.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot8.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot9.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot9.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot10.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot10.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot11.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot11.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p4_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p4_array[this.counter1])[2]), ".bmp");
				this.player4_form.plant_p4_slot12.Image = Image.FromFile(this.tempstring);
				this.player4_form.plant_p4_slot12.Visible = true;
			}
			else
			{
				this.player4_form.plant_p4_slot12.Visible = false;
			}
		}

		public void update_plantations_p5_labels()
		{
			this.counter1 = 0;
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot1.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot1.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot1.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot2.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot2.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot2.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot3.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot3.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot3.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot4.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot4.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot4.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot5.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot5.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot5.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot6.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot6.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot6.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot7.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot7.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot7.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot8.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot8.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot8.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot9.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot9.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot9.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot10.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot10.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot10.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot11.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot11.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot11.Visible = false;
			}
			this.counter1 = checked(this.counter1 + 1);
			if (this.plantations_p5_array[this.counter1] != 0)
			{
				this.tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[1]), StringType.FromChar(Conversion.Str(this.plantations_p5_array[this.counter1])[2]), ".bmp");
				this.player5_form.plant_p5_slot12.Image = Image.FromFile(this.tempstring);
				this.player5_form.plant_p5_slot12.Visible = true;
			}
			else
			{
				this.player5_form.plant_p5_slot12.Visible = false;
			}
		}

		public void update_player_turn_designations()
		{
			if (this.current_player == 1)
			{
				this.current_player_string = "p1";
			}
			if (this.current_player == 2)
			{
				this.current_player_string = "p2";
			}
			if (this.current_player == 3)
			{
				this.current_player_string = "p3";
			}
			if (this.current_player == 4)
			{
				this.current_player_string = "p4";
			}
			if (this.current_player == 5)
			{
				this.current_player_string = "p5";
			}
			if (this.current_role_chooser == 1)
			{
				this.current_role_chooser_string = "p1";
			}
			if (this.current_role_chooser == 2)
			{
				this.current_role_chooser_string = "p2";
			}
			if (this.current_role_chooser == 3)
			{
				this.current_role_chooser_string = "p3";
			}
			if (this.current_role_chooser == 4)
			{
				this.current_role_chooser_string = "p4";
			}
			if (this.current_role_chooser == 5)
			{
				this.current_role_chooser_string = "p5";
			}
			if (this.current_governor == 1)
			{
				this.current_governor_string = "p1";
			}
			if (this.current_governor == 2)
			{
				this.current_governor_string = "p2";
			}
			if (this.current_governor == 3)
			{
				this.current_governor_string = "p3";
			}
			if (this.current_governor == 4)
			{
				this.current_governor_string = "p4";
			}
			if (this.current_governor == 5)
			{
				this.current_governor_string = "p5";
			}
		}

		public void update_ship_cargo()
		{
			this.indigo_shipnum = 0;
			this.sugar_shipnum = 0;
			this.corn_shipnum = 0;
			this.tobacco_shipnum = 0;
			this.coffee_shipnum = 0;
			this.indigo_ship_available = false;
			this.sugar_ship_available = false;
			this.corn_ship_available = false;
			this.tobacco_ship_available = false;
			this.coffee_ship_available = false;
			this.indigo_ship_full = false;
			this.sugar_ship_full = false;
			this.corn_ship_full = false;
			this.tobacco_ship_full = false;
			this.coffee_ship_full = false;
			this.empty_ship_available = false;
			this.ships_can_take_indigo = false;
			this.ships_can_take_sugar = false;
			this.ships_can_take_corn = false;
			this.ships_can_take_tobacco = false;
			this.ships_can_take_coffee = false;
			this.shipa_empty = false;
			this.shipb_empty = false;
			this.shipc_empty = false;
			this.biggest_empty_ship = "null";
			this.shipa_array[3] = checked(this.shipa_array[0] - this.shipa_array[1]);
			this.shipb_array[3] = checked(this.shipb_array[0] - this.shipb_array[1]);
			this.shipc_array[3] = checked(this.shipc_array[0] - this.shipc_array[1]);
			if (this.shipa_array[1] == 0)
			{
				this.shipa_array[2] = 99;
			}
			if (this.shipb_array[1] == 0)
			{
				this.shipb_array[2] = 99;
			}
			if (this.shipc_array[1] == 0)
			{
				this.shipc_array[2] = 99;
			}
			if (this.shipa_array[2] == 1 & this.shipa_array[3] == 0)
			{
				this.indigo_ship_full = true;
			}
			if (this.shipa_array[2] == 2 & this.shipa_array[3] == 0)
			{
				this.sugar_ship_full = true;
			}
			if (this.shipa_array[2] == 3 & this.shipa_array[3] == 0)
			{
				this.corn_ship_full = true;
			}
			if (this.shipa_array[2] == 4 & this.shipa_array[3] == 0)
			{
				this.tobacco_ship_full = true;
			}
			if (this.shipa_array[2] == 5 & this.shipa_array[3] == 0)
			{
				this.coffee_ship_full = true;
			}
			if (this.shipb_array[2] == 1 & this.shipb_array[3] == 0)
			{
				this.indigo_ship_full = true;
			}
			if (this.shipb_array[2] == 2 & this.shipb_array[3] == 0)
			{
				this.sugar_ship_full = true;
			}
			if (this.shipb_array[2] == 3 & this.shipb_array[3] == 0)
			{
				this.corn_ship_full = true;
			}
			if (this.shipb_array[2] == 4 & this.shipb_array[3] == 0)
			{
				this.tobacco_ship_full = true;
			}
			if (this.shipb_array[2] == 5 & this.shipb_array[3] == 0)
			{
				this.coffee_ship_full = true;
			}
			if (this.shipc_array[2] == 1 & this.shipc_array[3] == 0)
			{
				this.indigo_ship_full = true;
			}
			if (this.shipc_array[2] == 2 & this.shipc_array[3] == 0)
			{
				this.sugar_ship_full = true;
			}
			if (this.shipc_array[2] == 3 & this.shipc_array[3] == 0)
			{
				this.corn_ship_full = true;
			}
			if (this.shipc_array[2] == 4 & this.shipc_array[3] == 0)
			{
				this.tobacco_ship_full = true;
			}
			if (this.shipc_array[2] == 5 & this.shipc_array[3] == 0)
			{
				this.coffee_ship_full = true;
			}
			if (this.shipa_array[2] == 1 & this.shipa_array[1] > 0)
			{
				this.indigo_shipnum = 1;
			}
			if (this.shipb_array[2] == 1 & this.shipb_array[1] > 0)
			{
				this.indigo_shipnum = 2;
			}
			if (this.shipc_array[2] == 1 & this.shipc_array[1] > 0)
			{
				this.indigo_shipnum = 3;
			}
			if (this.shipa_array[2] == 2 & this.shipa_array[1] > 0)
			{
				this.sugar_shipnum = 1;
			}
			if (this.shipb_array[2] == 2 & this.shipb_array[1] > 0)
			{
				this.sugar_shipnum = 2;
			}
			if (this.shipc_array[2] == 2 & this.shipc_array[1] > 0)
			{
				this.sugar_shipnum = 3;
			}
			if (this.shipa_array[2] == 3 & this.shipa_array[1] > 0)
			{
				this.corn_shipnum = 1;
			}
			if (this.shipb_array[2] == 3 & this.shipb_array[1] > 0)
			{
				this.corn_shipnum = 2;
			}
			if (this.shipc_array[2] == 3 & this.shipc_array[1] > 0)
			{
				this.corn_shipnum = 3;
			}
			if (this.shipa_array[2] == 4 & this.shipa_array[1] > 0)
			{
				this.tobacco_shipnum = 1;
			}
			if (this.shipb_array[2] == 4 & this.shipb_array[1] > 0)
			{
				this.tobacco_shipnum = 2;
			}
			if (this.shipc_array[2] == 4 & this.shipc_array[1] > 0)
			{
				this.tobacco_shipnum = 3;
			}
			if (this.shipa_array[2] == 5 & this.shipa_array[1] > 0)
			{
				this.coffee_shipnum = 1;
			}
			if (this.shipb_array[2] == 5 & this.shipb_array[1] > 0)
			{
				this.coffee_shipnum = 2;
			}
			if (this.shipc_array[2] == 5 & this.shipc_array[1] > 0)
			{
				this.coffee_shipnum = 3;
			}
			if (this.shipa_array[2] == 1 & this.shipa_array[1] > 0 & this.shipa_array[1] < this.shipa_array[0])
			{
				this.indigo_shipnum = 1;
				this.indigo_ship_available = true;
			}
			if (this.shipa_array[2] == 2 & this.shipa_array[1] > 0 & this.shipa_array[1] < this.shipa_array[0])
			{
				this.sugar_shipnum = 1;
				this.sugar_ship_available = true;
			}
			if (this.shipa_array[2] == 3 & this.shipa_array[1] > 0 & this.shipa_array[1] < this.shipa_array[0])
			{
				this.corn_shipnum = 1;
				this.corn_ship_available = true;
			}
			if (this.shipa_array[2] == 4 & this.shipa_array[1] > 0 & this.shipa_array[1] < this.shipa_array[0])
			{
				this.tobacco_shipnum = 1;
				this.tobacco_ship_available = true;
			}
			if (this.shipa_array[2] == 5 & this.shipa_array[1] > 0 & this.shipa_array[1] < this.shipa_array[0])
			{
				this.coffee_shipnum = 1;
				this.coffee_ship_available = true;
			}
			if (this.shipa_array[2] == 99)
			{
				this.empty_ship_available = true;
				this.shipa_empty = true;
			}
			if (this.shipb_array[2] == 1 & this.shipb_array[1] > 0 & this.shipb_array[1] < this.shipb_array[0])
			{
				this.indigo_shipnum = 2;
				this.indigo_ship_available = true;
			}
			if (this.shipb_array[2] == 2 & this.shipb_array[1] > 0 & this.shipb_array[1] < this.shipb_array[0])
			{
				this.sugar_shipnum = 2;
				this.sugar_ship_available = true;
			}
			if (this.shipb_array[2] == 3 & this.shipb_array[1] > 0 & this.shipb_array[1] < this.shipb_array[0])
			{
				this.corn_shipnum = 2;
				this.corn_ship_available = true;
			}
			if (this.shipb_array[2] == 4 & this.shipb_array[1] > 0 & this.shipb_array[1] < this.shipb_array[0])
			{
				this.tobacco_shipnum = 2;
				this.tobacco_ship_available = true;
			}
			if (this.shipb_array[2] == 5 & this.shipb_array[1] > 0 & this.shipb_array[1] < this.shipb_array[0])
			{
				this.coffee_shipnum = 2;
				this.coffee_ship_available = true;
			}
			if (this.shipb_array[2] == 99)
			{
				this.empty_ship_available = true;
				this.shipb_empty = true;
			}
			if (this.shipc_array[2] == 1 & this.shipc_array[1] > 0 & this.shipc_array[1] < this.shipc_array[0])
			{
				this.indigo_shipnum = 3;
				this.indigo_ship_available = true;
			}
			if (this.shipc_array[2] == 2 & this.shipc_array[1] > 0 & this.shipc_array[1] < this.shipc_array[0])
			{
				this.sugar_shipnum = 3;
				this.sugar_ship_available = true;
			}
			if (this.shipc_array[2] == 3 & this.shipc_array[1] > 0 & this.shipc_array[1] < this.shipc_array[0])
			{
				this.corn_shipnum = 3;
				this.corn_ship_available = true;
			}
			if (this.shipc_array[2] == 4 & this.shipc_array[1] > 0 & this.shipc_array[1] < this.shipc_array[0])
			{
				this.tobacco_shipnum = 3;
				this.tobacco_ship_available = true;
			}
			if (this.shipc_array[2] == 5 & this.shipc_array[1] > 0 & this.shipc_array[1] < this.shipc_array[0])
			{
				this.coffee_shipnum = 3;
				this.coffee_ship_available = true;
			}
			if (this.shipc_array[2] == 99)
			{
				this.empty_ship_available = true;
				this.shipc_empty = true;
			}
			if (this.shipc_empty)
			{
				this.biggest_empty_ship = "shipc";
			}
			else if (this.shipb_empty)
			{
				this.biggest_empty_ship = "shipb";
			}
			else if (!this.shipa_empty)
			{
				this.biggest_empty_ship = "null";
			}
			else
			{
				this.biggest_empty_ship = "shipa";
			}
			if (this.empty_ship_available & this.indigo_shipnum != 1 & this.indigo_shipnum != 2 & this.indigo_shipnum != 3 | this.indigo_ship_available)
			{
				this.ships_can_take_indigo = true;
			}
			if (this.empty_ship_available & this.sugar_shipnum != 1 & this.sugar_shipnum != 2 & this.sugar_shipnum != 3 | this.sugar_ship_available)
			{
				this.ships_can_take_sugar = true;
			}
			if (this.empty_ship_available & this.corn_shipnum != 1 & this.corn_shipnum != 2 & this.corn_shipnum != 3 | this.corn_ship_available)
			{
				this.ships_can_take_corn = true;
			}
			if (this.empty_ship_available & this.tobacco_shipnum != 1 & this.tobacco_shipnum != 2 & this.tobacco_shipnum != 3 | this.tobacco_ship_available)
			{
				this.ships_can_take_tobacco = true;
			}
			if (this.empty_ship_available & this.coffee_shipnum != 1 & this.coffee_shipnum != 2 & this.coffee_shipnum != 3 | this.coffee_ship_available)
			{
				this.ships_can_take_coffee = true;
			}
			this.verification_alerts();
		}

		public void update_ship_labels()
		{
			if (this.number_of_players == 3)
			{
				this.shipa_slot5.Visible = false;
				this.shipa_slot6.Visible = false;
				this.shipb_slot6.Visible = false;
				this.shipb_slot7.Visible = false;
				this.shipc_slot7.Visible = false;
				this.shipc_slot8.Visible = false;
			}
			if (this.number_of_players == 4)
			{
				this.shipa_slot5.Visible = true;
				this.shipa_slot6.Visible = false;
				this.shipb_slot6.Visible = true;
				this.shipb_slot7.Visible = false;
				this.shipc_slot7.Visible = true;
				this.shipc_slot8.Visible = false;
			}
			if (this.number_of_players == 5)
			{
				this.shipa_slot5.Visible = true;
				this.shipa_slot6.Visible = true;
				this.shipb_slot6.Visible = true;
				this.shipb_slot7.Visible = true;
				this.shipc_slot7.Visible = true;
				this.shipc_slot8.Visible = true;
			}
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.shipa_array[2])[1]), ".bmp");
			if (this.shipa_array[1] < 1)
			{
				this.shipa_slot1.Image = Image.FromFile("pic\\b0.bmp");
				this.shipa_slot1.Visible = false;
			}
			else
			{
				this.shipa_slot1.Image = Image.FromFile(this.tempstring);
				this.shipa_slot1.Visible = true;
			}
			if (this.shipa_array[1] < 2)
			{
				this.shipa_slot2.Image = Image.FromFile("pic\\b0.bmp");
				this.shipa_slot2.Visible = false;
			}
			else
			{
				this.shipa_slot2.Image = Image.FromFile(this.tempstring);
				this.shipa_slot2.Visible = true;
			}
			if (this.shipa_array[1] < 3)
			{
				this.shipa_slot3.Image = Image.FromFile("pic\\b0.bmp");
				this.shipa_slot3.Visible = false;
			}
			else
			{
				this.shipa_slot3.Image = Image.FromFile(this.tempstring);
				this.shipa_slot3.Visible = true;
			}
			if (this.shipa_array[1] < 4)
			{
				this.shipa_slot4.Image = Image.FromFile("pic\\b0.bmp");
				this.shipa_slot4.Visible = false;
			}
			else
			{
				this.shipa_slot4.Image = Image.FromFile(this.tempstring);
				this.shipa_slot4.Visible = true;
			}
			if (this.shipa_array[1] < 5)
			{
				this.shipa_slot5.Image = Image.FromFile("pic\\b0.bmp");
				this.shipa_slot5.Visible = false;
			}
			else
			{
				this.shipa_slot5.Image = Image.FromFile(this.tempstring);
				this.shipa_slot5.Visible = true;
			}
			if (this.shipa_array[1] < 6)
			{
				this.shipa_slot6.Image = Image.FromFile("pic\\b0.bmp");
				this.shipa_slot6.Visible = false;
			}
			else
			{
				this.shipa_slot6.Image = Image.FromFile(this.tempstring);
				this.shipa_slot6.Visible = true;
			}
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.shipb_array[2])[1]), ".bmp");
			if (this.shipb_array[1] < 1)
			{
				this.shipb_slot1.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot1.Visible = false;
			}
			else
			{
				this.shipb_slot1.Image = Image.FromFile(this.tempstring);
				this.shipb_slot1.Visible = true;
			}
			if (this.shipb_array[1] < 2)
			{
				this.shipb_slot2.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot2.Visible = false;
			}
			else
			{
				this.shipb_slot2.Image = Image.FromFile(this.tempstring);
				this.shipb_slot2.Visible = true;
			}
			if (this.shipb_array[1] < 3)
			{
				this.shipb_slot3.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot3.Visible = false;
			}
			else
			{
				this.shipb_slot3.Image = Image.FromFile(this.tempstring);
				this.shipb_slot3.Visible = true;
			}
			if (this.shipb_array[1] < 4)
			{
				this.shipb_slot4.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot4.Visible = false;
			}
			else
			{
				this.shipb_slot4.Image = Image.FromFile(this.tempstring);
				this.shipb_slot4.Visible = true;
			}
			if (this.shipb_array[1] < 5)
			{
				this.shipb_slot5.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot5.Visible = false;
			}
			else
			{
				this.shipb_slot5.Image = Image.FromFile(this.tempstring);
				this.shipb_slot5.Visible = true;
			}
			if (this.shipb_array[1] < 6)
			{
				this.shipb_slot6.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot6.Visible = false;
			}
			else
			{
				this.shipb_slot6.Image = Image.FromFile(this.tempstring);
				this.shipb_slot6.Visible = true;
			}
			if (this.shipb_array[1] < 7)
			{
				this.shipb_slot7.Image = Image.FromFile("pic\\b0.bmp");
				this.shipb_slot7.Visible = false;
			}
			else
			{
				this.shipb_slot7.Image = Image.FromFile(this.tempstring);
				this.shipb_slot7.Visible = true;
			}
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.shipc_array[2])[1]), ".bmp");
			if (this.shipc_array[1] < 1)
			{
				this.shipc_slot1.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot1.Visible = false;
			}
			else
			{
				this.shipc_slot1.Image = Image.FromFile(this.tempstring);
				this.shipc_slot1.Visible = true;
			}
			if (this.shipc_array[1] < 2)
			{
				this.shipc_slot2.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot2.Visible = false;
			}
			else
			{
				this.shipc_slot2.Image = Image.FromFile(this.tempstring);
				this.shipc_slot2.Visible = true;
			}
			if (this.shipc_array[1] < 3)
			{
				this.shipc_slot3.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot3.Visible = false;
			}
			else
			{
				this.shipc_slot3.Image = Image.FromFile(this.tempstring);
				this.shipc_slot3.Visible = true;
			}
			if (this.shipc_array[1] < 4)
			{
				this.shipc_slot4.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot4.Visible = false;
			}
			else
			{
				this.shipc_slot4.Image = Image.FromFile(this.tempstring);
				this.shipc_slot4.Visible = true;
			}
			if (this.shipc_array[1] < 5)
			{
				this.shipc_slot5.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot5.Visible = false;
			}
			else
			{
				this.shipc_slot5.Image = Image.FromFile(this.tempstring);
				this.shipc_slot5.Visible = true;
			}
			if (this.shipc_array[1] < 6)
			{
				this.shipc_slot6.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot6.Visible = false;
			}
			else
			{
				this.shipc_slot6.Image = Image.FromFile(this.tempstring);
				this.shipc_slot6.Visible = true;
			}
			if (this.shipc_array[1] < 7)
			{
				this.shipc_slot7.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot7.Visible = false;
			}
			else
			{
				this.shipc_slot7.Image = Image.FromFile(this.tempstring);
				this.shipc_slot7.Visible = true;
			}
			if (this.shipc_array[1] < 8)
			{
				this.shipc_slot8.Image = Image.FromFile("pic\\b0.bmp");
				this.shipc_slot8.Visible = false;
			}
			else
			{
				this.shipc_slot8.Image = Image.FromFile(this.tempstring);
				this.shipc_slot8.Visible = true;
			}
			this.Label7.Text =Conversion.Str(this.shipa_array[3]);
			this.Label8.Text =Conversion.Str(this.shipb_array[3]);
			this.Label9.Text =Conversion.Str(this.shipc_array[3]);
		}

		public void update_summary()
		{
			if (this.summary_on)
			{
				if (!this.summary_form.Visible)
				{
					this.summary_form.Visible = true;
				}
				this.summary_form.p1_name_label.Text =this.p1_name;
				this.summary_form.p2_name_label.Text =this.p2_name;
				this.summary_form.p3_name_label.Text =this.p3_name;
				this.summary_form.p4_name_label.Text =this.p4_name;
				this.summary_form.p5_name_label.Text =this.p5_name;
				this.summary_form.gov1.Visible = false;
				this.summary_form.gov2.Visible = false;
				this.summary_form.gov3.Visible = false;
				this.summary_form.gov4.Visible = false;
				this.summary_form.gov5.Visible = false;
				this.summary_form.role1.Visible = false;
				this.summary_form.role2.Visible = false;
				this.summary_form.role3.Visible = false;
				this.summary_form.role4.Visible = false;
				this.summary_form.role5.Visible = false;
				this.summary_form.cur1.Visible = false;
				this.summary_form.cur2.Visible = false;
				this.summary_form.cur3.Visible = false;
				this.summary_form.cur4.Visible = false;
				this.summary_form.cur5.Visible = false;
				this.summary_form.p1_name_label.Text =this.p1_name;
				this.summary_form.p2_name_label.Text =this.p2_name;
				this.summary_form.p3_name_label.Text =this.p3_name;
				this.summary_form.p4_name_label.Text =this.p4_name;
				this.summary_form.p5_name_label.Text =this.p5_name;
				if (this.number_of_players == 3)
				{
					this.summary_form.p1_name_label.Visible = true;
					this.summary_form.p2_name_label.Visible = true;
					this.summary_form.p3_name_label.Visible = true;
					this.summary_form.p4_name_label.Visible = false;
					this.summary_form.p5_name_label.Visible = false;
				}
				if (this.number_of_players == 4)
				{
					this.summary_form.p1_name_label.Visible = true;
					this.summary_form.p2_name_label.Visible = true;
					this.summary_form.p3_name_label.Visible = true;
					this.summary_form.p4_name_label.Visible = true;
					this.summary_form.p5_name_label.Visible = false;
				}
				if (this.number_of_players == 5)
				{
					this.summary_form.p1_name_label.Visible = true;
					this.summary_form.p2_name_label.Visible = true;
					this.summary_form.p3_name_label.Visible = true;
					this.summary_form.p4_name_label.Visible = true;
					this.summary_form.p5_name_label.Visible = true;
				}
				if (this.current_governor == 1)
				{
					this.summary_form.gov1.Visible = true;
				}
				if (this.current_governor == 2)
				{
					this.summary_form.gov2.Visible = true;
				}
				if (this.current_governor == 3)
				{
					this.summary_form.gov3.Visible = true;
				}
				if (this.current_governor == 4)
				{
					this.summary_form.gov4.Visible = true;
				}
				if (this.current_governor == 5)
				{
					this.summary_form.gov5.Visible = true;
				}
				if (this.current_player == 1)
				{
					this.summary_form.cur1.Visible = true;
				}
				if (this.current_player == 2)
				{
					this.summary_form.cur2.Visible = true;
				}
				if (this.current_player == 3)
				{
					this.summary_form.cur3.Visible = true;
				}
				if (this.current_player == 4)
				{
					this.summary_form.cur4.Visible = true;
				}
				if (this.current_player == 5)
				{
					this.summary_form.cur5.Visible = true;
				}
				if (this.current_role_chooser == 1)
				{
					this.summary_form.role1.Visible = true;
				}
				if (this.current_role_chooser == 2)
				{
					this.summary_form.role2.Visible = true;
				}
				if (this.current_role_chooser == 3)
				{
					this.summary_form.role3.Visible = true;
				}
				if (this.current_role_chooser == 4)
				{
					this.summary_form.role4.Visible = true;
				}
				if (this.current_role_chooser == 5)
				{
					this.summary_form.role5.Visible = true;
				}
			}
		}

		public void update_tradehouse_labels()
		{
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.trading_house_array[0])[1]), ".bmp");
			this.tradehouse_slot1.Image = Image.FromFile(this.tempstring);
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.trading_house_array[1])[1]), ".bmp");
			this.tradehouse_slot2.Image = Image.FromFile(this.tempstring);
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.trading_house_array[2])[1]), ".bmp");
			this.tradehouse_slot3.Image = Image.FromFile(this.tempstring);
			this.tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(this.trading_house_array[3])[1]), ".bmp");
			this.tradehouse_slot4.Image = Image.FromFile(this.tempstring);
		}

		public void update_vp_bank_num_via_shipping()
		{
			if (this.current_player == 1)
			{
				this.vp_bank_num = checked(this.vp_bank_num - this.p1_num_shipped);
				if (this.vp_bank_num <= 0)
				{
					this.game_end_triggered_victorypoints = true;
				}
			}
			if (this.current_player == 2)
			{
				this.vp_bank_num = checked(this.vp_bank_num - this.p2_num_shipped);
				if (this.vp_bank_num <= 0)
				{
					this.game_end_triggered_victorypoints = true;
				}
			}
			if (this.current_player == 3)
			{
				this.vp_bank_num = checked(this.vp_bank_num - this.p3_num_shipped);
				if (this.vp_bank_num <= 0)
				{
					this.game_end_triggered_victorypoints = true;
				}
			}
			if (this.current_player == 4)
			{
				this.vp_bank_num = checked(this.vp_bank_num - this.p4_num_shipped);
				if (this.vp_bank_num <= 0)
				{
					this.game_end_triggered_victorypoints = true;
				}
			}
			if (this.current_player == 5)
			{
				this.vp_bank_num = checked(this.vp_bank_num - this.p5_num_shipped);
				if (this.vp_bank_num <= 0)
				{
					this.game_end_triggered_victorypoints = true;
				}
			}
		}

		public void verification_alerts()
		{
			if (this.alerts_on)
			{
				this.alert_triggered = false;
				this.verify_indigo = 0;
				this.verify_sugar = 0;
				this.verify_corn = 0;
				this.verify_tobacco = 0;
				this.verify_coffee = 0;
				this.verify_colonists = 0;
				this.verify_indigo = checked(this.verify_indigo + this.goods_bank_array[0]);
				this.verify_sugar = checked(this.verify_sugar + this.goods_bank_array[1]);
				this.verify_corn = checked(this.verify_corn + this.goods_bank_array[2]);
				this.verify_tobacco = checked(this.verify_tobacco + this.goods_bank_array[3]);
				this.verify_coffee = checked(this.verify_coffee + this.goods_bank_array[4]);
				this.verify_indigo = checked(this.verify_indigo + this.goods_p1_array[0]);
				this.verify_sugar = checked(this.verify_sugar + this.goods_p1_array[1]);
				this.verify_corn = checked(this.verify_corn + this.goods_p1_array[2]);
				this.verify_tobacco = checked(this.verify_tobacco + this.goods_p1_array[3]);
				this.verify_coffee = checked(this.verify_coffee + this.goods_p1_array[4]);
				this.verify_indigo = checked(this.verify_indigo + this.goods_p2_array[0]);
				this.verify_sugar = checked(this.verify_sugar + this.goods_p2_array[1]);
				this.verify_corn = checked(this.verify_corn + this.goods_p2_array[2]);
				this.verify_tobacco = checked(this.verify_tobacco + this.goods_p2_array[3]);
				this.verify_coffee = checked(this.verify_coffee + this.goods_p2_array[4]);
				this.verify_indigo = checked(this.verify_indigo + this.goods_p3_array[0]);
				this.verify_sugar = checked(this.verify_sugar + this.goods_p3_array[1]);
				this.verify_corn = checked(this.verify_corn + this.goods_p3_array[2]);
				this.verify_tobacco = checked(this.verify_tobacco + this.goods_p3_array[3]);
				this.verify_coffee = checked(this.verify_coffee + this.goods_p3_array[4]);
				this.verify_indigo = checked(this.verify_indigo + this.goods_p4_array[0]);
				this.verify_sugar = checked(this.verify_sugar + this.goods_p4_array[1]);
				this.verify_corn = checked(this.verify_corn + this.goods_p4_array[2]);
				this.verify_tobacco = checked(this.verify_tobacco + this.goods_p4_array[3]);
				this.verify_coffee = checked(this.verify_coffee + this.goods_p4_array[4]);
				this.verify_indigo = checked(this.verify_indigo + this.goods_p5_array[0]);
				this.verify_sugar = checked(this.verify_sugar + this.goods_p5_array[1]);
				this.verify_corn = checked(this.verify_corn + this.goods_p5_array[2]);
				this.verify_tobacco = checked(this.verify_tobacco + this.goods_p5_array[3]);
				this.verify_coffee = checked(this.verify_coffee + this.goods_p5_array[4]);
				if (this.shipa_array[2] == 1)
				{
					this.verify_indigo = checked(this.verify_indigo + this.shipa_array[1]);
				}
				if (this.shipb_array[2] == 1)
				{
					this.verify_indigo = checked(this.verify_indigo + this.shipb_array[1]);
				}
				if (this.shipc_array[2] == 1)
				{
					this.verify_indigo = checked(this.verify_indigo + this.shipc_array[1]);
				}
				if (this.shipa_array[2] == 2)
				{
					this.verify_sugar = checked(this.verify_sugar + this.shipa_array[1]);
				}
				if (this.shipb_array[2] == 2)
				{
					this.verify_sugar = checked(this.verify_sugar + this.shipb_array[1]);
				}
				if (this.shipc_array[2] == 2)
				{
					this.verify_sugar = checked(this.verify_sugar + this.shipc_array[1]);
				}
				if (this.shipa_array[2] == 3)
				{
					this.verify_corn = checked(this.verify_corn + this.shipa_array[1]);
				}
				if (this.shipb_array[2] == 3)
				{
					this.verify_corn = checked(this.verify_corn + this.shipb_array[1]);
				}
				if (this.shipc_array[2] == 3)
				{
					this.verify_corn = checked(this.verify_corn + this.shipc_array[1]);
				}
				if (this.shipa_array[2] == 4)
				{
					this.verify_tobacco = checked(this.verify_tobacco + this.shipa_array[1]);
				}
				if (this.shipb_array[2] == 4)
				{
					this.verify_tobacco = checked(this.verify_tobacco + this.shipb_array[1]);
				}
				if (this.shipc_array[2] == 4)
				{
					this.verify_tobacco = checked(this.verify_tobacco + this.shipc_array[1]);
				}
				if (this.shipa_array[2] == 5)
				{
					this.verify_coffee = checked(this.verify_coffee + this.shipa_array[1]);
				}
				if (this.shipb_array[2] == 5)
				{
					this.verify_coffee = checked(this.verify_coffee + this.shipb_array[1]);
				}
				if (this.shipc_array[2] == 5)
				{
					this.verify_coffee = checked(this.verify_coffee + this.shipc_array[1]);
				}
				this.counter1 = 0;
				do
				{
					if (this.trading_house_array[this.counter1] == 1)
					{
						this.verify_indigo = checked(this.verify_indigo + 1);
					}
					if (this.trading_house_array[this.counter1] == 2)
					{
						this.verify_sugar = checked(this.verify_sugar + 1);
					}
					if (this.trading_house_array[this.counter1] == 3)
					{
						this.verify_corn = checked(this.verify_corn + 1);
					}
					if (this.trading_house_array[this.counter1] == 4)
					{
						this.verify_tobacco = checked(this.verify_tobacco + 1);
					}
					if (this.trading_house_array[this.counter1] == 5)
					{
						this.verify_coffee = checked(this.verify_coffee + 1);
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (this.counter1 <= 3);
				if (this.verify_indigo != 11)
				{
					this.alert_triggered = true;
					this.infobox_nopic(string.Concat("ALERT - There should be 11 Indigo and there currently is ", Conversion.Str(this.verify_indigo)));
				}
				if (this.verify_sugar != 11)
				{
					this.alert_triggered = true;
					this.infobox_nopic(string.Concat("ALERT - There should be 11 sugar and there currently is ", Conversion.Str(this.verify_sugar)));
				}
				if (this.verify_corn != 10)
				{
					this.alert_triggered = true;
					this.infobox_nopic(string.Concat("ALERT - There should be 10 corn and there currently is ", Conversion.Str(this.verify_corn)));
				}
				if (this.verify_tobacco != 9)
				{
					this.alert_triggered = true;
					this.infobox_nopic(string.Concat("ALERT - There should be 9 tobacco and there currently is ", Conversion.Str(this.verify_tobacco)));
				}
				if (this.verify_coffee != 9)
				{
					this.alert_triggered = true;
					this.infobox_nopic(string.Concat("ALERT - There should be 9 coffee and there currently is ", Conversion.Str(this.verify_coffee)));
				}
				if (this.idle_colonists_array[1] < 0)
				{
					this.alert_triggered = true;
					this.infobox_nopic("ALERT - Player1 has negative idle colonists");
				}
				if (this.idle_colonists_array[2] < 0)
				{
					this.alert_triggered = true;
					this.infobox_nopic("ALERT - Player2 has negative idle colonists");
				}
				if (this.idle_colonists_array[3] < 0)
				{
					this.alert_triggered = true;
					this.infobox_nopic("ALERT - Player3 has negative idle colonists");
				}
				if (this.idle_colonists_array[4] < 0)
				{
					this.alert_triggered = true;
					this.infobox_nopic("ALERT - Player4 has negative idle colonists");
				}
				if (this.idle_colonists_array[5] < 0)
				{
					this.alert_triggered = true;
					this.infobox_nopic("ALERT - Player5 has negative idle colonists");
				}
				if (this.alert_triggered)
				{
					this.tempinteger = this.tempinteger;
				}
			}
		}

		public void verify_trader_end()
		{
			if (this.current_player == 1 & this.trader_round & !this.p1_traded)
			{
				this.confirmbox_role("Are you sure you want to end your turn without trading?", "role_trader");
#warning: Best guess.  In .NET framework 1, it was just a statement !this.confirmed;
				this.confirmed = !this.confirmed;
			}
		}

		private void vpremain_label_Click(object sender, EventArgs e)
		{
			this.help_vp_remaining();
		}

		private void wharf_pic_Click(object sender, EventArgs e)
		{
			if (this.current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((this.ready_to_ship_indigo | this.ready_to_ship_sugar | this.ready_to_ship_corn | this.ready_to_ship_tobacco | this.ready_to_ship_coffee) & !this.p1_done_shipping)
			{
				this.load_wharf();
			}
		}

		public void what_plantations_available()
		{
			this.indigo_available = false;
			this.indigo_available_slot = 99;
			this.sugar_available = false;
			this.sugar_available_slot = 99;
			this.corn_available = false;
			this.corn_available_slot = 99;
			this.tobacco_available = false;
			this.tobacco_available_slot = 99;
			this.coffee_available = false;
			this.coffee_available_slot = 99;
			this.quarry_available = false;
			this.counter1 = 0;
			do
			{
				if (this.plantation_available_array[this.counter1] == 10)
				{
					this.indigo_available = true;
					this.indigo_available_slot = this.counter1;
				}
				if (this.plantation_available_array[this.counter1] == 20)
				{
					this.sugar_available = true;
					this.sugar_available_slot = this.counter1;
				}
				if (this.plantation_available_array[this.counter1] == 30)
				{
					this.corn_available = true;
					this.corn_available_slot = this.counter1;
				}
				if (this.plantation_available_array[this.counter1] == 40)
				{
					this.tobacco_available = true;
					this.tobacco_available_slot = this.counter1;
				}
				if (this.plantation_available_array[this.counter1] == 50)
				{
					this.coffee_available = true;
					this.coffee_available_slot = this.counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (this.counter1 <= 5);
			if (this.goods_bank_array[5] > 0)
			{
				this.quarry_available = true;
			}
		}
	}
}
