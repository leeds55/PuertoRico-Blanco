using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Resources;
using System.Runtime.CompilerServices;
using System.Windows.Forms;

namespace PuertoRico
{
	public class Form1 : Form
	{
		[AccessedThroughProperty("MenuItem6")]
		private MenuItem _MenuItem6;

		[AccessedThroughProperty("num_sugar_bank_label")]
		private Label _num_sugar_bank_label;

		[AccessedThroughProperty("num_indigo_bank_label")]
		private Label _num_indigo_bank_label;

		[AccessedThroughProperty("num_quarry_bank_label")]
		private Label _num_quarry_bank_label;

		[AccessedThroughProperty("gold_label")]
		private Label _gold_label;

		[AccessedThroughProperty("settler_bonus_label")]
		private Label _settler_bonus_label;

		[AccessedThroughProperty("mayor_bonus_label")]
		private Label _mayor_bonus_label;

		[AccessedThroughProperty("builder_bonus_label")]
		private Label _builder_bonus_label;

		[AccessedThroughProperty("craftsman_bonus_label")]
		private Label _craftsman_bonus_label;

		[AccessedThroughProperty("captain_bonus_label")]
		private Label _captain_bonus_label;

		[AccessedThroughProperty("pros1_bonus_label")]
		private Label _pros1_bonus_label;

		[AccessedThroughProperty("trader_bonus_label")]
		private Label _trader_bonus_label;

		[AccessedThroughProperty("role_prospector2_pic")]
		private PictureBox _role_prospector2_pic;

		[AccessedThroughProperty("pros2_bonus_label")]
		private Label _pros2_bonus_label;

		[AccessedThroughProperty("governor_pic")]
		private PictureBox _governor_pic;

		[AccessedThroughProperty("plantation_available_slot6")]
		private PictureBox _plantation_available_slot6;

		[AccessedThroughProperty("plantation_available_slot5")]
		private PictureBox _plantation_available_slot5;

		[AccessedThroughProperty("plantation_available_slot2")]
		private PictureBox _plantation_available_slot2;

		[AccessedThroughProperty("plantation_available_slot4")]
		private PictureBox _plantation_available_slot4;

		[AccessedThroughProperty("plantation_available_slot1")]
		private PictureBox _plantation_available_slot1;

		[AccessedThroughProperty("plantation_available_slot3")]
		private PictureBox _plantation_available_slot3;

		[AccessedThroughProperty("plant_p1_slot1")]
		private PictureBox _plant_p1_slot1;

		[AccessedThroughProperty("plant_p1_slot2")]
		private PictureBox _plant_p1_slot2;

		[AccessedThroughProperty("plant_p1_slot3")]
		private PictureBox _plant_p1_slot3;

		[AccessedThroughProperty("prnondistext")]
		private Label _prnondistext;

		[AccessedThroughProperty("plant_p1_slot6")]
		private PictureBox _plant_p1_slot6;

		[AccessedThroughProperty("plant_p1_slot5")]
		private PictureBox _plant_p1_slot5;

		[AccessedThroughProperty("plant_p1_slot4")]
		private PictureBox _plant_p1_slot4;

		[AccessedThroughProperty("plant_p1_slot9")]
		private PictureBox _plant_p1_slot9;

		[AccessedThroughProperty("plant_p1_slot8")]
		private PictureBox _plant_p1_slot8;

		[AccessedThroughProperty("plant_p1_slot7")]
		private PictureBox _plant_p1_slot7;

		[AccessedThroughProperty("plant_p1_slot11")]
		private PictureBox _plant_p1_slot11;

		[AccessedThroughProperty("plant_p1_slot10")]
		private PictureBox _plant_p1_slot10;

		[AccessedThroughProperty("plant_p1_slot12")]
		private PictureBox _plant_p1_slot12;

		[AccessedThroughProperty("Label3")]
		private Label _Label3;

		[AccessedThroughProperty("tradehouse_slot4")]
		private PictureBox _tradehouse_slot4;

		[AccessedThroughProperty("tradehouse_slot3")]
		private PictureBox _tradehouse_slot3;

		[AccessedThroughProperty("tradehouse_slot2")]
		private PictureBox _tradehouse_slot2;

		[AccessedThroughProperty("tradehouse_slot1")]
		private PictureBox _tradehouse_slot1;

		[AccessedThroughProperty("build_p1_slot1")]
		private PictureBox _build_p1_slot1;

		[AccessedThroughProperty("build_p1_slot2")]
		private PictureBox _build_p1_slot2;

		[AccessedThroughProperty("build_p1_slot3")]
		private PictureBox _build_p1_slot3;

		[AccessedThroughProperty("build_p1_slot6")]
		private PictureBox _build_p1_slot6;

		[AccessedThroughProperty("build_p1_slot5")]
		private PictureBox _build_p1_slot5;

		[AccessedThroughProperty("build_p1_slot4")]
		private PictureBox _build_p1_slot4;

		[AccessedThroughProperty("build_p1_slot9")]
		private PictureBox _build_p1_slot9;

		[AccessedThroughProperty("build_p1_slot8")]
		private PictureBox _build_p1_slot8;

		[AccessedThroughProperty("build_p1_slot7")]
		private PictureBox _build_p1_slot7;

		[AccessedThroughProperty("build_p1_slot12")]
		private PictureBox _build_p1_slot12;

		[AccessedThroughProperty("build_p1_slot11")]
		private PictureBox _build_p1_slot11;

		[AccessedThroughProperty("build_p1_slot10")]
		private PictureBox _build_p1_slot10;

		[AccessedThroughProperty("build_p1_slot13")]
		private PictureBox _build_p1_slot13;

		[AccessedThroughProperty("next_turn_button")]
		private Button _next_turn_button;

		[AccessedThroughProperty("role_builder_pic")]
		private PictureBox _role_builder_pic;

		[AccessedThroughProperty("role_craftsman_pic")]
		private PictureBox _role_craftsman_pic;

		[AccessedThroughProperty("role_prospector1_pic")]
		private PictureBox _role_prospector1_pic;

		[AccessedThroughProperty("build_p1_slot19")]
		private PictureBox _build_p1_slot19;

		[AccessedThroughProperty("MenuItem7")]
		private MenuItem _MenuItem7;

		[AccessedThroughProperty("build_p1_slot17")]
		private PictureBox _build_p1_slot17;

		[AccessedThroughProperty("MenuItem5")]
		private MenuItem _MenuItem5;

		[AccessedThroughProperty("MenuItem8")]
		private MenuItem _MenuItem8;

		[AccessedThroughProperty("Label5")]
		private Label _Label5;

		[AccessedThroughProperty("build_p1_slot15")]
		private PictureBox _build_p1_slot15;

		[AccessedThroughProperty("build_p1_slot14")]
		private PictureBox _build_p1_slot14;

		[AccessedThroughProperty("build_p1_slot16")]
		private PictureBox _build_p1_slot16;

		[AccessedThroughProperty("build_p1_slot18")]
		private PictureBox _build_p1_slot18;

		[AccessedThroughProperty("build_p1_slot20")]
		private PictureBox _build_p1_slot20;

		[AccessedThroughProperty("Label6")]
		private Label _Label6;

		[AccessedThroughProperty("Label7")]
		private Label _Label7;

		[AccessedThroughProperty("Label8")]
		private Label _Label8;

		[AccessedThroughProperty("Label9")]
		private Label _Label9;

		[AccessedThroughProperty("shipc_pic")]
		private PictureBox _shipc_pic;

		[AccessedThroughProperty("shipb_pic")]
		private PictureBox _shipb_pic;

		[AccessedThroughProperty("shipa_pic")]
		private PictureBox _shipa_pic;

		[AccessedThroughProperty("Label10")]
		private Label _Label10;

		[AccessedThroughProperty("wharf_pic")]
		private PictureBox _wharf_pic;

		[AccessedThroughProperty("vpremain_label")]
		private Label _vpremain_label;

		[AccessedThroughProperty("Label12")]
		private Label _Label12;

		[AccessedThroughProperty("Label1")]
		private Label _Label1;

		[AccessedThroughProperty("MenuItem4")]
		private MenuItem _MenuItem4;

		[AccessedThroughProperty("Label4")]
		private Label _Label4;

		[AccessedThroughProperty("vp_chips_label")]
		private Label _vp_chips_label;

		[AccessedThroughProperty("vp_total_label")]
		private Label _vp_total_label;

		[AccessedThroughProperty("shipa_slot6")]
		private PictureBox _shipa_slot6;

		[AccessedThroughProperty("done_trading_button")]
		private Button _done_trading_button;

		[AccessedThroughProperty("menu_view")]
		private MenuItem _menu_view;

		[AccessedThroughProperty("idle_colonists_label")]
		private Label _idle_colonists_label;

		[AccessedThroughProperty("num_coffee_label")]
		private Label _num_coffee_label;

		[AccessedThroughProperty("shipa_slot5")]
		private PictureBox _shipa_slot5;

		[AccessedThroughProperty("num_tobacco_label")]
		private Label _num_tobacco_label;

		[AccessedThroughProperty("menu_help_about")]
		private MenuItem _menu_help_about;

		[AccessedThroughProperty("num_corn_label")]
		private Label _num_corn_label;

		[AccessedThroughProperty("shipa_slot4")]
		private PictureBox _shipa_slot4;

		[AccessedThroughProperty("num_sugar_label")]
		private Label _num_sugar_label;

		[AccessedThroughProperty("Label11")]
		private Label _Label11;

		[AccessedThroughProperty("num_indigo_label")]
		private Label _num_indigo_label;

		[AccessedThroughProperty("prcoverbox")]
		private PictureBox _prcoverbox;

		[AccessedThroughProperty("auto_captain_button")]
		private Button _auto_captain_button;

		[AccessedThroughProperty("nondis_button")]
		private Button _nondis_button;

		[AccessedThroughProperty("shipc_slot1")]
		private PictureBox _shipc_slot1;

		[AccessedThroughProperty("MenuItem1")]
		private MenuItem _MenuItem1;

		[AccessedThroughProperty("shipc_slot2")]
		private PictureBox _shipc_slot2;

		[AccessedThroughProperty("shipc_slot3")]
		private PictureBox _shipc_slot3;

		[AccessedThroughProperty("nondis_label")]
		private Label _nondis_label;

		[AccessedThroughProperty("shipa_slot3")]
		private PictureBox _shipa_slot3;

		[AccessedThroughProperty("Button2")]
		private Button _Button2;

		[AccessedThroughProperty("role_settler_pic")]
		private PictureBox _role_settler_pic;

		[AccessedThroughProperty("role_mayor_pic")]
		private PictureBox _role_mayor_pic;

		[AccessedThroughProperty("role_trader_pic")]
		private PictureBox _role_trader_pic;

		[AccessedThroughProperty("shipa_slot2")]
		private PictureBox _shipa_slot2;

		[AccessedThroughProperty("menu_help_rules")]
		private MenuItem _menu_help_rules;

		[AccessedThroughProperty("role_captain_pic")]
		private PictureBox _role_captain_pic;

		[AccessedThroughProperty("colonist_ship_pic")]
		private PictureBox _colonist_ship_pic;

		[AccessedThroughProperty("shipa_slot1")]
		private PictureBox _shipa_slot1;

		[AccessedThroughProperty("num_colonist_ship_label")]
		private Label _num_colonist_ship_label;

		[AccessedThroughProperty("menu_help")]
		private MenuItem _menu_help;

		[AccessedThroughProperty("Button1")]
		private Button _Button1;

		[AccessedThroughProperty("shipb_slot7")]
		private PictureBox _shipb_slot7;

		[AccessedThroughProperty("done_choosing_craftsman_button")]
		private Button _done_choosing_craftsman_button;

		[AccessedThroughProperty("player_board_pic")]
		private PictureBox _player_board_pic;

		[AccessedThroughProperty("MenuItem3")]
		private MenuItem _MenuItem3;

		[AccessedThroughProperty("menu_game_exit")]
		private MenuItem _menu_game_exit;

		[AccessedThroughProperty("shipb_slot6")]
		private PictureBox _shipb_slot6;

		[AccessedThroughProperty("num_colonist_bank_label")]
		private Label _num_colonist_bank_label;

		[AccessedThroughProperty("num_coffee_bank_label")]
		private Label _num_coffee_bank_label;

		[AccessedThroughProperty("num_tobacco_bank_label")]
		private Label _num_tobacco_bank_label;

		[AccessedThroughProperty("shipb_slot5")]
		private PictureBox _shipb_slot5;

		[AccessedThroughProperty("MenuItem2")]
		private MenuItem _MenuItem2;

		[AccessedThroughProperty("num_corn_bank_label")]
		private Label _num_corn_bank_label;

		[AccessedThroughProperty("shipc_slot4")]
		private PictureBox _shipc_slot4;

		[AccessedThroughProperty("shipb_slot4")]
		private PictureBox _shipb_slot4;

		[AccessedThroughProperty("start_game_button")]
		private Button _start_game_button;

		[AccessedThroughProperty("shipc_slot5")]
		private PictureBox _shipc_slot5;

		[AccessedThroughProperty("menu_game_new")]
		private MenuItem _menu_game_new;

		[AccessedThroughProperty("shipc_slot6")]
		private PictureBox _shipc_slot6;

		[AccessedThroughProperty("shipb_slot3")]
		private PictureBox _shipb_slot3;

		[AccessedThroughProperty("Button3")]
		private Button _Button3;

		[AccessedThroughProperty("shipc_slot7")]
		private PictureBox _shipc_slot7;

		[AccessedThroughProperty("shipc_slot8")]
		private PictureBox _shipc_slot8;

		[AccessedThroughProperty("menu_game")]
		private MenuItem _menu_game;

		[AccessedThroughProperty("shipb_slot2")]
		private PictureBox _shipb_slot2;

		[AccessedThroughProperty("MainMenu1")]
		private MainMenu _MainMenu1;

		[AccessedThroughProperty("shipb_slot1")]
		private PictureBox _shipb_slot1;

		[AccessedThroughProperty("Label2")]
		private Label _Label2;

		[AccessedThroughProperty("PictureBox1")]
		private PictureBox _PictureBox1;

		private IContainer components;

		public StreamWriter sw;

		public Buildings buildings_form;

		public Setup setup_form;

		public Info1 info_form;

		public Player2 player2_form;

		public Player3 player3_form;

		public Player4 player4_form;

		public Player5 player5_form;

		public Mayor1 mayor1_form;

		public Craftsman1 craftsman1_form;

		public Summary1 summary_form;

		public Score1 score_form;

		public Storage1 storage_form;

		public Confirmnopic confirmnopic_form;

		public Confirmrole confirmrole_form;

		public Confirmplant confirmplant_form;

		public Confirmbuilding1 confirmbuilding1_form;

		public Confirmbuilding2 confirmbuilding2_form;

		public Infonopic infonopic_form;

		public Inforole inforole_form;

		public Infoplant infoplant_form;

		public Infobuilding1 infobuilding1_form;

		public Infobuilding2 infobuilding2_form;

		public int[] plantations_tilebag_array;

		public int[] plantations_tilebag_array2;

		public int[] plantations_discarded_array;

		public int[] plantations_p1_array;

		public int[] plantations_p2_array;

		public int[] plantations_p3_array;

		public int[] plantations_p4_array;

		public int[] plantations_p5_array;

		public int[] plantation_available_array;

		public int num_plantations_p1;

		public int num_plantations_p2;

		public int num_plantations_p3;

		public int num_plantations_p4;

		public int num_plantations_p5;

		public int[] buildings_p1_array;

		public int[] buildings_p2_array;

		public int[] buildings_p3_array;

		public int[] buildings_p4_array;

		public int[] buildings_p5_array;

		public int[] buildings_available_array;

		public int[] bonus_roles_array;

		public int[] goods_bank_array;

		public int[] goods_bank_array2;

		public int[] goods_p1_array;

		public int[] goods_p2_array;

		public int[] goods_p3_array;

		public int[] goods_p4_array;

		public int[] goods_p5_array;

		public int[] p1_storage_array;

		public int[] p2_storage_array;

		public int[] p3_storage_array;

		public int[] p4_storage_array;

		public int[] p5_storage_array;

		public int[] goods_this_turn_p1_array;

		public int[] goods_this_turn_p2_array;

		public int[] goods_this_turn_p3_array;

		public int[] goods_this_turn_p4_array;

		public int[] goods_this_turn_p5_array;

		public int[] goods_ability_p1_array;

		public int[] goods_ability_p2_array;

		public int[] goods_ability_p3_array;

		public int[] goods_ability_p4_array;

		public int[] goods_ability_p5_array;

		public int num_buildings_p1;

		public int num_buildings_p2;

		public int num_buildings_p3;

		public int num_buildings_p4;

		public int num_buildings_p5;

		public int num_quarries_p1;

		public int num_quarries_p2;

		public int num_quarries_p3;

		public int num_quarries_p4;

		public int num_quarries_p5;

		public int num_manned_quarries_p1;

		public int num_manned_quarries_p2;

		public int num_manned_quarries_p3;

		public int num_manned_quarries_p4;

		public int num_manned_quarries_p5;

		public int num_empty_corn_plant_p1;

		public int num_empty_corn_plant_p2;

		public int num_empty_corn_plant_p3;

		public int num_empty_corn_plant_p4;

		public int num_empty_corn_plant_p5;

		public int[] idle_colonists_array;

		public int[] idle_colonists_this_turn_array;

		public int[] colonists_array;

		public int[] empty_colonists_slots_array;

		public int p1_empty_colonists_slots;

		public int p2_empty_colonists_slots;

		public int p3_empty_colonists_slots;

		public int p4_empty_colonists_slots;

		public int p5_empty_colonists_slots;

		public int gold_p1;

		public int gold_p2;

		public int gold_p3;

		public int gold_p4;

		public int gold_p5;

		public int vpchips_p1;

		public int vpchips_p2;

		public int vpchips_p3;

		public int vpchips_p4;

		public int vpchips_p5;

		public int vp_buildings_p1;

		public int vp_buildings_p2;

		public int vp_buildings_p3;

		public int vp_buildings_p4;

		public int vp_buildings_p5;

		public int p1_total_score;

		public int p2_total_score;

		public int p3_total_score;

		public int p4_total_score;

		public int p5_total_score;

		public int[] shipa_array;

		public int[] shipb_array;

		public int[] shipc_array;

		public int[] trading_house_array;

		public int colonists_bank_num;

		public int colonists_ship_num;

		public int vp_bank_num;

		public int number_of_players;

		public int seat_num;

		public bool finished;

		public bool p2_finished_choosing_role;

		public bool p3_finished_choosing_role;

		public bool p4_finished_choosing_role;

		public bool p5_finished_choosing_role;

		public bool finishedx;

		public bool p2_ai_done;

		public bool p3_ai_done;

		public bool p4_ai_done;

		public bool p5_ai_done;

		public int counter1;

		public int counter2;

		public int counter3;

		public int counter1x;

		public int counter2x;

		public int counter3x;

		public int random1;

		public bool chance;

		public string tempstring;

		public string tempstring2;

		public int tempinteger;

		public bool game_started;

		public bool game_over;

		public bool rand_finished;

		public bool confirmed;

		public bool found_building;

		public bool found_buildingx;

		public bool found_plantation;

		public bool found_good;

		public bool end_announced;

		public bool already_there;

		public bool trading_house_full;

		public bool p1_done_all_shipping;

		public bool p2_done_all_shipping;

		public bool p3_done_all_shipping;

		public bool p4_done_all_shipping;

		public bool p5_done_all_shipping;

		public bool all_done_all_shipping;

		public bool p1_done_shipping;

		public bool p2_done_shipping;

		public bool p3_done_shipping;

		public bool p4_done_shipping;

		public bool p5_done_shipping;

		public int p1_num_shipped;

		public int p2_num_shipped;

		public int p3_num_shipped;

		public int p4_num_shipped;

		public int p5_num_shipped;

		public bool need_to_pick_ship;

		public bool summary_on;

		public bool p1_used_wharf;

		public bool p2_used_wharf;

		public bool p3_used_wharf;

		public bool p4_used_wharf;

		public bool p5_used_wharf;

		public bool captain_bonus_taken;

		public int dialog_box_OK_timer;

		public int[] player_order_array;

		public int current_role_chooser;

		public int current_player;

		public int current_playerx;

		public int current_player_captain;

		public int current_governor;

		public string current_player_string;

		public string current_role_chooser_string;

		public string current_governor_string;

		public string p1_name;

		public string p2_name;

		public string p3_name;

		public string p4_name;

		public string p5_name;

		public bool p1_chose_plantation;

		public bool p1_chose_extra_good;

		public bool p1_traded;

		public bool p2_traded;

		public bool p3_traded;

		public bool p4_traded;

		public bool p5_traded;

		public bool p1_taken_turn;

		public bool p2_taken_turn;

		public bool p3_taken_turn;

		public bool p4_taken_turn;

		public bool p5_taken_turn;

		public bool p1_been_governor;

		public bool p2_been_governor;

		public bool p3_been_governor;

		public bool p4_been_governor;

		public bool p5_been_governor;

		public bool p1_dumped;

		public bool p2_dumped;

		public bool p3_dumped;

		public bool p4_dumped;

		public bool p5_dumped;

		public bool settler_round;

		public bool mayor_round;

		public bool builder_round;

		public bool craftsman_round;

		public bool trader_round;

		public bool captain_round;

		public bool prospector1_round;

		public bool prospector2_round;

		public bool first_round;

		public object restart_turn_routine;

		public bool p1_choosing_role;

		public bool new_governor;

		public bool new_role_chooser;

		public bool processed_builder;

		public bool goods_to_ship;

		public bool goods_to_produce;

		public bool goods_to_trade;

		public bool space_to_ship;

		public int indigo_shipnum;

		public int sugar_shipnum;

		public int corn_shipnum;

		public int tobacco_shipnum;

		public int coffee_shipnum;

		public bool indigo_ship_available;

		public bool sugar_ship_available;

		public bool corn_ship_available;

		public bool tobacco_ship_available;

		public bool coffee_ship_available;

		public bool indigo_ship_full;

		public bool sugar_ship_full;

		public bool corn_ship_full;

		public bool tobacco_ship_full;

		public bool coffee_ship_full;

		public bool empty_ship_available;

		public bool ships_can_take_indigo;

		public bool ships_can_take_sugar;

		public bool ships_can_take_corn;

		public bool ships_can_take_tobacco;

		public bool ships_can_take_coffee;

		public bool ready_to_ship_indigo;

		public bool ready_to_ship_sugar;

		public bool ready_to_ship_corn;

		public bool ready_to_ship_tobacco;

		public bool ready_to_ship_coffee;

		public bool p1_built;

		public bool p2_built;

		public bool p3_built;

		public bool p4_built;

		public bool p5_built;

		public bool p1_built_nothing;

		public bool p1_ready_to_end_settler;

		public bool p2_ready_to_end_settler;

		public bool p3_ready_to_end_settler;

		public bool p4_ready_to_end_settler;

		public bool p5_ready_to_end_settler;

		public int new_colonists_needed;

		public int discard_size;

		public bool game_end_triggered_colonists;

		public bool game_end_triggered_buildings;

		public bool game_end_triggered_victorypoints;

		public int p1_tiebreaker;

		public int p2_tiebreaker;

		public int p3_tiebreaker;

		public int p4_tiebreaker;

		public int p5_tiebreaker;

		public string current_winner;

		public int current_best_tiebreaker;

		public string tie1;

		public string tie2;

		public string tie3;

		public string tie4;

		public string tie5;

		public string[] tie_breaker_array;

		public int verify_indigo;

		public int verify_sugar;

		public int verify_corn;

		public int verify_tobacco;

		public int verify_coffee;

		public int verify_colonists;

		public bool alerts_on;

		public bool developer_on;

		public bool alert_triggered;

		public bool p1_manned_office;

		public bool autoclick_captain_phase_on;

		public bool p1_just_clicked_autoclick;

		public bool role_has_been_chosen;

		public bool p2_chose_quarry;

		public bool p2_chose_corn;

		public bool p2_chose_random;

		public bool p2_manned_construction_hut;

		public bool p2_manned_hospice;

		public bool p2_manned_hacienda;

		public bool p2_use_hacienda;

		public bool p2_chose_settler;

		public bool p2_chose_trader;

		public bool p2_manned_small_market;

		public bool p2_manned_large_market;

		public int p2_num_indigo_plants;

		public int p2_num_sugar_plants;

		public int p2_num_tobacco_plants;

		public int p2_num_coffee_plants;

		public bool p2_manned_office;

		public bool p3_chose_quarry;

		public bool p3_chose_corn;

		public bool p3_chose_random;

		public bool p3_manned_construction_hut;

		public bool p3_manned_hospice;

		public bool p3_manned_hacienda;

		public bool p3_use_hacienda;

		public bool p3_chose_settler;

		public bool p3_chose_trader;

		public bool p3_manned_small_market;

		public bool p3_manned_large_market;

		public int p3_num_indigo_plants;

		public int p3_num_sugar_plants;

		public int p3_num_tobacco_plants;

		public int p3_num_coffee_plants;

		public bool p3_manned_office;

		public bool p4_chose_quarry;

		public bool p4_chose_corn;

		public bool p4_chose_random;

		public bool p4_manned_construction_hut;

		public bool p4_manned_hospice;

		public bool p4_manned_hacienda;

		public bool p4_use_hacienda;

		public bool p4_chose_settler;

		public bool p4_chose_trader;

		public bool p4_manned_small_market;

		public bool p4_manned_large_market;

		public int p4_num_indigo_plants;

		public int p4_num_sugar_plants;

		public int p4_num_tobacco_plants;

		public int p4_num_coffee_plants;

		public bool p4_manned_office;

		public bool p5_chose_quarry;

		public bool p5_chose_corn;

		public bool p5_chose_random;

		public bool p5_manned_construction_hut;

		public bool p5_manned_hospice;

		public bool p5_manned_hacienda;

		public bool p5_use_hacienda;

		public bool p5_chose_settler;

		public bool p5_chose_trader;

		public bool p5_manned_small_market;

		public bool p5_manned_large_market;

		public int p5_num_indigo_plants;

		public int p5_num_sugar_plants;

		public int p5_num_tobacco_plants;

		public int p5_num_coffee_plants;

		public bool p5_manned_office;

		public string previous_role;

		public bool indigo_available;

		public int indigo_available_slot;

		public bool sugar_available;

		public int sugar_available_slot;

		public bool corn_available;

		public int corn_available_slot;

		public bool tobacco_available;

		public int tobacco_available_slot;

		public bool coffee_available;

		public int coffee_available_slot;

		public bool quarry_available;

		public int plantation_slot;

		public int building_slot;

		public bool buyable;

		public int discount1;

		public int discount2;

		public int build_final_cost;

		public int build_available_slot;

		public int build_cost;

		public int build_number;

		public string build_name;

		public int guild_hall_score;

		public int residence_score;

		public int fortress_score;

		public int customs_house_score;

		public int city_hall_score;

		public int best_building_num;

		public string best_shipping_method;

		public int best_storage_type;

		public int best_storage_qty;

		public int current_best_score;

		public int large_build_spot;

		public bool room_to_build_large;

		public bool afford_large;

		public int slots_to_store;

		public bool done_dumping;

		public bool stored_indigo;

		public bool stored_sugar;

		public bool stored_corn;

		public bool stored_tobacco;

		public bool stored_coffee;

		public string role_choice;

		public bool dont_choose_settler;

		public bool dont_choose_mayor;

		public bool dont_choose_builder;

		public bool dont_choose_craftsman;

		public bool dont_choose_trader;

		public bool dont_choose_captain;

		public bool dont_choose_prospector1;

		public bool dont_choose_prospector2;

		public bool need_to_choose_random;

		public bool free_buildings_available;

		public int turn_number;

		public int indigo_points_shipa;

		public int indigo_points_shipb;

		public int indigo_points_shipc;

		public int indigo_points_wharf;

		public int sugar_points_shipa;

		public int sugar_points_shipb;

		public int sugar_points_shipc;

		public int sugar_points_wharf;

		public int corn_points_shipa;

		public int corn_points_shipb;

		public int corn_points_shipc;

		public int corn_points_wharf;

		public int tobacco_points_shipa;

		public int tobacco_points_shipb;

		public int tobacco_points_shipc;

		public int tobacco_points_wharf;

		public int coffee_points_shipa;

		public int coffee_points_shipb;

		public int coffee_points_shipc;

		public int coffee_points_wharf;

		public bool shipa_empty;

		public bool shipb_empty;

		public bool shipc_empty;

		public string biggest_empty_ship;

		public bool found_indigo_match;

		public bool found_sugar_match;

		public bool found_tobacco_match;

		public bool found_coffee_match;

		public bool very_first_turn;

		internal virtual Button auto_captain_button
		{
			get
			{
				return _auto_captain_button;
			}
			set
			{
				if (_auto_captain_button != null)
				{
					Form1 form1 = this;
					_auto_captain_button.Click -=new EventHandler(form1.auto_captain_button_Click);
				}
				_auto_captain_button = value;
				if (_auto_captain_button != null)
				{
					Form1 form11 = this;
					_auto_captain_button.Click +=new EventHandler(form11.auto_captain_button_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot1
		{
			get
			{
				return _build_p1_slot1;
			}
			set
			{
				if (_build_p1_slot1 != null)
				{
					Form1 form1 = this;
					_build_p1_slot1.Click -=new EventHandler(form1.build_p1_slot1_Click);
				}
				_build_p1_slot1 = value;
				if (_build_p1_slot1 != null)
				{
					Form1 form11 = this;
					_build_p1_slot1.Click +=new EventHandler(form11.build_p1_slot1_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot10
		{
			get
			{
				return _build_p1_slot10;
			}
			set
			{
				if (_build_p1_slot10 != null)
				{
					Form1 form1 = this;
					_build_p1_slot10.Click -=new EventHandler(form1.build_p1_slot10_Click);
				}
				_build_p1_slot10 = value;
				if (_build_p1_slot10 != null)
				{
					Form1 form11 = this;
					_build_p1_slot10.Click +=new EventHandler(form11.build_p1_slot10_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot11
		{
			get
			{
				return _build_p1_slot11;
			}
			set
			{
				if (_build_p1_slot11 != null)
				{
					Form1 form1 = this;
					_build_p1_slot11.Click -=new EventHandler(form1.build_p1_slot11_Click);
				}
				_build_p1_slot11 = value;
				if (_build_p1_slot11 != null)
				{
					Form1 form11 = this;
					_build_p1_slot11.Click +=new EventHandler(form11.build_p1_slot11_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot12
		{
			get
			{
				return _build_p1_slot12;
			}
			set
			{
				if (_build_p1_slot12 != null)
				{
					Form1 form1 = this;
					_build_p1_slot12.Click -=new EventHandler(form1.build_p1_slot12_Click);
				}
				_build_p1_slot12 = value;
				if (_build_p1_slot12 != null)
				{
					Form1 form11 = this;
					_build_p1_slot12.Click +=new EventHandler(form11.build_p1_slot12_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot13
		{
			get
			{
				return _build_p1_slot13;
			}
			set
			{
				if (_build_p1_slot13 != null)
				{
					Form1 form1 = this;
					_build_p1_slot13.Click -=new EventHandler(form1.build_p1_slot13_Click);
				}
				_build_p1_slot13 = value;
				if (_build_p1_slot13 != null)
				{
					Form1 form11 = this;
					_build_p1_slot13.Click +=new EventHandler(form11.build_p1_slot13_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot14
		{
			get
			{
				return _build_p1_slot14;
			}
			set
			{
				if (_build_p1_slot14 != null)
				{
					Form1 form1 = this;
					_build_p1_slot14.Click -=new EventHandler(form1.build_p1_slot14_Click);
				}
				_build_p1_slot14 = value;
				if (_build_p1_slot14 != null)
				{
					Form1 form11 = this;
					_build_p1_slot14.Click +=new EventHandler(form11.build_p1_slot14_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot15
		{
			get
			{
				return _build_p1_slot15;
			}
			set
			{
				if (_build_p1_slot15 != null)
				{
					Form1 form1 = this;
					_build_p1_slot15.Click -=new EventHandler(form1.build_p1_slot15_Click);
				}
				_build_p1_slot15 = value;
				if (_build_p1_slot15 != null)
				{
					Form1 form11 = this;
					_build_p1_slot15.Click +=new EventHandler(form11.build_p1_slot15_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot16
		{
			get
			{
				return _build_p1_slot16;
			}
			set
			{
				if (_build_p1_slot16 != null)
				{
					Form1 form1 = this;
					_build_p1_slot16.Click -=new EventHandler(form1.build_p1_slot16_Click);
				}
				_build_p1_slot16 = value;
				if (_build_p1_slot16 != null)
				{
					Form1 form11 = this;
					_build_p1_slot16.Click +=new EventHandler(form11.build_p1_slot16_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot17
		{
			get
			{
				return _build_p1_slot17;
			}
			set
			{
				if (_build_p1_slot17 != null)
				{
					Form1 form1 = this;
					_build_p1_slot17.Click -=new EventHandler(form1.build_p1_slot17_Click);
				}
				_build_p1_slot17 = value;
				if (_build_p1_slot17 != null)
				{
					Form1 form11 = this;
					_build_p1_slot17.Click +=new EventHandler(form11.build_p1_slot17_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot18
		{
			get
			{
				return _build_p1_slot18;
			}
			set
			{
				if (_build_p1_slot18 != null)
				{
					Form1 form1 = this;
					_build_p1_slot18.Click -=new EventHandler(form1.build_p1_slot18_Click);
				}
				_build_p1_slot18 = value;
				if (_build_p1_slot18 != null)
				{
					Form1 form11 = this;
					_build_p1_slot18.Click +=new EventHandler(form11.build_p1_slot18_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot19
		{
			get
			{
				return _build_p1_slot19;
			}
			set
			{
				if (_build_p1_slot19 != null)
				{
					Form1 form1 = this;
					_build_p1_slot19.Click -=new EventHandler(form1.build_p1_slot19_Click);
				}
				_build_p1_slot19 = value;
				if (_build_p1_slot19 != null)
				{
					Form1 form11 = this;
					_build_p1_slot19.Click +=new EventHandler(form11.build_p1_slot19_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot2
		{
			get
			{
				return _build_p1_slot2;
			}
			set
			{
				if (_build_p1_slot2 != null)
				{
					Form1 form1 = this;
					_build_p1_slot2.Click -=new EventHandler(form1.build_p1_slot2_Click);
				}
				_build_p1_slot2 = value;
				if (_build_p1_slot2 != null)
				{
					Form1 form11 = this;
					_build_p1_slot2.Click +=new EventHandler(form11.build_p1_slot2_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot20
		{
			get
			{
				return _build_p1_slot20;
			}
			set
			{
				if (_build_p1_slot20 != null)
				{
					Form1 form1 = this;
					_build_p1_slot20.Click -=new EventHandler(form1.build_p1_slot20_Click);
				}
				_build_p1_slot20 = value;
				if (_build_p1_slot20 != null)
				{
					Form1 form11 = this;
					_build_p1_slot20.Click +=new EventHandler(form11.build_p1_slot20_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot3
		{
			get
			{
				return _build_p1_slot3;
			}
			set
			{
				if (_build_p1_slot3 != null)
				{
					Form1 form1 = this;
					_build_p1_slot3.Click -=new EventHandler(form1.build_p1_slot3_Click);
				}
				_build_p1_slot3 = value;
				if (_build_p1_slot3 != null)
				{
					Form1 form11 = this;
					_build_p1_slot3.Click +=new EventHandler(form11.build_p1_slot3_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot4
		{
			get
			{
				return _build_p1_slot4;
			}
			set
			{
				if (_build_p1_slot4 != null)
				{
					Form1 form1 = this;
					_build_p1_slot4.Click -=new EventHandler(form1.build_p1_slot4_Click);
				}
				_build_p1_slot4 = value;
				if (_build_p1_slot4 != null)
				{
					Form1 form11 = this;
					_build_p1_slot4.Click +=new EventHandler(form11.build_p1_slot4_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot5
		{
			get
			{
				return _build_p1_slot5;
			}
			set
			{
				if (_build_p1_slot5 != null)
				{
					Form1 form1 = this;
					_build_p1_slot5.Click -=new EventHandler(form1.build_p1_slot5_Click);
				}
				_build_p1_slot5 = value;
				if (_build_p1_slot5 != null)
				{
					Form1 form11 = this;
					_build_p1_slot5.Click +=new EventHandler(form11.build_p1_slot5_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot6
		{
			get
			{
				return _build_p1_slot6;
			}
			set
			{
				if (_build_p1_slot6 != null)
				{
					Form1 form1 = this;
					_build_p1_slot6.Click -=new EventHandler(form1.build_p1_slot6_Click);
				}
				_build_p1_slot6 = value;
				if (_build_p1_slot6 != null)
				{
					Form1 form11 = this;
					_build_p1_slot6.Click +=new EventHandler(form11.build_p1_slot6_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot7
		{
			get
			{
				return _build_p1_slot7;
			}
			set
			{
				if (_build_p1_slot7 != null)
				{
					Form1 form1 = this;
					_build_p1_slot7.Click -=new EventHandler(form1.build_p1_slot7_Click);
				}
				_build_p1_slot7 = value;
				if (_build_p1_slot7 != null)
				{
					Form1 form11 = this;
					_build_p1_slot7.Click +=new EventHandler(form11.build_p1_slot7_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot8
		{
			get
			{
				return _build_p1_slot8;
			}
			set
			{
				if (_build_p1_slot8 != null)
				{
					Form1 form1 = this;
					_build_p1_slot8.Click -=new EventHandler(form1.build_p1_slot8_Click);
				}
				_build_p1_slot8 = value;
				if (_build_p1_slot8 != null)
				{
					Form1 form11 = this;
					_build_p1_slot8.Click +=new EventHandler(form11.build_p1_slot8_Click);
				}
			}
		}

		internal virtual PictureBox build_p1_slot9
		{
			get
			{
				return _build_p1_slot9;
			}
			set
			{
				if (_build_p1_slot9 != null)
				{
					Form1 form1 = this;
					_build_p1_slot9.Click -=new EventHandler(form1.build_p1_slot9_Click);
				}
				_build_p1_slot9 = value;
				if (_build_p1_slot9 != null)
				{
					Form1 form11 = this;
					_build_p1_slot9.Click +=new EventHandler(form11.build_p1_slot9_Click);
				}
			}
		}

		internal virtual Label builder_bonus_label
		{
			get
			{
				return _builder_bonus_label;
			}
			set
			{
				if (_builder_bonus_label != null)
				{
					Form1 form1 = this;
					_builder_bonus_label.Click -=new EventHandler(form1.builder_bonus_label_Click);
				}
				_builder_bonus_label = value;
				if (_builder_bonus_label != null)
				{
					Form1 form11 = this;
					_builder_bonus_label.Click +=new EventHandler(form11.builder_bonus_label_Click);
				}
			}
		}

		internal virtual Button Button1
		{
			get
			{
				return _Button1;
			}
			set
			{
				if (_Button1 != null)
				{
					Form1 form1 = this;
					_Button1.Click -=new EventHandler(form1.Button1_Click);
				}
				_Button1 = value;
				if (_Button1 != null)
				{
					Form1 form11 = this;
					_Button1.Click +=new EventHandler(form11.Button1_Click);
				}
			}
		}

		internal virtual Button Button2
		{
			get
			{
				return _Button2;
			}
			set
			{
				if (_Button2 != null)
				{
					Form1 form1 = this;
					_Button2.Click -=new EventHandler(form1.Button2_Click);
				}
				_Button2 = value;
				if (_Button2 != null)
				{
					Form1 form11 = this;
					_Button2.Click +=new EventHandler(form11.Button2_Click);
				}
			}
		}

		internal virtual Button Button3
		{
			get
			{
				return _Button3;
			}
			set
			{
				if (_Button3 != null)
				{
					Form1 form1 = this;
					_Button3.Click -=new EventHandler(form1.Button3_Click);
				}
				_Button3 = value;
				if (_Button3 != null)
				{
					Form1 form11 = this;
					_Button3.Click +=new EventHandler(form11.Button3_Click);
				}
			}
		}

		internal virtual Label captain_bonus_label
		{
			get
			{
				return _captain_bonus_label;
			}
			set
			{
				if (_captain_bonus_label != null)
				{
					Form1 form1 = this;
					_captain_bonus_label.Click -=new EventHandler(form1.captain_bonus_label_Click);
				}
				_captain_bonus_label = value;
				if (_captain_bonus_label != null)
				{
					Form1 form11 = this;
					_captain_bonus_label.Click +=new EventHandler(form11.captain_bonus_label_Click);
				}
			}
		}

		internal virtual PictureBox colonist_ship_pic
		{
			get
			{
				return _colonist_ship_pic;
			}
			set
			{
				if (_colonist_ship_pic != null)
				{
					Form1 form1 = this;
					_colonist_ship_pic.Click -=new EventHandler(form1.colonist_ship_pic_Click);
				}
				_colonist_ship_pic = value;
				if (_colonist_ship_pic != null)
				{
					Form1 form11 = this;
					_colonist_ship_pic.Click +=new EventHandler(form11.colonist_ship_pic_Click);
				}
			}
		}

		internal virtual Label craftsman_bonus_label
		{
			get
			{
				return _craftsman_bonus_label;
			}
			set
			{
				if (_craftsman_bonus_label != null)
				{
					Form1 form1 = this;
					_craftsman_bonus_label.Click -=new EventHandler(form1.craftsman_bonus_label_Click);
				}
				_craftsman_bonus_label = value;
				if (_craftsman_bonus_label != null)
				{
					Form1 form11 = this;
					_craftsman_bonus_label.Click +=new EventHandler(form11.craftsman_bonus_label_Click);
				}
			}
		}

		internal virtual Button done_choosing_craftsman_button
		{
			get
			{
				return _done_choosing_craftsman_button;
			}
			set
			{
				if (_done_choosing_craftsman_button != null)
				{
					Form1 form1 = this;
					_done_choosing_craftsman_button.Click -=new EventHandler(form1.done_choosing_craftsman_button_Click);
				}
				_done_choosing_craftsman_button = value;
				if (_done_choosing_craftsman_button != null)
				{
					Form1 form11 = this;
					_done_choosing_craftsman_button.Click +=new EventHandler(form11.done_choosing_craftsman_button_Click);
				}
			}
		}

		internal virtual Button done_trading_button
		{
			get
			{
				return _done_trading_button;
			}
			set
			{
				if (_done_trading_button != null)
				{
					Form1 form1 = this;
					_done_trading_button.Click -=new EventHandler(form1.done_trading_button_Click);
				}
				_done_trading_button = value;
				if (_done_trading_button != null)
				{
					Form1 form11 = this;
					_done_trading_button.Click +=new EventHandler(form11.done_trading_button_Click);
				}
			}
		}

		internal virtual Label gold_label
		{
			get
			{
				return _gold_label;
			}
			set
			{
				_gold_label = value;
			}
		}

		internal virtual PictureBox governor_pic
		{
			get
			{
				return _governor_pic;
			}
			set
			{
				if (_governor_pic != null)
				{
					Form1 form1 = this;
					_governor_pic.Click -=new EventHandler(form1.governor_pic_Click);
				}
				_governor_pic = value;
				if (_governor_pic != null)
				{
					Form1 form11 = this;
					_governor_pic.Click +=new EventHandler(form11.governor_pic_Click);
				}
			}
		}

		internal virtual Label idle_colonists_label
		{
			get
			{
				return _idle_colonists_label;
			}
			set
			{
				_idle_colonists_label = value;
			}
		}

		internal virtual Label Label1
		{
			get
			{
				return _Label1;
			}
			set
			{
				_Label1 = value;
			}
		}

		internal virtual Label Label10
		{
			get
			{
				return _Label10;
			}
			set
			{
				_Label10 = value;
			}
		}

		internal virtual Label Label11
		{
			get
			{
				return _Label11;
			}
			set
			{
				_Label11 = value;
			}
		}

		internal virtual Label Label12
		{
			get
			{
				return _Label12;
			}
			set
			{
				if (_Label12 != null)
				{
					Form1 form1 = this;
					_Label12.Click -=new EventHandler(form1.Label12_Click);
				}
				_Label12 = value;
				if (_Label12 != null)
				{
					Form1 form11 = this;
					_Label12.Click +=new EventHandler(form11.Label12_Click);
				}
			}
		}

		internal virtual Label Label2
		{
			get
			{
				return _Label2;
			}
			set
			{
				if (_Label2 != null)
				{
					Form1 form1 = this;
					_Label2.Click -=new EventHandler(form1.Label2_Click_1);
				}
				_Label2 = value;
				if (_Label2 != null)
				{
					Form1 form11 = this;
					_Label2.Click +=new EventHandler(form11.Label2_Click_1);
				}
			}
		}

		internal virtual Label Label3
		{
			get
			{
				return _Label3;
			}
			set
			{
				_Label3 = value;
			}
		}

		internal virtual Label Label4
		{
			get
			{
				return _Label4;
			}
			set
			{
				_Label4 = value;
			}
		}

		internal virtual Label Label5
		{
			get
			{
				return _Label5;
			}
			set
			{
				_Label5 = value;
			}
		}

		internal virtual Label Label6
		{
			get
			{
				return _Label6;
			}
			set
			{
				_Label6 = value;
			}
		}

		internal virtual Label Label7
		{
			get
			{
				return _Label7;
			}
			set
			{
				_Label7 = value;
			}
		}

		internal virtual Label Label8
		{
			get
			{
				return _Label8;
			}
			set
			{
				_Label8 = value;
			}
		}

		internal virtual Label Label9
		{
			get
			{
				return _Label9;
			}
			set
			{
				_Label9 = value;
			}
		}

		internal virtual MainMenu MainMenu1
		{
			get
			{
				return _MainMenu1;
			}
			set
			{
				_MainMenu1 = value;
			}
		}

		internal virtual Label mayor_bonus_label
		{
			get
			{
				return _mayor_bonus_label;
			}
			set
			{
				if (_mayor_bonus_label != null)
				{
					Form1 form1 = this;
					_mayor_bonus_label.Click -=new EventHandler(form1.mayor_bonus_label_Click);
				}
				_mayor_bonus_label = value;
				if (_mayor_bonus_label != null)
				{
					Form1 form11 = this;
					_mayor_bonus_label.Click +=new EventHandler(form11.mayor_bonus_label_Click);
				}
			}
		}

		internal virtual MenuItem menu_game
		{
			get
			{
				return _menu_game;
			}
			set
			{
				_menu_game = value;
			}
		}

		internal virtual MenuItem menu_game_exit
		{
			get
			{
				return _menu_game_exit;
			}
			set
			{
				if (_menu_game_exit != null)
				{
					Form1 form1 = this;
					_menu_game_exit.Click -=new EventHandler(form1.menu_game_exit_Click);
				}
				_menu_game_exit = value;
				if (_menu_game_exit != null)
				{
					Form1 form11 = this;
					_menu_game_exit.Click +=new EventHandler(form11.menu_game_exit_Click);
				}
			}
		}

		internal virtual MenuItem menu_game_new
		{
			get
			{
				return _menu_game_new;
			}
			set
			{
				if (_menu_game_new != null)
				{
					Form1 form1 = this;
					_menu_game_new.Click -=new EventHandler(form1.menu_game_new_Click);
				}
				_menu_game_new = value;
				if (_menu_game_new != null)
				{
					Form1 form11 = this;
					_menu_game_new.Click +=new EventHandler(form11.menu_game_new_Click);
				}
			}
		}

		internal virtual MenuItem menu_help
		{
			get
			{
				return _menu_help;
			}
			set
			{
				_menu_help = value;
			}
		}

		internal virtual MenuItem menu_help_about
		{
			get
			{
				return _menu_help_about;
			}
			set
			{
				if (_menu_help_about != null)
				{
					Form1 form1 = this;
					_menu_help_about.Click -=new EventHandler(form1.menu_help_about_Click);
				}
				_menu_help_about = value;
				if (_menu_help_about != null)
				{
					Form1 form11 = this;
					_menu_help_about.Click +=new EventHandler(form11.menu_help_about_Click);
				}
			}
		}

		internal virtual MenuItem menu_help_rules
		{
			get
			{
				return _menu_help_rules;
			}
			set
			{
				if (_menu_help_rules != null)
				{
					Form1 form1 = this;
					_menu_help_rules.Click -=new EventHandler(form1.menu_help_rules_Click);
				}
				_menu_help_rules = value;
				if (_menu_help_rules != null)
				{
					Form1 form11 = this;
					_menu_help_rules.Click +=new EventHandler(form11.menu_help_rules_Click);
				}
			}
		}

		internal virtual MenuItem menu_view
		{
			get
			{
				return _menu_view;
			}
			set
			{
				_menu_view = value;
			}
		}

		internal virtual MenuItem MenuItem1
		{
			get
			{
				return _MenuItem1;
			}
			set
			{
				_MenuItem1 = value;
			}
		}

		internal virtual MenuItem MenuItem2
		{
			get
			{
				return _MenuItem2;
			}
			set
			{
				_MenuItem2 = value;
			}
		}

		internal virtual MenuItem MenuItem3
		{
			get
			{
				return _MenuItem3;
			}
			set
			{
				if (_MenuItem3 != null)
				{
					Form1 form1 = this;
					_MenuItem3.Click -=new EventHandler(form1.MenuItem3_Click);
				}
				_MenuItem3 = value;
				if (_MenuItem3 != null)
				{
					Form1 form11 = this;
					_MenuItem3.Click +=new EventHandler(form11.MenuItem3_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem4
		{
			get
			{
				return _MenuItem4;
			}
			set
			{
				if (_MenuItem4 != null)
				{
					Form1 form1 = this;
					_MenuItem4.Click -=new EventHandler(form1.MenuItem4_Click);
				}
				_MenuItem4 = value;
				if (_MenuItem4 != null)
				{
					Form1 form11 = this;
					_MenuItem4.Click +=new EventHandler(form11.MenuItem4_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem5
		{
			get
			{
				return _MenuItem5;
			}
			set
			{
				if (_MenuItem5 != null)
				{
					Form1 form1 = this;
					_MenuItem5.Click -=new EventHandler(form1.MenuItem5_Click);
				}
				_MenuItem5 = value;
				if (_MenuItem5 != null)
				{
					Form1 form11 = this;
					_MenuItem5.Click +=new EventHandler(form11.MenuItem5_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem6
		{
			get
			{
				return _MenuItem6;
			}
			set
			{
				if (_MenuItem6 != null)
				{
					Form1 form1 = this;
					_MenuItem6.Click -=new EventHandler(form1.MenuItem6_Click);
				}
				_MenuItem6 = value;
				if (_MenuItem6 != null)
				{
					Form1 form11 = this;
					_MenuItem6.Click +=new EventHandler(form11.MenuItem6_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem7
		{
			get
			{
				return _MenuItem7;
			}
			set
			{
				if (_MenuItem7 != null)
				{
					Form1 form1 = this;
					_MenuItem7.Click -=new EventHandler(form1.MenuItem7_Click);
				}
				_MenuItem7 = value;
				if (_MenuItem7 != null)
				{
					Form1 form11 = this;
					_MenuItem7.Click +=new EventHandler(form11.MenuItem7_Click);
				}
			}
		}

		internal virtual MenuItem MenuItem8
		{
			get
			{
				return _MenuItem8;
			}
			set
			{
				if (_MenuItem8 != null)
				{
					Form1 form1 = this;
					_MenuItem8.Click -=new EventHandler(form1.MenuItem8_Click);
				}
				_MenuItem8 = value;
				if (_MenuItem8 != null)
				{
					Form1 form11 = this;
					_MenuItem8.Click +=new EventHandler(form11.MenuItem8_Click);
				}
			}
		}

		internal virtual Button next_turn_button
		{
			get
			{
				return _next_turn_button;
			}
			set
			{
				if (_next_turn_button != null)
				{
					Form1 form1 = this;
					_next_turn_button.Click -=new EventHandler(form1.next_turn_button_Click);
				}
				_next_turn_button = value;
				if (_next_turn_button != null)
				{
					Form1 form11 = this;
					_next_turn_button.Click +=new EventHandler(form11.next_turn_button_Click);
				}
			}
		}

		internal virtual Button nondis_button
		{
			get
			{
				return _nondis_button;
			}
			set
			{
				if (_nondis_button != null)
				{
					Form1 form1 = this;
					_nondis_button.Click -=new EventHandler(form1.nondis_button_Click);
				}
				_nondis_button = value;
				if (_nondis_button != null)
				{
					Form1 form11 = this;
					_nondis_button.Click +=new EventHandler(form11.nondis_button_Click);
				}
			}
		}

		internal virtual Label nondis_label
		{
			get
			{
				return _nondis_label;
			}
			set
			{
				_nondis_label = value;
			}
		}

		internal virtual Label num_coffee_bank_label
		{
			get
			{
				return _num_coffee_bank_label;
			}
			set
			{
				if (_num_coffee_bank_label != null)
				{
					Form1 form1 = this;
					_num_coffee_bank_label.Click -=new EventHandler(form1.num_coffee_bank_label_Click);
				}
				_num_coffee_bank_label = value;
				if (_num_coffee_bank_label != null)
				{
					Form1 form11 = this;
					_num_coffee_bank_label.Click +=new EventHandler(form11.num_coffee_bank_label_Click);
				}
			}
		}

		internal virtual Label num_coffee_label
		{
			get
			{
				return _num_coffee_label;
			}
			set
			{
				if (_num_coffee_label != null)
				{
					Form1 form1 = this;
					_num_coffee_label.Click -=new EventHandler(form1.num_coffee_label_Click);
				}
				_num_coffee_label = value;
				if (_num_coffee_label != null)
				{
					Form1 form11 = this;
					_num_coffee_label.Click +=new EventHandler(form11.num_coffee_label_Click);
				}
			}
		}

		internal virtual Label num_colonist_bank_label
		{
			get
			{
				return _num_colonist_bank_label;
			}
			set
			{
				if (_num_colonist_bank_label != null)
				{
					Form1 form1 = this;
					_num_colonist_bank_label.Click -=new EventHandler(form1.num_colonist_bank_label_Click);
				}
				_num_colonist_bank_label = value;
				if (_num_colonist_bank_label != null)
				{
					Form1 form11 = this;
					_num_colonist_bank_label.Click +=new EventHandler(form11.num_colonist_bank_label_Click);
				}
			}
		}

		internal virtual Label num_colonist_ship_label
		{
			get
			{
				return _num_colonist_ship_label;
			}
			set
			{
				if (_num_colonist_ship_label != null)
				{
					Form1 form1 = this;
					_num_colonist_ship_label.Click -=new EventHandler(form1.num_colonist_ship_label_Click);
				}
				_num_colonist_ship_label = value;
				if (_num_colonist_ship_label != null)
				{
					Form1 form11 = this;
					_num_colonist_ship_label.Click +=new EventHandler(form11.num_colonist_ship_label_Click);
				}
			}
		}

		internal virtual Label num_corn_bank_label
		{
			get
			{
				return _num_corn_bank_label;
			}
			set
			{
				if (_num_corn_bank_label != null)
				{
					Form1 form1 = this;
					_num_corn_bank_label.Click -=new EventHandler(form1.num_corn_bank_label_Click);
				}
				_num_corn_bank_label = value;
				if (_num_corn_bank_label != null)
				{
					Form1 form11 = this;
					_num_corn_bank_label.Click +=new EventHandler(form11.num_corn_bank_label_Click);
				}
			}
		}

		internal virtual Label num_corn_label
		{
			get
			{
				return _num_corn_label;
			}
			set
			{
				if (_num_corn_label != null)
				{
					Form1 form1 = this;
					_num_corn_label.Click -=new EventHandler(form1.num_corn_label_Click);
				}
				_num_corn_label = value;
				if (_num_corn_label != null)
				{
					Form1 form11 = this;
					_num_corn_label.Click +=new EventHandler(form11.num_corn_label_Click);
				}
			}
		}

		internal virtual Label num_indigo_bank_label
		{
			get
			{
				return _num_indigo_bank_label;
			}
			set
			{
				if (_num_indigo_bank_label != null)
				{
					Form1 form1 = this;
					_num_indigo_bank_label.Click -=new EventHandler(form1.num_indigo_bank_label_Click);
				}
				_num_indigo_bank_label = value;
				if (_num_indigo_bank_label != null)
				{
					Form1 form11 = this;
					_num_indigo_bank_label.Click +=new EventHandler(form11.num_indigo_bank_label_Click);
				}
			}
		}

		internal virtual Label num_indigo_label
		{
			get
			{
				return _num_indigo_label;
			}
			set
			{
				if (_num_indigo_label != null)
				{
					Form1 form1 = this;
					_num_indigo_label.Click -=new EventHandler(form1.num_indigo_label_Click);
				}
				_num_indigo_label = value;
				if (_num_indigo_label != null)
				{
					Form1 form11 = this;
					_num_indigo_label.Click +=new EventHandler(form11.num_indigo_label_Click);
				}
			}
		}

		internal virtual Label num_quarry_bank_label
		{
			get
			{
				return _num_quarry_bank_label;
			}
			set
			{
				if (_num_quarry_bank_label != null)
				{
					Form1 form1 = this;
					_num_quarry_bank_label.Click -=new EventHandler(form1.num_quarry_bank_label_Click);
				}
				_num_quarry_bank_label = value;
				if (_num_quarry_bank_label != null)
				{
					Form1 form11 = this;
					_num_quarry_bank_label.Click +=new EventHandler(form11.num_quarry_bank_label_Click);
				}
			}
		}

		internal virtual Label num_sugar_bank_label
		{
			get
			{
				return _num_sugar_bank_label;
			}
			set
			{
				if (_num_sugar_bank_label != null)
				{
					Form1 form1 = this;
					_num_sugar_bank_label.Click -=new EventHandler(form1.num_sugar_bank_label_Click);
				}
				_num_sugar_bank_label = value;
				if (_num_sugar_bank_label != null)
				{
					Form1 form11 = this;
					_num_sugar_bank_label.Click +=new EventHandler(form11.num_sugar_bank_label_Click);
				}
			}
		}

		internal virtual Label num_sugar_label
		{
			get
			{
				return _num_sugar_label;
			}
			set
			{
				if (_num_sugar_label != null)
				{
					Form1 form1 = this;
					_num_sugar_label.Click -=new EventHandler(form1.num_sugar_label_Click);
				}
				_num_sugar_label = value;
				if (_num_sugar_label != null)
				{
					Form1 form11 = this;
					_num_sugar_label.Click +=new EventHandler(form11.num_sugar_label_Click);
				}
			}
		}

		internal virtual Label num_tobacco_bank_label
		{
			get
			{
				return _num_tobacco_bank_label;
			}
			set
			{
				if (_num_tobacco_bank_label != null)
				{
					Form1 form1 = this;
					_num_tobacco_bank_label.Click -=new EventHandler(form1.num_tobacco_bank_label_Click);
				}
				_num_tobacco_bank_label = value;
				if (_num_tobacco_bank_label != null)
				{
					Form1 form11 = this;
					_num_tobacco_bank_label.Click +=new EventHandler(form11.num_tobacco_bank_label_Click);
				}
			}
		}

		internal virtual Label num_tobacco_label
		{
			get
			{
				return _num_tobacco_label;
			}
			set
			{
				if (_num_tobacco_label != null)
				{
					Form1 form1 = this;
					_num_tobacco_label.Click -=new EventHandler(form1.num_tobacco_label_Click);
				}
				_num_tobacco_label = value;
				if (_num_tobacco_label != null)
				{
					Form1 form11 = this;
					_num_tobacco_label.Click +=new EventHandler(form11.num_tobacco_label_Click);
				}
			}
		}

		internal virtual PictureBox PictureBox1
		{
			get
			{
				return _PictureBox1;
			}
			set
			{
				if (_PictureBox1 != null)
				{
					Form1 form1 = this;
					_PictureBox1.Click -=new EventHandler(form1.PictureBox1_Click);
				}
				_PictureBox1 = value;
				if (_PictureBox1 != null)
				{
					Form1 form11 = this;
					_PictureBox1.Click +=new EventHandler(form11.PictureBox1_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot1
		{
			get
			{
				return _plant_p1_slot1;
			}
			set
			{
				if (_plant_p1_slot1 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot1.Click -=new EventHandler(form1.plant_p1_slot1_Click);
				}
				_plant_p1_slot1 = value;
				if (_plant_p1_slot1 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot1.Click +=new EventHandler(form11.plant_p1_slot1_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot10
		{
			get
			{
				return _plant_p1_slot10;
			}
			set
			{
				if (_plant_p1_slot10 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot10.Click -=new EventHandler(form1.plant_p1_slot10_Click);
				}
				_plant_p1_slot10 = value;
				if (_plant_p1_slot10 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot10.Click +=new EventHandler(form11.plant_p1_slot10_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot11
		{
			get
			{
				return _plant_p1_slot11;
			}
			set
			{
				if (_plant_p1_slot11 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot11.Click -=new EventHandler(form1.plant_p1_slot11_Click);
				}
				_plant_p1_slot11 = value;
				if (_plant_p1_slot11 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot11.Click +=new EventHandler(form11.plant_p1_slot11_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot12
		{
			get
			{
				return _plant_p1_slot12;
			}
			set
			{
				if (_plant_p1_slot12 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot12.Click -=new EventHandler(form1.plant_p1_slot12_Click);
				}
				_plant_p1_slot12 = value;
				if (_plant_p1_slot12 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot12.Click +=new EventHandler(form11.plant_p1_slot12_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot2
		{
			get
			{
				return _plant_p1_slot2;
			}
			set
			{
				if (_plant_p1_slot2 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot2.Click -=new EventHandler(form1.plant_p1_slot2_Click);
				}
				_plant_p1_slot2 = value;
				if (_plant_p1_slot2 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot2.Click +=new EventHandler(form11.plant_p1_slot2_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot3
		{
			get
			{
				return _plant_p1_slot3;
			}
			set
			{
				if (_plant_p1_slot3 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot3.Click -=new EventHandler(form1.plant_p1_slot3_Click);
				}
				_plant_p1_slot3 = value;
				if (_plant_p1_slot3 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot3.Click +=new EventHandler(form11.plant_p1_slot3_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot4
		{
			get
			{
				return _plant_p1_slot4;
			}
			set
			{
				if (_plant_p1_slot4 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot4.Click -=new EventHandler(form1.plant_p1_slot4_Click);
				}
				_plant_p1_slot4 = value;
				if (_plant_p1_slot4 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot4.Click +=new EventHandler(form11.plant_p1_slot4_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot5
		{
			get
			{
				return _plant_p1_slot5;
			}
			set
			{
				if (_plant_p1_slot5 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot5.Click -=new EventHandler(form1.plant_p1_slot5_Click);
				}
				_plant_p1_slot5 = value;
				if (_plant_p1_slot5 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot5.Click +=new EventHandler(form11.plant_p1_slot5_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot6
		{
			get
			{
				return _plant_p1_slot6;
			}
			set
			{
				if (_plant_p1_slot6 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot6.Click -=new EventHandler(form1.plant_p1_slot6_Click);
				}
				_plant_p1_slot6 = value;
				if (_plant_p1_slot6 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot6.Click +=new EventHandler(form11.plant_p1_slot6_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot7
		{
			get
			{
				return _plant_p1_slot7;
			}
			set
			{
				if (_plant_p1_slot7 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot7.Click -=new EventHandler(form1.plant_p1_slot7_Click);
				}
				_plant_p1_slot7 = value;
				if (_plant_p1_slot7 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot7.Click +=new EventHandler(form11.plant_p1_slot7_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot8
		{
			get
			{
				return _plant_p1_slot8;
			}
			set
			{
				if (_plant_p1_slot8 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot8.Click -=new EventHandler(form1.plant_p1_slot8_Click);
				}
				_plant_p1_slot8 = value;
				if (_plant_p1_slot8 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot8.Click +=new EventHandler(form11.plant_p1_slot8_Click);
				}
			}
		}

		internal virtual PictureBox plant_p1_slot9
		{
			get
			{
				return _plant_p1_slot9;
			}
			set
			{
				if (_plant_p1_slot9 != null)
				{
					Form1 form1 = this;
					_plant_p1_slot9.Click -=new EventHandler(form1.plant_p1_slot9_Click);
				}
				_plant_p1_slot9 = value;
				if (_plant_p1_slot9 != null)
				{
					Form1 form11 = this;
					_plant_p1_slot9.Click +=new EventHandler(form11.plant_p1_slot9_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot1
		{
			get
			{
				return _plantation_available_slot1;
			}
			set
			{
				if (_plantation_available_slot1 != null)
				{
					Form1 form1 = this;
					_plantation_available_slot1.Click -=new EventHandler(form1.plantation_available_slot1_Click);
				}
				_plantation_available_slot1 = value;
				if (_plantation_available_slot1 != null)
				{
					Form1 form11 = this;
					_plantation_available_slot1.Click +=new EventHandler(form11.plantation_available_slot1_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot2
		{
			get
			{
				return _plantation_available_slot2;
			}
			set
			{
				if (_plantation_available_slot2 != null)
				{
					Form1 form1 = this;
					_plantation_available_slot2.Click -=new EventHandler(form1.plantation_available_slot2_Click);
				}
				_plantation_available_slot2 = value;
				if (_plantation_available_slot2 != null)
				{
					Form1 form11 = this;
					_plantation_available_slot2.Click +=new EventHandler(form11.plantation_available_slot2_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot3
		{
			get
			{
				return _plantation_available_slot3;
			}
			set
			{
				if (_plantation_available_slot3 != null)
				{
					Form1 form1 = this;
					_plantation_available_slot3.Click -=new EventHandler(form1.plantation_available_slot3_Click);
				}
				_plantation_available_slot3 = value;
				if (_plantation_available_slot3 != null)
				{
					Form1 form11 = this;
					_plantation_available_slot3.Click +=new EventHandler(form11.plantation_available_slot3_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot4
		{
			get
			{
				return _plantation_available_slot4;
			}
			set
			{
				if (_plantation_available_slot4 != null)
				{
					Form1 form1 = this;
					_plantation_available_slot4.Click -=new EventHandler(form1.plantation_available_slot4_Click);
				}
				_plantation_available_slot4 = value;
				if (_plantation_available_slot4 != null)
				{
					Form1 form11 = this;
					_plantation_available_slot4.Click +=new EventHandler(form11.plantation_available_slot4_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot5
		{
			get
			{
				return _plantation_available_slot5;
			}
			set
			{
				if (_plantation_available_slot5 != null)
				{
					Form1 form1 = this;
					_plantation_available_slot5.Click -=new EventHandler(form1.plantation_available_slot5_Click);
				}
				_plantation_available_slot5 = value;
				if (_plantation_available_slot5 != null)
				{
					Form1 form11 = this;
					_plantation_available_slot5.Click +=new EventHandler(form11.plantation_available_slot5_Click);
				}
			}
		}

		internal virtual PictureBox plantation_available_slot6
		{
			get
			{
				return _plantation_available_slot6;
			}
			set
			{
				if (_plantation_available_slot6 != null)
				{
					Form1 form1 = this;
					_plantation_available_slot6.Click -=new EventHandler(form1.plantation_available_slot6_Click);
				}
				_plantation_available_slot6 = value;
				if (_plantation_available_slot6 != null)
				{
					Form1 form11 = this;
					_plantation_available_slot6.Click +=new EventHandler(form11.plantation_available_slot6_Click);
				}
			}
		}

		internal virtual PictureBox player_board_pic
		{
			get
			{
				return _player_board_pic;
			}
			set
			{
				_player_board_pic = value;
			}
		}

		internal virtual PictureBox prcoverbox
		{
			get
			{
				return _prcoverbox;
			}
			set
			{
				_prcoverbox = value;
			}
		}

		internal virtual Label prnondistext
		{
			get
			{
				return _prnondistext;
			}
			set
			{
				if (_prnondistext != null)
				{
					Form1 form1 = this;
					_prnondistext.Click -=new EventHandler(form1.prnondistext_Click);
				}
				_prnondistext = value;
				if (_prnondistext != null)
				{
					Form1 form11 = this;
					_prnondistext.Click +=new EventHandler(form11.prnondistext_Click);
				}
			}
		}

		internal virtual Label pros1_bonus_label
		{
			get
			{
				return _pros1_bonus_label;
			}
			set
			{
				if (_pros1_bonus_label != null)
				{
					Form1 form1 = this;
					_pros1_bonus_label.Click -=new EventHandler(form1.pros1_bonus_label_Click);
				}
				_pros1_bonus_label = value;
				if (_pros1_bonus_label != null)
				{
					Form1 form11 = this;
					_pros1_bonus_label.Click +=new EventHandler(form11.pros1_bonus_label_Click);
				}
			}
		}

		internal virtual Label pros2_bonus_label
		{
			get
			{
				return _pros2_bonus_label;
			}
			set
			{
				if (_pros2_bonus_label != null)
				{
					Form1 form1 = this;
					_pros2_bonus_label.Click -=new EventHandler(form1.pros2_bonus_label_Click);
				}
				_pros2_bonus_label = value;
				if (_pros2_bonus_label != null)
				{
					Form1 form11 = this;
					_pros2_bonus_label.Click +=new EventHandler(form11.pros2_bonus_label_Click);
				}
			}
		}

		internal virtual PictureBox role_builder_pic
		{
			get
			{
				return _role_builder_pic;
			}
			set
			{
				if (_role_builder_pic != null)
				{
					Form1 form1 = this;
					_role_builder_pic.Click -=new EventHandler(form1.role_builder_pic_Click);
				}
				_role_builder_pic = value;
				if (_role_builder_pic != null)
				{
					Form1 form11 = this;
					_role_builder_pic.Click +=new EventHandler(form11.role_builder_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_captain_pic
		{
			get
			{
				return _role_captain_pic;
			}
			set
			{
				if (_role_captain_pic != null)
				{
					Form1 form1 = this;
					_role_captain_pic.Click -=new EventHandler(form1.role_captain_pic_Click);
				}
				_role_captain_pic = value;
				if (_role_captain_pic != null)
				{
					Form1 form11 = this;
					_role_captain_pic.Click +=new EventHandler(form11.role_captain_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_craftsman_pic
		{
			get
			{
				return _role_craftsman_pic;
			}
			set
			{
				if (_role_craftsman_pic != null)
				{
					Form1 form1 = this;
					_role_craftsman_pic.Click -=new EventHandler(form1.role_craftsman_pic_Click);
				}
				_role_craftsman_pic = value;
				if (_role_craftsman_pic != null)
				{
					Form1 form11 = this;
					_role_craftsman_pic.Click +=new EventHandler(form11.role_craftsman_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_mayor_pic
		{
			get
			{
				return _role_mayor_pic;
			}
			set
			{
				if (_role_mayor_pic != null)
				{
					Form1 form1 = this;
					_role_mayor_pic.Click -=new EventHandler(form1.role_mayor_pic_Click);
				}
				_role_mayor_pic = value;
				if (_role_mayor_pic != null)
				{
					Form1 form11 = this;
					_role_mayor_pic.Click +=new EventHandler(form11.role_mayor_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_prospector1_pic
		{
			get
			{
				return _role_prospector1_pic;
			}
			set
			{
				if (_role_prospector1_pic != null)
				{
					Form1 form1 = this;
					_role_prospector1_pic.Click -=new EventHandler(form1.role_prospector1_pic_Click);
				}
				_role_prospector1_pic = value;
				if (_role_prospector1_pic != null)
				{
					Form1 form11 = this;
					_role_prospector1_pic.Click +=new EventHandler(form11.role_prospector1_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_prospector2_pic
		{
			get
			{
				return _role_prospector2_pic;
			}
			set
			{
				if (_role_prospector2_pic != null)
				{
					Form1 form1 = this;
					_role_prospector2_pic.Click -=new EventHandler(form1.role_prospector2_pic_Click);
				}
				_role_prospector2_pic = value;
				if (_role_prospector2_pic != null)
				{
					Form1 form11 = this;
					_role_prospector2_pic.Click +=new EventHandler(form11.role_prospector2_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_settler_pic
		{
			get
			{
				return _role_settler_pic;
			}
			set
			{
				if (_role_settler_pic != null)
				{
					Form1 form1 = this;
					_role_settler_pic.Click -=new EventHandler(form1.role_settler_pic_Click);
				}
				_role_settler_pic = value;
				if (_role_settler_pic != null)
				{
					Form1 form11 = this;
					_role_settler_pic.Click +=new EventHandler(form11.role_settler_pic_Click);
				}
			}
		}

		internal virtual PictureBox role_trader_pic
		{
			get
			{
				return _role_trader_pic;
			}
			set
			{
				if (_role_trader_pic != null)
				{
					Form1 form1 = this;
					_role_trader_pic.Click -=new EventHandler(form1.role_trader_pic_Click);
				}
				_role_trader_pic = value;
				if (_role_trader_pic != null)
				{
					Form1 form11 = this;
					_role_trader_pic.Click +=new EventHandler(form11.role_trader_pic_Click);
				}
			}
		}

		internal virtual Label settler_bonus_label
		{
			get
			{
				return _settler_bonus_label;
			}
			set
			{
				if (_settler_bonus_label != null)
				{
					Form1 form1 = this;
					_settler_bonus_label.Click -=new EventHandler(form1.settler_bonus_label_Click);
				}
				_settler_bonus_label = value;
				if (_settler_bonus_label != null)
				{
					Form1 form11 = this;
					_settler_bonus_label.Click +=new EventHandler(form11.settler_bonus_label_Click);
				}
			}
		}

		internal virtual PictureBox shipa_pic
		{
			get
			{
				return _shipa_pic;
			}
			set
			{
				if (_shipa_pic != null)
				{
					Form1 form1 = this;
					_shipa_pic.Click -=new EventHandler(form1.shipa_pic_Click);
				}
				_shipa_pic = value;
				if (_shipa_pic != null)
				{
					Form1 form11 = this;
					_shipa_pic.Click +=new EventHandler(form11.shipa_pic_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot1
		{
			get
			{
				return _shipa_slot1;
			}
			set
			{
				if (_shipa_slot1 != null)
				{
					Form1 form1 = this;
					_shipa_slot1.Click -=new EventHandler(form1.shipa_slot1_Click);
				}
				_shipa_slot1 = value;
				if (_shipa_slot1 != null)
				{
					Form1 form11 = this;
					_shipa_slot1.Click +=new EventHandler(form11.shipa_slot1_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot2
		{
			get
			{
				return _shipa_slot2;
			}
			set
			{
				if (_shipa_slot2 != null)
				{
					Form1 form1 = this;
					_shipa_slot2.Click -=new EventHandler(form1.shipa_slot2_Click);
				}
				_shipa_slot2 = value;
				if (_shipa_slot2 != null)
				{
					Form1 form11 = this;
					_shipa_slot2.Click +=new EventHandler(form11.shipa_slot2_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot3
		{
			get
			{
				return _shipa_slot3;
			}
			set
			{
				if (_shipa_slot3 != null)
				{
					Form1 form1 = this;
					_shipa_slot3.Click -=new EventHandler(form1.shipa_slot3_Click);
				}
				_shipa_slot3 = value;
				if (_shipa_slot3 != null)
				{
					Form1 form11 = this;
					_shipa_slot3.Click +=new EventHandler(form11.shipa_slot3_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot4
		{
			get
			{
				return _shipa_slot4;
			}
			set
			{
				if (_shipa_slot4 != null)
				{
					Form1 form1 = this;
					_shipa_slot4.Click -=new EventHandler(form1.shipa_slot4_Click);
				}
				_shipa_slot4 = value;
				if (_shipa_slot4 != null)
				{
					Form1 form11 = this;
					_shipa_slot4.Click +=new EventHandler(form11.shipa_slot4_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot5
		{
			get
			{
				return _shipa_slot5;
			}
			set
			{
				if (_shipa_slot5 != null)
				{
					Form1 form1 = this;
					_shipa_slot5.Click -=new EventHandler(form1.shipa_slot5_Click);
				}
				_shipa_slot5 = value;
				if (_shipa_slot5 != null)
				{
					Form1 form11 = this;
					_shipa_slot5.Click +=new EventHandler(form11.shipa_slot5_Click);
				}
			}
		}

		internal virtual PictureBox shipa_slot6
		{
			get
			{
				return _shipa_slot6;
			}
			set
			{
				if (_shipa_slot6 != null)
				{
					Form1 form1 = this;
					_shipa_slot6.Click -=new EventHandler(form1.shipa_slot6_Click);
				}
				_shipa_slot6 = value;
				if (_shipa_slot6 != null)
				{
					Form1 form11 = this;
					_shipa_slot6.Click +=new EventHandler(form11.shipa_slot6_Click);
				}
			}
		}

		internal virtual PictureBox shipb_pic
		{
			get
			{
				return _shipb_pic;
			}
			set
			{
				if (_shipb_pic != null)
				{
					Form1 form1 = this;
					_shipb_pic.Click -=new EventHandler(form1.shipb_pic_Click);
				}
				_shipb_pic = value;
				if (_shipb_pic != null)
				{
					Form1 form11 = this;
					_shipb_pic.Click +=new EventHandler(form11.shipb_pic_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot1
		{
			get
			{
				return _shipb_slot1;
			}
			set
			{
				if (_shipb_slot1 != null)
				{
					Form1 form1 = this;
					_shipb_slot1.Click -=new EventHandler(form1.shipb_slot1_Click);
				}
				_shipb_slot1 = value;
				if (_shipb_slot1 != null)
				{
					Form1 form11 = this;
					_shipb_slot1.Click +=new EventHandler(form11.shipb_slot1_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot2
		{
			get
			{
				return _shipb_slot2;
			}
			set
			{
				if (_shipb_slot2 != null)
				{
					Form1 form1 = this;
					_shipb_slot2.Click -=new EventHandler(form1.shipb_slot2_Click);
				}
				_shipb_slot2 = value;
				if (_shipb_slot2 != null)
				{
					Form1 form11 = this;
					_shipb_slot2.Click +=new EventHandler(form11.shipb_slot2_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot3
		{
			get
			{
				return _shipb_slot3;
			}
			set
			{
				if (_shipb_slot3 != null)
				{
					Form1 form1 = this;
					_shipb_slot3.Click -=new EventHandler(form1.shipb_slot3_Click);
				}
				_shipb_slot3 = value;
				if (_shipb_slot3 != null)
				{
					Form1 form11 = this;
					_shipb_slot3.Click +=new EventHandler(form11.shipb_slot3_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot4
		{
			get
			{
				return _shipb_slot4;
			}
			set
			{
				if (_shipb_slot4 != null)
				{
					Form1 form1 = this;
					_shipb_slot4.Click -=new EventHandler(form1.shipb_slot4_Click);
				}
				_shipb_slot4 = value;
				if (_shipb_slot4 != null)
				{
					Form1 form11 = this;
					_shipb_slot4.Click +=new EventHandler(form11.shipb_slot4_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot5
		{
			get
			{
				return _shipb_slot5;
			}
			set
			{
				if (_shipb_slot5 != null)
				{
					Form1 form1 = this;
					_shipb_slot5.Click -=new EventHandler(form1.shipb_slot5_Click);
				}
				_shipb_slot5 = value;
				if (_shipb_slot5 != null)
				{
					Form1 form11 = this;
					_shipb_slot5.Click +=new EventHandler(form11.shipb_slot5_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot6
		{
			get
			{
				return _shipb_slot6;
			}
			set
			{
				if (_shipb_slot6 != null)
				{
					Form1 form1 = this;
					_shipb_slot6.Click -=new EventHandler(form1.shipb_slot6_Click);
				}
				_shipb_slot6 = value;
				if (_shipb_slot6 != null)
				{
					Form1 form11 = this;
					_shipb_slot6.Click +=new EventHandler(form11.shipb_slot6_Click);
				}
			}
		}

		internal virtual PictureBox shipb_slot7
		{
			get
			{
				return _shipb_slot7;
			}
			set
			{
				if (_shipb_slot7 != null)
				{
					Form1 form1 = this;
					_shipb_slot7.Click -=new EventHandler(form1.shipb_slot7_Click);
				}
				_shipb_slot7 = value;
				if (_shipb_slot7 != null)
				{
					Form1 form11 = this;
					_shipb_slot7.Click +=new EventHandler(form11.shipb_slot7_Click);
				}
			}
		}

		internal virtual PictureBox shipc_pic
		{
			get
			{
				return _shipc_pic;
			}
			set
			{
				if (_shipc_pic != null)
				{
					Form1 form1 = this;
					_shipc_pic.Click -=new EventHandler(form1.shipc_pic_Click);
				}
				_shipc_pic = value;
				if (_shipc_pic != null)
				{
					Form1 form11 = this;
					_shipc_pic.Click +=new EventHandler(form11.shipc_pic_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot1
		{
			get
			{
				return _shipc_slot1;
			}
			set
			{
				if (_shipc_slot1 != null)
				{
					Form1 form1 = this;
					_shipc_slot1.Click -=new EventHandler(form1.shipc_slot1_Click);
				}
				_shipc_slot1 = value;
				if (_shipc_slot1 != null)
				{
					Form1 form11 = this;
					_shipc_slot1.Click +=new EventHandler(form11.shipc_slot1_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot2
		{
			get
			{
				return _shipc_slot2;
			}
			set
			{
				if (_shipc_slot2 != null)
				{
					Form1 form1 = this;
					_shipc_slot2.Click -=new EventHandler(form1.shipc_slot2_Click);
				}
				_shipc_slot2 = value;
				if (_shipc_slot2 != null)
				{
					Form1 form11 = this;
					_shipc_slot2.Click +=new EventHandler(form11.shipc_slot2_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot3
		{
			get
			{
				return _shipc_slot3;
			}
			set
			{
				if (_shipc_slot3 != null)
				{
					Form1 form1 = this;
					_shipc_slot3.Click -=new EventHandler(form1.shipc_slot3_Click);
				}
				_shipc_slot3 = value;
				if (_shipc_slot3 != null)
				{
					Form1 form11 = this;
					_shipc_slot3.Click +=new EventHandler(form11.shipc_slot3_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot4
		{
			get
			{
				return _shipc_slot4;
			}
			set
			{
				if (_shipc_slot4 != null)
				{
					Form1 form1 = this;
					_shipc_slot4.Click -=new EventHandler(form1.shipc_slot4_Click);
				}
				_shipc_slot4 = value;
				if (_shipc_slot4 != null)
				{
					Form1 form11 = this;
					_shipc_slot4.Click +=new EventHandler(form11.shipc_slot4_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot5
		{
			get
			{
				return _shipc_slot5;
			}
			set
			{
				if (_shipc_slot5 != null)
				{
					Form1 form1 = this;
					_shipc_slot5.Click -=new EventHandler(form1.shipc_slot5_Click);
				}
				_shipc_slot5 = value;
				if (_shipc_slot5 != null)
				{
					Form1 form11 = this;
					_shipc_slot5.Click +=new EventHandler(form11.shipc_slot5_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot6
		{
			get
			{
				return _shipc_slot6;
			}
			set
			{
				if (_shipc_slot6 != null)
				{
					Form1 form1 = this;
					_shipc_slot6.Click -=new EventHandler(form1.shipc_slot6_Click);
				}
				_shipc_slot6 = value;
				if (_shipc_slot6 != null)
				{
					Form1 form11 = this;
					_shipc_slot6.Click +=new EventHandler(form11.shipc_slot6_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot7
		{
			get
			{
				return _shipc_slot7;
			}
			set
			{
				if (_shipc_slot7 != null)
				{
					Form1 form1 = this;
					_shipc_slot7.Click -=new EventHandler(form1.shipc_slot7_Click);
				}
				_shipc_slot7 = value;
				if (_shipc_slot7 != null)
				{
					Form1 form11 = this;
					_shipc_slot7.Click +=new EventHandler(form11.shipc_slot7_Click);
				}
			}
		}

		internal virtual PictureBox shipc_slot8
		{
			get
			{
				return _shipc_slot8;
			}
			set
			{
				if (_shipc_slot8 != null)
				{
					Form1 form1 = this;
					_shipc_slot8.Click -=new EventHandler(form1.shipc_slot8_Click);
				}
				_shipc_slot8 = value;
				if (_shipc_slot8 != null)
				{
					Form1 form11 = this;
					_shipc_slot8.Click +=new EventHandler(form11.shipc_slot8_Click);
				}
			}
		}

		internal virtual Button start_game_button
		{
			get
			{
				return _start_game_button;
			}
			set
			{
				if (_start_game_button != null)
				{
					Form1 form1 = this;
					_start_game_button.Click -=new EventHandler(form1.start_game_button_Click);
				}
				_start_game_button = value;
				if (_start_game_button != null)
				{
					Form1 form11 = this;
					_start_game_button.Click +=new EventHandler(form11.start_game_button_Click);
				}
			}
		}

		internal virtual PictureBox tradehouse_slot1
		{
			get
			{
				return _tradehouse_slot1;
			}
			set
			{
				_tradehouse_slot1 = value;
			}
		}

		internal virtual PictureBox tradehouse_slot2
		{
			get
			{
				return _tradehouse_slot2;
			}
			set
			{
				_tradehouse_slot2 = value;
			}
		}

		internal virtual PictureBox tradehouse_slot3
		{
			get
			{
				return _tradehouse_slot3;
			}
			set
			{
				_tradehouse_slot3 = value;
			}
		}

		internal virtual PictureBox tradehouse_slot4
		{
			get
			{
				return _tradehouse_slot4;
			}
			set
			{
				_tradehouse_slot4 = value;
			}
		}

		internal virtual Label trader_bonus_label
		{
			get
			{
				return _trader_bonus_label;
			}
			set
			{
				if (_trader_bonus_label != null)
				{
					Form1 form1 = this;
					_trader_bonus_label.Click -=new EventHandler(form1.trader_bonus_label_Click);
				}
				_trader_bonus_label = value;
				if (_trader_bonus_label != null)
				{
					Form1 form11 = this;
					_trader_bonus_label.Click +=new EventHandler(form11.trader_bonus_label_Click);
				}
			}
		}

		internal virtual Label vp_chips_label
		{
			get
			{
				return _vp_chips_label;
			}
			set
			{
				_vp_chips_label = value;
			}
		}

		internal virtual Label vp_total_label
		{
			get
			{
				return _vp_total_label;
			}
			set
			{
				_vp_total_label = value;
			}
		}

		internal virtual Label vpremain_label
		{
			get
			{
				return _vpremain_label;
			}
			set
			{
				if (_vpremain_label != null)
				{
					Form1 form1 = this;
					_vpremain_label.Click -=new EventHandler(form1.vpremain_label_Click);
				}
				_vpremain_label = value;
				if (_vpremain_label != null)
				{
					Form1 form11 = this;
					_vpremain_label.Click +=new EventHandler(form11.vpremain_label_Click);
				}
			}
		}

		internal virtual PictureBox wharf_pic
		{
			get
			{
				return _wharf_pic;
			}
			set
			{
				if (_wharf_pic != null)
				{
					Form1 form1 = this;
					_wharf_pic.Click -=new EventHandler(form1.wharf_pic_Click);
				}
				_wharf_pic = value;
				if (_wharf_pic != null)
				{
					Form1 form11 = this;
					_wharf_pic.Click +=new EventHandler(form11.wharf_pic_Click);
				}
			}
		}

		public Form1()
		{
			sw = new StreamWriter("prlog.txt");
			buildings_form = new Buildings();
			setup_form = new Setup();
			info_form = new Info1();
			player2_form = new Player2();
			player3_form = new Player3();
			player4_form = new Player4();
			player5_form = new Player5();
			mayor1_form = new Mayor1();
			craftsman1_form = new Craftsman1();
			summary_form = new Summary1();
			score_form = new Score1();
			storage_form = new Storage1();
			confirmnopic_form = new Confirmnopic();
			confirmrole_form = new Confirmrole();
			confirmplant_form = new Confirmplant();
			confirmbuilding1_form = new Confirmbuilding1();
			confirmbuilding2_form = new Confirmbuilding2();
			infonopic_form = new Infonopic();
			inforole_form = new Inforole();
			infoplant_form = new Infoplant();
			infobuilding1_form = new Infobuilding1();
			infobuilding2_form = new Infobuilding2();
			int[] numArray = new int[] { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 50, 50, 50, 50, 50, 50, 50, 50 };
			plantations_tilebag_array = numArray;
			int[] numArray1 = new int[] { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 50, 50, 50, 50, 50, 50, 50, 50 };
			plantations_tilebag_array2 = numArray1;
			int[] numArray2 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			plantations_discarded_array = numArray2;
			int[] numArray3 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			plantations_p1_array = numArray3;
			int[] numArray4 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			plantations_p2_array = numArray4;
			int[] numArray5 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			plantations_p3_array = numArray5;
			int[] numArray6 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			plantations_p4_array = numArray6;
			int[] numArray7 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			plantations_p5_array = numArray7;
			int[] numArray8 = new int[] { 0, 0, 0, 0, 0, 0 };
			plantation_available_array = numArray8;
			num_plantations_p1 = 1;
			num_plantations_p2 = 1;
			num_plantations_p3 = 1;
			num_plantations_p4 = 1;
			num_plantations_p5 = 1;
			int[] numArray9 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			buildings_p1_array = numArray9;
			int[] numArray10 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			buildings_p2_array = numArray10;
			int[] numArray11 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			buildings_p3_array = numArray11;
			int[] numArray12 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			buildings_p4_array = numArray12;
			int[] numArray13 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
			buildings_p5_array = numArray13;
			int[] numArray14 = new int[] { 4, 4, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1 };
			buildings_available_array = numArray14;
			int[] numArray15 = new int[] { 0, 0, 0, 0, 0, 0, 0, 0 };
			bonus_roles_array = numArray15;
			int[] numArray16 = new int[] { 11, 11, 10, 9, 9, 8 };
			goods_bank_array = numArray16;
			int[] numArray17 = new int[] { 11, 11, 10, 9, 9, 8 };
			goods_bank_array2 = numArray17;
			int[] numArray18 = new int[] { 0, 0, 0, 0, 0 };
			goods_p1_array = numArray18;
			int[] numArray19 = new int[] { 0, 0, 0, 0, 0 };
			goods_p2_array = numArray19;
			int[] numArray20 = new int[] { 0, 0, 0, 0, 0 };
			goods_p3_array = numArray20;
			int[] numArray21 = new int[] { 0, 0, 0, 0, 0 };
			goods_p4_array = numArray21;
			int[] numArray22 = new int[] { 0, 0, 0, 0, 0 };
			goods_p5_array = numArray22;
			int[] numArray23 = new int[] { 0, 0, 0, 0, 0 };
			p1_storage_array = numArray23;
			int[] numArray24 = new int[] { 0, 0, 0, 0, 0 };
			p2_storage_array = numArray24;
			int[] numArray25 = new int[] { 0, 0, 0, 0, 0 };
			p3_storage_array = numArray25;
			int[] numArray26 = new int[] { 0, 0, 0, 0, 0 };
			p4_storage_array = numArray26;
			int[] numArray27 = new int[] { 0, 0, 0, 0, 0 };
			p5_storage_array = numArray27;
			int[] numArray28 = new int[] { 0, 0, 0, 0, 0 };
			goods_this_turn_p1_array = numArray28;
			int[] numArray29 = new int[] { 0, 0, 0, 0, 0 };
			goods_this_turn_p2_array = numArray29;
			int[] numArray30 = new int[] { 0, 0, 0, 0, 0 };
			goods_this_turn_p3_array = numArray30;
			int[] numArray31 = new int[] { 0, 0, 0, 0, 0 };
			goods_this_turn_p4_array = numArray31;
			int[] numArray32 = new int[] { 0, 0, 0, 0, 0 };
			goods_this_turn_p5_array = numArray32;
			int[] numArray33 = new int[] { 0, 0, 0, 0, 0 };
			goods_ability_p1_array = numArray33;
			int[] numArray34 = new int[] { 0, 0, 0, 0, 0 };
			goods_ability_p2_array = numArray34;
			int[] numArray35 = new int[] { 0, 0, 0, 0, 0 };
			goods_ability_p3_array = numArray35;
			int[] numArray36 = new int[] { 0, 0, 0, 0, 0 };
			goods_ability_p4_array = numArray36;
			int[] numArray37 = new int[] { 0, 0, 0, 0, 0 };
			goods_ability_p5_array = numArray37;
			num_buildings_p1 = 0;
			num_buildings_p2 = 0;
			num_buildings_p3 = 0;
			num_buildings_p4 = 0;
			num_buildings_p5 = 0;
			num_quarries_p1 = 0;
			num_quarries_p2 = 0;
			num_quarries_p3 = 0;
			num_quarries_p4 = 0;
			num_quarries_p5 = 0;
			num_manned_quarries_p1 = 0;
			num_manned_quarries_p2 = 0;
			num_manned_quarries_p3 = 0;
			num_manned_quarries_p4 = 0;
			num_manned_quarries_p5 = 0;
			num_empty_corn_plant_p1 = 0;
			num_empty_corn_plant_p2 = 0;
			num_empty_corn_plant_p3 = 0;
			num_empty_corn_plant_p4 = 0;
			num_empty_corn_plant_p5 = 0;
			int[] numArray38 = new int[] { 0, 0, 0, 0, 0, 0 };
			idle_colonists_array = numArray38;
			int[] numArray39 = new int[] { 0, 0, 0, 0, 0, 0 };
			idle_colonists_this_turn_array = numArray39;
			int[] numArray40 = new int[] { 0, 0, 0, 0, 0, 0 };
			colonists_array = numArray40;
			int[] numArray41 = new int[] { 0, 0, 0, 0, 0, 0 };
			empty_colonists_slots_array = numArray41;
			p1_empty_colonists_slots = 0;
			p2_empty_colonists_slots = 0;
			p3_empty_colonists_slots = 0;
			p4_empty_colonists_slots = 0;
			p5_empty_colonists_slots = 0;
			gold_p1 = 0;
			gold_p2 = 0;
			gold_p3 = 0;
			gold_p4 = 0;
			gold_p5 = 0;
			vpchips_p1 = 0;
			vpchips_p2 = 0;
			vpchips_p3 = 0;
			vpchips_p4 = 0;
			vpchips_p5 = 0;
			vp_buildings_p1 = 0;
			vp_buildings_p2 = 0;
			vp_buildings_p3 = 0;
			vp_buildings_p4 = 0;
			vp_buildings_p5 = 0;
			p1_total_score = 0;
			p2_total_score = 0;
			p3_total_score = 0;
			p4_total_score = 0;
			p5_total_score = 0;
			int[] numArray42 = new int[] { 0, 0, 99, 0 };
			shipa_array = numArray42;
			int[] numArray43 = new int[] { 0, 0, 99, 0 };
			shipb_array = numArray43;
			int[] numArray44 = new int[] { 0, 0, 99, 0 };
			shipc_array = numArray44;
			int[] numArray45 = new int[] { 0, 0, 0, 0 };
			trading_house_array = numArray45;
			colonists_bank_num = 0;
			colonists_ship_num = 0;
			vp_bank_num = 0;
			number_of_players = 0;
			seat_num = 0;
			finished = true;
			p2_finished_choosing_role = false;
			p3_finished_choosing_role = false;
			p4_finished_choosing_role = false;
			p5_finished_choosing_role = false;
			finishedx = true;
			p2_ai_done = false;
			p3_ai_done = false;
			p4_ai_done = false;
			p5_ai_done = false;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			counter1x = 0;
			counter2x = 0;
			counter3x = 0;
			random1 = 0;
			chance = false;
			tempinteger = 0;
			game_started = false;
			game_over = true;
			rand_finished = true;
			confirmed = false;
			found_building = false;
			found_buildingx = false;
			found_plantation = false;
			found_good = false;
			end_announced = false;
			already_there = false;
			trading_house_full = false;
			p1_done_all_shipping = false;
			p2_done_all_shipping = false;
			p3_done_all_shipping = false;
			p4_done_all_shipping = false;
			p5_done_all_shipping = false;
			all_done_all_shipping = false;
			p1_done_shipping = false;
			p2_done_shipping = false;
			p3_done_shipping = false;
			p4_done_shipping = false;
			p5_done_shipping = false;
			p1_num_shipped = 0;
			p2_num_shipped = 0;
			p3_num_shipped = 0;
			p4_num_shipped = 0;
			p5_num_shipped = 0;
			need_to_pick_ship = false;
			summary_on = false;
			p1_used_wharf = false;
			p2_used_wharf = false;
			p3_used_wharf = false;
			p4_used_wharf = false;
			p5_used_wharf = false;
			captain_bonus_taken = false;
			dialog_box_OK_timer = 3;
			int[] numArray46 = new int[] { 0, 1, 2, 3, 4, 5, 9 };
			player_order_array = numArray46;
			current_role_chooser = 1;
			current_player = 1;
			current_playerx = 1;
			current_player_captain = 1;
			current_governor = 1;
			p1_chose_plantation = false;
			p1_chose_extra_good = false;
			p1_traded = false;
			p2_traded = false;
			p3_traded = false;
			p4_traded = false;
			p5_traded = false;
			p1_taken_turn = false;
			p2_taken_turn = false;
			p3_taken_turn = false;
			p4_taken_turn = false;
			p5_taken_turn = false;
			p1_been_governor = false;
			p2_been_governor = false;
			p3_been_governor = false;
			p4_been_governor = false;
			p5_been_governor = false;
			p1_dumped = false;
			p2_dumped = false;
			p3_dumped = false;
			p4_dumped = false;
			p5_dumped = false;
			settler_round = false;
			mayor_round = false;
			builder_round = false;
			craftsman_round = false;
			trader_round = false;
			captain_round = false;
			prospector1_round = false;
			prospector2_round = false;
			first_round = true;
			restart_turn_routine = false;
			p1_choosing_role = false;
			new_governor = true;
			new_role_chooser = false;
			processed_builder = false;
			goods_to_ship = false;
			goods_to_produce = false;
			goods_to_trade = false;
			space_to_ship = false;
			indigo_shipnum = 0;
			sugar_shipnum = 0;
			corn_shipnum = 0;
			tobacco_shipnum = 0;
			coffee_shipnum = 0;
			indigo_ship_available = false;
			sugar_ship_available = false;
			corn_ship_available = false;
			tobacco_ship_available = false;
			coffee_ship_available = false;
			indigo_ship_full = false;
			sugar_ship_full = false;
			corn_ship_full = false;
			tobacco_ship_full = false;
			coffee_ship_full = false;
			empty_ship_available = false;
			ships_can_take_indigo = false;
			ships_can_take_sugar = false;
			ships_can_take_corn = false;
			ships_can_take_tobacco = false;
			ships_can_take_coffee = false;
			ready_to_ship_indigo = false;
			ready_to_ship_sugar = false;
			ready_to_ship_corn = false;
			ready_to_ship_tobacco = false;
			ready_to_ship_coffee = false;
			p1_built = true;
			p2_built = true;
			p3_built = true;
			p4_built = true;
			p5_built = true;
			p1_built_nothing = true;
			p1_ready_to_end_settler = false;
			p2_ready_to_end_settler = false;
			p3_ready_to_end_settler = false;
			p4_ready_to_end_settler = false;
			p5_ready_to_end_settler = false;
			new_colonists_needed = 0;
			discard_size = 0;
			game_end_triggered_colonists = false;
			game_end_triggered_buildings = false;
			game_end_triggered_victorypoints = false;
			p1_tiebreaker = 0;
			p2_tiebreaker = 0;
			p3_tiebreaker = 0;
			p4_tiebreaker = 0;
			p5_tiebreaker = 0;
			current_winner = "null";
			current_best_tiebreaker = 0;
			tie1 = "null";
			tie2 = "null";
			tie3 = "null";
			tie4 = "null";
			tie5 = "null";
			string[] strArray = new string[] { "null", "null", "null", "null", "null" };
			tie_breaker_array = strArray;
			verify_indigo = 0;
			verify_sugar = 0;
			verify_corn = 0;
			verify_tobacco = 0;
			verify_coffee = 0;
			verify_colonists = 0;
			alerts_on = false;
			developer_on = false;
			alert_triggered = false;
			p1_manned_office = false;
			autoclick_captain_phase_on = false;
			p1_just_clicked_autoclick = false;
			role_has_been_chosen = false;
			p2_chose_quarry = false;
			p2_chose_corn = false;
			p2_chose_random = false;
			p2_manned_construction_hut = false;
			p2_manned_hospice = false;
			p2_manned_hacienda = false;
			p2_use_hacienda = false;
			p2_chose_settler = false;
			p2_chose_trader = false;
			p2_manned_small_market = false;
			p2_manned_large_market = false;
			p2_num_indigo_plants = 0;
			p2_num_sugar_plants = 0;
			p2_num_tobacco_plants = 0;
			p2_num_coffee_plants = 0;
			p2_manned_office = false;
			p3_chose_quarry = false;
			p3_chose_corn = false;
			p3_chose_random = false;
			p3_manned_construction_hut = false;
			p3_manned_hospice = false;
			p3_manned_hacienda = false;
			p3_use_hacienda = false;
			p3_chose_settler = false;
			p3_chose_trader = false;
			p3_manned_small_market = false;
			p3_manned_large_market = false;
			p3_num_indigo_plants = 0;
			p3_num_sugar_plants = 0;
			p3_num_tobacco_plants = 0;
			p3_num_coffee_plants = 0;
			p3_manned_office = false;
			p4_chose_quarry = false;
			p4_chose_corn = false;
			p4_chose_random = false;
			p4_manned_construction_hut = false;
			p4_manned_hospice = false;
			p4_manned_hacienda = false;
			p4_use_hacienda = false;
			p4_chose_settler = false;
			p4_chose_trader = false;
			p4_manned_small_market = false;
			p4_manned_large_market = false;
			p4_num_indigo_plants = 0;
			p4_num_sugar_plants = 0;
			p4_num_tobacco_plants = 0;
			p4_num_coffee_plants = 0;
			p4_manned_office = false;
			p5_chose_quarry = false;
			p5_chose_corn = false;
			p5_chose_random = false;
			p5_manned_construction_hut = false;
			p5_manned_hospice = false;
			p5_manned_hacienda = false;
			p5_use_hacienda = false;
			p5_chose_settler = false;
			p5_chose_trader = false;
			p5_manned_small_market = false;
			p5_manned_large_market = false;
			p5_num_indigo_plants = 0;
			p5_num_sugar_plants = 0;
			p5_num_tobacco_plants = 0;
			p5_num_coffee_plants = 0;
			p5_manned_office = false;
			previous_role = "null";
			indigo_available = false;
			indigo_available_slot = 99;
			sugar_available = false;
			sugar_available_slot = 99;
			corn_available = false;
			corn_available_slot = 99;
			tobacco_available = false;
			tobacco_available_slot = 99;
			coffee_available = false;
			coffee_available_slot = 99;
			quarry_available = false;
			plantation_slot = 99;
			building_slot = 99;
			buyable = false;
			discount1 = 0;
			discount2 = 0;
			build_final_cost = 0;
			build_available_slot = 0;
			build_cost = 0;
			build_number = 0;
			best_storage_type = 999;
			best_storage_qty = 0;
			current_best_score = 0;
			large_build_spot = 0;
			room_to_build_large = false;
			afford_large = false;
			slots_to_store = 0;
			done_dumping = false;
			stored_indigo = false;
			stored_sugar = false;
			stored_corn = false;
			stored_tobacco = false;
			stored_coffee = false;
			dont_choose_settler = false;
			dont_choose_mayor = false;
			dont_choose_builder = false;
			dont_choose_craftsman = false;
			dont_choose_trader = false;
			dont_choose_captain = false;
			dont_choose_prospector1 = false;
			dont_choose_prospector2 = false;
			need_to_choose_random = false;
			free_buildings_available = false;
			turn_number = 0;
			indigo_points_shipa = 0;
			indigo_points_shipb = 0;
			indigo_points_shipc = 0;
			indigo_points_wharf = 0;
			sugar_points_shipa = 0;
			sugar_points_shipb = 0;
			sugar_points_shipc = 0;
			sugar_points_wharf = 0;
			corn_points_shipa = 0;
			corn_points_shipb = 0;
			corn_points_shipc = 0;
			corn_points_wharf = 0;
			tobacco_points_shipa = 0;
			tobacco_points_shipb = 0;
			tobacco_points_shipc = 0;
			tobacco_points_wharf = 0;
			coffee_points_shipa = 0;
			coffee_points_shipb = 0;
			coffee_points_shipc = 0;
			coffee_points_wharf = 0;
			shipa_empty = false;
			shipb_empty = false;
			shipc_empty = false;
			found_indigo_match = false;
			found_sugar_match = false;
			found_tobacco_match = false;
			found_coffee_match = false;
			very_first_turn = true;
			InitializeComponent();
		}

		public void ai_role_choice_maintenance()
		{
			if (dont_choose_settler)
			{
				chance_of_action(5);
				if (chance)
				{
					dont_choose_settler = false;
				}
			}
			if (dont_choose_mayor)
			{
				chance_of_action(5);
				if (chance)
				{
					dont_choose_mayor = false;
				}
			}
			if (dont_choose_builder)
			{
				chance_of_action(5);
				if (chance)
				{
					dont_choose_builder = false;
				}
			}
			if (dont_choose_prospector1)
			{
				chance_of_action(5);
				if (chance)
				{
					dont_choose_prospector1 = false;
				}
			}
			if (dont_choose_prospector2)
			{
				chance_of_action(5);
				if (chance)
				{
					dont_choose_prospector2 = false;
				}
			}
			if (need_to_choose_random)
			{
				generate_random1(0, checked(number_of_players + 2));
				if (random1 == 0 & !dont_choose_settler)
				{
					role_choice = "settler";
				}
				if (random1 == 1 & !dont_choose_mayor)
				{
					role_choice = "mayor";
				}
				if (random1 == 2 & !dont_choose_builder)
				{
					role_choice = "builder";
				}
				if (random1 == 3 & !dont_choose_craftsman)
				{
					role_choice = "craftsman";
				}
				if (random1 == 4 & !dont_choose_trader)
				{
					role_choice = "trader";
				}
				if (random1 == 5 & !dont_choose_captain)
				{
					role_choice = "captain";
				}
				if (random1 == 6 & !dont_choose_prospector1)
				{
					role_choice = "prospector1";
				}
				if (random1 == 7 & !dont_choose_prospector2)
				{
					role_choice = "prospector2";
				}
			}
		}

		private void auto_captain_button_Click(object sender, EventArgs e)
		{
			if (!autoclick_captain_phase_on & captain_round)
			{
				if (current_player != 1)
				{
					p1_just_clicked_autoclick = false;
				}
				else
				{
					p1_just_clicked_autoclick = true;
				}
				autoclick_captain_phase();
			}
		}

		public void autoclick_captain_phase()
		{
			current_playerx = current_player;
			autoclick_captain_phase_on = true;
			if (p1_just_clicked_autoclick)
			{
				current_playerx = 99;
			}
			while (!(current_playerx == 1 | !autoclick_captain_phase_on))
			{
				next_turn_routine();
				current_playerx = current_player;
				if (current_playerx != 1)
				{
					continue;
				}
				determine_goods_to_ship();
				if (goods_to_ship)
				{
					continue;
				}
				current_playerx = 99;
			}
			autoclick_captain_phase_on = false;
			p1_just_clicked_autoclick = false;
		}

		public void build_buildings()
		{
			buildings_form.p1_builtb = p1_built;
			update_buildings_available_labels();
			buildings_form.gold_p1b = gold_p1;
			buildings_form.p1_built_nothingb = p1_built_nothing;
			if (current_player != 1)
			{
				buildings_form.do_not_build_button.Enabled=false;
				buildings_form.do_not_build_button.Visible = false;
			}
			else if (p1_built)
			{
				buildings_form.do_not_build_button.Enabled=false;
				buildings_form.do_not_build_button.Visible = false;
			}
			else
			{
				buildings_form.do_not_build_button.Enabled = true;
				buildings_form.do_not_build_button.Visible = true;
			}
			determine_manned_quarries();
			check_for_building(341);
			if (!found_building)
			{
				buildings_form.university_bonusb = false;
			}
			else if (colonists_bank_num > 0)
			{
				buildings_form.university_bonusb = true;
			}
			else if (colonists_ship_num <= 0)
			{
				buildings_form.university_bonusb = false;
			}
			else
			{
				buildings_form.university_bonusb = true;
			}
			if (!(builder_round & current_player == 1 & current_role_chooser == 1))
			{
				buildings_form.builder_bonusb = false;
			}
			else
			{
				buildings_form.builder_bonusb = true;
			}
			buildings_form.ShowDialog();
			gold_p1 = buildings_form.gold_p1b;
			p1_built = buildings_form.p1_builtb;
			p1_built_nothing = buildings_form.p1_built_nothingb;
			update_buildings_available_labels2();
			if (current_player == 1 & p1_built & !processed_builder & !p1_built_nothing & builder_round)
			{
				check_for_building(341);
				if (found_building)
				{
					if (colonists_bank_num > 0)
					{
						colonists_bank_num = checked(colonists_bank_num - 1);
						infobox_building1("Your manned University granted you a colonist for your building.", 341);
						colonists_array[1] = checked(colonists_array[1] + 1);
					}
					else if (colonists_ship_num > 0)
					{
						colonists_ship_num = checked(colonists_ship_num - 1);
						infobox_building1("Your manned University granted you a colonist for your building.", 341);
						colonists_array[1] = checked(colonists_array[1] + 1);
					}
				}
				processed_builder = true;
			}
			update_all_labels();
			if (p1_built & builder_round)
			{
				formtitle("p1", "Builder Phase - Your turn is over");
				next_turn_routine();
			}
		}

		private void build_p1_slot1_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[0] == 110 | buildings_p1_array[0] == 120 | buildings_p1_array[0] == 130 | buildings_p1_array[0] == 140 | buildings_p1_array[0] == 150 | buildings_p1_array[0] == 160 | buildings_p1_array[0] == 210 | buildings_p1_array[0] == 220 | buildings_p1_array[0] == 230 | buildings_p1_array[0] == 240 | buildings_p1_array[0] == 250 | buildings_p1_array[0] == 260 | buildings_p1_array[0] == 310 | buildings_p1_array[0] == 320 | buildings_p1_array[0] == 330 | buildings_p1_array[0] == 340 | buildings_p1_array[0] == 350 | buildings_p1_array[0] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[0] = checked(buildings_p1_array[0] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[0] == 111 | buildings_p1_array[0] == 121 | buildings_p1_array[0] == 131 | buildings_p1_array[0] == 141 | buildings_p1_array[0] == 151 | buildings_p1_array[0] == 161 | buildings_p1_array[0] == 213 | buildings_p1_array[0] == 223 | buildings_p1_array[0] == 231 | buildings_p1_array[0] == 241 | buildings_p1_array[0] == 251 | buildings_p1_array[0] == 261 | buildings_p1_array[0] == 313 | buildings_p1_array[0] == 322 | buildings_p1_array[0] == 331 | buildings_p1_array[0] == 341 | buildings_p1_array[0] == 351 | buildings_p1_array[0] == 361)
					{
						buildings_p1_array[0] = checked(buildings_p1_array[0] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[0] == 211 | buildings_p1_array[0] == 212 | buildings_p1_array[0] == 221 | buildings_p1_array[0] == 222 | buildings_p1_array[0] == 311 | buildings_p1_array[0] == 312 | buildings_p1_array[0] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[0] = checked(buildings_p1_array[0] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[0] = checked(buildings_p1_array[0] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot10_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[9] == 110 | buildings_p1_array[9] == 120 | buildings_p1_array[9] == 130 | buildings_p1_array[9] == 140 | buildings_p1_array[9] == 150 | buildings_p1_array[9] == 160 | buildings_p1_array[9] == 210 | buildings_p1_array[9] == 220 | buildings_p1_array[9] == 230 | buildings_p1_array[9] == 240 | buildings_p1_array[9] == 250 | buildings_p1_array[9] == 260 | buildings_p1_array[9] == 310 | buildings_p1_array[9] == 320 | buildings_p1_array[9] == 330 | buildings_p1_array[9] == 340 | buildings_p1_array[9] == 350 | buildings_p1_array[9] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[9] = checked(buildings_p1_array[9] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[9] == 111 | buildings_p1_array[9] == 121 | buildings_p1_array[9] == 131 | buildings_p1_array[9] == 141 | buildings_p1_array[9] == 151 | buildings_p1_array[9] == 161 | buildings_p1_array[9] == 213 | buildings_p1_array[9] == 223 | buildings_p1_array[9] == 231 | buildings_p1_array[9] == 241 | buildings_p1_array[9] == 251 | buildings_p1_array[9] == 261 | buildings_p1_array[9] == 313 | buildings_p1_array[9] == 322 | buildings_p1_array[9] == 331 | buildings_p1_array[9] == 341 | buildings_p1_array[9] == 351 | buildings_p1_array[9] == 361)
					{
						buildings_p1_array[9] = checked(buildings_p1_array[9] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[9] == 211 | buildings_p1_array[9] == 212 | buildings_p1_array[9] == 221 | buildings_p1_array[9] == 222 | buildings_p1_array[9] == 311 | buildings_p1_array[9] == 312 | buildings_p1_array[9] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[9] = checked(buildings_p1_array[9] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[9] = checked(buildings_p1_array[9] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot11_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[10] == 110 | buildings_p1_array[10] == 120 | buildings_p1_array[10] == 130 | buildings_p1_array[10] == 140 | buildings_p1_array[10] == 150 | buildings_p1_array[10] == 160 | buildings_p1_array[10] == 210 | buildings_p1_array[10] == 220 | buildings_p1_array[10] == 230 | buildings_p1_array[10] == 240 | buildings_p1_array[10] == 250 | buildings_p1_array[10] == 260 | buildings_p1_array[10] == 310 | buildings_p1_array[10] == 320 | buildings_p1_array[10] == 330 | buildings_p1_array[10] == 340 | buildings_p1_array[10] == 350 | buildings_p1_array[10] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[10] = checked(buildings_p1_array[10] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[10] == 111 | buildings_p1_array[10] == 121 | buildings_p1_array[10] == 131 | buildings_p1_array[10] == 141 | buildings_p1_array[10] == 151 | buildings_p1_array[10] == 161 | buildings_p1_array[10] == 213 | buildings_p1_array[10] == 223 | buildings_p1_array[10] == 231 | buildings_p1_array[10] == 241 | buildings_p1_array[10] == 251 | buildings_p1_array[10] == 261 | buildings_p1_array[10] == 313 | buildings_p1_array[10] == 322 | buildings_p1_array[10] == 331 | buildings_p1_array[10] == 341 | buildings_p1_array[10] == 351 | buildings_p1_array[10] == 361)
					{
						buildings_p1_array[10] = checked(buildings_p1_array[10] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[10] == 211 | buildings_p1_array[10] == 212 | buildings_p1_array[10] == 221 | buildings_p1_array[10] == 222 | buildings_p1_array[10] == 311 | buildings_p1_array[10] == 312 | buildings_p1_array[10] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[10] = checked(buildings_p1_array[10] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[10] = checked(buildings_p1_array[10] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot12_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[11] == 110 | buildings_p1_array[11] == 120 | buildings_p1_array[11] == 130 | buildings_p1_array[11] == 140 | buildings_p1_array[11] == 150 | buildings_p1_array[11] == 160 | buildings_p1_array[11] == 210 | buildings_p1_array[11] == 220 | buildings_p1_array[11] == 230 | buildings_p1_array[11] == 240 | buildings_p1_array[11] == 250 | buildings_p1_array[11] == 260 | buildings_p1_array[11] == 310 | buildings_p1_array[11] == 320 | buildings_p1_array[11] == 330 | buildings_p1_array[11] == 340 | buildings_p1_array[11] == 350 | buildings_p1_array[11] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[11] = checked(buildings_p1_array[11] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[11] == 111 | buildings_p1_array[11] == 121 | buildings_p1_array[11] == 131 | buildings_p1_array[11] == 141 | buildings_p1_array[11] == 151 | buildings_p1_array[11] == 161 | buildings_p1_array[11] == 213 | buildings_p1_array[11] == 223 | buildings_p1_array[11] == 231 | buildings_p1_array[11] == 241 | buildings_p1_array[11] == 251 | buildings_p1_array[11] == 261 | buildings_p1_array[11] == 313 | buildings_p1_array[11] == 322 | buildings_p1_array[11] == 331 | buildings_p1_array[11] == 341 | buildings_p1_array[11] == 351 | buildings_p1_array[11] == 361)
					{
						buildings_p1_array[11] = checked(buildings_p1_array[11] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[11] == 211 | buildings_p1_array[11] == 212 | buildings_p1_array[11] == 221 | buildings_p1_array[11] == 222 | buildings_p1_array[11] == 311 | buildings_p1_array[11] == 312 | buildings_p1_array[11] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[11] = checked(buildings_p1_array[11] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[11] = checked(buildings_p1_array[11] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot13_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[12] == 410 | buildings_p1_array[12] == 420 | buildings_p1_array[12] == 430 | buildings_p1_array[12] == 440 | buildings_p1_array[12] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[12] = checked(buildings_p1_array[12] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[12] == 411 | buildings_p1_array[12] == 421 | buildings_p1_array[12] == 431 | buildings_p1_array[12] == 441 | buildings_p1_array[12] == 451)
					{
						buildings_p1_array[12] = checked(buildings_p1_array[12] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot14_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[13] == 410 | buildings_p1_array[13] == 420 | buildings_p1_array[13] == 430 | buildings_p1_array[13] == 440 | buildings_p1_array[13] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[13] = checked(buildings_p1_array[13] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[13] == 411 | buildings_p1_array[13] == 421 | buildings_p1_array[13] == 431 | buildings_p1_array[13] == 441 | buildings_p1_array[13] == 451)
					{
						buildings_p1_array[13] = checked(buildings_p1_array[13] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot15_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[14] == 410 | buildings_p1_array[14] == 420 | buildings_p1_array[14] == 430 | buildings_p1_array[14] == 440 | buildings_p1_array[14] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[14] = checked(buildings_p1_array[14] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[14] == 411 | buildings_p1_array[14] == 421 | buildings_p1_array[14] == 431 | buildings_p1_array[14] == 441 | buildings_p1_array[14] == 451)
					{
						buildings_p1_array[14] = checked(buildings_p1_array[14] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot16_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[15] == 410 | buildings_p1_array[15] == 420 | buildings_p1_array[15] == 430 | buildings_p1_array[15] == 440 | buildings_p1_array[15] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[15] = checked(buildings_p1_array[15] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[15] == 411 | buildings_p1_array[15] == 421 | buildings_p1_array[15] == 431 | buildings_p1_array[15] == 441 | buildings_p1_array[15] == 451)
					{
						buildings_p1_array[15] = checked(buildings_p1_array[15] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot17_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[16] == 410 | buildings_p1_array[16] == 420 | buildings_p1_array[16] == 430 | buildings_p1_array[16] == 440 | buildings_p1_array[16] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[16] = checked(buildings_p1_array[16] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[16] == 411 | buildings_p1_array[16] == 421 | buildings_p1_array[16] == 431 | buildings_p1_array[16] == 441 | buildings_p1_array[16] == 451)
					{
						buildings_p1_array[16] = checked(buildings_p1_array[16] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot18_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[17] == 410 | buildings_p1_array[17] == 420 | buildings_p1_array[17] == 430 | buildings_p1_array[17] == 440 | buildings_p1_array[17] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[17] = checked(buildings_p1_array[17] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[17] == 411 | buildings_p1_array[17] == 421 | buildings_p1_array[17] == 431 | buildings_p1_array[17] == 441 | buildings_p1_array[17] == 451)
					{
						buildings_p1_array[17] = checked(buildings_p1_array[17] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot19_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[18] == 410 | buildings_p1_array[18] == 420 | buildings_p1_array[18] == 430 | buildings_p1_array[18] == 440 | buildings_p1_array[18] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[18] = checked(buildings_p1_array[18] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[18] == 411 | buildings_p1_array[18] == 421 | buildings_p1_array[18] == 431 | buildings_p1_array[18] == 441 | buildings_p1_array[18] == 451)
					{
						buildings_p1_array[18] = checked(buildings_p1_array[18] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot2_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[1] == 110 | buildings_p1_array[1] == 120 | buildings_p1_array[1] == 130 | buildings_p1_array[1] == 140 | buildings_p1_array[1] == 150 | buildings_p1_array[1] == 160 | buildings_p1_array[1] == 210 | buildings_p1_array[1] == 220 | buildings_p1_array[1] == 230 | buildings_p1_array[1] == 240 | buildings_p1_array[1] == 250 | buildings_p1_array[1] == 260 | buildings_p1_array[1] == 310 | buildings_p1_array[1] == 320 | buildings_p1_array[1] == 330 | buildings_p1_array[1] == 340 | buildings_p1_array[1] == 350 | buildings_p1_array[1] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[1] = checked(buildings_p1_array[1] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[1] == 111 | buildings_p1_array[1] == 121 | buildings_p1_array[1] == 131 | buildings_p1_array[1] == 141 | buildings_p1_array[1] == 151 | buildings_p1_array[1] == 161 | buildings_p1_array[1] == 213 | buildings_p1_array[1] == 223 | buildings_p1_array[1] == 231 | buildings_p1_array[1] == 241 | buildings_p1_array[1] == 251 | buildings_p1_array[1] == 261 | buildings_p1_array[1] == 313 | buildings_p1_array[1] == 322 | buildings_p1_array[1] == 331 | buildings_p1_array[1] == 341 | buildings_p1_array[1] == 351 | buildings_p1_array[1] == 361)
					{
						buildings_p1_array[1] = checked(buildings_p1_array[1] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[1] == 211 | buildings_p1_array[1] == 212 | buildings_p1_array[1] == 221 | buildings_p1_array[1] == 222 | buildings_p1_array[1] == 311 | buildings_p1_array[1] == 312 | buildings_p1_array[1] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[1] = checked(buildings_p1_array[1] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[1] = checked(buildings_p1_array[1] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot20_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It isn't your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It isn't the Mayor phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				finished = false;
				if (!finished)
				{
					if (buildings_p1_array[19] == 410 | buildings_p1_array[19] == 420 | buildings_p1_array[19] == 430 | buildings_p1_array[19] == 440 | buildings_p1_array[19] == 450)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[19] = checked(buildings_p1_array[19] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[19] == 411 | buildings_p1_array[19] == 421 | buildings_p1_array[19] == 431 | buildings_p1_array[19] == 441 | buildings_p1_array[19] == 451)
					{
						buildings_p1_array[19] = checked(buildings_p1_array[19] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot3_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[2] == 110 | buildings_p1_array[2] == 120 | buildings_p1_array[2] == 130 | buildings_p1_array[2] == 140 | buildings_p1_array[2] == 150 | buildings_p1_array[2] == 160 | buildings_p1_array[2] == 210 | buildings_p1_array[2] == 220 | buildings_p1_array[2] == 230 | buildings_p1_array[2] == 240 | buildings_p1_array[2] == 250 | buildings_p1_array[2] == 260 | buildings_p1_array[2] == 310 | buildings_p1_array[2] == 320 | buildings_p1_array[2] == 330 | buildings_p1_array[2] == 340 | buildings_p1_array[2] == 350 | buildings_p1_array[2] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[2] = checked(buildings_p1_array[2] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[2] == 111 | buildings_p1_array[2] == 121 | buildings_p1_array[2] == 131 | buildings_p1_array[2] == 141 | buildings_p1_array[2] == 151 | buildings_p1_array[2] == 161 | buildings_p1_array[2] == 213 | buildings_p1_array[2] == 223 | buildings_p1_array[2] == 231 | buildings_p1_array[2] == 241 | buildings_p1_array[2] == 251 | buildings_p1_array[2] == 261 | buildings_p1_array[2] == 313 | buildings_p1_array[2] == 322 | buildings_p1_array[2] == 331 | buildings_p1_array[2] == 341 | buildings_p1_array[2] == 351 | buildings_p1_array[2] == 361)
					{
						buildings_p1_array[2] = checked(buildings_p1_array[2] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[2] == 211 | buildings_p1_array[2] == 212 | buildings_p1_array[2] == 221 | buildings_p1_array[2] == 222 | buildings_p1_array[2] == 311 | buildings_p1_array[2] == 312 | buildings_p1_array[2] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[2] = checked(buildings_p1_array[2] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[2] = checked(buildings_p1_array[2] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot4_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[3] == 110 | buildings_p1_array[3] == 120 | buildings_p1_array[3] == 130 | buildings_p1_array[3] == 140 | buildings_p1_array[3] == 150 | buildings_p1_array[3] == 160 | buildings_p1_array[3] == 210 | buildings_p1_array[3] == 220 | buildings_p1_array[3] == 230 | buildings_p1_array[3] == 240 | buildings_p1_array[3] == 250 | buildings_p1_array[3] == 260 | buildings_p1_array[3] == 310 | buildings_p1_array[3] == 320 | buildings_p1_array[3] == 330 | buildings_p1_array[3] == 340 | buildings_p1_array[3] == 350 | buildings_p1_array[3] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[3] = checked(buildings_p1_array[3] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[3] == 111 | buildings_p1_array[3] == 121 | buildings_p1_array[3] == 131 | buildings_p1_array[3] == 141 | buildings_p1_array[3] == 151 | buildings_p1_array[3] == 161 | buildings_p1_array[3] == 213 | buildings_p1_array[3] == 223 | buildings_p1_array[3] == 231 | buildings_p1_array[3] == 241 | buildings_p1_array[3] == 251 | buildings_p1_array[3] == 261 | buildings_p1_array[3] == 313 | buildings_p1_array[3] == 322 | buildings_p1_array[3] == 331 | buildings_p1_array[3] == 341 | buildings_p1_array[3] == 351 | buildings_p1_array[3] == 361)
					{
						buildings_p1_array[3] = checked(buildings_p1_array[3] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[3] == 211 | buildings_p1_array[3] == 212 | buildings_p1_array[3] == 221 | buildings_p1_array[3] == 222 | buildings_p1_array[3] == 311 | buildings_p1_array[3] == 312 | buildings_p1_array[3] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[3] = checked(buildings_p1_array[3] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[3] = checked(buildings_p1_array[3] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot5_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[4] == 110 | buildings_p1_array[4] == 120 | buildings_p1_array[4] == 130 | buildings_p1_array[4] == 140 | buildings_p1_array[4] == 150 | buildings_p1_array[4] == 160 | buildings_p1_array[4] == 210 | buildings_p1_array[4] == 220 | buildings_p1_array[4] == 230 | buildings_p1_array[4] == 240 | buildings_p1_array[4] == 250 | buildings_p1_array[4] == 260 | buildings_p1_array[4] == 310 | buildings_p1_array[4] == 320 | buildings_p1_array[4] == 330 | buildings_p1_array[4] == 340 | buildings_p1_array[4] == 350 | buildings_p1_array[4] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[4] = checked(buildings_p1_array[4] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[4] == 111 | buildings_p1_array[4] == 121 | buildings_p1_array[4] == 131 | buildings_p1_array[4] == 141 | buildings_p1_array[4] == 151 | buildings_p1_array[4] == 161 | buildings_p1_array[4] == 213 | buildings_p1_array[4] == 223 | buildings_p1_array[4] == 231 | buildings_p1_array[4] == 241 | buildings_p1_array[4] == 251 | buildings_p1_array[4] == 261 | buildings_p1_array[4] == 313 | buildings_p1_array[4] == 322 | buildings_p1_array[4] == 331 | buildings_p1_array[4] == 341 | buildings_p1_array[4] == 351 | buildings_p1_array[4] == 361)
					{
						buildings_p1_array[4] = checked(buildings_p1_array[4] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[4] == 211 | buildings_p1_array[4] == 212 | buildings_p1_array[4] == 221 | buildings_p1_array[4] == 222 | buildings_p1_array[4] == 311 | buildings_p1_array[4] == 312 | buildings_p1_array[4] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[4] = checked(buildings_p1_array[4] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[4] = checked(buildings_p1_array[4] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot6_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[5] == 110 | buildings_p1_array[5] == 120 | buildings_p1_array[5] == 130 | buildings_p1_array[5] == 140 | buildings_p1_array[5] == 150 | buildings_p1_array[5] == 160 | buildings_p1_array[5] == 210 | buildings_p1_array[5] == 220 | buildings_p1_array[5] == 230 | buildings_p1_array[5] == 240 | buildings_p1_array[5] == 250 | buildings_p1_array[5] == 260 | buildings_p1_array[5] == 310 | buildings_p1_array[5] == 320 | buildings_p1_array[5] == 330 | buildings_p1_array[5] == 340 | buildings_p1_array[5] == 350 | buildings_p1_array[5] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[5] = checked(buildings_p1_array[5] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[5] == 111 | buildings_p1_array[5] == 121 | buildings_p1_array[5] == 131 | buildings_p1_array[5] == 141 | buildings_p1_array[5] == 151 | buildings_p1_array[5] == 161 | buildings_p1_array[5] == 213 | buildings_p1_array[5] == 223 | buildings_p1_array[5] == 231 | buildings_p1_array[5] == 241 | buildings_p1_array[5] == 251 | buildings_p1_array[5] == 261 | buildings_p1_array[5] == 313 | buildings_p1_array[5] == 322 | buildings_p1_array[5] == 331 | buildings_p1_array[5] == 341 | buildings_p1_array[5] == 351 | buildings_p1_array[5] == 361)
					{
						buildings_p1_array[5] = checked(buildings_p1_array[5] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[5] == 211 | buildings_p1_array[5] == 212 | buildings_p1_array[5] == 221 | buildings_p1_array[5] == 222 | buildings_p1_array[5] == 311 | buildings_p1_array[5] == 312 | buildings_p1_array[5] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[5] = checked(buildings_p1_array[5] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[5] = checked(buildings_p1_array[5] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot7_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[6] == 110 | buildings_p1_array[6] == 120 | buildings_p1_array[6] == 130 | buildings_p1_array[6] == 140 | buildings_p1_array[6] == 150 | buildings_p1_array[6] == 160 | buildings_p1_array[6] == 210 | buildings_p1_array[6] == 220 | buildings_p1_array[6] == 230 | buildings_p1_array[6] == 240 | buildings_p1_array[6] == 250 | buildings_p1_array[6] == 260 | buildings_p1_array[6] == 310 | buildings_p1_array[6] == 320 | buildings_p1_array[6] == 330 | buildings_p1_array[6] == 340 | buildings_p1_array[6] == 350 | buildings_p1_array[6] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[6] = checked(buildings_p1_array[6] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[6] == 111 | buildings_p1_array[6] == 121 | buildings_p1_array[6] == 131 | buildings_p1_array[6] == 141 | buildings_p1_array[6] == 151 | buildings_p1_array[6] == 161 | buildings_p1_array[6] == 213 | buildings_p1_array[6] == 223 | buildings_p1_array[6] == 231 | buildings_p1_array[6] == 241 | buildings_p1_array[6] == 251 | buildings_p1_array[6] == 261 | buildings_p1_array[6] == 313 | buildings_p1_array[6] == 322 | buildings_p1_array[6] == 331 | buildings_p1_array[6] == 341 | buildings_p1_array[6] == 351 | buildings_p1_array[6] == 361)
					{
						buildings_p1_array[6] = checked(buildings_p1_array[6] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[6] == 211 | buildings_p1_array[6] == 212 | buildings_p1_array[6] == 221 | buildings_p1_array[6] == 222 | buildings_p1_array[6] == 311 | buildings_p1_array[6] == 312 | buildings_p1_array[6] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[6] = checked(buildings_p1_array[6] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[6] = checked(buildings_p1_array[6] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot8_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[7] == 110 | buildings_p1_array[7] == 120 | buildings_p1_array[7] == 130 | buildings_p1_array[7] == 140 | buildings_p1_array[7] == 150 | buildings_p1_array[7] == 160 | buildings_p1_array[7] == 210 | buildings_p1_array[7] == 220 | buildings_p1_array[7] == 230 | buildings_p1_array[7] == 240 | buildings_p1_array[7] == 250 | buildings_p1_array[7] == 260 | buildings_p1_array[7] == 310 | buildings_p1_array[7] == 320 | buildings_p1_array[7] == 330 | buildings_p1_array[7] == 340 | buildings_p1_array[7] == 350 | buildings_p1_array[7] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[7] = checked(buildings_p1_array[7] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[7] == 111 | buildings_p1_array[7] == 121 | buildings_p1_array[7] == 131 | buildings_p1_array[7] == 141 | buildings_p1_array[7] == 151 | buildings_p1_array[7] == 161 | buildings_p1_array[7] == 213 | buildings_p1_array[7] == 223 | buildings_p1_array[7] == 231 | buildings_p1_array[7] == 241 | buildings_p1_array[7] == 251 | buildings_p1_array[7] == 261 | buildings_p1_array[7] == 313 | buildings_p1_array[7] == 322 | buildings_p1_array[7] == 331 | buildings_p1_array[7] == 341 | buildings_p1_array[7] == 351 | buildings_p1_array[7] == 361)
					{
						buildings_p1_array[7] = checked(buildings_p1_array[7] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[7] == 211 | buildings_p1_array[7] == 212 | buildings_p1_array[7] == 221 | buildings_p1_array[7] == 222 | buildings_p1_array[7] == 311 | buildings_p1_array[7] == 312 | buildings_p1_array[7] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[7] = checked(buildings_p1_array[7] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[7] = checked(buildings_p1_array[7] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void build_p1_slot9_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (!mayor_round)
			{
				Interaction.MsgBox("It's not the Mayor Phase. You cannot distribute your colonists now.", 0, null);
			}
			else
			{
				if (!finished)
				{
					if (buildings_p1_array[8] == 110 | buildings_p1_array[8] == 120 | buildings_p1_array[8] == 130 | buildings_p1_array[8] == 140 | buildings_p1_array[8] == 150 | buildings_p1_array[8] == 160 | buildings_p1_array[8] == 210 | buildings_p1_array[8] == 220 | buildings_p1_array[8] == 230 | buildings_p1_array[8] == 240 | buildings_p1_array[8] == 250 | buildings_p1_array[8] == 260 | buildings_p1_array[8] == 310 | buildings_p1_array[8] == 320 | buildings_p1_array[8] == 330 | buildings_p1_array[8] == 340 | buildings_p1_array[8] == 350 | buildings_p1_array[8] == 360)
					{
						if (idle_colonists_array[current_player] > 0)
						{
							buildings_p1_array[8] = checked(buildings_p1_array[8] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[8] == 111 | buildings_p1_array[8] == 121 | buildings_p1_array[8] == 131 | buildings_p1_array[8] == 141 | buildings_p1_array[8] == 151 | buildings_p1_array[8] == 161 | buildings_p1_array[8] == 213 | buildings_p1_array[8] == 223 | buildings_p1_array[8] == 231 | buildings_p1_array[8] == 241 | buildings_p1_array[8] == 251 | buildings_p1_array[8] == 261 | buildings_p1_array[8] == 313 | buildings_p1_array[8] == 322 | buildings_p1_array[8] == 331 | buildings_p1_array[8] == 341 | buildings_p1_array[8] == 351 | buildings_p1_array[8] == 361)
					{
						buildings_p1_array[8] = checked(buildings_p1_array[8] - 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished)
				{
					if (buildings_p1_array[8] == 211 | buildings_p1_array[8] == 212 | buildings_p1_array[8] == 221 | buildings_p1_array[8] == 222 | buildings_p1_array[8] == 311 | buildings_p1_array[8] == 312 | buildings_p1_array[8] == 321)
					{
						if (idle_colonists_array[current_player] <= 0)
						{
							buildings_p1_array[8] = checked(buildings_p1_array[8] - 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
							finished = true;
							update_all_labels();
						}
						else
						{
							buildings_p1_array[8] = checked(buildings_p1_array[8] + 1);
							idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
							finished = true;
							update_all_labels();
						}
					}
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void builder_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_builder();
			}
		}

		private void Button1_Click(object sender, EventArgs e)
		{
			tempinteger = tempinteger;
		}

		private void Button2_Click(object sender, EventArgs e)
		{
			close_text_file();
		}

		private void Button3_Click(object sender, EventArgs e)
		{
		}

		public void calculate_best_captain_points_p2()
		{
			update_ship_cargo();
			if (indigo_shipnum == 1 & indigo_ship_available)
			{
				if (shipa_array[3] < goods_p2_array[0])
				{
					indigo_points_shipa = shipa_array[3];
				}
				else
				{
					indigo_points_shipa = goods_p2_array[0];
				}
			}
			if (indigo_shipnum == 2 & indigo_ship_available)
			{
				if (shipb_array[3] < goods_p2_array[0])
				{
					indigo_points_shipb = shipb_array[3];
				}
				else
				{
					indigo_points_shipb = goods_p2_array[0];
				}
			}
			if (indigo_shipnum == 3 & indigo_ship_available)
			{
				if (shipc_array[3] < goods_p2_array[0])
				{
					indigo_points_shipc = shipc_array[3];
				}
				else
				{
					indigo_points_shipc = goods_p2_array[0];
				}
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				indigo_points_shipa = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				indigo_points_shipb = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				indigo_points_shipc = shipa_array[3];
			}
			if (sugar_shipnum == 1 & sugar_ship_available)
			{
				if (shipa_array[3] < goods_p2_array[1])
				{
					sugar_points_shipa = shipa_array[3];
				}
				else
				{
					sugar_points_shipa = goods_p2_array[1];
				}
			}
			if (sugar_shipnum == 2 & sugar_ship_available)
			{
				if (shipb_array[3] < goods_p2_array[1])
				{
					sugar_points_shipb = shipb_array[3];
				}
				else
				{
					sugar_points_shipb = goods_p2_array[1];
				}
			}
			if (sugar_shipnum == 3 & sugar_ship_available)
			{
				if (shipc_array[3] < goods_p2_array[1])
				{
					sugar_points_shipc = shipc_array[3];
				}
				else
				{
					sugar_points_shipc = goods_p2_array[1];
				}
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				sugar_points_shipa = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				sugar_points_shipb = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				sugar_points_shipc = shipa_array[3];
			}
			if (corn_shipnum == 1 & corn_ship_available)
			{
				if (shipa_array[3] < goods_p2_array[2])
				{
					corn_points_shipa = shipa_array[3];
				}
				else
				{
					corn_points_shipa = goods_p2_array[2];
				}
			}
			if (corn_shipnum == 2 & corn_ship_available)
			{
				if (shipb_array[3] < goods_p2_array[2])
				{
					corn_points_shipb = shipb_array[3];
				}
				else
				{
					corn_points_shipb = goods_p2_array[2];
				}
			}
			if (corn_shipnum == 3 & corn_ship_available)
			{
				if (shipc_array[3] < goods_p2_array[2])
				{
					corn_points_shipc = shipc_array[3];
				}
				else
				{
					corn_points_shipc = goods_p2_array[2];
				}
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				corn_points_shipa = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				corn_points_shipb = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				corn_points_shipc = shipa_array[3];
			}
			if (tobacco_shipnum == 1 & tobacco_ship_available)
			{
				if (shipa_array[3] < goods_p2_array[3])
				{
					tobacco_points_shipa = shipa_array[3];
				}
				else
				{
					tobacco_points_shipa = goods_p2_array[3];
				}
			}
			if (tobacco_shipnum == 2 & tobacco_ship_available)
			{
				if (shipb_array[3] < goods_p2_array[3])
				{
					tobacco_points_shipb = shipb_array[3];
				}
				else
				{
					tobacco_points_shipb = goods_p2_array[3];
				}
			}
			if (tobacco_shipnum == 3 & tobacco_ship_available)
			{
				if (shipc_array[3] < goods_p2_array[3])
				{
					tobacco_points_shipc = shipc_array[3];
				}
				else
				{
					tobacco_points_shipc = goods_p2_array[3];
				}
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				tobacco_points_shipa = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				tobacco_points_shipb = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				tobacco_points_shipc = shipa_array[3];
			}
			if (coffee_shipnum == 1 & coffee_ship_available)
			{
				if (shipa_array[3] < goods_p2_array[4])
				{
					coffee_points_shipa = shipa_array[3];
				}
				else
				{
					coffee_points_shipa = goods_p2_array[4];
				}
			}
			if (coffee_shipnum == 2 & coffee_ship_available)
			{
				if (shipb_array[3] < goods_p2_array[4])
				{
					coffee_points_shipb = shipb_array[3];
				}
				else
				{
					coffee_points_shipb = goods_p2_array[4];
				}
			}
			if (coffee_shipnum == 3 & coffee_ship_available)
			{
				if (shipc_array[3] < goods_p2_array[4])
				{
					coffee_points_shipc = shipc_array[3];
				}
				else
				{
					coffee_points_shipc = goods_p2_array[4];
				}
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				coffee_points_shipa = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				coffee_points_shipb = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				coffee_points_shipc = shipa_array[3];
			}
			corn_points_wharf = goods_p2_array[2];
			indigo_points_wharf = goods_p2_array[0];
			sugar_points_wharf = goods_p2_array[1];
			tobacco_points_wharf = goods_p2_array[3];
			coffee_points_wharf = goods_p2_array[4];
			calculate_best_captain_pointsb_p2();
		}

		public void calculate_best_captain_points_p3()
		{
			update_ship_cargo();
			if (indigo_shipnum == 1 & indigo_ship_available)
			{
				if (shipa_array[3] < goods_p3_array[0])
				{
					indigo_points_shipa = shipa_array[3];
				}
				else
				{
					indigo_points_shipa = goods_p3_array[0];
				}
			}
			if (indigo_shipnum == 2 & indigo_ship_available)
			{
				if (shipb_array[3] < goods_p3_array[0])
				{
					indigo_points_shipb = shipb_array[3];
				}
				else
				{
					indigo_points_shipb = goods_p3_array[0];
				}
			}
			if (indigo_shipnum == 3 & indigo_ship_available)
			{
				if (shipc_array[3] < goods_p3_array[0])
				{
					indigo_points_shipc = shipc_array[3];
				}
				else
				{
					indigo_points_shipc = goods_p3_array[0];
				}
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				indigo_points_shipa = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				indigo_points_shipb = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				indigo_points_shipc = shipa_array[3];
			}
			if (sugar_shipnum == 1 & sugar_ship_available)
			{
				if (shipa_array[3] < goods_p3_array[1])
				{
					sugar_points_shipa = shipa_array[3];
				}
				else
				{
					sugar_points_shipa = goods_p3_array[1];
				}
			}
			if (sugar_shipnum == 2 & sugar_ship_available)
			{
				if (shipb_array[3] < goods_p3_array[1])
				{
					sugar_points_shipb = shipb_array[3];
				}
				else
				{
					sugar_points_shipb = goods_p3_array[1];
				}
			}
			if (sugar_shipnum == 3 & sugar_ship_available)
			{
				if (shipc_array[3] < goods_p3_array[1])
				{
					sugar_points_shipc = shipc_array[3];
				}
				else
				{
					sugar_points_shipc = goods_p3_array[1];
				}
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				sugar_points_shipa = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				sugar_points_shipb = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				sugar_points_shipc = shipa_array[3];
			}
			if (corn_shipnum == 1 & corn_ship_available)
			{
				if (shipa_array[3] < goods_p3_array[2])
				{
					corn_points_shipa = shipa_array[3];
				}
				else
				{
					corn_points_shipa = goods_p3_array[2];
				}
			}
			if (corn_shipnum == 2 & corn_ship_available)
			{
				if (shipb_array[3] < goods_p3_array[2])
				{
					corn_points_shipb = shipb_array[3];
				}
				else
				{
					corn_points_shipb = goods_p3_array[2];
				}
			}
			if (corn_shipnum == 3 & corn_ship_available)
			{
				if (shipc_array[3] < goods_p3_array[2])
				{
					corn_points_shipc = shipc_array[3];
				}
				else
				{
					corn_points_shipc = goods_p3_array[2];
				}
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				corn_points_shipa = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				corn_points_shipb = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				corn_points_shipc = shipa_array[3];
			}
			if (tobacco_shipnum == 1 & tobacco_ship_available)
			{
				if (shipa_array[3] < goods_p3_array[3])
				{
					tobacco_points_shipa = shipa_array[3];
				}
				else
				{
					tobacco_points_shipa = goods_p3_array[3];
				}
			}
			if (tobacco_shipnum == 2 & tobacco_ship_available)
			{
				if (shipb_array[3] < goods_p3_array[3])
				{
					tobacco_points_shipb = shipb_array[3];
				}
				else
				{
					tobacco_points_shipb = goods_p3_array[3];
				}
			}
			if (tobacco_shipnum == 3 & tobacco_ship_available)
			{
				if (shipc_array[3] < goods_p3_array[3])
				{
					tobacco_points_shipc = shipc_array[3];
				}
				else
				{
					tobacco_points_shipc = goods_p3_array[3];
				}
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				tobacco_points_shipa = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				tobacco_points_shipb = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				tobacco_points_shipc = shipa_array[3];
			}
			if (coffee_shipnum == 1 & coffee_ship_available)
			{
				if (shipa_array[3] < goods_p3_array[4])
				{
					coffee_points_shipa = shipa_array[3];
				}
				else
				{
					coffee_points_shipa = goods_p3_array[4];
				}
			}
			if (coffee_shipnum == 2 & coffee_ship_available)
			{
				if (shipb_array[3] < goods_p3_array[4])
				{
					coffee_points_shipb = shipb_array[3];
				}
				else
				{
					coffee_points_shipb = goods_p3_array[4];
				}
			}
			if (coffee_shipnum == 3 & coffee_ship_available)
			{
				if (shipc_array[3] < goods_p3_array[4])
				{
					coffee_points_shipc = shipc_array[3];
				}
				else
				{
					coffee_points_shipc = goods_p3_array[4];
				}
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				coffee_points_shipa = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				coffee_points_shipb = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				coffee_points_shipc = shipa_array[3];
			}
			corn_points_wharf = goods_p3_array[2];
			indigo_points_wharf = goods_p3_array[0];
			sugar_points_wharf = goods_p3_array[1];
			tobacco_points_wharf = goods_p3_array[3];
			coffee_points_wharf = goods_p3_array[4];
			calculate_best_captain_pointsb_p3();
		}

		public void calculate_best_captain_points_p4()
		{
			update_ship_cargo();
			if (indigo_shipnum == 1 & indigo_ship_available)
			{
				if (shipa_array[3] < goods_p4_array[0])
				{
					indigo_points_shipa = shipa_array[3];
				}
				else
				{
					indigo_points_shipa = goods_p4_array[0];
				}
			}
			if (indigo_shipnum == 2 & indigo_ship_available)
			{
				if (shipb_array[3] < goods_p4_array[0])
				{
					indigo_points_shipb = shipb_array[3];
				}
				else
				{
					indigo_points_shipb = goods_p4_array[0];
				}
			}
			if (indigo_shipnum == 3 & indigo_ship_available)
			{
				if (shipc_array[3] < goods_p4_array[0])
				{
					indigo_points_shipc = shipc_array[3];
				}
				else
				{
					indigo_points_shipc = goods_p4_array[0];
				}
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				indigo_points_shipa = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				indigo_points_shipb = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				indigo_points_shipc = shipa_array[3];
			}
			if (sugar_shipnum == 1 & sugar_ship_available)
			{
				if (shipa_array[3] < goods_p4_array[1])
				{
					sugar_points_shipa = shipa_array[3];
				}
				else
				{
					sugar_points_shipa = goods_p4_array[1];
				}
			}
			if (sugar_shipnum == 2 & sugar_ship_available)
			{
				if (shipb_array[3] < goods_p4_array[1])
				{
					sugar_points_shipb = shipb_array[3];
				}
				else
				{
					sugar_points_shipb = goods_p4_array[1];
				}
			}
			if (sugar_shipnum == 3 & sugar_ship_available)
			{
				if (shipc_array[3] < goods_p4_array[1])
				{
					sugar_points_shipc = shipc_array[3];
				}
				else
				{
					sugar_points_shipc = goods_p4_array[1];
				}
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				sugar_points_shipa = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				sugar_points_shipb = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				sugar_points_shipc = shipa_array[3];
			}
			if (corn_shipnum == 1 & corn_ship_available)
			{
				if (shipa_array[3] < goods_p4_array[2])
				{
					corn_points_shipa = shipa_array[3];
				}
				else
				{
					corn_points_shipa = goods_p4_array[2];
				}
			}
			if (corn_shipnum == 2 & corn_ship_available)
			{
				if (shipb_array[3] < goods_p4_array[2])
				{
					corn_points_shipb = shipb_array[3];
				}
				else
				{
					corn_points_shipb = goods_p4_array[2];
				}
			}
			if (corn_shipnum == 3 & corn_ship_available)
			{
				if (shipc_array[3] < goods_p4_array[2])
				{
					corn_points_shipc = shipc_array[3];
				}
				else
				{
					corn_points_shipc = goods_p4_array[2];
				}
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				corn_points_shipa = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				corn_points_shipb = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				corn_points_shipc = shipa_array[3];
			}
			if (tobacco_shipnum == 1 & tobacco_ship_available)
			{
				if (shipa_array[3] < goods_p4_array[3])
				{
					tobacco_points_shipa = shipa_array[3];
				}
				else
				{
					tobacco_points_shipa = goods_p4_array[3];
				}
			}
			if (tobacco_shipnum == 2 & tobacco_ship_available)
			{
				if (shipb_array[3] < goods_p4_array[3])
				{
					tobacco_points_shipb = shipb_array[3];
				}
				else
				{
					tobacco_points_shipb = goods_p4_array[3];
				}
			}
			if (tobacco_shipnum == 3 & tobacco_ship_available)
			{
				if (shipc_array[3] < goods_p4_array[3])
				{
					tobacco_points_shipc = shipc_array[3];
				}
				else
				{
					tobacco_points_shipc = goods_p4_array[3];
				}
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				tobacco_points_shipa = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				tobacco_points_shipb = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				tobacco_points_shipc = shipa_array[3];
			}
			if (coffee_shipnum == 1 & coffee_ship_available)
			{
				if (shipa_array[3] < goods_p4_array[4])
				{
					coffee_points_shipa = shipa_array[3];
				}
				else
				{
					coffee_points_shipa = goods_p4_array[4];
				}
			}
			if (coffee_shipnum == 2 & coffee_ship_available)
			{
				if (shipb_array[3] < goods_p4_array[4])
				{
					coffee_points_shipb = shipb_array[3];
				}
				else
				{
					coffee_points_shipb = goods_p4_array[4];
				}
			}
			if (coffee_shipnum == 3 & coffee_ship_available)
			{
				if (shipc_array[3] < goods_p4_array[4])
				{
					coffee_points_shipc = shipc_array[3];
				}
				else
				{
					coffee_points_shipc = goods_p4_array[4];
				}
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				coffee_points_shipa = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				coffee_points_shipb = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				coffee_points_shipc = shipa_array[3];
			}
			corn_points_wharf = goods_p4_array[2];
			indigo_points_wharf = goods_p4_array[0];
			sugar_points_wharf = goods_p4_array[1];
			tobacco_points_wharf = goods_p4_array[3];
			coffee_points_wharf = goods_p4_array[4];
			calculate_best_captain_pointsb_p4();
		}

		public void calculate_best_captain_points_p5()
		{
			update_ship_cargo();
			if (indigo_shipnum == 1 & indigo_ship_available)
			{
				if (shipa_array[3] < goods_p5_array[0])
				{
					indigo_points_shipa = shipa_array[3];
				}
				else
				{
					indigo_points_shipa = goods_p5_array[0];
				}
			}
			if (indigo_shipnum == 2 & indigo_ship_available)
			{
				if (shipb_array[3] < goods_p5_array[0])
				{
					indigo_points_shipb = shipb_array[3];
				}
				else
				{
					indigo_points_shipb = goods_p5_array[0];
				}
			}
			if (indigo_shipnum == 3 & indigo_ship_available)
			{
				if (shipc_array[3] < goods_p5_array[0])
				{
					indigo_points_shipc = shipc_array[3];
				}
				else
				{
					indigo_points_shipc = goods_p5_array[0];
				}
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				indigo_points_shipa = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				indigo_points_shipb = shipa_array[3];
			}
			if (!indigo_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				indigo_points_shipc = shipa_array[3];
			}
			if (sugar_shipnum == 1 & sugar_ship_available)
			{
				if (shipa_array[3] < goods_p5_array[1])
				{
					sugar_points_shipa = shipa_array[3];
				}
				else
				{
					sugar_points_shipa = goods_p5_array[1];
				}
			}
			if (sugar_shipnum == 2 & sugar_ship_available)
			{
				if (shipb_array[3] < goods_p5_array[1])
				{
					sugar_points_shipb = shipb_array[3];
				}
				else
				{
					sugar_points_shipb = goods_p5_array[1];
				}
			}
			if (sugar_shipnum == 3 & sugar_ship_available)
			{
				if (shipc_array[3] < goods_p5_array[1])
				{
					sugar_points_shipc = shipc_array[3];
				}
				else
				{
					sugar_points_shipc = goods_p5_array[1];
				}
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				sugar_points_shipa = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				sugar_points_shipb = shipa_array[3];
			}
			if (!sugar_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				sugar_points_shipc = shipa_array[3];
			}
			if (corn_shipnum == 1 & corn_ship_available)
			{
				if (shipa_array[3] < goods_p5_array[2])
				{
					corn_points_shipa = shipa_array[3];
				}
				else
				{
					corn_points_shipa = goods_p5_array[2];
				}
			}
			if (corn_shipnum == 2 & corn_ship_available)
			{
				if (shipb_array[3] < goods_p5_array[2])
				{
					corn_points_shipb = shipb_array[3];
				}
				else
				{
					corn_points_shipb = goods_p5_array[2];
				}
			}
			if (corn_shipnum == 3 & corn_ship_available)
			{
				if (shipc_array[3] < goods_p5_array[2])
				{
					corn_points_shipc = shipc_array[3];
				}
				else
				{
					corn_points_shipc = goods_p5_array[2];
				}
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				corn_points_shipa = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				corn_points_shipb = shipa_array[3];
			}
			if (!corn_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				corn_points_shipc = shipa_array[3];
			}
			if (tobacco_shipnum == 1 & tobacco_ship_available)
			{
				if (shipa_array[3] < goods_p5_array[3])
				{
					tobacco_points_shipa = shipa_array[3];
				}
				else
				{
					tobacco_points_shipa = goods_p5_array[3];
				}
			}
			if (tobacco_shipnum == 2 & tobacco_ship_available)
			{
				if (shipb_array[3] < goods_p5_array[3])
				{
					tobacco_points_shipb = shipb_array[3];
				}
				else
				{
					tobacco_points_shipb = goods_p5_array[3];
				}
			}
			if (tobacco_shipnum == 3 & tobacco_ship_available)
			{
				if (shipc_array[3] < goods_p5_array[3])
				{
					tobacco_points_shipc = shipc_array[3];
				}
				else
				{
					tobacco_points_shipc = goods_p5_array[3];
				}
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				tobacco_points_shipa = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				tobacco_points_shipb = shipa_array[3];
			}
			if (!tobacco_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				tobacco_points_shipc = shipa_array[3];
			}
			if (coffee_shipnum == 1 & coffee_ship_available)
			{
				if (shipa_array[3] < goods_p5_array[4])
				{
					coffee_points_shipa = shipa_array[3];
				}
				else
				{
					coffee_points_shipa = goods_p5_array[4];
				}
			}
			if (coffee_shipnum == 2 & coffee_ship_available)
			{
				if (shipb_array[3] < goods_p5_array[4])
				{
					coffee_points_shipb = shipb_array[3];
				}
				else
				{
					coffee_points_shipb = goods_p5_array[4];
				}
			}
			if (coffee_shipnum == 3 & coffee_ship_available)
			{
				if (shipc_array[3] < goods_p5_array[4])
				{
					coffee_points_shipc = shipc_array[3];
				}
				else
				{
					coffee_points_shipc = goods_p5_array[4];
				}
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0)
			{
				coffee_points_shipa = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0)
			{
				coffee_points_shipb = shipa_array[3];
			}
			if (!coffee_ship_full & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0)
			{
				coffee_points_shipc = shipa_array[3];
			}
			corn_points_wharf = goods_p5_array[2];
			indigo_points_wharf = goods_p5_array[0];
			sugar_points_wharf = goods_p5_array[1];
			tobacco_points_wharf = goods_p5_array[3];
			coffee_points_wharf = goods_p5_array[4];
			calculate_best_captain_pointsb_p5();
		}

		public void calculate_best_captain_pointsb_p2()
		{
			best_shipping_method = "null";
			current_best_score = 0;
			if (goods_p2_array[2] > 0 & corn_ship_available & corn_shipnum == 1 & ships_can_take_corn)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p2_array[2] > 0 & corn_ship_available & corn_shipnum == 2 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p2_array[2] > 0 & corn_ship_available & corn_shipnum == 3 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p2_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_corn & corn_points_shipa > current_best_score)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p2_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p2_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p2_array[0] > 0 & indigo_ship_available & indigo_shipnum == 1 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p2_array[0] > 0 & indigo_ship_available & indigo_shipnum == 2 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p2_array[0] > 0 & indigo_ship_available & indigo_shipnum == 3 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p2_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p2_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p2_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p2_array[1] > 0 & sugar_ship_available & sugar_shipnum == 1 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p2_array[1] > 0 & sugar_ship_available & sugar_shipnum == 2 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p2_array[1] > 0 & sugar_ship_available & sugar_shipnum == 3 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p2_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p2_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p2_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p2_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 1 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p2_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 2 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p2_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 3 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p2_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p2_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p2_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p2_array[4] > 0 & coffee_ship_available & coffee_shipnum == 1 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p2_array[4] > 0 & coffee_ship_available & coffee_shipnum == 2 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p2_array[4] > 0 & coffee_ship_available & coffee_shipnum == 3 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (goods_p2_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p2_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p2_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(best_shipping_method, "null", false) == 0)
			{
				check_for_building(361);
				if (goods_p2_array[2] > 0 & found_building)
				{
					current_best_score = corn_points_wharf;
					best_shipping_method = "corn_wharf";
				}
				if (goods_p2_array[0] > 0 & found_building & indigo_points_wharf > current_best_score)
				{
					current_best_score = indigo_points_wharf;
					best_shipping_method = "indigo_wharf";
				}
				if (goods_p2_array[1] > 0 & found_building & sugar_points_wharf > current_best_score)
				{
					current_best_score = sugar_points_wharf;
					best_shipping_method = "sugar_wharf";
				}
				if (goods_p2_array[3] > 0 & found_building & tobacco_points_wharf > current_best_score)
				{
					current_best_score = tobacco_points_wharf;
					best_shipping_method = "tobacco_wharf";
				}
				if (goods_p2_array[4] > 0 & found_building & coffee_points_wharf > current_best_score)
				{
					current_best_score = coffee_points_wharf;
					best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_best_captain_pointsb_p3()
		{
			best_shipping_method = "null";
			current_best_score = 0;
			if (goods_p3_array[2] > 0 & corn_ship_available & corn_shipnum == 1 & ships_can_take_corn)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p3_array[2] > 0 & corn_ship_available & corn_shipnum == 2 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p3_array[2] > 0 & corn_ship_available & corn_shipnum == 3 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p3_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_corn & corn_points_shipa > current_best_score)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p3_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p3_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p3_array[0] > 0 & indigo_ship_available & indigo_shipnum == 1 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p3_array[0] > 0 & indigo_ship_available & indigo_shipnum == 2 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p3_array[0] > 0 & indigo_ship_available & indigo_shipnum == 3 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p3_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p3_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p3_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p3_array[1] > 0 & sugar_ship_available & sugar_shipnum == 1 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p3_array[1] > 0 & sugar_ship_available & sugar_shipnum == 2 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p3_array[1] > 0 & sugar_ship_available & sugar_shipnum == 3 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p3_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p3_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p3_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p3_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 1 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p3_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 2 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p3_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 3 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p3_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p3_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p3_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p3_array[4] > 0 & coffee_ship_available & coffee_shipnum == 1 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p3_array[4] > 0 & coffee_ship_available & coffee_shipnum == 2 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p3_array[4] > 0 & coffee_ship_available & coffee_shipnum == 3 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (goods_p3_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p3_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p3_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(best_shipping_method, "null", false) == 0)
			{
				check_for_building(361);
				if (goods_p3_array[2] > 0 & found_building)
				{
					current_best_score = corn_points_wharf;
					best_shipping_method = "corn_wharf";
				}
				if (goods_p3_array[0] > 0 & found_building & indigo_points_wharf > current_best_score)
				{
					current_best_score = indigo_points_wharf;
					best_shipping_method = "indigo_wharf";
				}
				if (goods_p3_array[1] > 0 & found_building & sugar_points_wharf > current_best_score)
				{
					current_best_score = sugar_points_wharf;
					best_shipping_method = "sugar_wharf";
				}
				if (goods_p3_array[3] > 0 & found_building & tobacco_points_wharf > current_best_score)
				{
					current_best_score = tobacco_points_wharf;
					best_shipping_method = "tobacco_wharf";
				}
				if (goods_p3_array[4] > 0 & found_building & coffee_points_wharf > current_best_score)
				{
					current_best_score = coffee_points_wharf;
					best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_best_captain_pointsb_p4()
		{
			best_shipping_method = "null";
			current_best_score = 0;
			if (goods_p4_array[2] > 0 & corn_ship_available & corn_shipnum == 1 & ships_can_take_corn)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p4_array[2] > 0 & corn_ship_available & corn_shipnum == 2 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p4_array[2] > 0 & corn_ship_available & corn_shipnum == 3 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p4_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_corn & corn_points_shipa > current_best_score)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p4_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p4_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p4_array[0] > 0 & indigo_ship_available & indigo_shipnum == 1 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p4_array[0] > 0 & indigo_ship_available & indigo_shipnum == 2 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p4_array[0] > 0 & indigo_ship_available & indigo_shipnum == 3 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p4_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p4_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p4_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p4_array[1] > 0 & sugar_ship_available & sugar_shipnum == 1 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p4_array[1] > 0 & sugar_ship_available & sugar_shipnum == 2 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p4_array[1] > 0 & sugar_ship_available & sugar_shipnum == 3 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p4_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p4_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p4_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p4_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 1 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p4_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 2 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p4_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 3 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p4_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p4_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p4_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p4_array[4] > 0 & coffee_ship_available & coffee_shipnum == 1 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p4_array[4] > 0 & coffee_ship_available & coffee_shipnum == 2 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p4_array[4] > 0 & coffee_ship_available & coffee_shipnum == 3 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (goods_p4_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p4_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p4_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(best_shipping_method, "null", false) == 0)
			{
				check_for_building(361);
				if (goods_p4_array[2] > 0 & found_building)
				{
					current_best_score = corn_points_wharf;
					best_shipping_method = "corn_wharf";
				}
				if (goods_p4_array[0] > 0 & found_building & indigo_points_wharf > current_best_score)
				{
					current_best_score = indigo_points_wharf;
					best_shipping_method = "indigo_wharf";
				}
				if (goods_p4_array[1] > 0 & found_building & sugar_points_wharf > current_best_score)
				{
					current_best_score = sugar_points_wharf;
					best_shipping_method = "sugar_wharf";
				}
				if (goods_p4_array[3] > 0 & found_building & tobacco_points_wharf > current_best_score)
				{
					current_best_score = tobacco_points_wharf;
					best_shipping_method = "tobacco_wharf";
				}
				if (goods_p4_array[4] > 0 & found_building & coffee_points_wharf > current_best_score)
				{
					current_best_score = coffee_points_wharf;
					best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_best_captain_pointsb_p5()
		{
			best_shipping_method = "null";
			current_best_score = 0;
			if (goods_p5_array[2] > 0 & corn_ship_available & corn_shipnum == 1 & ships_can_take_corn)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p5_array[2] > 0 & corn_ship_available & corn_shipnum == 2 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p5_array[2] > 0 & corn_ship_available & corn_shipnum == 3 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p5_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_corn & corn_points_shipa > current_best_score)
			{
				current_best_score = corn_points_shipa;
				best_shipping_method = "corn_shipa";
			}
			if (goods_p5_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_corn & corn_points_shipb > current_best_score)
			{
				current_best_score = corn_points_shipb;
				best_shipping_method = "corn_shipb";
			}
			if (goods_p5_array[2] > 0 & !corn_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_corn & corn_points_shipc > current_best_score)
			{
				current_best_score = corn_points_shipc;
				best_shipping_method = "corn_shipc";
			}
			if (goods_p5_array[0] > 0 & indigo_ship_available & indigo_shipnum == 1 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p5_array[0] > 0 & indigo_ship_available & indigo_shipnum == 2 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p5_array[0] > 0 & indigo_ship_available & indigo_shipnum == 3 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p5_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_indigo & indigo_points_shipa > current_best_score)
			{
				current_best_score = indigo_points_shipa;
				best_shipping_method = "indigo_shipa";
			}
			if (goods_p5_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_indigo & indigo_points_shipb > current_best_score)
			{
				current_best_score = indigo_points_shipb;
				best_shipping_method = "indigo_shipb";
			}
			if (goods_p5_array[0] > 0 & !indigo_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_indigo & indigo_points_shipc > current_best_score)
			{
				current_best_score = indigo_points_shipc;
				best_shipping_method = "indigo_shipc";
			}
			if (goods_p5_array[1] > 0 & sugar_ship_available & sugar_shipnum == 1 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p5_array[1] > 0 & sugar_ship_available & sugar_shipnum == 2 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p5_array[1] > 0 & sugar_ship_available & sugar_shipnum == 3 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p5_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_sugar & sugar_points_shipa > current_best_score)
			{
				current_best_score = sugar_points_shipa;
				best_shipping_method = "sugar_shipa";
			}
			if (goods_p5_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_sugar & sugar_points_shipb > current_best_score)
			{
				current_best_score = sugar_points_shipb;
				best_shipping_method = "sugar_shipb";
			}
			if (goods_p5_array[1] > 0 & !sugar_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_sugar & sugar_points_shipc > current_best_score)
			{
				current_best_score = sugar_points_shipc;
				best_shipping_method = "sugar_shipc";
			}
			if (goods_p5_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 1 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p5_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 2 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p5_array[3] > 0 & tobacco_ship_available & tobacco_shipnum == 3 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p5_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_tobacco & tobacco_points_shipa > current_best_score)
			{
				current_best_score = tobacco_points_shipa;
				best_shipping_method = "tobacco_shipa";
			}
			if (goods_p5_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_tobacco & tobacco_points_shipb > current_best_score)
			{
				current_best_score = tobacco_points_shipb;
				best_shipping_method = "tobacco_shipb";
			}
			if (goods_p5_array[3] > 0 & !tobacco_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_tobacco & tobacco_points_shipc > current_best_score)
			{
				current_best_score = tobacco_points_shipc;
				best_shipping_method = "tobacco_shipc";
			}
			if (goods_p5_array[4] > 0 & coffee_ship_available & coffee_shipnum == 1 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p5_array[4] > 0 & coffee_ship_available & coffee_shipnum == 2 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p5_array[4] > 0 & coffee_ship_available & coffee_shipnum == 3 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (goods_p5_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipa", false) == 0 & ships_can_take_coffee & coffee_points_shipa > current_best_score)
			{
				current_best_score = coffee_points_shipa;
				best_shipping_method = "coffee_shipa";
			}
			if (goods_p5_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipb", false) == 0 & ships_can_take_coffee & coffee_points_shipb > current_best_score)
			{
				current_best_score = coffee_points_shipb;
				best_shipping_method = "coffee_shipb";
			}
			if (goods_p5_array[4] > 0 & !coffee_ship_available & StringType.StrCmp(biggest_empty_ship, "shipc", false) == 0 & ships_can_take_coffee & coffee_points_shipc > current_best_score)
			{
				current_best_score = coffee_points_shipc;
				best_shipping_method = "coffee_shipc";
			}
			if (StringType.StrCmp(best_shipping_method, "null", false) == 0)
			{
				check_for_building(361);
				if (goods_p5_array[2] > 0 & found_building)
				{
					current_best_score = corn_points_wharf;
					best_shipping_method = "corn_wharf";
				}
				if (goods_p5_array[0] > 0 & found_building & indigo_points_wharf > current_best_score)
				{
					current_best_score = indigo_points_wharf;
					best_shipping_method = "indigo_wharf";
				}
				if (goods_p5_array[1] > 0 & found_building & sugar_points_wharf > current_best_score)
				{
					current_best_score = sugar_points_wharf;
					best_shipping_method = "sugar_wharf";
				}
				if (goods_p5_array[3] > 0 & found_building & tobacco_points_wharf > current_best_score)
				{
					current_best_score = tobacco_points_wharf;
					best_shipping_method = "tobacco_wharf";
				}
				if (goods_p5_array[4] > 0 & found_building & coffee_points_wharf > current_best_score)
				{
					current_best_score = coffee_points_wharf;
					best_shipping_method = "coffee_wharf";
				}
			}
		}

		public void calculate_score()
		{
			update_all_colonists();
			calculate_score_p1();
			calculate_score_p2();
			calculate_score_p3();
			calculate_score_p4();
			calculate_score_p5();
			verification_alerts();
		}

		public void calculate_score_p1()
		{
			vp_buildings_p1 = 0;
			counter1x = 0;
			do
			{
				tempstring = Conversion.Str(buildings_p1_array[counter1x]);
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "1", false) == 0)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "2", false) == 0)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "3", false) == 0)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "4", false) == 0)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (counter1x <= 19);
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 16))
			{
				if (buildings_p1_array[counter1x] != 411)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p1_array[counter1x] == 110 | buildings_p1_array[counter1x] == 111 | buildings_p1_array[counter1x] == 120 | buildings_p1_array[counter1x] == 121)
					{
						vp_buildings_p1 = checked(vp_buildings_p1 + 1);
					}
					if (buildings_p1_array[counter1x] == 210 | buildings_p1_array[counter1x] == 211 | buildings_p1_array[counter1x] == 212 | buildings_p1_array[counter1x] == 213 | buildings_p1_array[counter1x] == 220 | buildings_p1_array[counter1x] == 221 | buildings_p1_array[counter1x] == 222 | buildings_p1_array[counter1x] == 223 | buildings_p1_array[counter1x] == 310 | buildings_p1_array[counter1x] == 311 | buildings_p1_array[counter1x] == 312 | buildings_p1_array[counter1x] == 313 | buildings_p1_array[counter1x] == 320 | buildings_p1_array[counter1x] == 321 | buildings_p1_array[counter1x] == 322)
					{
						vp_buildings_p1 = checked(vp_buildings_p1 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p1_array[counter1x] != 421)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				if (num_plantations_p1 <= 9)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 4);
				}
				if (num_plantations_p1 == 10)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 5);
				}
				if (num_plantations_p1 == 11)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 6);
				}
				if (num_plantations_p1 == 12)
				{
					vp_buildings_p1 = checked(vp_buildings_p1 + 7);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p1_array[counter1x] != 431)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (colonists_array[1] > 0)
				{
					int colonistsArray = colonists_array[1];
					counter1x = 1;
					while (counter1x <= colonistsArray)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 3)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					vp_buildings_p1 = checked(vp_buildings_p1 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p1_array[counter1x] != 441)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p1 > 0)
				{
					int vpchipsP1 = vpchips_p1;
					counter1x = 1;
					while (counter1x <= vpchipsP1)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					vp_buildings_p1 = checked(vp_buildings_p1 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p1_array[counter1x] != 451)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p1_array[counter1x] == 130 | buildings_p1_array[counter1x] == 131 | buildings_p1_array[counter1x] == 140 | buildings_p1_array[counter1x] == 141 | buildings_p1_array[counter1x] == 150 | buildings_p1_array[counter1x] == 151 | buildings_p1_array[counter1x] == 160 | buildings_p1_array[counter1x] == 161 | buildings_p1_array[counter1x] == 230 | buildings_p1_array[counter1x] == 231 | buildings_p1_array[counter1x] == 240 | buildings_p1_array[counter1x] == 241 | buildings_p1_array[counter1x] == 250 | buildings_p1_array[counter1x] == 251 | buildings_p1_array[counter1x] == 260 | buildings_p1_array[counter1x] == 261 | buildings_p1_array[counter1x] == 330 | buildings_p1_array[counter1x] == 331 | buildings_p1_array[counter1x] == 340 | buildings_p1_array[counter1x] == 341 | buildings_p1_array[counter1x] == 350 | buildings_p1_array[counter1x] == 351 | buildings_p1_array[counter1x] == 410 | buildings_p1_array[counter1x] == 411 | buildings_p1_array[counter1x] == 420 | buildings_p1_array[counter1x] == 421 | buildings_p1_array[counter1x] == 430 | buildings_p1_array[counter1x] == 431 | buildings_p1_array[counter1x] == 440 | buildings_p1_array[counter1x] == 441 | buildings_p1_array[counter1x] == 450 | buildings_p1_array[counter1x] == 451 | buildings_p1_array[counter1x] == 361)
					{
						vp_buildings_p1 = checked(vp_buildings_p1 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 15);
			}
		}

		public void calculate_score_p2()
		{
			vp_buildings_p2 = 0;
			counter1x = 0;
			do
			{
				tempstring = Conversion.Str(buildings_p2_array[counter1x]);
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "1", false) == 0)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "2", false) == 0)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "3", false) == 0)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "4", false) == 0)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (counter1x <= 19);
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 16))
			{
				if (buildings_p2_array[counter1x] != 411)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p2_array[counter1x] == 110 | buildings_p2_array[counter1x] == 111 | buildings_p2_array[counter1x] == 120 | buildings_p2_array[counter1x] == 121)
					{
						vp_buildings_p2 = checked(vp_buildings_p2 + 1);
					}
					if (buildings_p2_array[counter1x] == 210 | buildings_p2_array[counter1x] == 211 | buildings_p2_array[counter1x] == 212 | buildings_p2_array[counter1x] == 213 | buildings_p2_array[counter1x] == 220 | buildings_p2_array[counter1x] == 221 | buildings_p2_array[counter1x] == 222 | buildings_p2_array[counter1x] == 223 | buildings_p2_array[counter1x] == 310 | buildings_p2_array[counter1x] == 311 | buildings_p2_array[counter1x] == 312 | buildings_p2_array[counter1x] == 313 | buildings_p2_array[counter1x] == 320 | buildings_p2_array[counter1x] == 321 | buildings_p2_array[counter1x] == 322)
					{
						vp_buildings_p2 = checked(vp_buildings_p2 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p2_array[counter1x] != 421)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				if (num_plantations_p2 <= 9)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 4);
				}
				if (num_plantations_p2 == 10)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 5);
				}
				if (num_plantations_p2 == 11)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 6);
				}
				if (num_plantations_p2 == 12)
				{
					vp_buildings_p2 = checked(vp_buildings_p2 + 7);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p2_array[counter1x] != 431)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (colonists_array[1] > 0)
				{
					int colonistsArray = colonists_array[2];
					counter1x = 1;
					while (counter1x <= colonistsArray)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 3)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					vp_buildings_p2 = checked(vp_buildings_p2 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p2_array[counter1x] != 441)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p2 > 0)
				{
					int vpchipsP2 = vpchips_p2;
					counter1x = 1;
					while (counter1x <= vpchipsP2)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					vp_buildings_p2 = checked(vp_buildings_p2 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p2_array[counter1x] != 451)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p2_array[counter1x] == 130 | buildings_p2_array[counter1x] == 131 | buildings_p2_array[counter1x] == 140 | buildings_p2_array[counter1x] == 141 | buildings_p2_array[counter1x] == 150 | buildings_p2_array[counter1x] == 151 | buildings_p2_array[counter1x] == 160 | buildings_p2_array[counter1x] == 161 | buildings_p2_array[counter1x] == 230 | buildings_p2_array[counter1x] == 231 | buildings_p2_array[counter1x] == 240 | buildings_p2_array[counter1x] == 241 | buildings_p2_array[counter1x] == 250 | buildings_p2_array[counter1x] == 251 | buildings_p2_array[counter1x] == 260 | buildings_p2_array[counter1x] == 261 | buildings_p2_array[counter1x] == 330 | buildings_p2_array[counter1x] == 331 | buildings_p2_array[counter1x] == 340 | buildings_p2_array[counter1x] == 341 | buildings_p2_array[counter1x] == 350 | buildings_p2_array[counter1x] == 351 | buildings_p2_array[counter1x] == 410 | buildings_p2_array[counter1x] == 411 | buildings_p2_array[counter1x] == 420 | buildings_p2_array[counter1x] == 421 | buildings_p2_array[counter1x] == 430 | buildings_p2_array[counter1x] == 431 | buildings_p2_array[counter1x] == 440 | buildings_p2_array[counter1x] == 441 | buildings_p2_array[counter1x] == 450 | buildings_p2_array[counter1x] == 451 | buildings_p2_array[counter1x] == 361)
					{
						vp_buildings_p2 = checked(vp_buildings_p2 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 15);
			}
		}

		public void calculate_score_p3()
		{
			vp_buildings_p3 = 0;
			counter1x = 0;
			do
			{
				tempstring = Conversion.Str(buildings_p3_array[counter1x]);
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "1", false) == 0)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "2", false) == 0)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "3", false) == 0)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "4", false) == 0)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (counter1x <= 19);
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 16))
			{
				if (buildings_p3_array[counter1x] != 411)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p3_array[counter1x] == 110 | buildings_p3_array[counter1x] == 111 | buildings_p3_array[counter1x] == 120 | buildings_p3_array[counter1x] == 121)
					{
						vp_buildings_p3 = checked(vp_buildings_p3 + 1);
					}
					if (buildings_p3_array[counter1x] == 210 | buildings_p3_array[counter1x] == 211 | buildings_p3_array[counter1x] == 212 | buildings_p3_array[counter1x] == 213 | buildings_p3_array[counter1x] == 220 | buildings_p3_array[counter1x] == 221 | buildings_p3_array[counter1x] == 222 | buildings_p3_array[counter1x] == 223 | buildings_p3_array[counter1x] == 310 | buildings_p3_array[counter1x] == 311 | buildings_p3_array[counter1x] == 312 | buildings_p3_array[counter1x] == 313 | buildings_p3_array[counter1x] == 320 | buildings_p3_array[counter1x] == 321 | buildings_p3_array[counter1x] == 322)
					{
						vp_buildings_p3 = checked(vp_buildings_p3 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p3_array[counter1x] != 421)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				if (num_plantations_p3 <= 9)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 4);
				}
				if (num_plantations_p3 == 10)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 5);
				}
				if (num_plantations_p3 == 11)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 6);
				}
				if (num_plantations_p3 == 12)
				{
					vp_buildings_p3 = checked(vp_buildings_p3 + 7);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p3_array[counter1x] != 431)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (colonists_array[1] > 0)
				{
					int colonistsArray = colonists_array[3];
					counter1x = 1;
					while (counter1x <= colonistsArray)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 3)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					vp_buildings_p3 = checked(vp_buildings_p3 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p3_array[counter1x] != 441)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p3 > 0)
				{
					int vpchipsP3 = vpchips_p3;
					counter1x = 1;
					while (counter1x <= vpchipsP3)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					vp_buildings_p3 = checked(vp_buildings_p3 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p3_array[counter1x] != 451)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p3_array[counter1x] == 130 | buildings_p3_array[counter1x] == 131 | buildings_p3_array[counter1x] == 140 | buildings_p3_array[counter1x] == 141 | buildings_p3_array[counter1x] == 150 | buildings_p3_array[counter1x] == 151 | buildings_p3_array[counter1x] == 160 | buildings_p3_array[counter1x] == 161 | buildings_p3_array[counter1x] == 230 | buildings_p3_array[counter1x] == 231 | buildings_p3_array[counter1x] == 240 | buildings_p3_array[counter1x] == 241 | buildings_p3_array[counter1x] == 250 | buildings_p3_array[counter1x] == 251 | buildings_p3_array[counter1x] == 260 | buildings_p3_array[counter1x] == 261 | buildings_p3_array[counter1x] == 330 | buildings_p3_array[counter1x] == 331 | buildings_p3_array[counter1x] == 340 | buildings_p3_array[counter1x] == 341 | buildings_p3_array[counter1x] == 350 | buildings_p3_array[counter1x] == 351 | buildings_p3_array[counter1x] == 410 | buildings_p3_array[counter1x] == 411 | buildings_p3_array[counter1x] == 420 | buildings_p3_array[counter1x] == 421 | buildings_p3_array[counter1x] == 430 | buildings_p3_array[counter1x] == 431 | buildings_p3_array[counter1x] == 440 | buildings_p3_array[counter1x] == 441 | buildings_p3_array[counter1x] == 450 | buildings_p3_array[counter1x] == 451 | buildings_p3_array[counter1x] == 361)
					{
						vp_buildings_p3 = checked(vp_buildings_p3 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 15);
			}
		}

		public void calculate_score_p4()
		{
			vp_buildings_p4 = 0;
			counter1x = 0;
			do
			{
				tempstring = Conversion.Str(buildings_p4_array[counter1x]);
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "1", false) == 0)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "2", false) == 0)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "3", false) == 0)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "4", false) == 0)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (counter1x <= 19);
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 16))
			{
				if (buildings_p4_array[counter1x] != 411)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p4_array[counter1x] == 110 | buildings_p4_array[counter1x] == 111 | buildings_p4_array[counter1x] == 120 | buildings_p4_array[counter1x] == 121)
					{
						vp_buildings_p4 = checked(vp_buildings_p4 + 1);
					}
					if (buildings_p4_array[counter1x] == 210 | buildings_p4_array[counter1x] == 211 | buildings_p4_array[counter1x] == 212 | buildings_p4_array[counter1x] == 213 | buildings_p4_array[counter1x] == 220 | buildings_p4_array[counter1x] == 221 | buildings_p4_array[counter1x] == 222 | buildings_p4_array[counter1x] == 223 | buildings_p4_array[counter1x] == 310 | buildings_p4_array[counter1x] == 311 | buildings_p4_array[counter1x] == 312 | buildings_p4_array[counter1x] == 313 | buildings_p4_array[counter1x] == 320 | buildings_p4_array[counter1x] == 321 | buildings_p4_array[counter1x] == 322)
					{
						vp_buildings_p4 = checked(vp_buildings_p4 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p4_array[counter1x] != 421)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				if (num_plantations_p4 <= 9)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 4);
				}
				if (num_plantations_p4 == 10)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 5);
				}
				if (num_plantations_p4 == 11)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 6);
				}
				if (num_plantations_p4 == 12)
				{
					vp_buildings_p4 = checked(vp_buildings_p4 + 7);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p4_array[counter1x] != 431)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (colonists_array[1] > 0)
				{
					int colonistsArray = colonists_array[4];
					counter1x = 1;
					while (counter1x <= colonistsArray)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 3)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					vp_buildings_p4 = checked(vp_buildings_p4 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p4_array[counter1x] != 441)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p4 > 0)
				{
					int vpchipsP4 = vpchips_p4;
					counter1x = 1;
					while (counter1x <= vpchipsP4)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					vp_buildings_p4 = checked(vp_buildings_p4 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p4_array[counter1x] != 451)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p4_array[counter1x] == 130 | buildings_p4_array[counter1x] == 131 | buildings_p4_array[counter1x] == 140 | buildings_p4_array[counter1x] == 141 | buildings_p4_array[counter1x] == 150 | buildings_p4_array[counter1x] == 151 | buildings_p4_array[counter1x] == 160 | buildings_p4_array[counter1x] == 161 | buildings_p4_array[counter1x] == 230 | buildings_p4_array[counter1x] == 231 | buildings_p4_array[counter1x] == 240 | buildings_p4_array[counter1x] == 241 | buildings_p4_array[counter1x] == 250 | buildings_p4_array[counter1x] == 251 | buildings_p4_array[counter1x] == 260 | buildings_p4_array[counter1x] == 261 | buildings_p4_array[counter1x] == 330 | buildings_p4_array[counter1x] == 331 | buildings_p4_array[counter1x] == 340 | buildings_p4_array[counter1x] == 341 | buildings_p4_array[counter1x] == 350 | buildings_p4_array[counter1x] == 351 | buildings_p4_array[counter1x] == 410 | buildings_p4_array[counter1x] == 411 | buildings_p4_array[counter1x] == 420 | buildings_p4_array[counter1x] == 421 | buildings_p4_array[counter1x] == 430 | buildings_p4_array[counter1x] == 431 | buildings_p4_array[counter1x] == 440 | buildings_p4_array[counter1x] == 441 | buildings_p4_array[counter1x] == 450 | buildings_p4_array[counter1x] == 451 | buildings_p4_array[counter1x] == 361)
					{
						vp_buildings_p4 = checked(vp_buildings_p4 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 15);
			}
		}

		public void calculate_score_p5()
		{
			vp_buildings_p5 = 0;
			counter1x = 0;
			do
			{
				tempstring = Conversion.Str(buildings_p5_array[counter1x]);
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "1", false) == 0)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 1);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "2", false) == 0)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 2);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "3", false) == 0)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 3);
				}
				if (StringType.StrCmp(StringType.FromChar(tempstring[1]), "4", false) == 0)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 4);
				}
				Form1 form1 = this;
				form1.counter1x = checked(form1.counter1x + 1);
			}
			while (counter1x <= 19);
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 16))
			{
				if (buildings_p5_array[counter1x] != 411)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p5_array[counter1x] == 110 | buildings_p5_array[counter1x] == 111 | buildings_p5_array[counter1x] == 120 | buildings_p5_array[counter1x] == 121)
					{
						vp_buildings_p5 = checked(vp_buildings_p5 + 1);
					}
					if (buildings_p5_array[counter1x] == 210 | buildings_p5_array[counter1x] == 211 | buildings_p5_array[counter1x] == 212 | buildings_p5_array[counter1x] == 213 | buildings_p5_array[counter1x] == 220 | buildings_p5_array[counter1x] == 221 | buildings_p5_array[counter1x] == 222 | buildings_p5_array[counter1x] == 223 | buildings_p5_array[counter1x] == 310 | buildings_p5_array[counter1x] == 311 | buildings_p5_array[counter1x] == 312 | buildings_p5_array[counter1x] == 313 | buildings_p5_array[counter1x] == 320 | buildings_p5_array[counter1x] == 321 | buildings_p5_array[counter1x] == 322)
					{
						vp_buildings_p5 = checked(vp_buildings_p5 + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p5_array[counter1x] != 421)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				if (num_plantations_p5 <= 9)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 4);
				}
				if (num_plantations_p5 == 10)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 5);
				}
				if (num_plantations_p5 == 11)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 6);
				}
				if (num_plantations_p5 == 12)
				{
					vp_buildings_p5 = checked(vp_buildings_p5 + 7);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p5_array[counter1x] != 431)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (colonists_array[1] > 0)
				{
					int colonistsArray = colonists_array[5];
					counter1x = 1;
					while (counter1x <= colonistsArray)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 3)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					vp_buildings_p5 = checked(vp_buildings_p5 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p5_array[counter1x] != 441)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p5 > 0)
				{
					int vpchipsP5 = vpchips_p5;
					counter1x = 1;
					while (counter1x <= vpchipsP5)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					vp_buildings_p5 = checked(vp_buildings_p5 + counter3x);
				}
			}
			finishedx = false;
			counter1x = 12;
			found_buildingx = false;
			while (!(finishedx | counter1x == 19))
			{
				if (buildings_p5_array[counter1x] != 451)
				{
					counter1x = checked(counter1x + 1);
				}
				else
				{
					finishedx = true;
					found_buildingx = true;
				}
			}
			if (found_buildingx)
			{
				counter1x = 0;
				do
				{
					if (buildings_p5_array[counter1x] == 130 | buildings_p5_array[counter1x] == 131 | buildings_p5_array[counter1x] == 140 | buildings_p5_array[counter1x] == 141 | buildings_p5_array[counter1x] == 150 | buildings_p5_array[counter1x] == 151 | buildings_p5_array[counter1x] == 160 | buildings_p5_array[counter1x] == 161 | buildings_p5_array[counter1x] == 230 | buildings_p5_array[counter1x] == 231 | buildings_p5_array[counter1x] == 240 | buildings_p5_array[counter1x] == 241 | buildings_p5_array[counter1x] == 250 | buildings_p5_array[counter1x] == 251 | buildings_p5_array[counter1x] == 260 | buildings_p5_array[counter1x] == 261 | buildings_p5_array[counter1x] == 330 | buildings_p5_array[counter1x] == 331 | buildings_p5_array[counter1x] == 340 | buildings_p5_array[counter1x] == 341 | buildings_p5_array[counter1x] == 350 | buildings_p5_array[counter1x] == 351 | buildings_p5_array[counter1x] == 410 | buildings_p5_array[counter1x] == 411 | buildings_p5_array[counter1x] == 420 | buildings_p5_array[counter1x] == 421 | buildings_p5_array[counter1x] == 430 | buildings_p5_array[counter1x] == 431 | buildings_p5_array[counter1x] == 440 | buildings_p5_array[counter1x] == 441 | buildings_p5_array[counter1x] == 450 | buildings_p5_array[counter1x] == 451 | buildings_p5_array[counter1x] == 361)
					{
						vp_buildings_p5 = checked(vp_buildings_p5 + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 15);
			}
		}

		private void captain_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_captain();
			}
		}

		public void chance_of_action(object percent_chance)
		{
			VBMath.Randomize();
			random1 = checked((int)Math.Round((double)Conversion.Int(100f * VBMath.Rnd() + 0f)));
			if (ObjectType.ObjTst(random1, percent_chance, false) > 0)
			{
				chance = false;
			}
			else
			{
				chance = true;
			}
		}

		public void check_available_plant(object buildingquery)
		{
			found_plantation = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(plantation_available_array[counter1], buildingquery, false) == 0)
				{
					found_plantation = true;
					if (ObjectType.ObjTst(buildingquery, 30, false) == 0)
					{
						corn_available_slot = counter1;
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 5);
		}

		public void check_for_building(object buildingquery)
		{
			found_building = false;
			if (current_player == 1)
			{
				counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(buildings_p1_array[counter1], buildingquery, false) == 0)
					{
						found_building = true;
						building_slot = counter1;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 2)
			{
				counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(buildings_p2_array[counter1], buildingquery, false) == 0)
					{
						found_building = true;
						building_slot = counter1;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 3)
			{
				counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(buildings_p3_array[counter1], buildingquery, false) == 0)
					{
						found_building = true;
						building_slot = counter1;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 4)
			{
				counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(buildings_p4_array[counter1], buildingquery, false) == 0)
					{
						found_building = true;
						building_slot = counter1;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 5)
			{
				counter1 = 0;
				do
				{
					if (ObjectType.ObjTst(buildings_p5_array[counter1], buildingquery, false) == 0)
					{
						found_building = true;
						building_slot = counter1;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (counter1 <= 19);
			}
		}

		public void check_for_building_p1(object buildingquery)
		{
			found_building = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(buildings_p1_array[counter1], buildingquery, false) == 0)
				{
					found_building = true;
					building_slot = counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void check_for_building_p2(object buildingquery)
		{
			found_building = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(buildings_p2_array[counter1], buildingquery, false) == 0)
				{
					found_building = true;
					building_slot = counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void check_for_building_p3(object buildingquery)
		{
			found_building = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(buildings_p3_array[counter1], buildingquery, false) == 0)
				{
					found_building = true;
					building_slot = counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void check_for_building_p4(object buildingquery)
		{
			found_building = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(buildings_p4_array[counter1], buildingquery, false) == 0)
				{
					found_building = true;
					building_slot = counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void check_for_building_p5(object buildingquery)
		{
			found_building = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(buildings_p4_array[counter1], buildingquery, false) == 0)
				{
					found_building = true;
					building_slot = counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void check_for_building1(object buildingquery)
		{
			found_building = false;
			if (current_player == 1)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p1_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p1_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						found_building = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 2)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p2_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p2_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						found_building = true;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 3)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p1_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p3_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						found_building = true;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 4)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p4_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p4_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						found_building = true;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 5)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p5_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p5_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0)))
					{
						found_building = true;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (counter1 <= 19);
			}
		}

		public void check_for_building2(object buildingquery)
		{
			found_building = false;
			if (current_player == 1)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p1_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p1_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p1_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						found_building = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 2)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p2_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p2_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p2_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						found_building = true;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 3)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p3_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p3_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p3_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						found_building = true;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 4)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p4_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p4_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p4_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						found_building = true;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 5)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p5_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p5_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p5_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0)))
					{
						found_building = true;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (counter1 <= 19);
			}
		}

		public void check_for_building3(object buildingquery)
		{
			found_building = false;
			if (current_player == 1)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p1_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p1_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p1_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(buildings_p1_array[counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						found_building = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 2)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p2_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p2_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p2_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(buildings_p2_array[counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						found_building = true;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 3)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p3_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p3_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p3_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(buildings_p3_array[counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						found_building = true;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 4)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p4_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p4_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p4_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(buildings_p4_array[counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						found_building = true;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + 1);
				}
				while (counter1 <= 19);
			}
			if (current_player == 5)
			{
				counter1 = 0;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.BitOrObj(ObjectType.ObjTst(buildings_p5_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(buildings_p5_array[counter1], ObjectType.AddObj(buildingquery, 1), false) == 0), ObjectType.ObjTst(buildings_p5_array[counter1], ObjectType.AddObj(buildingquery, 2), false) == 0), ObjectType.ObjTst(buildings_p5_array[counter1], ObjectType.AddObj(buildingquery, 3), false) == 0)))
					{
						found_building = true;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + 1);
				}
				while (counter1 <= 19);
			}
		}

		public void check_for_coffee_production()
		{
			found_coffee_match = false;
			if (!found_coffee_match)
			{
				check_for_plantation(50);
				check_for_building(320);
				if (found_plantation & found_building)
				{
					found_coffee_match = true;
				}
			}
			if (!found_coffee_match)
			{
				check_for_plantation(50);
				check_for_building(321);
				if (found_plantation & found_building)
				{
					found_coffee_match = true;
				}
			}
		}

		public void check_for_game_end_triggered()
		{
			if (!end_announced)
			{
				if (game_end_triggered_buildings)
				{
					if (num_buildings_p1 == 12)
					{
						infobox_nopic(string.Concat(p1_name, " has occupied all building spots. The game end has been triggered."));
						end_announced = true;
					}
					if (num_buildings_p2 == 12)
					{
						infobox_nopic(string.Concat(p2_name, " has occupied all building spots. The game end has been triggered."));
						end_announced = true;
					}
					if (num_buildings_p3 == 12)
					{
						infobox_nopic(string.Concat(p3_name, " has occupied all building spots. The game end has been triggered."));
						end_announced = true;
					}
					if (num_buildings_p4 == 12)
					{
						infobox_nopic(string.Concat(p4_name, " has occupied all building spots. The game end has been triggered."));
						end_announced = true;
					}
					if (num_buildings_p5 == 12)
					{
						infobox_nopic(string.Concat(p5_name, " has occupied all building spots. The game end has been triggered."));
						end_announced = true;
					}
				}
				if (game_end_triggered_victorypoints)
				{
					infobox_nopic("The last Victory Point has been handed out. Victory Points will continue to be handed out, but the game end has been triggered.");
					end_announced = true;
				}
				if (game_end_triggered_colonists)
				{
					infobox_nopic("The colonist ship could not be fully refilled. The game end has been triggered.");
					end_announced = true;
				}
			}
			if (vp_bank_num >= 0)
			{
				vpremain_label.Text =StringType.FromInteger(vp_bank_num);
			}
			else
			{
				vpremain_label.Text = StringType.FromInteger(0);
			}
		}

		public void check_for_goods_in_trading_house(object tradegood)
		{
			found_good = false;
			counter1 = 0;
			do
			{
				if (ObjectType.ObjTst(trading_house_array[counter1], ObjectType.AddObj(tradegood, 1), false) == 0)
				{
					found_good = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 3);
		}

		public void check_for_indigo_production()
		{
			found_indigo_match = false;
			if (!found_indigo_match)
			{
				check_for_plantation(10);
				check_for_building(110);
				if (found_plantation & found_building)
				{
					found_indigo_match = true;
				}
			}
			if (!found_indigo_match)
			{
				check_for_plantation(10);
				check_for_building(210);
				if (found_plantation & found_building)
				{
					found_indigo_match = true;
				}
			}
			if (!found_indigo_match)
			{
				check_for_plantation(10);
				check_for_building(211);
				if (found_plantation & found_building)
				{
					found_indigo_match = true;
				}
			}
			if (!found_indigo_match)
			{
				check_for_plantation(10);
				check_for_building(212);
				if (found_plantation & found_building)
				{
					found_indigo_match = true;
				}
			}
		}

		public void check_for_plantation(object buildingquery)
		{
			found_plantation = false;
			if (current_player == 1)
			{
				counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(plantations_p1_array[counter1], buildingquery, false) == 0)
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 2)
			{
				counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(plantations_p2_array[counter1], buildingquery, false) == 0)
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 3)
			{
				counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(plantations_p3_array[counter1], buildingquery, false) == 0)
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 4)
			{
				counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(plantations_p4_array[counter1], buildingquery, false) == 0)
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 5)
			{
				counter1 = 11;
				do
				{
					if (ObjectType.ObjTst(plantations_p5_array[counter1], buildingquery, false) == 0)
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + -1);
				}
				while (counter1 >= 0);
			}
		}

		public void check_for_plantation1(object buildingquery)
		{
			found_plantation = false;
			if (current_player == 1)
			{
				counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(plantations_p1_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(plantations_p1_array[counter1] + 1), buildingquery, false) == 0)))
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 2)
			{
				counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(plantations_p2_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(plantations_p2_array[counter1] + 1), buildingquery, false) == 0)))
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form11 = this;
					form11.counter1 = checked(form11.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 3)
			{
				counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(plantations_p3_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(plantations_p3_array[counter1] + 1), buildingquery, false) == 0)))
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form12 = this;
					form12.counter1 = checked(form12.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 4)
			{
				counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(plantations_p4_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(plantations_p4_array[counter1] + 1), buildingquery, false) == 0)))
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form13 = this;
					form13.counter1 = checked(form13.counter1 + -1);
				}
				while (counter1 >= 0);
			}
			if (current_player == 5)
			{
				counter1 = 11;
				do
				{
					if (BooleanType.FromObject(ObjectType.BitOrObj(ObjectType.ObjTst(plantations_p5_array[counter1], buildingquery, false) == 0, ObjectType.ObjTst(checked(plantations_p5_array[counter1] + 1), buildingquery, false) == 0)))
					{
						found_plantation = true;
						plantation_slot = counter1;
					}
					Form1 form14 = this;
					form14.counter1 = checked(form14.counter1 + -1);
				}
				while (counter1 >= 0);
			}
		}

		public void check_for_sugar_production()
		{
			found_sugar_match = false;
			if (!found_sugar_match)
			{
				check_for_plantation(20);
				check_for_building(120);
				if (found_plantation & found_building)
				{
					found_sugar_match = true;
				}
			}
			if (!found_sugar_match)
			{
				check_for_plantation(20);
				check_for_building(220);
				if (found_plantation & found_building)
				{
					found_sugar_match = true;
				}
			}
			if (!found_sugar_match)
			{
				check_for_plantation(20);
				check_for_building(221);
				if (found_plantation & found_building)
				{
					found_sugar_match = true;
				}
			}
			if (!found_sugar_match)
			{
				check_for_plantation(20);
				check_for_building(222);
				if (found_plantation & found_building)
				{
					found_sugar_match = true;
				}
			}
		}

		public void check_for_tobacco_production()
		{
			found_tobacco_match = false;
			if (!found_tobacco_match)
			{
				check_for_plantation(40);
				check_for_building(310);
				if (found_plantation & found_building)
				{
					found_tobacco_match = true;
				}
			}
			if (!found_tobacco_match)
			{
				check_for_plantation(40);
				check_for_building(311);
				if (found_plantation & found_building)
				{
					found_tobacco_match = true;
				}
			}
			if (!found_tobacco_match)
			{
				check_for_plantation(40);
				check_for_building(312);
				if (found_plantation & found_building)
				{
					found_tobacco_match = true;
				}
			}
		}

		public void choose_builder()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Builder - Reduces the cost of a building by 1 doubloon during the Builder Phase.", "role_builder");
			}
			else
			{
				role_builder_pic.Visible = false;
				builder_bonus_label.Visible = false;
				if (bonus_roles_array[2] <= 0)
				{
					confirmbox_role("You chose the Builder - You get 1 doubloon credit towards building this turn. Is this the role you want to choose?", "role_builder");
				}
				else if (bonus_roles_array[2] != 1)
				{
					confirmbox_role(string.Concat("You chose the builder (and the", Conversion.Str(bonus_roles_array[2]), " doubloons on it) - You get 1 doubloon credit towards building this turn. Is this the role you want to choose?"), "role_builder");
				}
				else
				{
					confirmbox_role("You chose the builder (and the 1 doubloon on it) - You get 1 doubloon credit towards building this turn. Is this the role you want to choose?", "role_builder");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_builder_pic.Visible = true;
					if (bonus_roles_array[2] <= 0)
					{
						builder_bonus_label.Visible = false;
					}
					else
					{
						builder_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = false;
					builder_round = true;
					craftsman_round = false;
					trader_round = false;
					captain_round = false;
					prospector1_round = false;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[2]);
					bonus_roles_array[2] = 0;
					update_all_labels();
					log_role_chooser("p1", "Builder");
					p1_process_builder();
				}
			}
		}

		public void choose_captain()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Captain - Grants you +1 Victory Point for your first shipment during the Captain Phase.", "role_captain");
			}
			else
			{
				role_captain_pic.Visible = false;
				captain_bonus_label.Visible = false;
				if (bonus_roles_array[5] <= 0)
				{
					confirmbox_role("You chose the captain - You get 1 extra VP if you ship this turn. Is this the role you want to choose?", "role_captain");
				}
				else if (bonus_roles_array[5] != 1)
				{
					confirmbox_role(string.Concat("You chose the captain (and the", Conversion.Str(bonus_roles_array[5]), " doubloons on it) - You get 1 extra VP if you ship this turn. Is this the role you want to choose?"), "role_captain");
				}
				else
				{
					confirmbox_role("You chose the captain (and the 1 doubloon on it) - You get 1 VP if you ship this turn. Is this the role you want to choose?", "role_captain");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_captain_pic.Visible = true;
					if (bonus_roles_array[5] <= 0)
					{
						captain_bonus_label.Visible = false;
					}
					else
					{
						captain_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_used_wharf = false;
					p2_used_wharf = false;
					p3_used_wharf = false;
					p4_used_wharf = false;
					p5_used_wharf = false;
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = false;
					builder_round = false;
					craftsman_round = false;
					trader_round = false;
					captain_round = true;
					prospector1_round = false;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[5]);
					bonus_roles_array[5] = 0;
					captain_bonus_taken = false;
					update_all_labels();
					log_role_chooser("p1", "Captain");
					p1_process_captain();
				}
			}
		}

		public void choose_craftsman()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Craftsman - Grants you an extra production good during the Craftsman Phase.", "role_craftsman");
			}
			else
			{
				role_craftsman_pic.Visible = false;
				craftsman_bonus_label.Visible = false;
				if (bonus_roles_array[3] <= 0)
				{
					confirmbox_role("You chose the craftsman - You get 1 extra good during production. Is this the role you want to choose?", "role_craftsman");
				}
				else if (bonus_roles_array[3] != 1)
				{
					confirmbox_role(string.Concat("You chose the craftsman (and the", Conversion.Str(bonus_roles_array[3]), " doubloons on it) - You get 1 extra good during production. Is this the role you want to choose?"), "role_craftsman");
				}
				else
				{
					confirmbox_role("You chose the craftsman (and the 1 doubloon on it) - You get 1 extra good during production. Is this the role you want to choose?", "role_craftsman");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_craftsman_pic.Visible = true;
					if (bonus_roles_array[3] <= 0)
					{
						craftsman_bonus_label.Visible = false;
					}
					else
					{
						craftsman_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = false;
					builder_round = false;
					craftsman_round = true;
					trader_round = false;
					captain_round = false;
					prospector1_round = false;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[3]);
					bonus_roles_array[3] = 0;
					update_all_labels();
					log_role_chooser("p1", "Craftsman");
					p1_process_craftsman();
				}
			}
		}

		public void choose_mayor()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Mayor - Grants you +1 Colonist during the Mayor Phase.", "role_mayor");
			}
			else
			{
				role_mayor_pic.Visible = false;
				mayor_bonus_label.Visible = false;
				if (bonus_roles_array[1] <= 0)
				{
					confirmbox_role("You chose the Mayor - You will get a bonus colonist from the supply if one is available. Is this the role you want to choose?", "role_mayor");
				}
				else if (bonus_roles_array[1] != 1)
				{
					confirmbox_role(string.Concat("You chose the Mayor (and the", Conversion.Str(bonus_roles_array[1]), " doubloons on it) - You will get a bonus colonist from the supply if one is available. Is this the role you want to choose?"), "role_mayor");
				}
				else
				{
					confirmbox_role("You chose the Mayor (and the 1 doubloon on it) - You will get a bonus colonist from the supply if one is available. Is this the role you want to choose?", "role_mayor");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_mayor_pic.Visible = true;
					if (bonus_roles_array[1] <= 0)
					{
						mayor_bonus_label.Visible = false;
					}
					else
					{
						mayor_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = true;
					builder_round = false;
					craftsman_round = false;
					trader_round = false;
					captain_round = false;
					prospector1_round = false;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[1]);
					bonus_roles_array[1] = 0;
					update_all_labels();
					log_role_chooser("p1", "Mayor");
					p1_process_mayor();
				}
			}
		}

		public void choose_prospector1()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Prospector - Grants you 1 doubloon during the Prospector Phase", "role_prospector1");
			}
			else
			{
				role_prospector1_pic.Visible = false;
				pros1_bonus_label.Visible = false;
				if (bonus_roles_array[6] <= 0)
				{
					confirmbox_role("You chose the Prospector - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				else if (bonus_roles_array[6] != 1)
				{
					confirmbox_role(string.Concat("You chose the Prospector (and the", Conversion.Str(bonus_roles_array[4]), " doubloons on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?"), "role_prospector1");
				}
				else
				{
					confirmbox_role("You chose the Prospector (and the 1 doubloon on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_prospector1_pic.Visible = true;
					if (bonus_roles_array[6] <= 0)
					{
						pros1_bonus_label.Visible = false;
					}
					else
					{
						pros1_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = false;
					builder_round = false;
					craftsman_round = false;
					trader_round = false;
					captain_round = false;
					prospector1_round = true;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[6]);
					bonus_roles_array[6] = 0;
					update_all_labels();
					log_role_chooser("p1", "Prospector1");
					p1_process_prospector1();
				}
			}
		}

		public void choose_prospector2()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Prospector - Grants you 1 doubloon during the Prospector Phase", "role_prospector1");
			}
			else
			{
				role_prospector2_pic.Visible = false;
				pros2_bonus_label.Visible = false;
				if (bonus_roles_array[7] <= 0)
				{
					confirmbox_role("You chose the Prospector - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				else if (bonus_roles_array[7] != 1)
				{
					confirmbox_role(string.Concat("You chose the Prospector (and the", Conversion.Str(bonus_roles_array[4]), " doubloons on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?"), "role_prospector1");
				}
				else
				{
					confirmbox_role("You chose the Prospector (and the 1 doubloon on it) - You get 1 doubloon for prospecting. Is this the role you want to choose?", "role_prospector1");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_prospector2_pic.Visible = true;
					if (bonus_roles_array[7] <= 0)
					{
						pros2_bonus_label.Visible = false;
					}
					else
					{
						pros2_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = false;
					builder_round = false;
					craftsman_round = false;
					trader_round = false;
					captain_round = false;
					prospector1_round = false;
					prospector2_round = true;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[7]);
					bonus_roles_array[7] = 0;
					update_all_labels();
					log_role_chooser("p1", "Prospector2");
					p1_process_prospector2();
				}
			}
		}

		public void choose_quarry()
		{
			tempstring = StringType.FromInteger(num_plantations_p1);
			check_for_building(151);
			if (found_building & num_plantations_p1 < 12 & num_quarries_p1 < 4 & !p1_chose_plantation & current_player == 1 & current_role_chooser != 1 & goods_bank_array[5] > 0)
			{
				infobox_building1("Your manned Construction Hut allowed you to choose a quarry.", 151);
			}
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					infobox_nopic("You've already chosen a plantation or quarry. Please click NEXT TURN.");
				}
				else if (!(current_role_chooser == 1 | found_building))
				{
					infobox_plant("You are not allowed to choose a quarry.", 60);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_chose_plantation = true;
					infobox_nopic("You already have 12 plantations. You cannot take another. Your turn is over.");
				}
				else if (num_quarries_p1 >= 4)
				{
					infobox_nopic("You already have the max of 4 quarries. You need to choose a plantation.");
				}
				else if (goods_bank_array[5] <= 0)
				{
					infobox_nopic("There aren't any quarries left. You need to choose a plantation.");
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Do you want a quarry?", 60);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = 60;
							update_num_plantations();
							goods_bank_array[5] = checked(goods_bank_array[5] - 1);
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Do you want a quarry?", 60);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = 61;
							update_num_plantations();
							goods_bank_array[5] = checked(goods_bank_array[5] - 1);
							infobox_building1("Your Hospice has granted you a colonist for your quarry.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Do you want a quarry?", 60);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = 60;
							update_num_plantations();
							goods_bank_array[5] = checked(goods_bank_array[5] - 1);
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Do you want a quarry?", 60);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = 61;
							update_num_plantations();
							goods_bank_array[5] = checked(goods_bank_array[5] - 1);
							infobox_building1("Your Hospice has granted you a colonist for your quarry. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						p1_chose_plantation = true;
						update_all_labels();
						p1_taken_turn = true;
						formtitle("p1", "Your turn is over");
						next_turn_button.Text = "End Turn";
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		public void choose_settler()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Settler - Allows you to choose a Quarry instead of a Plantation during the Settler Phase.", "role_settler");
			}
			else
			{
				role_settler_pic.Visible = false;
				settler_bonus_label.Visible = false;
				if (bonus_roles_array[0] <= 0)
				{
					confirmbox_role("You chose the Settler - You may choose a quarry instead of a plantation if one is available. Is this the role you want to choose?", "role_settler");
				}
				else if (bonus_roles_array[0] != 1)
				{
					confirmbox_role(string.Concat("You chose the Settler (and the", Conversion.Str(bonus_roles_array[0]), " doubloons on it) - You may choose a quarry instead of a plantation if one is available. Is this the role you want to choose?"), "role_settler");
				}
				else
				{
					confirmbox_role("You chose the Settler (and the 1 doubloon on it) - You may choose a quarry instead of a planataion if one is available. Is this the role you want to choose?", "role_settler");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_settler_pic.Visible = true;
					if (bonus_roles_array[0] <= 0)
					{
						settler_bonus_label.Visible = false;
					}
					else
					{
						settler_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = true;
					mayor_round = false;
					builder_round = false;
					craftsman_round = false;
					trader_round = false;
					captain_round = false;
					prospector1_round = false;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[0]);
					bonus_roles_array[0] = 0;
					update_all_labels();
					log_role_chooser("p1", "Settler");
					p1_process_settler();
				}
			}
		}

		public void choose_trader()
		{
			if (!p1_choosing_role)
			{
				infobox_role("The Trader - Grants you +1 doubloon for your sale during the Trader Phase.", "role_trader");
			}
			else
			{
				role_trader_pic.Visible = false;
				trader_bonus_label.Visible = false;
				if (bonus_roles_array[4] <= 0)
				{
					confirmbox_role("You chose the trader - You get +1 doubloon for sale to Trading House. Is this the role you want to choose?", "role_trader");
				}
				else if (bonus_roles_array[4] != 1)
				{
					confirmbox_role(string.Concat("You chose the trader (and the", Conversion.Str(bonus_roles_array[4]), " doubloons on it) - You get +1 doubloon for sale to Trading House. Is this the role you want to choose?"), "role_trader");
				}
				else
				{
					confirmbox_role("You chose the trader (and the 1 doubloon on it) - You get +1 doubloon for sale to Trading House. Is this the role you want to choose?", "role_trader");
				}
				if (!confirmed)
				{
					p1_choosing_role = true;
					role_trader_pic.Visible = true;
					if (bonus_roles_array[4] <= 0)
					{
						trader_bonus_label.Visible = false;
					}
					else
					{
						trader_bonus_label.Visible = true;
					}
				}
				else
				{
					make_role_buttons_inactive();
					p1_choosing_role = false;
					settler_round = false;
					mayor_round = false;
					builder_round = false;
					craftsman_round = false;
					trader_round = true;
					captain_round = false;
					prospector1_round = false;
					prospector2_round = false;
					p1_chose_plantation = false;
					gold_p1 = checked(gold_p1 + bonus_roles_array[4]);
					bonus_roles_array[4] = 0;
					update_all_labels();
					log_role_chooser("p1", "Trader");
					p1_process_trader();
				}
			}
		}

		public void close_text_file()
		{
			sw.Close();
		}

		private void colonist_ship_pic_Click(object sender, EventArgs e)
		{
			help_colonists_on_ship();
		}

		public void compute_temporary_city_hall_score()
		{
			if (current_player == 1)
			{
				counter1x = 0;
				do
				{
					if (buildings_p1_array[counter1x] == 130 | buildings_p1_array[counter1x] == 131 | buildings_p1_array[counter1x] == 140 | buildings_p1_array[counter1x] == 141 | buildings_p1_array[counter1x] == 150 | buildings_p1_array[counter1x] == 151 | buildings_p1_array[counter1x] == 160 | buildings_p1_array[counter1x] == 161 | buildings_p1_array[counter1x] == 230 | buildings_p1_array[counter1x] == 231 | buildings_p1_array[counter1x] == 240 | buildings_p1_array[counter1x] == 241 | buildings_p1_array[counter1x] == 250 | buildings_p1_array[counter1x] == 251 | buildings_p1_array[counter1x] == 260 | buildings_p1_array[counter1x] == 261 | buildings_p1_array[counter1x] == 330 | buildings_p1_array[counter1x] == 331 | buildings_p1_array[counter1x] == 340 | buildings_p1_array[counter1x] == 341 | buildings_p1_array[counter1x] == 350 | buildings_p1_array[counter1x] == 351 | buildings_p1_array[counter1x] == 410 | buildings_p1_array[counter1x] == 411 | buildings_p1_array[counter1x] == 420 | buildings_p1_array[counter1x] == 421 | buildings_p1_array[counter1x] == 430 | buildings_p1_array[counter1x] == 431 | buildings_p1_array[counter1x] == 440 | buildings_p1_array[counter1x] == 441 | buildings_p1_array[counter1x] == 450 | buildings_p1_array[counter1x] == 451 | buildings_p1_array[counter1x] == 361)
					{
						city_hall_score = checked(city_hall_score + 1);
					}
					Form1 form1 = this;
					form1.counter1x = checked(form1.counter1x + 1);
				}
				while (counter1x <= 15);
			}
			if (current_player == 2)
			{
				counter1x = 0;
				do
				{
					if (buildings_p2_array[counter1x] == 130 | buildings_p2_array[counter1x] == 131 | buildings_p2_array[counter1x] == 140 | buildings_p2_array[counter1x] == 141 | buildings_p2_array[counter1x] == 150 | buildings_p2_array[counter1x] == 151 | buildings_p2_array[counter1x] == 160 | buildings_p2_array[counter1x] == 161 | buildings_p2_array[counter1x] == 230 | buildings_p2_array[counter1x] == 231 | buildings_p2_array[counter1x] == 240 | buildings_p2_array[counter1x] == 241 | buildings_p2_array[counter1x] == 250 | buildings_p2_array[counter1x] == 251 | buildings_p2_array[counter1x] == 260 | buildings_p2_array[counter1x] == 261 | buildings_p2_array[counter1x] == 330 | buildings_p2_array[counter1x] == 331 | buildings_p2_array[counter1x] == 340 | buildings_p2_array[counter1x] == 341 | buildings_p2_array[counter1x] == 350 | buildings_p2_array[counter1x] == 351 | buildings_p2_array[counter1x] == 410 | buildings_p2_array[counter1x] == 411 | buildings_p2_array[counter1x] == 420 | buildings_p2_array[counter1x] == 421 | buildings_p2_array[counter1x] == 430 | buildings_p2_array[counter1x] == 431 | buildings_p2_array[counter1x] == 440 | buildings_p2_array[counter1x] == 441 | buildings_p2_array[counter1x] == 450 | buildings_p2_array[counter1x] == 451 | buildings_p2_array[counter1x] == 361)
					{
						city_hall_score = checked(city_hall_score + 1);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 15);
			}
			if (current_player == 3)
			{
				counter1x = 0;
				do
				{
					if (buildings_p3_array[counter1x] == 130 | buildings_p3_array[counter1x] == 131 | buildings_p3_array[counter1x] == 140 | buildings_p3_array[counter1x] == 141 | buildings_p3_array[counter1x] == 150 | buildings_p3_array[counter1x] == 151 | buildings_p3_array[counter1x] == 160 | buildings_p3_array[counter1x] == 161 | buildings_p3_array[counter1x] == 230 | buildings_p3_array[counter1x] == 231 | buildings_p3_array[counter1x] == 240 | buildings_p3_array[counter1x] == 241 | buildings_p3_array[counter1x] == 250 | buildings_p3_array[counter1x] == 251 | buildings_p3_array[counter1x] == 260 | buildings_p3_array[counter1x] == 261 | buildings_p3_array[counter1x] == 330 | buildings_p3_array[counter1x] == 331 | buildings_p3_array[counter1x] == 340 | buildings_p3_array[counter1x] == 341 | buildings_p3_array[counter1x] == 350 | buildings_p3_array[counter1x] == 351 | buildings_p3_array[counter1x] == 410 | buildings_p3_array[counter1x] == 411 | buildings_p3_array[counter1x] == 420 | buildings_p3_array[counter1x] == 421 | buildings_p3_array[counter1x] == 430 | buildings_p3_array[counter1x] == 431 | buildings_p3_array[counter1x] == 440 | buildings_p3_array[counter1x] == 441 | buildings_p3_array[counter1x] == 450 | buildings_p3_array[counter1x] == 451 | buildings_p3_array[counter1x] == 361)
					{
						city_hall_score = checked(city_hall_score + 1);
					}
					Form1 form12 = this;
					form12.counter1x = checked(form12.counter1x + 1);
				}
				while (counter1x <= 15);
			}
			if (current_player == 4)
			{
				counter1x = 0;
				do
				{
					if (buildings_p4_array[counter1x] == 130 | buildings_p4_array[counter1x] == 131 | buildings_p4_array[counter1x] == 140 | buildings_p4_array[counter1x] == 141 | buildings_p4_array[counter1x] == 150 | buildings_p4_array[counter1x] == 151 | buildings_p4_array[counter1x] == 160 | buildings_p4_array[counter1x] == 161 | buildings_p4_array[counter1x] == 230 | buildings_p4_array[counter1x] == 231 | buildings_p4_array[counter1x] == 240 | buildings_p4_array[counter1x] == 241 | buildings_p4_array[counter1x] == 250 | buildings_p4_array[counter1x] == 251 | buildings_p4_array[counter1x] == 260 | buildings_p4_array[counter1x] == 261 | buildings_p4_array[counter1x] == 330 | buildings_p4_array[counter1x] == 331 | buildings_p4_array[counter1x] == 340 | buildings_p4_array[counter1x] == 341 | buildings_p4_array[counter1x] == 350 | buildings_p4_array[counter1x] == 351 | buildings_p4_array[counter1x] == 410 | buildings_p4_array[counter1x] == 411 | buildings_p4_array[counter1x] == 420 | buildings_p4_array[counter1x] == 421 | buildings_p4_array[counter1x] == 430 | buildings_p4_array[counter1x] == 431 | buildings_p4_array[counter1x] == 440 | buildings_p4_array[counter1x] == 441 | buildings_p4_array[counter1x] == 450 | buildings_p4_array[counter1x] == 451 | buildings_p4_array[counter1x] == 361)
					{
						city_hall_score = checked(city_hall_score + 1);
					}
					Form1 form13 = this;
					form13.counter1x = checked(form13.counter1x + 1);
				}
				while (counter1x <= 15);
			}
			if (current_player == 5)
			{
				counter1x = 0;
				do
				{
					if (buildings_p5_array[counter1x] == 130 | buildings_p5_array[counter1x] == 131 | buildings_p5_array[counter1x] == 140 | buildings_p5_array[counter1x] == 141 | buildings_p5_array[counter1x] == 150 | buildings_p5_array[counter1x] == 151 | buildings_p5_array[counter1x] == 160 | buildings_p5_array[counter1x] == 161 | buildings_p5_array[counter1x] == 230 | buildings_p5_array[counter1x] == 231 | buildings_p5_array[counter1x] == 240 | buildings_p5_array[counter1x] == 241 | buildings_p5_array[counter1x] == 250 | buildings_p5_array[counter1x] == 251 | buildings_p5_array[counter1x] == 260 | buildings_p5_array[counter1x] == 261 | buildings_p5_array[counter1x] == 330 | buildings_p5_array[counter1x] == 331 | buildings_p5_array[counter1x] == 340 | buildings_p5_array[counter1x] == 341 | buildings_p5_array[counter1x] == 350 | buildings_p5_array[counter1x] == 351 | buildings_p5_array[counter1x] == 410 | buildings_p5_array[counter1x] == 411 | buildings_p5_array[counter1x] == 420 | buildings_p5_array[counter1x] == 421 | buildings_p5_array[counter1x] == 430 | buildings_p5_array[counter1x] == 431 | buildings_p5_array[counter1x] == 440 | buildings_p5_array[counter1x] == 441 | buildings_p5_array[counter1x] == 450 | buildings_p5_array[counter1x] == 451 | buildings_p5_array[counter1x] == 361)
					{
						city_hall_score = checked(city_hall_score + 1);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 15);
			}
		}

		public void compute_temporary_customs_house_score()
		{
			if (current_player == 1)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p1 > 0)
				{
					int vpchipsP1 = vpchips_p1;
					counter1x = 1;
					while (counter1x <= vpchipsP1)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form1 = this;
						form1.counter1x = checked(form1.counter1x + 1);
					}
					customs_house_score = checked(customs_house_score + counter3x);
				}
			}
			if (current_player == 2)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p2 > 0)
				{
					int vpchipsP2 = vpchips_p2;
					counter1x = 1;
					while (counter1x <= vpchipsP2)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form11 = this;
						form11.counter1x = checked(form11.counter1x + 1);
					}
					customs_house_score = checked(customs_house_score + counter3x);
				}
			}
			if (current_player == 3)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p3 > 0)
				{
					int vpchipsP3 = vpchips_p3;
					counter1x = 1;
					while (counter1x <= vpchipsP3)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form12 = this;
						form12.counter1x = checked(form12.counter1x + 1);
					}
					customs_house_score = checked(customs_house_score + counter3x);
				}
			}
			if (current_player == 4)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p4 > 0)
				{
					int vpchipsP4 = vpchips_p4;
					counter1x = 1;
					while (counter1x <= vpchipsP4)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form13 = this;
						form13.counter1x = checked(form13.counter1x + 1);
					}
					customs_house_score = checked(customs_house_score + counter3x);
				}
			}
			if (current_player == 5)
			{
				counter2x = 0;
				counter3x = 0;
				if (vpchips_p5 > 0)
				{
					int vpchipsP5 = vpchips_p5;
					counter1x = 1;
					while (counter1x <= vpchipsP5)
					{
						counter2x = checked(counter2x + 1);
						if (counter2x == 4)
						{
							counter3x = checked(counter3x + 1);
							counter2x = 0;
						}
						Form1 form14 = this;
						form14.counter1x = checked(form14.counter1x + 1);
					}
					customs_house_score = checked(customs_house_score + counter3x);
				}
			}
		}

		public void compute_temporary_fortress_score()
		{
			fortress_score = 0;
			counter2x = 0;
			counter3x = 0;
			if (colonists_array[current_player] > 0)
			{
				int colonistsArray = colonists_array[current_player];
				counter1x = 1;
				while (counter1x <= colonistsArray)
				{
					counter2x = checked(counter2x + 1);
					if (counter2x == 3)
					{
						counter3x = checked(counter3x + 1);
						counter2x = 0;
					}
					Form1 form1 = this;
					form1.counter1x = checked(form1.counter1x + 1);
				}
				fortress_score = checked(fortress_score + counter3x);
			}
		}

		public void compute_temporary_guild_hall_score()
		{
			guild_hall_score = 0;
			if (current_player == 1)
			{
				counter1x = 0;
				do
				{
					if (buildings_p1_array[counter1x] == 110 | buildings_p1_array[counter1x] == 111 | buildings_p1_array[counter1x] == 120 | buildings_p1_array[counter1x] == 121)
					{
						guild_hall_score = checked(guild_hall_score + 1);
					}
					if (buildings_p1_array[counter1x] == 210 | buildings_p1_array[counter1x] == 211 | buildings_p1_array[counter1x] == 212 | buildings_p1_array[counter1x] == 213 | buildings_p1_array[counter1x] == 220 | buildings_p1_array[counter1x] == 221 | buildings_p1_array[counter1x] == 222 | buildings_p1_array[counter1x] == 223 | buildings_p1_array[counter1x] == 310 | buildings_p1_array[counter1x] == 311 | buildings_p1_array[counter1x] == 312 | buildings_p1_array[counter1x] == 313 | buildings_p1_array[counter1x] == 320 | buildings_p1_array[counter1x] == 321 | buildings_p1_array[counter1x] == 322)
					{
						guild_hall_score = checked(guild_hall_score + 2);
					}
					Form1 form1 = this;
					form1.counter1x = checked(form1.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			if (current_player == 2)
			{
				counter1x = 0;
				do
				{
					if (buildings_p2_array[counter1x] == 110 | buildings_p2_array[counter1x] == 111 | buildings_p2_array[counter1x] == 120 | buildings_p2_array[counter1x] == 121)
					{
						guild_hall_score = checked(guild_hall_score + 1);
					}
					if (buildings_p2_array[counter1x] == 210 | buildings_p2_array[counter1x] == 211 | buildings_p2_array[counter1x] == 212 | buildings_p2_array[counter1x] == 213 | buildings_p2_array[counter1x] == 220 | buildings_p2_array[counter1x] == 221 | buildings_p2_array[counter1x] == 222 | buildings_p2_array[counter1x] == 223 | buildings_p2_array[counter1x] == 310 | buildings_p2_array[counter1x] == 311 | buildings_p2_array[counter1x] == 312 | buildings_p2_array[counter1x] == 313 | buildings_p2_array[counter1x] == 320 | buildings_p2_array[counter1x] == 321 | buildings_p2_array[counter1x] == 322)
					{
						guild_hall_score = checked(guild_hall_score + 2);
					}
					Form1 form11 = this;
					form11.counter1x = checked(form11.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			if (current_player == 3)
			{
				counter1x = 0;
				do
				{
					if (buildings_p3_array[counter1x] == 110 | buildings_p3_array[counter1x] == 111 | buildings_p3_array[counter1x] == 120 | buildings_p3_array[counter1x] == 121)
					{
						guild_hall_score = checked(guild_hall_score + 1);
					}
					if (buildings_p3_array[counter1x] == 210 | buildings_p3_array[counter1x] == 211 | buildings_p3_array[counter1x] == 212 | buildings_p3_array[counter1x] == 213 | buildings_p3_array[counter1x] == 220 | buildings_p3_array[counter1x] == 221 | buildings_p3_array[counter1x] == 222 | buildings_p3_array[counter1x] == 223 | buildings_p3_array[counter1x] == 310 | buildings_p3_array[counter1x] == 311 | buildings_p3_array[counter1x] == 312 | buildings_p3_array[counter1x] == 313 | buildings_p3_array[counter1x] == 320 | buildings_p3_array[counter1x] == 321 | buildings_p3_array[counter1x] == 322)
					{
						guild_hall_score = checked(guild_hall_score + 2);
					}
					Form1 form12 = this;
					form12.counter1x = checked(form12.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			if (current_player == 4)
			{
				counter1x = 0;
				do
				{
					if (buildings_p4_array[counter1x] == 110 | buildings_p4_array[counter1x] == 111 | buildings_p4_array[counter1x] == 120 | buildings_p4_array[counter1x] == 121)
					{
						guild_hall_score = checked(guild_hall_score + 1);
					}
					if (buildings_p4_array[counter1x] == 210 | buildings_p4_array[counter1x] == 211 | buildings_p4_array[counter1x] == 212 | buildings_p4_array[counter1x] == 213 | buildings_p4_array[counter1x] == 220 | buildings_p4_array[counter1x] == 221 | buildings_p4_array[counter1x] == 222 | buildings_p4_array[counter1x] == 223 | buildings_p4_array[counter1x] == 310 | buildings_p4_array[counter1x] == 311 | buildings_p4_array[counter1x] == 312 | buildings_p4_array[counter1x] == 313 | buildings_p4_array[counter1x] == 320 | buildings_p4_array[counter1x] == 321 | buildings_p4_array[counter1x] == 322)
					{
						guild_hall_score = checked(guild_hall_score + 2);
					}
					Form1 form13 = this;
					form13.counter1x = checked(form13.counter1x + 1);
				}
				while (counter1x <= 19);
			}
			if (current_player == 5)
			{
				counter1x = 0;
				do
				{
					if (buildings_p5_array[counter1x] == 110 | buildings_p5_array[counter1x] == 111 | buildings_p5_array[counter1x] == 120 | buildings_p5_array[counter1x] == 121)
					{
						guild_hall_score = checked(guild_hall_score + 1);
					}
					if (buildings_p5_array[counter1x] == 210 | buildings_p5_array[counter1x] == 211 | buildings_p5_array[counter1x] == 212 | buildings_p5_array[counter1x] == 213 | buildings_p5_array[counter1x] == 220 | buildings_p5_array[counter1x] == 221 | buildings_p5_array[counter1x] == 222 | buildings_p5_array[counter1x] == 223 | buildings_p5_array[counter1x] == 310 | buildings_p5_array[counter1x] == 311 | buildings_p5_array[counter1x] == 312 | buildings_p5_array[counter1x] == 313 | buildings_p5_array[counter1x] == 320 | buildings_p5_array[counter1x] == 321 | buildings_p5_array[counter1x] == 322)
					{
						guild_hall_score = checked(guild_hall_score + 2);
					}
					Form1 form14 = this;
					form14.counter1x = checked(form14.counter1x + 1);
				}
				while (counter1x <= 19);
			}
		}

		public void compute_temporary_large_building_score()
		{
			compute_temporary_guild_hall_score();
			compute_temporary_residence_score();
			compute_temporary_fortress_score();
			compute_temporary_customs_house_score();
			compute_temporary_city_hall_score();
			best_building_num = 999;
			current_best_score = 0;
			if (buildings_available_array[18] > 0)
			{
				current_best_score = guild_hall_score;
				best_building_num = 410;
			}
			if (buildings_available_array[19] > 0 & residence_score > current_best_score)
			{
				current_best_score = residence_score;
				best_building_num = 420;
			}
			if (buildings_available_array[20] > 0 & fortress_score > current_best_score)
			{
				current_best_score = fortress_score;
				best_building_num = 430;
			}
			if (buildings_available_array[21] > 0 & customs_house_score > current_best_score)
			{
				current_best_score = customs_house_score;
				best_building_num = 440;
			}
			if (buildings_available_array[22] > 0 & city_hall_score > current_best_score)
			{
				current_best_score = city_hall_score;
				best_building_num = 450;
			}
		}

		public void compute_temporary_residence_score()
		{
			residence_score = 0;
			if (current_player == 1)
			{
				if (num_plantations_p1 <= 9)
				{
					residence_score = checked(residence_score + 4);
				}
				if (num_plantations_p1 == 10)
				{
					residence_score = checked(residence_score + 5);
				}
				if (num_plantations_p1 == 11)
				{
					residence_score = checked(residence_score + 6);
				}
				if (num_plantations_p1 == 12)
				{
					residence_score = checked(residence_score + 7);
				}
			}
			if (current_player == 2)
			{
				if (num_plantations_p2 <= 9)
				{
					residence_score = checked(residence_score + 4);
				}
				if (num_plantations_p2 == 10)
				{
					residence_score = checked(residence_score + 5);
				}
				if (num_plantations_p2 == 11)
				{
					residence_score = checked(residence_score + 6);
				}
				if (num_plantations_p2 == 12)
				{
					residence_score = checked(residence_score + 7);
				}
			}
			if (current_player == 3)
			{
				if (num_plantations_p3 <= 9)
				{
					residence_score = checked(residence_score + 4);
				}
				if (num_plantations_p3 == 10)
				{
					residence_score = checked(residence_score + 5);
				}
				if (num_plantations_p3 == 11)
				{
					residence_score = checked(residence_score + 6);
				}
				if (num_plantations_p3 == 12)
				{
					residence_score = checked(residence_score + 7);
				}
			}
			if (current_player == 4)
			{
				if (num_plantations_p4 <= 9)
				{
					residence_score = checked(residence_score + 4);
				}
				if (num_plantations_p4 == 10)
				{
					residence_score = checked(residence_score + 5);
				}
				if (num_plantations_p4 == 11)
				{
					residence_score = checked(residence_score + 6);
				}
				if (num_plantations_p4 == 12)
				{
					residence_score = checked(residence_score + 7);
				}
			}
			if (current_player == 5)
			{
				if (num_plantations_p5 <= 9)
				{
					residence_score = checked(residence_score + 4);
				}
				if (num_plantations_p5 == 10)
				{
					residence_score = checked(residence_score + 5);
				}
				if (num_plantations_p5 == 11)
				{
					residence_score = checked(residence_score + 6);
				}
				if (num_plantations_p5 == 12)
				{
					residence_score = checked(residence_score + 7);
				}
			}
		}

		public void confirmbox_building1(object confirmtext1, object confirmpic1)
		{
			confirmbuilding1_form.Label1.Text =StringType.FromObject(confirmtext1);
			PictureBox pictureBox1 = confirmbuilding1_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			confirmbuilding1_form.PictureBox1.Visible = true;
			confirmbuilding1_form.ShowDialog();
			if (!confirmbuilding1_form.yes_clicked)
			{
				confirmed = false;
			}
			else
			{
				confirmed = true;
			}
		}

		public void confirmbox_building2(object confirmtext1, object confirmpic1)
		{
			confirmbuilding2_form.Label1.Text =StringType.FromObject(confirmtext1);
			PictureBox pictureBox1 = confirmbuilding1_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			confirmbuilding2_form.PictureBox1.Visible = true;
			confirmbuilding2_form.ShowDialog();
			if (!confirmbuilding2_form.yes_clicked)
			{
				confirmed = false;
			}
			else
			{
				confirmed = true;
			}
		}

		public void confirmbox_nopic(object confirmtext1)
		{
			confirmnopic_form.Label1.Text =StringType.FromObject(confirmtext1);
			confirmnopic_form.ShowDialog();
			if (!confirmnopic_form.yes_clicked)
			{
				confirmed = false;
			}
			else
			{
				confirmed = true;
			}
		}

		public void confirmbox_plant(object confirmtext1, object confirmpic1)
		{
			confirmplant_form.Label1.Text =StringType.FromObject(confirmtext1);
			confirmplant_form.PictureBox1.Image = Image.FromFile(string.Concat("pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(confirmpic1))[2]), ".bmp"));
			confirmplant_form.PictureBox1.Visible = true;
			confirmplant_form.ShowDialog();
			if (!confirmplant_form.yes_clicked)
			{
				confirmed = false;
			}
			else
			{
				confirmed = true;
			}
		}

		public void confirmbox_role(object confirmtext1, object confirmpic1)
		{
			confirmrole_form.Label1.Text =StringType.FromObject(confirmtext1);
			confirmrole_form.PictureBox1.Image = Image.FromFile(StringType.FromObject(ObjectType.AddObj(ObjectType.AddObj("pic\\", confirmpic1), ".bmp")));
			confirmrole_form.PictureBox1.Visible = true;
			confirmrole_form.ShowDialog();
			if (!confirmrole_form.yes_clicked)
			{
				confirmed = false;
			}
			else
			{
				confirmed = true;
			}
		}

		private void craftsman_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_craftsman();
			}
		}

		public void debug_setup_variables()
		{
			dialog_box_OK_timer = 4;
			developer_on = false;
			alerts_on = true;
			update_num_buildings();
			update_num_plantations();
			if (!developer_on)
			{
				Button1.Visible = false;
				Button1.Enabled=false;
				Button2.Visible = false;
				Button2.Enabled=false;
				Button3.Visible = false;
				Button3.Enabled=false;
				Label7.Visible = false;
				Label8.Visible = false;
				Label9.Visible = false;
				Label10.Visible = false;
				player2_form.Button1.Enabled=false;
				player2_form.Button1.Visible = false;
				player3_form.Button1.Enabled=false;
				player3_form.Button1.Visible = false;
				player4_form.Button1.Enabled=false;
				player4_form.Button1.Visible = false;
				player5_form.Button1.Enabled=false;
				player5_form.Button1.Visible = false;
			}
			else
			{
				Button1.Visible = true;
				Button1.Enabled = true;
				Button2.Visible = true;
				Button2.Enabled = true;
				Button3.Visible = true;
				Button3.Enabled = true;
				Label7.Visible = true;
				Label8.Visible = true;
				Label9.Visible = true;
				Label10.Visible = true;
				player2_form.Button1.Enabled = true;
				player2_form.Button1.Visible = true;
				player3_form.Button1.Enabled = true;
				player3_form.Button1.Visible = true;
				player4_form.Button1.Enabled = true;
				player4_form.Button1.Visible = true;
				player5_form.Button1.Enabled = true;
				player5_form.Button1.Visible = true;
			}
		}

		public void determine_best_goods_to_store()
		{
			best_storage_type = 999;
			best_storage_qty = 0;
			if (current_player == 2)
			{
				counter3 = 0;
				do
				{
					if (goods_p2_array[counter3] > best_storage_qty)
					{
						best_storage_type = counter3;
						best_storage_qty = goods_p2_array[counter3];
					}
					Form1 form1 = this;
					form1.counter3 = checked(form1.counter3 + 1);
				}
				while (counter3 <= 4);
			}
			if (current_player == 3)
			{
				counter3 = 0;
				do
				{
					if (goods_p3_array[counter3] > best_storage_qty)
					{
						best_storage_type = counter3;
						best_storage_qty = goods_p3_array[counter3];
					}
					Form1 form11 = this;
					form11.counter3 = checked(form11.counter3 + 1);
				}
				while (counter3 <= 4);
			}
			if (current_player == 4)
			{
				counter3 = 0;
				do
				{
					if (goods_p4_array[counter3] > best_storage_qty)
					{
						best_storage_type = counter3;
						best_storage_qty = goods_p4_array[counter3];
					}
					Form1 form12 = this;
					form12.counter3 = checked(form12.counter3 + 1);
				}
				while (counter3 <= 4);
			}
			if (current_player == 5)
			{
				counter3 = 0;
				do
				{
					if (goods_p5_array[counter3] > best_storage_qty)
					{
						best_storage_type = counter3;
						best_storage_qty = goods_p5_array[counter3];
					}
					Form1 form13 = this;
					form13.counter3 = checked(form13.counter3 + 1);
				}
				while (counter3 <= 4);
			}
		}

		public void determine_empty_colonists_slots_all()
		{
			determine_empty_colonists_slots_p1();
			determine_empty_colonists_slots_p2();
			determine_empty_colonists_slots_p3();
			determine_empty_colonists_slots_p4();
			determine_empty_colonists_slots_p5();
			p1_empty_colonists_slots = empty_colonists_slots_array[1];
			p2_empty_colonists_slots = empty_colonists_slots_array[2];
			p3_empty_colonists_slots = empty_colonists_slots_array[3];
			p4_empty_colonists_slots = empty_colonists_slots_array[4];
			p5_empty_colonists_slots = empty_colonists_slots_array[5];
		}

		public void determine_empty_colonists_slots_p1()
		{
			empty_colonists_slots_array[1] = 0;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p1_array[counter1] == 110 | buildings_p1_array[counter1] == 120 | buildings_p1_array[counter1] == 130 | buildings_p1_array[counter1] == 140 | buildings_p1_array[counter1] == 150 | buildings_p1_array[counter1] == 160 | buildings_p1_array[counter1] == 212 | buildings_p1_array[counter1] == 222 | buildings_p1_array[counter1] == 230 | buildings_p1_array[counter1] == 240 | buildings_p1_array[counter1] == 250 | buildings_p1_array[counter1] == 260 | buildings_p1_array[counter1] == 312 | buildings_p1_array[counter1] == 321 | buildings_p1_array[counter1] == 330 | buildings_p1_array[counter1] == 340 | buildings_p1_array[counter1] == 350 | buildings_p1_array[counter1] == 360)
				{
					empty_colonists_slots_array[1] = checked(empty_colonists_slots_array[1] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p1_array[counter1] == 211 | buildings_p1_array[counter1] == 221 | buildings_p1_array[counter1] == 311 | buildings_p1_array[counter1] == 320)
				{
					empty_colonists_slots_array[1] = checked(empty_colonists_slots_array[1] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p1_array[counter1] == 210 | buildings_p1_array[counter1] == 220 | buildings_p1_array[counter1] == 310 | buildings_p1_array[counter1] == 320)
				{
					empty_colonists_slots_array[1] = checked(empty_colonists_slots_array[1] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p1_array[counter1] == 410 | buildings_p1_array[counter1] == 420 | buildings_p1_array[counter1] == 430 | buildings_p1_array[counter1] == 440 | buildings_p1_array[counter1] == 450)
				{
					empty_colonists_slots_array[1] = checked(empty_colonists_slots_array[1] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p2()
		{
			empty_colonists_slots_array[2] = 0;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p2_array[counter1] == 110 | buildings_p2_array[counter1] == 120 | buildings_p2_array[counter1] == 130 | buildings_p2_array[counter1] == 140 | buildings_p2_array[counter1] == 150 | buildings_p2_array[counter1] == 160 | buildings_p2_array[counter1] == 212 | buildings_p2_array[counter1] == 222 | buildings_p2_array[counter1] == 230 | buildings_p2_array[counter1] == 240 | buildings_p2_array[counter1] == 250 | buildings_p2_array[counter1] == 260 | buildings_p2_array[counter1] == 312 | buildings_p2_array[counter1] == 321 | buildings_p2_array[counter1] == 330 | buildings_p2_array[counter1] == 340 | buildings_p2_array[counter1] == 350 | buildings_p2_array[counter1] == 360)
				{
					empty_colonists_slots_array[2] = checked(empty_colonists_slots_array[2] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p2_array[counter1] == 211 | buildings_p2_array[counter1] == 221 | buildings_p2_array[counter1] == 311 | buildings_p2_array[counter1] == 320)
				{
					empty_colonists_slots_array[2] = checked(empty_colonists_slots_array[2] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p2_array[counter1] == 210 | buildings_p2_array[counter1] == 220 | buildings_p2_array[counter1] == 310 | buildings_p2_array[counter1] == 320)
				{
					empty_colonists_slots_array[2] = checked(empty_colonists_slots_array[2] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p2_array[counter1] == 410 | buildings_p2_array[counter1] == 420 | buildings_p2_array[counter1] == 430 | buildings_p2_array[counter1] == 440 | buildings_p2_array[counter1] == 450)
				{
					empty_colonists_slots_array[2] = checked(empty_colonists_slots_array[2] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p3()
		{
			empty_colonists_slots_array[3] = 0;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p3_array[counter1] == 110 | buildings_p3_array[counter1] == 120 | buildings_p3_array[counter1] == 130 | buildings_p3_array[counter1] == 140 | buildings_p3_array[counter1] == 150 | buildings_p3_array[counter1] == 160 | buildings_p3_array[counter1] == 212 | buildings_p3_array[counter1] == 222 | buildings_p3_array[counter1] == 230 | buildings_p3_array[counter1] == 240 | buildings_p3_array[counter1] == 250 | buildings_p3_array[counter1] == 260 | buildings_p3_array[counter1] == 312 | buildings_p3_array[counter1] == 321 | buildings_p3_array[counter1] == 330 | buildings_p3_array[counter1] == 340 | buildings_p3_array[counter1] == 350 | buildings_p3_array[counter1] == 360)
				{
					empty_colonists_slots_array[3] = checked(empty_colonists_slots_array[3] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p3_array[counter1] == 211 | buildings_p3_array[counter1] == 221 | buildings_p3_array[counter1] == 311 | buildings_p3_array[counter1] == 320)
				{
					empty_colonists_slots_array[3] = checked(empty_colonists_slots_array[3] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p3_array[counter1] == 210 | buildings_p3_array[counter1] == 220 | buildings_p3_array[counter1] == 310 | buildings_p3_array[counter1] == 320)
				{
					empty_colonists_slots_array[3] = checked(empty_colonists_slots_array[3] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p3_array[counter1] == 410 | buildings_p3_array[counter1] == 420 | buildings_p3_array[counter1] == 430 | buildings_p3_array[counter1] == 440 | buildings_p3_array[counter1] == 450)
				{
					empty_colonists_slots_array[3] = checked(empty_colonists_slots_array[3] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p4()
		{
			empty_colonists_slots_array[4] = 0;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p4_array[counter1] == 110 | buildings_p4_array[counter1] == 120 | buildings_p4_array[counter1] == 130 | buildings_p4_array[counter1] == 140 | buildings_p4_array[counter1] == 150 | buildings_p4_array[counter1] == 160 | buildings_p4_array[counter1] == 212 | buildings_p4_array[counter1] == 222 | buildings_p4_array[counter1] == 230 | buildings_p4_array[counter1] == 240 | buildings_p4_array[counter1] == 250 | buildings_p4_array[counter1] == 260 | buildings_p4_array[counter1] == 312 | buildings_p4_array[counter1] == 321 | buildings_p4_array[counter1] == 330 | buildings_p4_array[counter1] == 340 | buildings_p4_array[counter1] == 350 | buildings_p4_array[counter1] == 360)
				{
					empty_colonists_slots_array[4] = checked(empty_colonists_slots_array[4] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p4_array[counter1] == 211 | buildings_p4_array[counter1] == 221 | buildings_p4_array[counter1] == 311 | buildings_p4_array[counter1] == 320)
				{
					empty_colonists_slots_array[4] = checked(empty_colonists_slots_array[4] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p4_array[counter1] == 210 | buildings_p4_array[counter1] == 220 | buildings_p4_array[counter1] == 310 | buildings_p4_array[counter1] == 320)
				{
					empty_colonists_slots_array[4] = checked(empty_colonists_slots_array[4] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p4_array[counter1] == 410 | buildings_p4_array[counter1] == 420 | buildings_p4_array[counter1] == 430 | buildings_p4_array[counter1] == 440 | buildings_p4_array[counter1] == 450)
				{
					empty_colonists_slots_array[4] = checked(empty_colonists_slots_array[4] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void determine_empty_colonists_slots_p5()
		{
			empty_colonists_slots_array[5] = 0;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p5_array[counter1] == 110 | buildings_p5_array[counter1] == 120 | buildings_p5_array[counter1] == 130 | buildings_p5_array[counter1] == 140 | buildings_p5_array[counter1] == 150 | buildings_p5_array[counter1] == 160 | buildings_p5_array[counter1] == 212 | buildings_p5_array[counter1] == 222 | buildings_p5_array[counter1] == 230 | buildings_p5_array[counter1] == 240 | buildings_p5_array[counter1] == 250 | buildings_p5_array[counter1] == 260 | buildings_p5_array[counter1] == 312 | buildings_p5_array[counter1] == 321 | buildings_p5_array[counter1] == 330 | buildings_p5_array[counter1] == 340 | buildings_p5_array[counter1] == 350 | buildings_p5_array[counter1] == 360)
				{
					empty_colonists_slots_array[5] = checked(empty_colonists_slots_array[5] + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p5_array[counter1] == 211 | buildings_p5_array[counter1] == 221 | buildings_p5_array[counter1] == 311 | buildings_p5_array[counter1] == 320)
				{
					empty_colonists_slots_array[5] = checked(empty_colonists_slots_array[5] + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				if (buildings_p5_array[counter1] == 210 | buildings_p5_array[counter1] == 220 | buildings_p5_array[counter1] == 310 | buildings_p5_array[counter1] == 320)
				{
					empty_colonists_slots_array[5] = checked(empty_colonists_slots_array[5] + 3);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p5_array[counter1] == 410 | buildings_p5_array[counter1] == 420 | buildings_p5_array[counter1] == 430 | buildings_p5_array[counter1] == 440 | buildings_p5_array[counter1] == 450)
				{
					empty_colonists_slots_array[5] = checked(empty_colonists_slots_array[5] + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void determine_factory_production()
		{
			check_for_building_p1(331);
			if (found_building)
			{
				counter1 = 0;
				counter3 = 0;
				counter2 = 0;
				do
				{
					if (goods_this_turn_p1_array[counter2] > 0)
					{
						counter1 = checked(counter1 + 1);
					}
					Form1 form1 = this;
					form1.counter2 = checked(form1.counter2 + 1);
				}
				while (counter2 <= 4);
				if (counter1 == 0)
				{
					counter3 = 0;
				}
				if (counter1 == 1)
				{
					counter3 = 0;
				}
				if (counter1 == 2)
				{
					counter3 = 1;
				}
				if (counter1 == 3)
				{
					counter3 = 2;
				}
				if (counter1 == 4)
				{
					counter3 = 3;
				}
				if (counter1 == 5)
				{
					counter3 = 5;
				}
				infobox_building1(string.Concat("Your manned Factory generated", Conversion.Str(counter3), " doubloon(s) for your goods produced."), 331);
				gold_p1 = checked(gold_p1 + counter3);
				update_all_labels();
			}
			check_for_building_p2(331);
			if (found_building)
			{
				counter1 = 0;
				counter3 = 0;
				counter2 = 0;
				do
				{
					if (goods_this_turn_p2_array[counter2] > 0)
					{
						counter1 = checked(counter1 + 1);
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (counter2 <= 4);
				if (counter1 == 0)
				{
					counter3 = 0;
				}
				if (counter1 == 1)
				{
					counter3 = 0;
				}
				if (counter1 == 2)
				{
					counter3 = 1;
				}
				if (counter1 == 3)
				{
					counter3 = 2;
				}
				if (counter1 == 4)
				{
					counter3 = 3;
				}
				if (counter1 == 5)
				{
					counter3 = 5;
				}
				infobox_building1(string.Concat(p2_name, "'s manned Factory generated", Conversion.Str(counter3), " doubloon(s) for goods produced."), 331);
				gold_p2 = checked(gold_p2 + counter3);
				update_all_labels();
			}
			check_for_building_p3(331);
			if (found_building)
			{
				counter1 = 0;
				counter3 = 0;
				counter2 = 0;
				do
				{
					if (goods_this_turn_p3_array[counter2] > 0)
					{
						counter1 = checked(counter1 + 1);
					}
					Form1 form12 = this;
					form12.counter2 = checked(form12.counter2 + 1);
				}
				while (counter2 <= 4);
				if (counter1 == 0)
				{
					counter3 = 0;
				}
				if (counter1 == 1)
				{
					counter3 = 0;
				}
				if (counter1 == 2)
				{
					counter3 = 1;
				}
				if (counter1 == 3)
				{
					counter3 = 2;
				}
				if (counter1 == 4)
				{
					counter3 = 3;
				}
				if (counter1 == 5)
				{
					counter3 = 5;
				}
				infobox_building1(string.Concat(p3_name, "'s manned Factory generated", Conversion.Str(counter3), " doubloon(s) for goods produced."), 331);
				gold_p3 = checked(gold_p3 + counter3);
				update_all_labels();
			}
			check_for_building_p4(331);
			if (found_building)
			{
				counter1 = 0;
				counter3 = 0;
				counter2 = 0;
				do
				{
					if (goods_this_turn_p4_array[counter2] > 0)
					{
						counter1 = checked(counter1 + 1);
					}
					Form1 form13 = this;
					form13.counter2 = checked(form13.counter2 + 1);
				}
				while (counter2 <= 4);
				if (counter1 == 0)
				{
					counter3 = 0;
				}
				if (counter1 == 1)
				{
					counter3 = 0;
				}
				if (counter1 == 2)
				{
					counter3 = 1;
				}
				if (counter1 == 3)
				{
					counter3 = 2;
				}
				if (counter1 == 4)
				{
					counter3 = 3;
				}
				if (counter1 == 5)
				{
					counter3 = 5;
				}
				infobox_building1(string.Concat(p4_name, "'s manned Factory generated", Conversion.Str(counter3), " doubloons for goods produced."), 331);
				gold_p4 = checked(gold_p4 + counter3);
				update_all_labels();
			}
			check_for_building_p5(331);
			if (found_building)
			{
				counter1 = 0;
				counter3 = 0;
				counter2 = 0;
				do
				{
					if (goods_this_turn_p5_array[counter2] > 0)
					{
						counter1 = checked(counter1 + 1);
					}
					Form1 form14 = this;
					form14.counter2 = checked(form14.counter2 + 1);
				}
				while (counter2 <= 4);
				if (counter1 == 0)
				{
					counter3 = 0;
				}
				if (counter1 == 1)
				{
					counter3 = 0;
				}
				if (counter1 == 2)
				{
					counter3 = 1;
				}
				if (counter1 == 3)
				{
					counter3 = 2;
				}
				if (counter1 == 4)
				{
					counter3 = 3;
				}
				if (counter1 == 5)
				{
					counter3 = 5;
				}
				infobox_building1(string.Concat(p5_name, "'s manned Factory generated", Conversion.Str(counter3), " doubloons for goods produced."), 331);
				gold_p5 = checked(gold_p5 + counter3);
				update_all_labels();
			}
		}

		public void determine_goods_to_ship()
		{
			update_ship_cargo();
			goods_to_ship = false;
			if (current_player == 1)
			{
				check_for_building(361);
				if (goods_p1_array[0] > 0 & ships_can_take_indigo | goods_p1_array[0] > 0 & found_building & !p1_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p1_array[1] > 0 & ships_can_take_sugar | goods_p1_array[1] > 0 & found_building & !p1_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p1_array[2] > 0 & ships_can_take_corn | goods_p1_array[2] > 0 & found_building & !p1_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p1_array[3] > 0 & ships_can_take_tobacco | goods_p1_array[3] > 0 & found_building & !p1_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p1_array[4] > 0 & ships_can_take_coffee | goods_p1_array[4] > 0 & found_building & !p1_used_wharf)
				{
					goods_to_ship = true;
				}
			}
			if (current_player == 2)
			{
				check_for_building(361);
				if (goods_p2_array[0] > 0 & ships_can_take_indigo | goods_p2_array[0] > 0 & found_building & !p2_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p2_array[1] > 0 & ships_can_take_sugar | goods_p2_array[1] > 0 & found_building & !p2_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p2_array[2] > 0 & ships_can_take_corn | goods_p2_array[2] > 0 & found_building & !p2_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p2_array[3] > 0 & ships_can_take_tobacco | goods_p2_array[3] > 0 & found_building & !p2_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p2_array[4] > 0 & ships_can_take_coffee | goods_p2_array[4] > 0 & found_building & !p2_used_wharf)
				{
					goods_to_ship = true;
				}
			}
			if (current_player == 3)
			{
				check_for_building(361);
				if (goods_p3_array[0] > 0 & ships_can_take_indigo | goods_p3_array[0] > 0 & found_building & !p3_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p3_array[1] > 0 & ships_can_take_sugar | goods_p3_array[1] > 0 & found_building & !p3_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p3_array[2] > 0 & ships_can_take_corn | goods_p3_array[2] > 0 & found_building & !p3_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p3_array[3] > 0 & ships_can_take_tobacco | goods_p3_array[3] > 0 & found_building & !p3_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p3_array[4] > 0 & ships_can_take_coffee | goods_p3_array[4] > 0 & found_building & !p3_used_wharf)
				{
					goods_to_ship = true;
				}
			}
			if (current_player == 4)
			{
				check_for_building(361);
				if (goods_p4_array[0] > 0 & ships_can_take_indigo | goods_p4_array[0] > 0 & found_building & !p4_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p4_array[1] > 0 & ships_can_take_sugar | goods_p4_array[1] > 0 & found_building & !p4_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p4_array[2] > 0 & ships_can_take_corn | goods_p4_array[2] > 0 & found_building & !p4_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p4_array[3] > 0 & ships_can_take_tobacco | goods_p4_array[3] > 0 & found_building & !p4_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p4_array[4] > 0 & ships_can_take_coffee | goods_p4_array[4] > 0 & found_building & !p4_used_wharf)
				{
					goods_to_ship = true;
				}
			}
			if (current_player == 5)
			{
				check_for_building(361);
				if (goods_p5_array[0] > 0 & ships_can_take_indigo | goods_p5_array[0] > 0 & found_building & !p5_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p5_array[1] > 0 & ships_can_take_sugar | goods_p5_array[1] > 0 & found_building & !p5_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p5_array[2] > 0 & ships_can_take_corn | goods_p5_array[2] > 0 & found_building & !p5_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p5_array[3] > 0 & ships_can_take_tobacco | goods_p5_array[3] > 0 & found_building & !p5_used_wharf)
				{
					goods_to_ship = true;
				}
				if (goods_p5_array[4] > 0 & ships_can_take_coffee | goods_p5_array[4] > 0 & found_building & !p5_used_wharf)
				{
					goods_to_ship = true;
				}
			}
		}

		public void determine_goods_to_trade()
		{
			goods_to_trade = false;
			p1_manned_office = false;
			p2_manned_office = false;
			p3_manned_office = false;
			p4_manned_office = false;
			p5_manned_office = false;
			trading_house_full = false;
			if (trading_house_array[3] != 0)
			{
				trading_house_full = true;
			}
			if (current_player == 1)
			{
				check_for_building(241);
				if (found_building)
				{
					p1_manned_office = true;
				}
				counter2 = 0;
				do
				{
					if (goods_p1_array[counter2] > 0)
					{
						check_for_goods_in_trading_house(counter2);
						if (!found_good & !trading_house_full | p1_manned_office & !trading_house_full)
						{
							goods_to_trade = true;
						}
					}
					Form1 form1 = this;
					form1.counter2 = checked(form1.counter2 + 1);
				}
				while (counter2 <= 4);
			}
			if (current_player == 2)
			{
				check_for_building(241);
				if (found_building)
				{
					p2_manned_office = true;
				}
				counter2 = 0;
				do
				{
					if (goods_p2_array[counter2] > 0)
					{
						check_for_goods_in_trading_house(counter2);
						if (!found_good & !trading_house_full | p2_manned_office & !trading_house_full)
						{
							goods_to_trade = true;
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (counter2 <= 4);
			}
			if (current_player == 3)
			{
				counter2 = 0;
				do
				{
					if (goods_p3_array[counter2] > 0)
					{
						check_for_goods_in_trading_house(counter2);
						if (!found_good & !trading_house_full | p3_manned_office & !trading_house_full)
						{
							goods_to_trade = true;
						}
					}
					Form1 form12 = this;
					form12.counter2 = checked(form12.counter2 + 1);
				}
				while (counter2 <= 4);
			}
			if (current_player == 4)
			{
				counter2 = 0;
				do
				{
					if (goods_p4_array[counter2] > 0)
					{
						check_for_goods_in_trading_house(counter2);
						if (!found_good & !trading_house_full | p4_manned_office & !trading_house_full)
						{
							goods_to_trade = true;
						}
					}
					Form1 form13 = this;
					form13.counter2 = checked(form13.counter2 + 1);
				}
				while (counter2 <= 4);
			}
			if (current_player == 5)
			{
				counter2 = 0;
				do
				{
					if (goods_p5_array[counter2] > 0)
					{
						check_for_goods_in_trading_house(counter2);
						if (!found_good & !trading_house_full | p5_manned_office & !trading_house_full)
						{
							goods_to_trade = true;
						}
					}
					Form1 form14 = this;
					form14.counter2 = checked(form14.counter2 + 1);
				}
				while (counter2 <= 4);
			}
		}

		public void determine_governor()
		{
			if (first_round)
			{
				first_round = false;
			}
			else if (player_order_array[checked(current_governor + 1)] != 9)
			{
				current_governor = checked(current_governor + 1);
				current_player = current_governor;
				current_role_chooser = current_governor;
				reset_for_new_governor();
			}
			else
			{
				current_governor = 1;
				current_player = current_governor;
				current_role_chooser = current_governor;
				reset_for_new_governor();
			}
			p1_taken_turn = false;
			p2_taken_turn = false;
			p3_taken_turn = false;
			p4_taken_turn = false;
			p5_taken_turn = false;
			update_summary();
			if (current_governor == 1)
			{
				update_all_labels();
				infobox_role(string.Concat(p1_name, ", you are the new governor. Please choose a role."), "governor");
				log_governor();
				make_role_buttons_active();
				p1_choose_role();
			}
			if (current_governor == 2)
			{
				update_all_labels();
				infobox_role(string.Concat(p2_name, " is the new governor."), "governor");
				log_governor();
				p2_choose_role();
			}
			if (current_governor == 3)
			{
				update_all_labels();
				infobox_role(string.Concat(p3_name, " is the new governor."), "governor");
				log_governor();
				p3_choose_role();
			}
			if (current_governor == 4)
			{
				update_all_labels();
				infobox_role(string.Concat(p4_name, " is the new governor."), "governor");
				log_governor();
				p4_choose_role();
			}
			if (current_governor == 5)
			{
				update_all_labels();
				infobox_role(string.Concat(p5_name, " is the new governor."), "governor");
				log_governor();
				p5_choose_role();
			}
		}

		public void determine_if_afford_large()
		{
			build_final_cost = 0;
			discount1 = 0;
			discount2 = 0;
			if (current_player == 2)
			{
				if (current_role_chooser != 2)
				{
					discount1 = 0;
				}
				else
				{
					discount1 = 1;
				}
				if (num_manned_quarries_p2 == 0)
				{
					discount2 = 0;
				}
				if (num_manned_quarries_p2 == 1)
				{
					discount2 = 1;
				}
				if (num_manned_quarries_p2 == 2)
				{
					discount2 = 2;
				}
				if (num_manned_quarries_p2 == 3)
				{
					discount2 = 3;
				}
				if (num_manned_quarries_p2 == 4)
				{
					discount2 = 4;
				}
				if (checked(checked(10 - discount1) - discount2) >= 0)
				{
					build_final_cost = checked(checked(10 - discount1) - discount2);
				}
				else
				{
					build_final_cost = 0;
				}
				if (gold_p2 < build_final_cost)
				{
					afford_large = false;
				}
				else
				{
					afford_large = true;
				}
			}
			if (current_player == 3)
			{
				if (current_role_chooser != 3)
				{
					discount1 = 0;
				}
				else
				{
					discount1 = 1;
				}
				if (num_manned_quarries_p3 == 0)
				{
					discount2 = 0;
				}
				if (num_manned_quarries_p3 == 1)
				{
					discount2 = 1;
				}
				if (num_manned_quarries_p3 == 2)
				{
					discount2 = 2;
				}
				if (num_manned_quarries_p3 == 3)
				{
					discount2 = 3;
				}
				if (num_manned_quarries_p3 == 4)
				{
					discount2 = 4;
				}
				if (checked(checked(10 - discount1) - discount2) >= 0)
				{
					build_final_cost = checked(checked(10 - discount1) - discount2);
				}
				else
				{
					build_final_cost = 0;
				}
				if (gold_p3 < build_final_cost)
				{
					afford_large = false;
				}
				else
				{
					afford_large = true;
				}
			}
			if (current_player == 4)
			{
				if (current_role_chooser != 4)
				{
					discount1 = 0;
				}
				else
				{
					discount1 = 1;
				}
				if (num_manned_quarries_p4 == 0)
				{
					discount2 = 0;
				}
				if (num_manned_quarries_p4 == 1)
				{
					discount2 = 1;
				}
				if (num_manned_quarries_p4 == 2)
				{
					discount2 = 2;
				}
				if (num_manned_quarries_p4 == 3)
				{
					discount2 = 3;
				}
				if (num_manned_quarries_p4 == 4)
				{
					discount2 = 4;
				}
				if (checked(checked(10 - discount1) - discount2) >= 0)
				{
					build_final_cost = checked(checked(10 - discount1) - discount2);
				}
				else
				{
					build_final_cost = 0;
				}
				if (gold_p4 < build_final_cost)
				{
					afford_large = false;
				}
				else
				{
					afford_large = true;
				}
			}
			if (current_player == 5)
			{
				if (current_role_chooser != 5)
				{
					discount1 = 0;
				}
				else
				{
					discount1 = 1;
				}
				if (num_manned_quarries_p5 == 0)
				{
					discount2 = 0;
				}
				if (num_manned_quarries_p5 == 1)
				{
					discount2 = 1;
				}
				if (num_manned_quarries_p5 == 2)
				{
					discount2 = 2;
				}
				if (num_manned_quarries_p5 == 3)
				{
					discount2 = 3;
				}
				if (num_manned_quarries_p5 == 4)
				{
					discount2 = 4;
				}
				if (checked(checked(10 - discount1) - discount2) >= 0)
				{
					build_final_cost = checked(checked(10 - discount1) - discount2);
				}
				else
				{
					build_final_cost = 0;
				}
				if (gold_p5 < build_final_cost)
				{
					afford_large = false;
				}
				else
				{
					afford_large = true;
				}
			}
		}

		public void determine_if_buyable1(object avail_index, object buildingnumber, object buildbasecost)
		{
			buyable = false;
			build_final_cost = 0;
			discount1 = 0;
			discount2 = 0;
			if (current_player == 2)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 2)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p2 < 1)
					{
						discount2 = 0;
					}
					else
					{
						discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p2 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 3)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 3)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p3 < 1)
					{
						discount2 = 0;
					}
					else
					{
						discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p3 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 4)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 4)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p4 < 1)
					{
						discount2 = 0;
					}
					else
					{
						discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p4 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 5)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 5)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p5 < 1)
					{
						discount2 = 0;
					}
					else
					{
						discount2 = 1;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p5 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
		}

		public void determine_if_buyable2(object avail_index, object buildingnumber, object buildbasecost)
		{
			buyable = false;
			build_final_cost = 0;
			discount1 = 0;
			discount2 = 0;
			if (current_player == 2)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 2)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p2 >= 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p2 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p2 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p2 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 3)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 3)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p3 >= 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p3 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p3 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p3 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 4)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 4)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p4 >= 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p4 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p4 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p4 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 5)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 5)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p5 >= 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p5 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p5 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p5 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
		}

		public void determine_if_buyable3(object avail_index, object buildingnumber, object buildbasecost)
		{
			buyable = false;
			build_final_cost = 0;
			discount1 = 0;
			discount2 = 0;
			if (current_player == 2)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 2)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p2 >= 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p2 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p2 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p2 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p2 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 3)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 3)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p3 >= 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p3 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p3 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p3 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p3 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 4)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 4)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p4 >= 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p4 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p4 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p4 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p4 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 5)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 5)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p5 >= 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p5 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p5 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p5 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p5 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
		}

		public void determine_if_buyable4(object avail_index, object buildingnumber, object buildbasecost)
		{
			buyable = false;
			build_final_cost = 0;
			discount1 = 0;
			discount2 = 0;
			if (current_player == 2)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 2)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p2 == 4)
					{
						discount2 = 4;
					}
					if (num_manned_quarries_p2 == 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p2 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p2 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p2 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p2 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 3)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 3)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p3 == 4)
					{
						discount2 = 4;
					}
					if (num_manned_quarries_p3 == 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p3 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p3 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p3 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p3 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 4)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 4)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p4 == 4)
					{
						discount2 = 4;
					}
					if (num_manned_quarries_p4 == 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p4 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p4 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p4 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p4 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
			if (current_player == 5)
			{
				check_for_building3(RuntimeHelpers.GetObjectValue(buildingnumber));
				if (!(buildings_available_array[IntegerType.FromObject(avail_index)] == 0 | found_building))
				{
					buyable = true;
				}
				else
				{
					buyable = false;
				}
				if (buyable)
				{
					if (current_role_chooser != 5)
					{
						discount1 = 0;
					}
					else
					{
						discount1 = 1;
					}
					if (num_manned_quarries_p5 == 4)
					{
						discount2 = 4;
					}
					if (num_manned_quarries_p5 == 3)
					{
						discount2 = 3;
					}
					if (num_manned_quarries_p5 == 2)
					{
						discount2 = 2;
					}
					if (num_manned_quarries_p5 == 1)
					{
						discount2 = 1;
					}
					if (num_manned_quarries_p5 == 0)
					{
						discount2 = 0;
					}
					if (ObjectType.ObjTst(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2), 0, false) >= 0)
					{
						build_final_cost = IntegerType.FromObject(ObjectType.SubObj(ObjectType.SubObj(buildbasecost, discount1), discount2));
					}
					else
					{
						build_final_cost = 0;
					}
					if (gold_p5 < build_final_cost)
					{
						buyable = false;
					}
					else
					{
						buyable = true;
					}
				}
			}
		}

		public void determine_manned_quarries()
		{
			num_manned_quarries_p1 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p1_array[counter1] == 61)
				{
					num_manned_quarries_p1 = checked(num_manned_quarries_p1 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			buildings_form.num_manned_quarries_p1b = num_manned_quarries_p1;
			num_manned_quarries_p2 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] == 61)
				{
					num_manned_quarries_p2 = checked(num_manned_quarries_p2 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			num_manned_quarries_p3 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] == 61)
				{
					num_manned_quarries_p3 = checked(num_manned_quarries_p3 + 1);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			num_manned_quarries_p4 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] == 61)
				{
					num_manned_quarries_p4 = checked(num_manned_quarries_p4 + 1);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 11);
			num_manned_quarries_p5 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] == 61)
				{
					num_manned_quarries_p5 = checked(num_manned_quarries_p5 + 1);
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 11);
		}

		public void determine_next_role_chooser()
		{
			role_has_been_chosen = false;
			if (current_player == 1 & !role_has_been_chosen)
			{
				Text =string.Concat(p1_name, "'s Turn");
				infobox_nopic(string.Concat("It is now ", p1_name, "'s turn to choose a role."));
				role_has_been_chosen = true;
				p1_choose_role();
			}
			if (current_player == 2 & !role_has_been_chosen)
			{
				Text =string.Concat(p2_name, "'s Turn");
				infobox_nopic(string.Concat("It is now ", p2_name, "'s turn to choose a role."));
				role_has_been_chosen = true;
				p2_choose_role();
			}
			if (current_player == 3 & !role_has_been_chosen)
			{
				Text =string.Concat(p3_name, "'s Turn");
				infobox_nopic(string.Concat("It is now ", p3_name, "'s turn to choose a role."));
				role_has_been_chosen = true;
				p3_choose_role();
			}
			if (current_player == 4 & !role_has_been_chosen)
			{
				Text =string.Concat(p4_name, "'s Turn");
				infobox_nopic(string.Concat("It is now ", p4_name, "'s turn to choose a role."));
				role_has_been_chosen = true;
				p4_choose_role();
			}
			if (current_player == 5 & !role_has_been_chosen)
			{
				Text =string.Concat(p5_name, "'s Turn");
				infobox_nopic(string.Concat("It is now ", p5_name, "'s turn to choose a role."));
				role_has_been_chosen = true;
				p5_choose_role();
			}
		}

		public void determine_p1_mayor_phase_over()
		{
			confirmed = false;
			determine_empty_colonists_slots_all();
			if (!(idle_colonists_array[1] > 0 & empty_colonists_slots_array[1] > 0))
			{
				confirmed = true;
			}
			else
			{
				confirmed = false;
			}
			if (!confirmed)
			{
				next_turn_button.Enabled=false;
				next_turn_button.Visible = false;
				formtitle("p1", "Mayor Phase - Fill more building slots");
			}
			else
			{
				next_turn_button.Text = "Done Distributing";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				formtitle("p1", "Mayor Phase - Distribute Colonists or End Your Turn");
			}
		}

		public void determine_p2_mayor_phase_over()
		{
			confirmed = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			formtitle("p2", "Mayor Phase - Currently distributing colonists");
			determine_empty_colonists_slots_all();
			if (!(idle_colonists_array[2] > 0 & empty_colonists_slots_array[2] > 0))
			{
				confirmed = true;
			}
			else
			{
				confirmed = false;
			}
			if (!confirmed)
			{
				next_turn_button.Enabled=false;
				next_turn_button.Visible = false;
				formtitle("p2", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				formtitle("p2", "Mayor Phase - Done distributing colonists");
				infobox_role(string.Concat(p2_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_p3_mayor_phase_over()
		{
			confirmed = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			formtitle("p3", "Mayor Phase - Currently distributing colonists");
			determine_empty_colonists_slots_all();
			if (!(idle_colonists_array[3] > 0 & empty_colonists_slots_array[3] > 0))
			{
				confirmed = true;
			}
			else
			{
				confirmed = false;
			}
			if (!confirmed)
			{
				next_turn_button.Enabled=false;
				next_turn_button.Visible = false;
				formtitle("p3", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				formtitle("p3", "Mayor Phase - Done distributing colonists");
				infobox_role(string.Concat(p3_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_p4_mayor_phase_over()
		{
			confirmed = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			formtitle("p4", "Mayor Phase - Currently distributing colonists");
			determine_empty_colonists_slots_all();
			if (!(idle_colonists_array[4] > 0 & empty_colonists_slots_array[4] > 0))
			{
				confirmed = true;
			}
			else
			{
				confirmed = false;
			}
			if (!confirmed)
			{
				next_turn_button.Enabled=false;
				next_turn_button.Visible = false;
				formtitle("p4", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				formtitle("p4", "Mayor Phase - Done distributing colonists");
				infobox_role(string.Concat(p4_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_p5_mayor_phase_over()
		{
			confirmed = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			formtitle("p5", "Mayor Phase - Currently distributing colonists");
			determine_empty_colonists_slots_all();
			if (!(idle_colonists_array[5] > 0 & empty_colonists_slots_array[5] > 0))
			{
				confirmed = true;
			}
			else
			{
				confirmed = false;
			}
			if (!confirmed)
			{
				next_turn_button.Enabled=false;
				next_turn_button.Visible = false;
				formtitle("p5", "Mayor Phase - Currently distributing colonists");
			}
			else
			{
				formtitle("p5", "Mayor Phase - Done distributing colonists");
				infobox_role(string.Concat(p5_name, " has finished distributing colonists."), "role_mayor");
			}
		}

		public void determine_player_order()
		{
			if (number_of_players == 3)
			{
				player_order_array[4] = 9;
				player_order_array[5] = 9;
				if (seat_num == 1)
				{
					current_governor = 1;
					current_player = 1;
					current_role_chooser = 1;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 30;
				}
				if (seat_num == 2)
				{
					current_governor = 3;
					current_player = 3;
					current_role_chooser = 3;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 30;
					plantations_p3_array[0] = 10;
				}
				if (seat_num == 3)
				{
					current_governor = 2;
					current_player = 2;
					current_role_chooser = 2;
					plantations_p1_array[0] = 30;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 10;
				}
				plantations_tilebag_array[10] = 0;
				plantations_tilebag_array[11] = 0;
				plantations_tilebag_array[12] = 0;
			}
			if (number_of_players == 4)
			{
				player_order_array[5] = 9;
				if (seat_num == 1)
				{
					current_governor = 1;
					current_player = 1;
					current_role_chooser = 1;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 30;
					plantations_p4_array[0] = 30;
				}
				if (seat_num == 2)
				{
					current_governor = 4;
					current_player = 4;
					current_role_chooser = 4;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 30;
					plantations_p3_array[0] = 30;
					plantations_p4_array[0] = 10;
				}
				if (seat_num == 3)
				{
					current_governor = 3;
					current_player = 3;
					current_role_chooser = 3;
					plantations_p1_array[0] = 30;
					plantations_p2_array[0] = 30;
					plantations_p3_array[0] = 10;
					plantations_p4_array[0] = 10;
				}
				if (seat_num == 4)
				{
					current_governor = 2;
					current_player = 2;
					current_role_chooser = 2;
					plantations_p1_array[0] = 30;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 10;
					plantations_p4_array[0] = 30;
				}
				plantations_tilebag_array[10] = 0;
				plantations_tilebag_array[11] = 0;
				plantations_tilebag_array[12] = 0;
				plantations_tilebag_array[13] = 0;
			}
			if (number_of_players == 5)
			{
				if (seat_num == 1)
				{
					current_governor = 1;
					current_player = 1;
					current_role_chooser = 1;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 10;
					plantations_p4_array[0] = 30;
					plantations_p5_array[0] = 30;
				}
				if (seat_num == 2)
				{
					current_governor = 5;
					current_player = 5;
					current_role_chooser = 5;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 30;
					plantations_p4_array[0] = 30;
					plantations_p5_array[0] = 10;
				}
				if (seat_num == 3)
				{
					current_governor = 4;
					current_player = 4;
					current_role_chooser = 4;
					plantations_p1_array[0] = 10;
					plantations_p2_array[0] = 30;
					plantations_p3_array[0] = 30;
					plantations_p4_array[0] = 10;
					plantations_p5_array[0] = 10;
				}
				if (seat_num == 4)
				{
					current_governor = 3;
					current_player = 3;
					current_role_chooser = 3;
					plantations_p1_array[0] = 30;
					plantations_p2_array[0] = 30;
					plantations_p3_array[0] = 10;
					plantations_p4_array[0] = 10;
					plantations_p5_array[0] = 10;
				}
				if (seat_num == 5)
				{
					current_governor = 2;
					current_player = 2;
					current_role_chooser = 2;
					plantations_p1_array[0] = 30;
					plantations_p2_array[0] = 10;
					plantations_p3_array[0] = 10;
					plantations_p4_array[0] = 10;
					plantations_p5_array[0] = 30;
				}
				plantations_tilebag_array[9] = 0;
				plantations_tilebag_array[10] = 0;
				plantations_tilebag_array[11] = 0;
				plantations_tilebag_array[12] = 0;
				plantations_tilebag_array[13] = 0;
			}
		}

		public void determine_production()
		{
			determine_production_p1();
			determine_production_p2();
			determine_production_p3();
			determine_production_p4();
			determine_production_p5();
			counter1 = 0;
			do
			{
				goods_this_turn_p1_array[counter1] = 0;
				goods_this_turn_p2_array[counter1] = 0;
				goods_this_turn_p3_array[counter1] = 0;
				goods_this_turn_p4_array[counter1] = 0;
				goods_this_turn_p5_array[counter1] = 0;
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (number_of_players == 3)
			{
				if (number_of_players == 3 & current_role_chooser == 1)
				{
					give_goods_to_p1();
					give_goods_to_p2();
					give_goods_to_p3();
				}
				if (number_of_players == 3 & current_role_chooser == 2)
				{
					give_goods_to_p2();
					give_goods_to_p3();
					give_goods_to_p1();
				}
				if (number_of_players == 3 & current_role_chooser == 3)
				{
					give_goods_to_p3();
					give_goods_to_p1();
					give_goods_to_p2();
				}
			}
			if (number_of_players == 4)
			{
				if (number_of_players == 4 & current_role_chooser == 1)
				{
					give_goods_to_p1();
					give_goods_to_p2();
					give_goods_to_p3();
					give_goods_to_p4();
				}
				if (number_of_players == 4 & current_role_chooser == 2)
				{
					give_goods_to_p2();
					give_goods_to_p3();
					give_goods_to_p4();
					give_goods_to_p1();
				}
				if (number_of_players == 4 & current_role_chooser == 3)
				{
					give_goods_to_p3();
					give_goods_to_p4();
					give_goods_to_p1();
					give_goods_to_p2();
				}
				if (number_of_players == 4 & current_role_chooser == 4)
				{
					give_goods_to_p4();
					give_goods_to_p1();
					give_goods_to_p2();
					give_goods_to_p3();
				}
			}
			if (number_of_players == 5)
			{
				if (number_of_players == 5 & current_role_chooser == 1)
				{
					give_goods_to_p1();
					give_goods_to_p2();
					give_goods_to_p3();
					give_goods_to_p4();
					give_goods_to_p5();
				}
				if (number_of_players == 5 & current_role_chooser == 2)
				{
					give_goods_to_p2();
					give_goods_to_p3();
					give_goods_to_p4();
					give_goods_to_p5();
					give_goods_to_p1();
				}
				if (number_of_players == 5 & current_role_chooser == 3)
				{
					give_goods_to_p3();
					give_goods_to_p4();
					give_goods_to_p5();
					give_goods_to_p1();
					give_goods_to_p2();
				}
				if (number_of_players == 5 & current_role_chooser == 4)
				{
					give_goods_to_p4();
					give_goods_to_p5();
					give_goods_to_p1();
					give_goods_to_p2();
					give_goods_to_p3();
				}
				if (number_of_players == 5 & current_role_chooser == 5)
				{
					give_goods_to_p5();
					give_goods_to_p1();
					give_goods_to_p2();
					give_goods_to_p3();
					give_goods_to_p4();
				}
			}
			craftsman1_form.p1_name_label.Text =p1_name;
			craftsman1_form.p2_name_label.Text =p2_name;
			craftsman1_form.p3_name_label.Text =p3_name;
			craftsman1_form.p4_name_label.Text =p4_name;
			craftsman1_form.p5_name_label.Text =p5_name;
			craftsman1_form.PictureBox1.Visible = true;
			craftsman1_form.PictureBox2.Visible = true;
			craftsman1_form.p1_indigo_label.Text =StringType.FromInteger(goods_this_turn_p1_array[0]);
			craftsman1_form.p1_sugar_label.Text =StringType.FromInteger(goods_this_turn_p1_array[1]);
			craftsman1_form.p1_corn_label.Text =StringType.FromInteger(goods_this_turn_p1_array[2]);
			craftsman1_form.p1_tobacco_label.Text =StringType.FromInteger(goods_this_turn_p1_array[3]);
			craftsman1_form.p1_coffee_label.Text =StringType.FromInteger(goods_this_turn_p1_array[4]);
			craftsman1_form.p2_indigo_label.Text =StringType.FromInteger(goods_this_turn_p2_array[0]);
			craftsman1_form.p2_sugar_label.Text =StringType.FromInteger(goods_this_turn_p2_array[1]);
			craftsman1_form.p2_corn_label.Text =StringType.FromInteger(goods_this_turn_p2_array[2]);
			craftsman1_form.p2_tobacco_label.Text =StringType.FromInteger(goods_this_turn_p2_array[3]);
			craftsman1_form.p2_coffee_label.Text =StringType.FromInteger(goods_this_turn_p2_array[4]);
			craftsman1_form.p3_indigo_label.Text =StringType.FromInteger(goods_this_turn_p3_array[0]);
			craftsman1_form.p3_sugar_label.Text =StringType.FromInteger(goods_this_turn_p3_array[1]);
			craftsman1_form.p3_corn_label.Text =StringType.FromInteger(goods_this_turn_p3_array[2]);
			craftsman1_form.p3_tobacco_label.Text =StringType.FromInteger(goods_this_turn_p3_array[3]);
			craftsman1_form.p3_coffee_label.Text =StringType.FromInteger(goods_this_turn_p3_array[4]);
			if (number_of_players >= 4)
			{
				craftsman1_form.PictureBox1.Visible = false;
				craftsman1_form.p4_indigo_label.Text =StringType.FromInteger(goods_this_turn_p4_array[0]);
				craftsman1_form.p4_sugar_label.Text =StringType.FromInteger(goods_this_turn_p4_array[1]);
				craftsman1_form.p4_corn_label.Text =StringType.FromInteger(goods_this_turn_p4_array[2]);
				craftsman1_form.p4_tobacco_label.Text =StringType.FromInteger(goods_this_turn_p4_array[3]);
				craftsman1_form.p4_coffee_label.Text =StringType.FromInteger(goods_this_turn_p4_array[4]);
			}
			if (number_of_players == 5)
			{
				craftsman1_form.PictureBox2.Visible = false;
				craftsman1_form.p5_indigo_label.Text =StringType.FromInteger(goods_this_turn_p5_array[0]);
				craftsman1_form.p5_sugar_label.Text =StringType.FromInteger(goods_this_turn_p5_array[1]);
				craftsman1_form.p5_corn_label.Text =StringType.FromInteger(goods_this_turn_p5_array[2]);
				craftsman1_form.p5_tobacco_label.Text =StringType.FromInteger(goods_this_turn_p5_array[3]);
				craftsman1_form.p5_coffee_label.Text =StringType.FromInteger(goods_this_turn_p5_array[4]);
			}
			craftsman1_form.p1_craftsman_label.Visible = false;
			craftsman1_form.p2_craftsman_label.Visible = false;
			craftsman1_form.p3_craftsman_label.Visible = false;
			craftsman1_form.p4_craftsman_label.Visible = false;
			craftsman1_form.p5_craftsman_label.Visible = false;
			if (current_role_chooser == 1)
			{
				craftsman1_form.p1_craftsman_label.Visible = true;
			}
			if (current_role_chooser == 2)
			{
				craftsman1_form.p2_craftsman_label.Visible = true;
			}
			if (current_role_chooser == 3)
			{
				craftsman1_form.p3_craftsman_label.Visible = true;
			}
			if (current_role_chooser == 4)
			{
				craftsman1_form.p4_craftsman_label.Visible = true;
			}
			if (current_role_chooser == 5)
			{
				craftsman1_form.p5_craftsman_label.Visible = true;
			}
			update_all_labels();
			craftsman1_form.ShowDialog();
			determine_factory_production();
		}

		public void determine_production_p1()
		{
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p1_array[counter3] == 11)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				tempstring = Conversion.Str(plantations_p1_array[counter3]);
				if (buildings_p1_array[counter3] == 111)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p1_array[counter3] == 211)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p1_array[counter3] == 212)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p1_array[counter3] == 213)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p1_array[0] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p1_array[0] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p1_array[counter3] == 21)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p1_array[counter3] == 121)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p1_array[counter3] == 221)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p1_array[counter3] == 222)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p1_array[counter3] == 223)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p1_array[1] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p1_array[1] = counter2;
			}
			counter1 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p1_array[counter3] == 31)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (counter3 <= 11);
			goods_ability_p1_array[2] = counter1;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p1_array[counter3] == 41)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p1_array[counter3] == 311)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p1_array[counter3] == 312)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p1_array[counter3] == 313)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p1_array[3] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p1_array[3] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p1_array[counter3] == 51)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p1_array[counter3] == 321)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p1_array[counter3] == 322)
				{
					counter2 = checked(counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p1_array[4] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p1_array[4] = counter2;
			}
		}

		public void determine_production_p2()
		{
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p2_array[counter3] == 11)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				tempstring = Conversion.Str(plantations_p2_array[counter3]);
				if (buildings_p2_array[counter3] == 111)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p2_array[counter3] == 211)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p2_array[counter3] == 212)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p2_array[counter3] == 213)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p2_array[0] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p2_array[0] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p2_array[counter3] == 21)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p2_array[counter3] == 121)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p2_array[counter3] == 221)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p2_array[counter3] == 222)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p2_array[counter3] == 223)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p2_array[1] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p2_array[1] = counter2;
			}
			counter1 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p2_array[counter3] == 31)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (counter3 <= 11);
			goods_ability_p2_array[2] = counter1;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p2_array[counter3] == 41)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p2_array[counter3] == 311)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p2_array[counter3] == 312)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p2_array[counter3] == 313)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p2_array[3] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p2_array[3] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p2_array[counter3] == 51)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p2_array[counter3] == 321)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p2_array[counter3] == 322)
				{
					counter2 = checked(counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p2_array[4] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p2_array[4] = counter2;
			}
			counter1 = 0;
			do
			{
				if (goods_ability_p2_array[counter1] > 0)
				{
					goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void determine_production_p3()
		{
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p3_array[counter3] == 11)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				tempstring = Conversion.Str(plantations_p3_array[counter3]);
				if (buildings_p3_array[counter3] == 111)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p3_array[counter3] == 211)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p3_array[counter3] == 212)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p3_array[counter3] == 213)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p3_array[0] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p3_array[0] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p3_array[counter3] == 21)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p3_array[counter3] == 121)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p3_array[counter3] == 221)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p3_array[counter3] == 222)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p3_array[counter3] == 223)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p3_array[1] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p3_array[1] = counter2;
			}
			counter1 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p3_array[counter3] == 31)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (counter3 <= 11);
			goods_ability_p3_array[2] = counter1;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p3_array[counter3] == 41)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p3_array[counter3] == 311)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p3_array[counter3] == 312)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p3_array[counter3] == 313)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p3_array[3] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p3_array[3] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p3_array[counter3] == 51)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p3_array[counter3] == 321)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p3_array[counter3] == 322)
				{
					counter2 = checked(counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p3_array[4] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p3_array[4] = counter2;
			}
			counter1 = 0;
			do
			{
				if (goods_ability_p3_array[counter1] > 0)
				{
					goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void determine_production_p4()
		{
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p4_array[counter3] == 11)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				tempstring = Conversion.Str(plantations_p4_array[counter3]);
				if (buildings_p4_array[counter3] == 111)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p4_array[counter3] == 211)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p4_array[counter3] == 212)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p4_array[counter3] == 213)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p4_array[0] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p4_array[0] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p4_array[counter3] == 21)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p4_array[counter3] == 121)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p4_array[counter3] == 221)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p4_array[counter3] == 222)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p4_array[counter3] == 223)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p4_array[1] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p4_array[1] = counter2;
			}
			counter1 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p4_array[counter3] == 31)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (counter3 <= 11);
			goods_ability_p4_array[2] = counter1;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p4_array[counter3] == 41)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p4_array[counter3] == 311)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p4_array[counter3] == 312)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p4_array[counter3] == 313)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p4_array[3] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p4_array[3] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p4_array[counter3] == 51)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p4_array[counter3] == 321)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p4_array[counter3] == 322)
				{
					counter2 = checked(counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p4_array[4] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p4_array[4] = counter2;
			}
			counter1 = 0;
			do
			{
				if (goods_ability_p4_array[counter1] > 0)
				{
					goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void determine_production_p5()
		{
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p5_array[counter3] == 11)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form1 = this;
				form1.counter3 = checked(form1.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				tempstring = Conversion.Str(plantations_p5_array[counter3]);
				if (buildings_p5_array[counter3] == 111)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p5_array[counter3] == 211)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p5_array[counter3] == 212)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p5_array[counter3] == 213)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form11 = this;
				form11.counter3 = checked(form11.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p5_array[0] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p5_array[0] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p5_array[counter3] == 21)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form12 = this;
				form12.counter3 = checked(form12.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p5_array[counter3] == 121)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p5_array[counter3] == 221)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p5_array[counter3] == 222)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p5_array[counter3] == 223)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form13 = this;
				form13.counter3 = checked(form13.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p5_array[1] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p5_array[1] = counter2;
			}
			counter1 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p5_array[counter3] == 31)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form14 = this;
				form14.counter3 = checked(form14.counter3 + 1);
			}
			while (counter3 <= 11);
			goods_ability_p5_array[2] = counter1;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p5_array[counter3] == 41)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form15 = this;
				form15.counter3 = checked(form15.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p5_array[counter3] == 311)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p5_array[counter3] == 312)
				{
					counter2 = checked(counter2 + 2);
				}
				if (buildings_p5_array[counter3] == 313)
				{
					counter2 = checked(counter2 + 3);
				}
				Form1 form16 = this;
				form16.counter3 = checked(form16.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p5_array[3] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p5_array[3] = counter2;
			}
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			do
			{
				if (plantations_p5_array[counter3] == 51)
				{
					counter1 = checked(counter1 + 1);
				}
				Form1 form17 = this;
				form17.counter3 = checked(form17.counter3 + 1);
			}
			while (counter3 <= 11);
			counter3 = 0;
			do
			{
				if (buildings_p5_array[counter3] == 321)
				{
					counter2 = checked(counter2 + 1);
				}
				if (buildings_p5_array[counter3] == 322)
				{
					counter2 = checked(counter2 + 2);
				}
				Form1 form18 = this;
				form18.counter3 = checked(form18.counter3 + 1);
			}
			while (counter3 <= 11);
			if (counter1 <= counter2)
			{
				goods_ability_p5_array[4] = counter1;
			}
			if (counter1 > counter2)
			{
				goods_ability_p5_array[4] = counter2;
			}
			counter1 = 0;
			do
			{
				if (goods_ability_p5_array[counter1] > 0)
				{
					goods_to_produce = true;
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void determine_setup_parameters()
		{
			turn_number = 0;
			number_of_players = setup_form.setup_num_players;
			seat_num = setup_form.setup_seat;
			p1_name = setup_form.name_human.Text;
			p2_name = setup_form.name_ai1.Text;
			p3_name = setup_form.name_ai2.Text;
			p4_name = setup_form.name_ai3.Text;
			p5_name = setup_form.name_ai4.Text;
			determine_player_order();
			if (number_of_players == 3)
			{
				vp_bank_num = 75;
				colonists_bank_num = 55;
				colonists_ship_num = 3;
				gold_p1 = 2;
				gold_p2 = 2;
				gold_p3 = 2;
				shipa_array[0] = 4;
				shipb_array[0] = 5;
				shipc_array[0] = 6;
				role_prospector1_pic.Visible = false;
				role_prospector2_pic.Visible = false;
			}
			if (number_of_players == 4)
			{
				vp_bank_num = 100;
				colonists_bank_num = 75;
				colonists_ship_num = 4;
				gold_p1 = 3;
				gold_p2 = 3;
				gold_p3 = 3;
				gold_p4 = 3;
				shipa_array[0] = 5;
				shipb_array[0] = 6;
				shipc_array[0] = 7;
				role_prospector1_pic.Visible = true;
				role_prospector2_pic.Visible = false;
			}
			if (number_of_players == 5)
			{
				vp_bank_num = 122;
				colonists_bank_num = 95;
				colonists_ship_num = 5;
				gold_p1 = 4;
				gold_p2 = 4;
				gold_p3 = 4;
				gold_p4 = 4;
				gold_p5 = 4;
				shipa_array[0] = 6;
				shipb_array[0] = 7;
				shipc_array[0] = 8;
				role_prospector1_pic.Visible = true;
				role_prospector2_pic.Visible = true;
			}
			determine_ship_orientation();
			buildings_form.dialog_box_OK_timerb = dialog_box_OK_timer;
		}

		public void determine_ship_orientation()
		{
			Point point;
			if (number_of_players == 3)
			{
				shipa_pic.Image = Image.FromFile("pic\\ship4.bmp");
				shipb_pic.Image = Image.FromFile("pic\\ship5.bmp");
				shipc_pic.Image = Image.FromFile("pic\\ship6.bmp");
				PictureBox shipaSlot1 = shipa_slot1;
				point = new Point(512, 116);
				shipaSlot1.Location = point;
				PictureBox shipaSlot2 = shipa_slot2;
				point = new Point(544, 116);
				shipaSlot2.Location = point;
				PictureBox shipaSlot3 = shipa_slot3;
				point = new Point(512, 148);
				shipaSlot3.Location = point;
				PictureBox shipaSlot4 = shipa_slot4;
				point = new Point(544, 148);
				shipaSlot4.Location = point;
				PictureBox shipbSlot1 = shipb_slot1;
				point = new Point(600, 104);
				shipbSlot1.Location = point;
				PictureBox shipbSlot2 = shipb_slot2;
				point = new Point(630, 104);
				shipbSlot2.Location = point;
				PictureBox shipbSlot3 = shipb_slot3;
				point = new Point(600, 134);
				shipbSlot3.Location = point;
				PictureBox shipbSlot4 = shipb_slot4;
				point = new Point(630, 134);
				shipbSlot4.Location = point;
				PictureBox shipbSlot5 = shipb_slot5;
				point = new Point(614, 166);
				shipbSlot5.Location = point;
				PictureBox shipcSlot1 = shipc_slot1;
				point = new Point(692, 106);
				shipcSlot1.Location = point;
				PictureBox shipcSlot2 = shipc_slot2;
				point = new Point(724, 106);
				shipcSlot2.Location = point;
				PictureBox shipcSlot3 = shipc_slot3;
				point = new Point(692, 138);
				shipcSlot3.Location = point;
				PictureBox shipcSlot4 = shipc_slot4;
				point = new Point(724, 138);
				shipcSlot4.Location = point;
				PictureBox shipcSlot5 = shipc_slot5;
				point = new Point(692, 168);
				shipcSlot5.Location = point;
				PictureBox shipcSlot6 = shipc_slot6;
				point = new Point(724, 168);
				shipcSlot6.Location = point;
			}
			if (number_of_players == 4)
			{
				shipa_pic.Image = Image.FromFile("pic\\ship5.bmp");
				shipb_pic.Image = Image.FromFile("pic\\ship6.bmp");
				shipc_pic.Image = Image.FromFile("pic\\ship7.bmp");
				PictureBox pictureBox = shipa_slot1;
				point = new Point(512, 100);
				pictureBox.Location = point;
				PictureBox shipaSlot21 = shipa_slot2;
				point = new Point(544, 100);
				shipaSlot21.Location = point;
				PictureBox shipaSlot31 = shipa_slot3;
				point = new Point(512, 132);
				shipaSlot31.Location = point;
				PictureBox shipaSlot41 = shipa_slot4;
				point = new Point(544, 132);
				shipaSlot41.Location = point;
				PictureBox shipaSlot5 = shipa_slot5;
				point = new Point(528, 164);
				shipaSlot5.Location = point;
				PictureBox shipbSlot11 = shipb_slot1;
				point = new Point(600, 108);
				shipbSlot11.Location = point;
				PictureBox shipbSlot21 = shipb_slot2;
				point = new Point(630, 108);
				shipbSlot21.Location = point;
				PictureBox shipbSlot31 = shipb_slot3;
				point = new Point(600, 138);
				shipbSlot31.Location = point;
				PictureBox shipbSlot41 = shipb_slot4;
				point = new Point(630, 138);
				shipbSlot41.Location = point;
				PictureBox shipbSlot51 = shipb_slot5;
				point = new Point(600, 168);
				shipbSlot51.Location = point;
				PictureBox shipbSlot6 = shipb_slot6;
				point = new Point(630, 168);
				shipbSlot6.Location = point;
				PictureBox shipcSlot11 = shipc_slot1;
				point = new Point(692, 94);
				shipcSlot11.Location = point;
				PictureBox shipcSlot21 = shipc_slot2;
				point = new Point(724, 94);
				shipcSlot21.Location = point;
				PictureBox shipcSlot31 = shipc_slot3;
				point = new Point(692, 126);
				shipcSlot31.Location = point;
				PictureBox shipcSlot41 = shipc_slot4;
				point = new Point(724, 126);
				shipcSlot41.Location = point;
				PictureBox shipcSlot51 = shipc_slot5;
				point = new Point(692, 156);
				shipcSlot51.Location = point;
				PictureBox shipcSlot61 = shipc_slot6;
				point = new Point(724, 156);
				shipcSlot61.Location = point;
				PictureBox shipcSlot7 = shipc_slot7;
				point = new Point(708, 188);
				shipcSlot7.Location = point;
			}
			if (number_of_players == 5)
			{
				shipa_pic.Image = Image.FromFile("pic\\ship6.bmp");
				shipb_pic.Image = Image.FromFile("pic\\ship7.bmp");
				shipc_pic.Image = Image.FromFile("pic\\ship8.bmp");
				PictureBox shipaSlot11 = shipa_slot1;
				point = new Point(512, 106);
				shipaSlot11.Location = point;
				PictureBox pictureBox1 = shipa_slot2;
				point = new Point(544, 106);
				pictureBox1.Location = point;
				PictureBox shipaSlot32 = shipa_slot3;
				point = new Point(512, 138);
				shipaSlot32.Location = point;
				PictureBox shipaSlot42 = shipa_slot4;
				point = new Point(544, 138);
				shipaSlot42.Location = point;
				PictureBox shipaSlot51 = shipa_slot5;
				point = new Point(512, 170);
				shipaSlot51.Location = point;
				PictureBox shipaSlot6 = shipa_slot6;
				point = new Point(544, 170);
				shipaSlot6.Location = point;
				PictureBox shipbSlot12 = shipb_slot1;
				point = new Point(600, 92);
				shipbSlot12.Location = point;
				PictureBox shipbSlot22 = shipb_slot2;
				point = new Point(630, 92);
				shipbSlot22.Location = point;
				PictureBox shipbSlot32 = shipb_slot3;
				point = new Point(600, 122);
				shipbSlot32.Location = point;
				PictureBox shipbSlot42 = shipb_slot4;
				point = new Point(630, 122);
				shipbSlot42.Location = point;
				PictureBox shipbSlot52 = shipb_slot5;
				point = new Point(600, 152);
				shipbSlot52.Location = point;
				PictureBox shipbSlot61 = shipb_slot6;
				point = new Point(630, 152);
				shipbSlot61.Location = point;
				PictureBox shipbSlot7 = shipb_slot7;
				point = new Point(616, 184);
				shipbSlot7.Location = point;
				PictureBox shipcSlot12 = shipc_slot1;
				point = new Point(692, 94);
				shipcSlot12.Location = point;
				PictureBox shipcSlot22 = shipc_slot2;
				point = new Point(724, 94);
				shipcSlot22.Location = point;
				PictureBox shipcSlot32 = shipc_slot3;
				point = new Point(692, 126);
				shipcSlot32.Location = point;
				PictureBox shipcSlot42 = shipc_slot4;
				point = new Point(724, 126);
				shipcSlot42.Location = point;
				PictureBox shipcSlot52 = shipc_slot5;
				point = new Point(692, 156);
				shipcSlot52.Location = point;
				PictureBox shipcSlot62 = shipc_slot6;
				point = new Point(724, 156);
				shipcSlot62.Location = point;
				PictureBox shipcSlot71 = shipc_slot7;
				point = new Point(692, 186);
				shipcSlot71.Location = point;
				PictureBox shipcSlot8 = shipc_slot8;
				point = new Point(724, 186);
				shipcSlot8.Location = point;
			}
		}

		public void determine_where_to_build_large_p2()
		{
			large_build_spot = 99;
			counter1 = 0;
			finished = false;
			while (!(finished | counter1 == 12))
			{
				if (buildings_p2_array[counter1] != 0)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					if (counter1 == 0)
					{
						large_build_spot = 12;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[13] = 999;
						finished = true;
					}
					if (counter1 == 1)
					{
						large_build_spot = 13;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[12] = 999;
						finished = true;
					}
					if (counter1 == 3)
					{
						large_build_spot = 14;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[15] = 999;
						finished = true;
					}
					if (counter1 == 4)
					{
						large_build_spot = 15;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[14] = 999;
						finished = true;
					}
					if (counter1 == 6)
					{
						large_build_spot = 16;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[17] = 999;
						finished = true;
					}
					if (counter1 == 7)
					{
						large_build_spot = 17;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[16] = 999;
						finished = true;
					}
					if (counter1 == 9)
					{
						large_build_spot = 18;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[19] = 999;
						finished = true;
					}
					if (counter1 == 10)
					{
						large_build_spot = 19;
						buildings_p2_array[counter1] = 999;
						buildings_p2_array[checked(counter1 + 1)] = 999;
						buildings_p2_array[18] = 999;
						finished = true;
					}
					counter1 = checked(counter1 + 1);
				}
			}
		}

		public void determine_where_to_build_large_p3()
		{
			large_build_spot = 99;
			counter1 = 0;
			finished = false;
			while (!(finished | counter1 == 12))
			{
				if (buildings_p3_array[counter1] != 0)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					if (counter1 == 0)
					{
						large_build_spot = 12;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[13] = 999;
						finished = true;
					}
					if (counter1 == 1)
					{
						large_build_spot = 13;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[12] = 999;
						finished = true;
					}
					if (counter1 == 3)
					{
						large_build_spot = 14;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[15] = 999;
						finished = true;
					}
					if (counter1 == 4)
					{
						large_build_spot = 15;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[14] = 999;
						finished = true;
					}
					if (counter1 == 6)
					{
						large_build_spot = 16;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[17] = 999;
						finished = true;
					}
					if (counter1 == 7)
					{
						large_build_spot = 17;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[16] = 999;
						finished = true;
					}
					if (counter1 == 9)
					{
						large_build_spot = 18;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[19] = 999;
						finished = true;
					}
					if (counter1 == 10)
					{
						large_build_spot = 19;
						buildings_p3_array[counter1] = 999;
						buildings_p3_array[checked(counter1 + 1)] = 999;
						buildings_p3_array[18] = 999;
						finished = true;
					}
					counter1 = checked(counter1 + 1);
				}
			}
		}

		public void determine_where_to_build_large_p4()
		{
			large_build_spot = 99;
			counter1 = 0;
			finished = false;
			while (!(finished | counter1 == 12))
			{
				if (buildings_p4_array[counter1] != 0)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					if (counter1 == 0)
					{
						large_build_spot = 12;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[13] = 999;
						finished = true;
					}
					if (counter1 == 1)
					{
						large_build_spot = 13;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[12] = 999;
						finished = true;
					}
					if (counter1 == 3)
					{
						large_build_spot = 14;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[15] = 999;
						finished = true;
					}
					if (counter1 == 4)
					{
						large_build_spot = 15;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[14] = 999;
						finished = true;
					}
					if (counter1 == 6)
					{
						large_build_spot = 16;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[17] = 999;
						finished = true;
					}
					if (counter1 == 7)
					{
						large_build_spot = 17;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[16] = 999;
						finished = true;
					}
					if (counter1 == 9)
					{
						large_build_spot = 18;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[19] = 999;
						finished = true;
					}
					if (counter1 == 10)
					{
						large_build_spot = 19;
						buildings_p4_array[counter1] = 999;
						buildings_p4_array[checked(counter1 + 1)] = 999;
						buildings_p4_array[18] = 999;
						finished = true;
					}
					counter1 = checked(counter1 + 1);
				}
			}
		}

		public void determine_where_to_build_large_p5()
		{
			large_build_spot = 99;
			counter1 = 0;
			finished = false;
			while (!(finished | counter1 == 12))
			{
				if (buildings_p5_array[counter1] != 0)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					if (counter1 == 0)
					{
						large_build_spot = 12;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[13] = 999;
						finished = true;
					}
					if (counter1 == 1)
					{
						large_build_spot = 13;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[12] = 999;
						finished = true;
					}
					if (counter1 == 3)
					{
						large_build_spot = 14;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[15] = 999;
						finished = true;
					}
					if (counter1 == 4)
					{
						large_build_spot = 15;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[14] = 999;
						finished = true;
					}
					if (counter1 == 6)
					{
						large_build_spot = 16;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[17] = 999;
						finished = true;
					}
					if (counter1 == 7)
					{
						large_build_spot = 17;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[16] = 999;
						finished = true;
					}
					if (counter1 == 9)
					{
						large_build_spot = 18;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[19] = 999;
						finished = true;
					}
					if (counter1 == 10)
					{
						large_build_spot = 19;
						buildings_p5_array[counter1] = 999;
						buildings_p5_array[checked(counter1 + 1)] = 999;
						buildings_p5_array[18] = 999;
						finished = true;
					}
					counter1 = checked(counter1 + 1);
				}
			}
		}

		protected override void Dispose(bool disposing)
		{
			if (disposing && components != null)
			{
				components.Dispose();
			}
			base.Dispose(disposing);
		}

		public void distribute_new_colonists()
		{
			counter1 = 0;
			counter1 = 0;
			do
			{
				idle_colonists_this_turn_array[counter1] = 0;
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 5);
			mayor1_form.p1_name_label.Text =p1_name;
			mayor1_form.p2_name_label.Text =p2_name;
			mayor1_form.p3_name_label.Text =p3_name;
			mayor1_form.p4_name_label.Text =p4_name;
			mayor1_form.p5_name_label.Text =p5_name;
			mayor1_form.p1_mayor_label.Visible = false;
			mayor1_form.p2_mayor_label.Visible = false;
			mayor1_form.p3_mayor_label.Visible = false;
			mayor1_form.p4_mayor_label.Visible = false;
			mayor1_form.p5_mayor_label.Visible = false;
			if (current_role_chooser == 1)
			{
				mayor1_form.p1_mayor_label.Visible = true;
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					idle_colonists_this_turn_array[1] = checked(idle_colonists_this_turn_array[1] + 1);
					idle_colonists_array[1] = checked(idle_colonists_array[1] + 1);
					colonists_array[1] = checked(colonists_array[1] + 1);
				}
			}
			if (current_role_chooser == 2)
			{
				mayor1_form.p2_mayor_label.Visible = true;
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					idle_colonists_this_turn_array[2] = checked(idle_colonists_this_turn_array[2] + 1);
					idle_colonists_array[2] = checked(idle_colonists_array[2] + 1);
					colonists_array[2] = checked(colonists_array[2] + 1);
				}
			}
			if (current_role_chooser == 3)
			{
				mayor1_form.p3_mayor_label.Visible = true;
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					idle_colonists_this_turn_array[3] = checked(idle_colonists_this_turn_array[3] + 1);
					idle_colonists_array[3] = checked(idle_colonists_array[3] + 1);
					colonists_array[3] = checked(colonists_array[3] + 1);
				}
			}
			if (current_role_chooser == 4)
			{
				mayor1_form.p4_mayor_label.Visible = true;
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					idle_colonists_this_turn_array[4] = checked(idle_colonists_this_turn_array[4] + 1);
					idle_colonists_array[4] = checked(idle_colonists_array[4] + 1);
					colonists_array[4] = checked(colonists_array[4] + 1);
				}
			}
			if (current_role_chooser == 5)
			{
				mayor1_form.p5_mayor_label.Visible = true;
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					idle_colonists_this_turn_array[5] = checked(idle_colonists_this_turn_array[5] + 1);
					idle_colonists_array[5] = checked(idle_colonists_array[5] + 1);
					colonists_array[5] = checked(colonists_array[5] + 1);
				}
			}
			counter1 = current_player;
			while (colonists_ship_num != 0)
			{
				idle_colonists_this_turn_array[counter1] = checked(idle_colonists_this_turn_array[counter1] + 1);
				idle_colonists_array[counter1] = checked(idle_colonists_array[counter1] + 1);
				colonists_array[counter1] = checked(colonists_array[counter1] + 1);
				colonists_ship_num = checked(colonists_ship_num - 1);
				if (player_order_array[checked(counter1 + 1)] != 9)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					counter1 = 1;
				}
			}
			mayor1_form.p1_total_label.Text =StringType.FromInteger(idle_colonists_this_turn_array[1]);
			mayor1_form.p2_total_label.Text =StringType.FromInteger(idle_colonists_this_turn_array[2]);
			mayor1_form.p3_total_label.Text =StringType.FromInteger(idle_colonists_this_turn_array[3]);
			mayor1_form.p4_total_label.Text =StringType.FromInteger(idle_colonists_this_turn_array[4]);
			mayor1_form.p5_total_label.Text =StringType.FromInteger(idle_colonists_this_turn_array[5]);
			if (number_of_players == 3)
			{
				mayor1_form.p4_name_label.Visible = false;
				mayor1_form.p4_total_label.Visible = false;
				mayor1_form.p5_name_label.Visible = false;
				mayor1_form.p5_total_label.Visible = false;
			}
			if (number_of_players == 4)
			{
				mayor1_form.p5_name_label.Visible = false;
				mayor1_form.p5_total_label.Visible = false;
			}
			if(number_of_players != 5)
				update_all_labels();
			mayor1_form.ShowDialog();
		}

		private void done_choosing_craftsman_button_Click(object sender, EventArgs e)
		{
			if (p1_chose_extra_good)
			{
				done_choosing_craftsman_button.Text = "Done Choosing";
				done_choosing_craftsman_button.Visible = true;
				done_choosing_craftsman_button.Enabled = true;
				infobox_role("You are now done choosing your extra production good.", "role_craftsman");
				next_turn_button.Text = "End Turn";
				next_turn_button.Visible = true;
				next_turn_button.Enabled = true;
			}
		}

		private void done_trading_button_Click(object sender, EventArgs e)
		{
			determine_goods_to_trade();
			if (!(goods_to_trade & !p1_traded))
			{
				done_trading_button.Enabled=false;
				done_trading_button.Visible = false;
				next_turn_routine();
				next_turn_button.Text = "End Trader Phase";
				next_turn_button.Visible = true;
				next_turn_button.Enabled = true;
			}
			else
			{
				confirmbox_role("Are you sure you want to end your turn without trading?", "role_trader");
				if (confirmed)
				{
					done_trading_button.Enabled=false;
					done_trading_button.Visible = false;
					next_turn_routine();
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
				}
			}
		}

		public void draw_buildings_available_labels()
		{
			if (buildings_available_array[0] <= 0)
			{
				buildings_form.avail_buildings_slot0.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot0.Visible = true;
			}
			if (buildings_available_array[1] <= 0)
			{
				buildings_form.avail_buildings_slot1.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot1.Visible = true;
			}
			if (buildings_available_array[2] <= 0)
			{
				buildings_form.avail_buildings_slot2.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot2.Visible = true;
			}
			if (buildings_available_array[3] <= 0)
			{
				buildings_form.avail_buildings_slot3.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot3.Visible = true;
			}
			if (buildings_available_array[4] <= 0)
			{
				buildings_form.avail_buildings_slot4.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot4.Visible = true;
			}
			if (buildings_available_array[5] <= 0)
			{
				buildings_form.avail_buildings_slot5.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot5.Visible = true;
			}
			if (buildings_available_array[6] <= 0)
			{
				buildings_form.avail_buildings_slot6.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot6.Visible = true;
			}
			if (buildings_available_array[7] <= 0)
			{
				buildings_form.avail_buildings_slot7.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot7.Visible = true;
			}
			if (buildings_available_array[8] <= 0)
			{
				buildings_form.avail_buildings_slot8.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot8.Visible = true;
			}
			if (buildings_available_array[9] <= 0)
			{
				buildings_form.avail_buildings_slot9.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot9.Visible = true;
			}
			if (buildings_available_array[10] <= 0)
			{
				buildings_form.avail_buildings_slot10.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot10.Visible = true;
			}
			if (buildings_available_array[11] <= 0)
			{
				buildings_form.avail_buildings_slot11.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot11.Visible = true;
			}
			if (buildings_available_array[12] <= 0)
			{
				buildings_form.avail_buildings_slot12.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot12.Visible = true;
			}
			if (buildings_available_array[13] <= 0)
			{
				buildings_form.avail_buildings_slot13.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot13.Visible = true;
			}
			if (buildings_available_array[14] <= 0)
			{
				buildings_form.avail_buildings_slot14.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot14.Visible = true;
			}
			if (buildings_available_array[15] <= 0)
			{
				buildings_form.avail_buildings_slot15.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot15.Visible = true;
			}
			if (buildings_available_array[16] <= 0)
			{
				buildings_form.avail_buildings_slot16.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot16.Visible = true;
			}
			if (buildings_available_array[17] <= 0)
			{
				buildings_form.avail_buildings_slot17.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot17.Visible = true;
			}
			if (buildings_available_array[18] <= 0)
			{
				buildings_form.avail_buildings_slot18.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot18.Visible = true;
			}
			if (buildings_available_array[19] <= 0)
			{
				buildings_form.avail_buildings_slot19.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot19.Visible = true;
			}
			if (buildings_available_array[20] <= 0)
			{
				buildings_form.avail_buildings_slot20.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot20.Visible = true;
			}
			if (buildings_available_array[21] <= 0)
			{
				buildings_form.avail_buildings_slot21.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot21.Visible = true;
			}
			if (buildings_available_array[22] <= 0)
			{
				buildings_form.avail_buildings_slot22.Visible = false;
			}
			else
			{
				buildings_form.avail_buildings_slot22.Visible = true;
			}
			verification_alerts();
		}

		public void draw_plantation_tiles()
		{
			finished = false;
			counter1 = 0;
			while (!finished)
			{
				if (plantations_discarded_array[counter1] != 0)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					discard_size = counter1;
					finished = true;
				}
			}
			finished = false;
			counter1 = discard_size;
			counter2 = 0;
			while (!finished)
			{
				if (plantation_available_array[counter2] == 0)
				{
					counter2 = checked(counter2 + 1);
				}
				else
				{
					plantations_discarded_array[counter1] = plantation_available_array[counter2];
					plantation_available_array[counter2] = 0;
					counter1 = checked(counter1 + 1);
					counter2 = checked(counter2 + 1);
				}
				if (counter2 != 6)
				{
					continue;
				}
				finished = true;
			}
			finished = false;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			while (counter2 != checked(number_of_players + 1))
			{
				if (counter1 >= 50)
				{
					if (plantations_discarded_array[counter3] == 0)
					{
						counter3 = checked(counter3 + 1);
					}
					else
					{
						plantation_available_array[counter2] = plantations_discarded_array[counter3];
						plantations_discarded_array[counter3] = 0;
						counter3 = checked(counter3 + 1);
						counter2 = checked(counter2 + 1);
					}
				}
				if (plantations_tilebag_array[counter1] == 0)
				{
					counter1 = checked(counter1 + 1);
					if (counter1 < 40)
					{
						continue;
					}
					Interaction.MsgBox("The tilebag is nearing emptiness...", 0, null);
					tempinteger = tempinteger;
				}
				else
				{
					plantation_available_array[counter2] = plantations_tilebag_array[counter1];
					plantations_tilebag_array[counter1] = 0;
					counter1 = checked(counter1 + 1);
					counter2 = checked(counter2 + 1);
				}
			}
			update_all_labels();
		}

		public void draw_random_plantation_tile()
		{
			finished = false;
			counter1 = 0;
			counter2 = 0;
			counter3 = 0;
			while (counter2 != 1)
			{
				if (counter1 >= 50)
				{
					if (plantations_discarded_array[counter3] == 0)
					{
						counter3 = checked(counter3 + 1);
					}
					else
					{
						plantation_available_array[counter2] = plantations_discarded_array[counter3];
						plantations_discarded_array[counter3] = 0;
						counter3 = checked(counter3 + 1);
						counter2 = checked(counter2 + 1);
					}
				}
				if (plantations_tilebag_array[counter1] == 0)
				{
					counter1 = checked(counter1 + 1);
				}
				else
				{
					if (current_player == 1)
					{
						plantations_p1_array[num_plantations_p1] = plantations_tilebag_array[counter1];
						plantations_tilebag_array[counter1] = 0;
						num_plantations_p1 = checked(num_plantations_p1 + 1);
						infobox_plant("Your randomly drawn Plantation", plantations_p1_array[checked(num_plantations_p1 - 1)]);
					}
					if (current_player == 2)
					{
						plantations_p2_array[num_plantations_p2] = plantations_tilebag_array[counter1];
						plantations_tilebag_array[counter1] = 0;
						num_plantations_p2 = checked(num_plantations_p2 + 1);
						infobox_plant(string.Concat(p2_name, " randomly drew this Plantation"), plantations_p2_array[checked(num_plantations_p2 - 1)]);
					}
					if (current_player == 3)
					{
						plantations_p3_array[num_plantations_p3] = plantations_tilebag_array[counter1];
						plantations_tilebag_array[counter1] = 0;
						num_plantations_p3 = checked(num_plantations_p3 + 1);
						infobox_plant(string.Concat(p3_name, " randomly drew this Plantation"), plantations_p3_array[checked(num_plantations_p3 - 1)]);
					}
					if (current_player == 4)
					{
						plantations_p4_array[num_plantations_p4] = plantations_tilebag_array[counter1];
						plantations_tilebag_array[counter1] = 0;
						num_plantations_p4 = checked(num_plantations_p4 + 1);
						infobox_plant(string.Concat(p4_name, " randomly drew this Plantation"), plantations_p4_array[checked(num_plantations_p4 - 1)]);
					}
					if (current_player == 5)
					{
						plantations_p5_array[num_plantations_p5] = plantations_tilebag_array[counter1];
						plantations_tilebag_array[counter1] = 0;
						num_plantations_p5 = checked(num_plantations_p5 + 1);
						infobox_plant(string.Concat(p5_name, " randomly drew this Plantation"), plantations_p5_array[checked(num_plantations_p5 - 1)]);
					}
					counter1 = checked(counter1 + 1);
					counter2 = checked(counter2 + 1);
				}
			}
			update_all_labels();
		}

		public void end_builder_phase()
		{
		}

		public void end_captain_phase()
		{
			counter1 = 0;
			do
			{
				p1_storage_array[counter1] = 0;
				p2_storage_array[counter1] = 0;
				p3_storage_array[counter1] = 0;
				p4_storage_array[counter1] = 0;
				p5_storage_array[counter1] = 0;
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (number_of_players == 3)
			{
				p1_dumped = false;
				p2_dumped = false;
				p3_dumped = false;
				p4_dumped = true;
				p5_dumped = true;
			}
			if (number_of_players == 4)
			{
				p1_dumped = false;
				p2_dumped = false;
				p3_dumped = false;
				p4_dumped = false;
				p5_dumped = true;
			}
			if (number_of_players == 5)
			{
				p1_dumped = false;
				p2_dumped = false;
				p3_dumped = false;
				p4_dumped = false;
				p5_dumped = false;
			}
			finished = false;
			current_player_captain = current_player;
			while (!finished)
			{
				if (current_player_captain == 1)
				{
					process_p1_dumping();
				}
				if (current_player_captain == 2)
				{
					process_p2_dumping();
					p2_dumped = true;
				}
				if (current_player_captain == 3)
				{
					process_p3_dumping();
					p3_dumped = true;
				}
				if (current_player_captain == 4)
				{
					process_p4_dumping();
					p4_dumped = true;
				}
				if (current_player_captain == 5)
				{
					process_p5_dumping();
					p5_dumped = true;
				}
				if (p1_dumped & p2_dumped & p3_dumped & p4_dumped & p5_dumped)
				{
					finished = true;
				}
				else if (player_order_array[checked(current_player_captain + 1)] != 9)
				{
					current_player_captain = checked(current_player_captain + 1);
				}
				else
				{
					current_player_captain = 1;
				}
			}
			update_ship_cargo();
			if (shipa_array[3] == 0)
			{
				goods_bank_array[checked(shipa_array[2] - 1)] = checked(goods_bank_array[checked(shipa_array[2] - 1)] + shipa_array[0]);
				shipa_array[1] = 0;
			}
			if (shipb_array[3] == 0)
			{
				goods_bank_array[checked(shipb_array[2] - 1)] = checked(goods_bank_array[checked(shipb_array[2] - 1)] + shipb_array[0]);
				shipb_array[1] = 0;
			}
			if (shipc_array[3] == 0)
			{
				goods_bank_array[checked(shipc_array[2] - 1)] = checked(goods_bank_array[checked(shipc_array[2] - 1)] + shipc_array[0]);
				shipc_array[1] = 0;
			}
			update_all_labels();
		}

		public void end_craftsman_phase()
		{
			Text = "The Craftsman Phase is Over";
		}

		public void end_mayor_phase()
		{
			new_colonists_needed = 0;
			int numberOfPlayers = number_of_players;
			counter1 = 1;
			while (counter1 <= numberOfPlayers)
			{
				new_colonists_needed = checked(new_colonists_needed + empty_colonists_slots_array[counter1]);
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			if (new_colonists_needed < number_of_players)
			{
				new_colonists_needed = number_of_players;
			}
			if (new_colonists_needed <= colonists_bank_num)
			{
				colonists_ship_num = new_colonists_needed;
				colonists_bank_num = checked(colonists_bank_num - new_colonists_needed);
				update_all_labels();
				infobox_role(string.Concat("The colonist ship has been refilled with", Conversion.Str(new_colonists_needed), " colonists."), "colonist_ship");
			}
			else
			{
				game_end_triggered_colonists = true;
				colonists_ship_num = colonists_bank_num;
				colonists_bank_num = 0;
				update_all_labels();
				infobox_role("The colonist ship could not be fully refilled. The game end has been triggered.", "colonist_ship");
			}
		}

		public void end_pros1_phase()
		{
		}

		public void end_pros2_phase()
		{
		}

		public void end_settler_phase()
		{
			p1_chose_plantation = false;
			draw_plantation_tiles();
		}

		public void end_shipping_turn_p1()
		{
			p1_done_shipping = true;
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Enabled = true;
			auto_captain_button.Visible = true;
			formtitle("p1", "Captain Phase - Done Shipping this Round");
			update_all_labels();
		}

		public void end_trader_phase()
		{
			if (trading_house_array[3] != 0)
			{
				infobox_role("The Trading House is full. It will now be emptied.", "role_Trader");
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] != 0)
					{
						goods_bank_array[checked(trading_house_array[counter1] - 1)] = checked(goods_bank_array[checked(trading_house_array[counter1] - 1)] + 1);
						trading_house_array[counter1] = 0;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
			}
			update_all_labels();
		}

		public void figure_out_winner()
		{
			score_form.p1_name_label.Text =p1_name;
			score_form.p2_name_label.Text =p2_name;
			score_form.p3_name_label.Text =p3_name;
			score_form.p4_name_label.Text =p4_name;
			score_form.p5_name_label.Text =p5_name;
			p1_tiebreaker = gold_p1;
			counter1 = 0;
			do
			{
				p1_tiebreaker = checked(p1_tiebreaker + goods_p1_array[counter1]);
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			p2_tiebreaker = gold_p2;
			counter1 = 0;
			do
			{
				p2_tiebreaker = checked(p2_tiebreaker + goods_p2_array[counter1]);
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 4);
			p3_tiebreaker = gold_p3;
			counter1 = 0;
			do
			{
				p3_tiebreaker = checked(p3_tiebreaker + goods_p3_array[counter1]);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 4);
			p4_tiebreaker = gold_p4;
			counter1 = 0;
			do
			{
				p4_tiebreaker = checked(p4_tiebreaker + goods_p4_array[counter1]);
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 4);
			p5_tiebreaker = gold_p5;
			counter1 = 0;
			do
			{
				p5_tiebreaker = checked(p5_tiebreaker + goods_p5_array[counter1]);
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 4);
			p1_total_score = checked(vpchips_p1 + vp_buildings_p1);
			p2_total_score = checked(vpchips_p2 + vp_buildings_p2);
			p3_total_score = checked(vpchips_p3 + vp_buildings_p3);
			p4_total_score = checked(vpchips_p4 + vp_buildings_p4);
			p5_total_score = checked(vpchips_p5 + vp_buildings_p5);
			current_best_score = p1_total_score;
			current_best_tiebreaker = p1_tiebreaker;
			current_winner = "p1";
			GroupBox groupBox1 = score_form.GroupBox1;
			Point point = new Point(72, 8);
			groupBox1.Location = point;
			if (p2_total_score > current_best_score)
			{
				current_best_score = p2_total_score;
				current_best_tiebreaker = p2_tiebreaker;
				current_winner = "p2";
				GroupBox groupBox = score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox.Location = point;
				GroupBox groupBox2 = score_form.GroupBox2;
				point = new Point(216, 8);
				groupBox2.Location = point;
			}
			if (p2_total_score == current_best_score)
			{
				GroupBox groupBox21 = score_form.GroupBox2;
				point = new Point(216, 8);
				groupBox21.Location = point;
			}
			if (p3_total_score > current_best_score)
			{
				current_best_score = p3_total_score;
				current_best_tiebreaker = p3_tiebreaker;
				current_winner = "p3";
				GroupBox groupBox11 = score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox11.Location = point;
				GroupBox groupBox22 = score_form.GroupBox2;
				point = new Point(216, 104);
				groupBox22.Location = point;
				GroupBox groupBox3 = score_form.GroupBox3;
				point = new Point(360, 8);
				groupBox3.Location = point;
			}
			if (p3_total_score == current_best_score)
			{
				GroupBox groupBox31 = score_form.GroupBox3;
				point = new Point(360, 8);
				groupBox31.Location = point;
			}
			if (p4_total_score > current_best_score)
			{
				current_best_score = p4_total_score;
				current_best_tiebreaker = p4_tiebreaker;
				current_winner = "p4";
				GroupBox groupBox12 = score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox12.Location = point;
				GroupBox groupBox23 = score_form.GroupBox2;
				point = new Point(216, 104);
				groupBox23.Location = point;
				GroupBox groupBox32 = score_form.GroupBox3;
				point = new Point(360, 104);
				groupBox32.Location = point;
				GroupBox scoreForm = score_form.groupbox4;
				point = new Point(504, 8);
				scoreForm.Location = point;
			}
			if (p4_total_score == current_best_score)
			{
				GroupBox scoreForm1 = score_form.groupbox4;
				point = new Point(504, 8);
				scoreForm1.Location = point;
			}
			if (p5_total_score > current_best_score)
			{
				current_best_score = p5_total_score;
				current_best_tiebreaker = p5_tiebreaker;
				current_winner = "p5";
				GroupBox groupBox13 = score_form.GroupBox1;
				point = new Point(72, 104);
				groupBox13.Location = point;
				GroupBox groupBox24 = score_form.GroupBox2;
				point = new Point(216, 104);
				groupBox24.Location = point;
				GroupBox groupBox33 = score_form.GroupBox3;
				point = new Point(360, 104);
				groupBox33.Location = point;
				GroupBox scoreForm2 = score_form.groupbox4;
				point = new Point(504, 104);
				scoreForm2.Location = point;
				GroupBox scoreForm3 = score_form.groupbox5;
				point = new Point(648, 8);
				scoreForm3.Location = point;
			}
			if (p5_total_score == current_best_score)
			{
				GroupBox scoreForm4 = score_form.groupbox5;
				point = new Point(72, 8);
				scoreForm4.Location = point;
			}
		}

		public void formtitle(object whichplayer, object titletext)
		{
			if (ObjectType.ObjTst(whichplayer, "p1", false) == 0)
			{
				Text =StringType.FromObject(ObjectType.AddObj(string.Concat(p1_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p2", false) == 0)
			{
				Text =StringType.FromObject(ObjectType.AddObj(string.Concat(p2_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p3", false) == 0)
			{
				Text =StringType.FromObject(ObjectType.AddObj(string.Concat(p3_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p4", false) == 0)
			{
				Text =StringType.FromObject(ObjectType.AddObj(string.Concat(p4_name, "'s turn - "), titletext));
			}
			if (ObjectType.ObjTst(whichplayer, "p5", false) == 0)
			{
				Text =StringType.FromObject(ObjectType.AddObj(string.Concat(p5_name, "'s turn - "), titletext));
			}
		}

		public void game_over_routine()
		{
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			settler_round = false;
			mayor_round = false;
			builder_round = false;
			craftsman_round = false;
			trader_round = false;
			captain_round = false;
			prospector1_round = false;
			prospector2_round = false;
			update_all_labels();
			score_form.GroupBox1.Visible = true;
			score_form.GroupBox2.Visible = true;
			score_form.GroupBox3.Visible = true;
			score_form.groupbox4.Visible = true;
			score_form.groupbox5.Visible = true;
			score_form.Text = "GAME OVER";
			if (number_of_players == 3)
			{
				score_form.groupbox4.Visible = false;
				score_form.groupbox5.Visible = false;
			}
			if (number_of_players == 4)
			{
				score_form.groupbox4.Visible = true;
				score_form.groupbox5.Visible = false;
			}
			if (number_of_players == 5)
			{
				score_form.groupbox4.Visible = true;
				score_form.groupbox5.Visible = true;
			}
			figure_out_winner();
			score_form.p1_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p1 + vp_buildings_p1));
			score_form.p1_vp_chips_label.Text =StringType.FromInteger(vpchips_p1);
			score_form.p1_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p1);
			score_form.p1_tie_breaker_label.Text =StringType.FromInteger(p1_tiebreaker);
			sw.WriteLine("------------------------------------------------------");
			sw.WriteLine("--------------------GAME OVER-------------------------");
			sw.WriteLine("------------------------------------------------------");
			sw.WriteLine(string.Concat("Player1 VP Total: ", Conversion.Str(checked(vpchips_p1 + vp_buildings_p1))));
			sw.WriteLine(string.Concat("Player1 VP Chips: ", Conversion.Str(vpchips_p1)));
			sw.WriteLine(string.Concat("Player1 VP Buildings: ", Conversion.Str(vp_buildings_p1)));
			sw.WriteLine(string.Concat("Player1 Goods/Doubloons: ", Conversion.Str(p1_tiebreaker)));
			score_form.p2_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p2 + vp_buildings_p2));
			score_form.p2_vp_chips_label.Text =StringType.FromInteger(vpchips_p2);
			score_form.p2_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p2);
			score_form.p2_tie_breaker_label.Text =StringType.FromInteger(p2_tiebreaker);
			sw.WriteLine("------------------------------------------------------");
			sw.WriteLine(string.Concat("Player2 VP Total: ", Conversion.Str(checked(vpchips_p2 + vp_buildings_p2))));
			sw.WriteLine(string.Concat("Player2 VP Chips: ", Conversion.Str(vpchips_p2)));
			sw.WriteLine(string.Concat("Player2 VP Buildings: ", Conversion.Str(vp_buildings_p2)));
			sw.WriteLine(string.Concat("Player2 Goods/Doubloons: ", Conversion.Str(p2_tiebreaker)));
			score_form.p3_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p3 + vp_buildings_p3));
			score_form.p3_vp_chips_label.Text =StringType.FromInteger(vpchips_p3);
			score_form.p3_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p3);
			score_form.p3_tie_breaker_label.Text =StringType.FromInteger(p3_tiebreaker);
			sw.WriteLine("------------------------------------------------------");
			sw.WriteLine(string.Concat("Player3 VP Total: ", Conversion.Str(checked(vpchips_p3 + vp_buildings_p3))));
			sw.WriteLine(string.Concat("Player3 VP Chips: ", Conversion.Str(vpchips_p3)));
			sw.WriteLine(string.Concat("Player3 VP Buildings: ", Conversion.Str(vp_buildings_p3)));
			sw.WriteLine(string.Concat("Player3 Goods/Doubloons: ", Conversion.Str(p3_tiebreaker)));
			if (number_of_players >= 4)
			{
				score_form.p4_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p4 + vp_buildings_p4));
				score_form.p4_vp_chips_label.Text =StringType.FromInteger(vpchips_p4);
				score_form.p4_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p4);
				score_form.p4_tie_breaker_label.Text =StringType.FromInteger(p4_tiebreaker);
				sw.WriteLine("------------------------------------------------------");
				sw.WriteLine(string.Concat("Player4 VP Total: ", Conversion.Str(checked(vpchips_p4 + vp_buildings_p4))));
				sw.WriteLine(string.Concat("Player4 VP Chips: ", Conversion.Str(vpchips_p4)));
				sw.WriteLine(string.Concat("Player4 VP Buildings: ", Conversion.Str(vp_buildings_p4)));
				sw.WriteLine(string.Concat("Player4 Goods/Doubloons: ", Conversion.Str(p4_tiebreaker)));
			}
			if (number_of_players == 5)
			{
				score_form.p5_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p5 + vp_buildings_p5));
				score_form.p5_vp_chips_label.Text =StringType.FromInteger(vpchips_p5);
				score_form.p5_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p5);
				score_form.p5_tie_breaker_label.Text =StringType.FromInteger(p5_tiebreaker);
				sw.WriteLine("------------------------------------------------------");
				sw.WriteLine(string.Concat("Player5 VP Total: ", Conversion.Str(checked(vpchips_p5 + vp_buildings_p5))));
				sw.WriteLine(string.Concat("Player5 VP Chips: ", Conversion.Str(vpchips_p5)));
				sw.WriteLine(string.Concat("Player5 VP Buildings: ", Conversion.Str(vp_buildings_p5)));
				sw.WriteLine(string.Concat("Player5 Goods/Doubloons: ", Conversion.Str(p5_tiebreaker)));
			}
			sw.WriteLine("************************************************************");
			score_form.Show();
			sw.Close();
		}

		public void generate_random1(object low_rand, object high_rand)
		{
			rand_finished = false;
			while (!rand_finished)
			{
				VBMath.Randomize();
				random1 = IntegerType.FromObject(Conversion.Int(ObjectType.AddObj(ObjectType.MulObj(ObjectType.AddObj(high_rand, 1), VBMath.Rnd()), 0)));
				if (!BooleanType.FromObject(ObjectType.BitAndObj(ObjectType.ObjTst(random1, low_rand, false) >= 0, ObjectType.ObjTst(random1, high_rand, false) <= 0)))
				{
					continue;
				}
				rand_finished = true;
			}
		}

		public void give_goods_to_p1()
		{
			counter1 = 0;
			do
			{
				if (goods_bank_array[counter1] >= goods_ability_p1_array[counter1])
				{
					goods_this_turn_p1_array[counter1] = goods_ability_p1_array[counter1];
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] - goods_ability_p1_array[counter1]);
					goods_p1_array[counter1] = checked(goods_p1_array[counter1] + goods_ability_p1_array[counter1]);
				}
				else if (goods_bank_array[counter1] < goods_ability_p1_array[counter1])
				{
					goods_this_turn_p1_array[counter1] = goods_bank_array[counter1];
					goods_p1_array[counter1] = checked(goods_p1_array[counter1] + goods_bank_array[counter1]);
					goods_bank_array[counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void give_goods_to_p2()
		{
			counter1 = 0;
			do
			{
				if (goods_bank_array[counter1] >= goods_ability_p2_array[counter1])
				{
					goods_this_turn_p2_array[counter1] = goods_ability_p2_array[counter1];
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] - goods_ability_p2_array[counter1]);
					goods_p2_array[counter1] = checked(goods_p2_array[counter1] + goods_ability_p2_array[counter1]);
				}
				else if (goods_bank_array[counter1] < goods_ability_p2_array[counter1])
				{
					goods_this_turn_p2_array[counter1] = goods_bank_array[counter1];
					goods_p2_array[counter1] = checked(goods_p2_array[counter1] + goods_bank_array[counter1]);
					goods_bank_array[counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void give_goods_to_p3()
		{
			counter1 = 0;
			do
			{
				if (goods_bank_array[counter1] >= goods_ability_p3_array[counter1])
				{
					goods_this_turn_p3_array[counter1] = goods_ability_p3_array[counter1];
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] - goods_ability_p3_array[counter1]);
					goods_p3_array[counter1] = checked(goods_p3_array[counter1] + goods_ability_p3_array[counter1]);
				}
				else if (goods_bank_array[counter1] < goods_ability_p3_array[counter1])
				{
					goods_this_turn_p3_array[counter1] = goods_bank_array[counter1];
					goods_p3_array[counter1] = checked(goods_p3_array[counter1] + goods_bank_array[counter1]);
					goods_bank_array[counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void give_goods_to_p4()
		{
			counter1 = 0;
			do
			{
				if (goods_bank_array[counter1] >= goods_ability_p4_array[counter1])
				{
					goods_this_turn_p4_array[counter1] = goods_ability_p4_array[counter1];
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] - goods_ability_p4_array[counter1]);
					goods_p4_array[counter1] = checked(goods_p4_array[counter1] + goods_ability_p4_array[counter1]);
				}
				else if (goods_bank_array[counter1] < goods_ability_p4_array[counter1])
				{
					goods_this_turn_p4_array[counter1] = goods_bank_array[counter1];
					goods_p4_array[counter1] = checked(goods_p4_array[counter1] + goods_bank_array[counter1]);
					goods_bank_array[counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		public void give_goods_to_p5()
		{
			counter1 = 0;
			do
			{
				if (goods_bank_array[counter1] >= goods_ability_p5_array[counter1])
				{
					goods_this_turn_p5_array[counter1] = goods_ability_p5_array[counter1];
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] - goods_ability_p5_array[counter1]);
					goods_p5_array[counter1] = checked(goods_p5_array[counter1] + goods_ability_p5_array[counter1]);
				}
				else if (goods_bank_array[counter1] < goods_ability_p5_array[counter1])
				{
					goods_this_turn_p5_array[counter1] = goods_bank_array[counter1];
					goods_p5_array[counter1] = checked(goods_p5_array[counter1] + goods_bank_array[counter1]);
					goods_bank_array[counter1] = 0;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
		}

		private void governor_pic_Click(object sender, EventArgs e)
		{
			help_governor();
		}

		public void help_bonus()
		{
			infobox_nopic("This is the amount of doubloons you get for choosing this role on your turn. When all players have chosen a role, 1 doubloon is added to each role not chosen that round.");
		}

		public void help_colonists_bank()
		{
			infobox_role("This is the number of colonists remaining in the game. If the colonist ship cannot be filled after the Mayor Phase, then the game end is triggered.", "colonist_ship");
		}

		public void help_colonists_on_ship()
		{
			infobox_role("This is the number of colonsits currently on the ship. After each Mayor Phase, the ship is re-filled based on the number of empty colonist slots on buildings, but always at least as many players in the game.", "colonist_ship");
		}

		public void help_governor()
		{
			infobox_role("When you are the current Governor you get to choose your role first, from among all the roles.", "governor");
		}

		public void help_vp_remaining()
		{
			infobox_nopic("The number of Victory Point Chips remaining. When the last chip is handed out during the Captain Phase, the game end is triggered, but points will continue to be handed out until actual game end.");
		}

		public void infobox(object infotext1, object infotext2)
		{
			info_form.info_label1.Text =StringType.FromObject(infotext1);
			info_form.info_label2.Text =StringType.FromObject(infotext2);
			info_form.ShowDialog();
		}

		public void infobox_building1(object infotext1, object infopic1)
		{
			infobuilding1_form.infobuilding1_timer1.Interval = 1000;
			infobuilding1_form.infobuilding1_timer1.Enabled = true;
			infobuilding1_form.timer_label.Text =StringType.FromInteger(dialog_box_OK_timer);
			infobuilding1_form.Label1.Text =StringType.FromObject(infotext1);
			PictureBox pictureBox1 = infobuilding1_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			infobuilding1_form.PictureBox1.Visible = true;
			infobuilding1_form.ShowDialog();
		}

		public void infobox_building2(object infotext1, object infopic1)
		{
			infobuilding2_form.infobuilding2_timer1.Interval = 1000;
			infobuilding2_form.infobuilding2_timer1.Enabled = true;
			infobuilding2_form.timer_label.Text =StringType.FromInteger(dialog_box_OK_timer);
			infobuilding2_form.Label1.Text =StringType.FromObject(infotext1);
			PictureBox pictureBox1 = infobuilding2_form.PictureBox1;
			string[] strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[2]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[3]), ".bmp" };
			pictureBox1.Image = Image.FromFile(string.Concat(strArray));
			infobuilding2_form.PictureBox1.Visible = true;
			infobuilding2_form.ShowDialog();
		}

		public void infobox_nopic(object infotext1)
		{
			infonopic_form.infonopic_timer1.Interval = 1000;
			infonopic_form.infonopic_timer1.Enabled = true;
			infonopic_form.timer_label.Text =StringType.FromInteger(dialog_box_OK_timer);
			infonopic_form.Label1.Text = StringType.FromObject(infotext1);
			infonopic_form.ShowDialog();
		}

		public void infobox_plant(object infotext1, object infopic1)
		{
			infoplant_form.infoplant_timer1.Interval = 1000;
			infoplant_form.infoplant_timer1.Enabled = true;
			infoplant_form.timer_label.Text =StringType.FromInteger(dialog_box_OK_timer);
			infoplant_form.Label1.Text =StringType.FromObject(infotext1);
			infoplant_form.PictureBox1.Image = Image.FromFile(string.Concat("pic\\", StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[1]), StringType.FromChar(Conversion.Str(RuntimeHelpers.GetObjectValue(infopic1))[2]), ".bmp"));
			infoplant_form.PictureBox1.Visible = true;
			infoplant_form.ShowDialog();
		}

		public void infobox_role(object infotext1, object infopic1)
		{
			inforole_form.inforole_timer1.Interval = 1000;
			inforole_form.inforole_timer1.Enabled = true;
			inforole_form.timer_label.Text =StringType.FromInteger(dialog_box_OK_timer);
			inforole_form.Label1.Text =StringType.FromObject(infotext1);
			inforole_form.PictureBox1.Image = Image.FromFile(StringType.FromObject(ObjectType.AddObj(ObjectType.AddObj("pic\\", infopic1), ".bmp")));
			inforole_form.PictureBox1.Visible = true;
			inforole_form.ShowDialog();
		}

		[DebuggerStepThrough]
		private void InitializeComponent()
		{
			ResourceManager resourceManager = new ResourceManager(typeof(Form1));
			MainMenu1 = new MainMenu();
			menu_game = new MenuItem();
			menu_game_new = new MenuItem();
			MenuItem3 = new MenuItem();
			MenuItem2 = new MenuItem();
			menu_game_exit = new MenuItem();
			menu_view = new MenuItem();
			MenuItem4 = new MenuItem();
			MenuItem5 = new MenuItem();
			MenuItem6 = new MenuItem();
			MenuItem7 = new MenuItem();
			MenuItem8 = new MenuItem();
			menu_help = new MenuItem();
			menu_help_rules = new MenuItem();
			MenuItem1 = new MenuItem();
			menu_help_about = new MenuItem();
			player_board_pic = new PictureBox();
			Label5 = new Label();
			Label4 = new Label();
			vp_chips_label = new Label();
			vp_total_label = new Label();
			idle_colonists_label = new Label();
			num_coffee_label = new Label();
			num_tobacco_label = new Label();
			num_corn_label = new Label();
			num_sugar_label = new Label();
			num_indigo_label = new Label();
			num_coffee_bank_label = new Label();
			num_tobacco_bank_label = new Label();
			num_corn_bank_label = new Label();
			num_sugar_bank_label = new Label();
			num_indigo_bank_label = new Label();
			plantation_available_slot6 = new PictureBox();
			plantation_available_slot5 = new PictureBox();
			plantation_available_slot2 = new PictureBox();
			plantation_available_slot4 = new PictureBox();
			plantation_available_slot1 = new PictureBox();
			tradehouse_slot4 = new PictureBox();
			tradehouse_slot3 = new PictureBox();
			tradehouse_slot2 = new PictureBox();
			tradehouse_slot1 = new PictureBox();
			plantation_available_slot3 = new PictureBox();
			role_settler_pic = new PictureBox();
			role_mayor_pic = new PictureBox();
			role_builder_pic = new PictureBox();
			role_craftsman_pic = new PictureBox();
			role_trader_pic = new PictureBox();
			role_captain_pic = new PictureBox();
			role_prospector1_pic = new PictureBox();
			colonist_ship_pic = new PictureBox();
			num_colonist_ship_label = new Label();
			role_prospector2_pic = new PictureBox();
			num_colonist_bank_label = new Label();
			num_quarry_bank_label = new Label();
			Label1 = new Label();
			gold_label = new Label();
			settler_bonus_label = new Label();
			mayor_bonus_label = new Label();
			builder_bonus_label = new Label();
			craftsman_bonus_label = new Label();
			trader_bonus_label = new Label();
			captain_bonus_label = new Label();
			pros1_bonus_label = new Label();
			pros2_bonus_label = new Label();
			governor_pic = new PictureBox();
			plant_p1_slot1 = new PictureBox();
			plant_p1_slot2 = new PictureBox();
			plant_p1_slot3 = new PictureBox();
			plant_p1_slot6 = new PictureBox();
			plant_p1_slot5 = new PictureBox();
			plant_p1_slot4 = new PictureBox();
			plant_p1_slot9 = new PictureBox();
			plant_p1_slot8 = new PictureBox();
			plant_p1_slot7 = new PictureBox();
			plant_p1_slot11 = new PictureBox();
			plant_p1_slot10 = new PictureBox();
			plant_p1_slot12 = new PictureBox();
			Label3 = new Label();
			build_p1_slot1 = new PictureBox();
			build_p1_slot2 = new PictureBox();
			build_p1_slot3 = new PictureBox();
			build_p1_slot6 = new PictureBox();
			build_p1_slot5 = new PictureBox();
			build_p1_slot4 = new PictureBox();
			build_p1_slot9 = new PictureBox();
			build_p1_slot8 = new PictureBox();
			build_p1_slot7 = new PictureBox();
			build_p1_slot12 = new PictureBox();
			build_p1_slot11 = new PictureBox();
			build_p1_slot10 = new PictureBox();
			build_p1_slot19 = new PictureBox();
			build_p1_slot17 = new PictureBox();
			build_p1_slot15 = new PictureBox();
			build_p1_slot13 = new PictureBox();
			next_turn_button = new Button();
			build_p1_slot14 = new PictureBox();
			build_p1_slot16 = new PictureBox();
			build_p1_slot18 = new PictureBox();
			build_p1_slot20 = new PictureBox();
			Label6 = new Label();
			Label7 = new Label();
			Label8 = new Label();
			Label9 = new Label();
			shipc_slot8 = new PictureBox();
			shipc_slot7 = new PictureBox();
			shipc_slot6 = new PictureBox();
			shipc_slot5 = new PictureBox();
			shipc_slot4 = new PictureBox();
			shipc_slot3 = new PictureBox();
			shipc_slot2 = new PictureBox();
			shipc_slot1 = new PictureBox();
			shipb_slot7 = new PictureBox();
			shipb_slot6 = new PictureBox();
			shipb_slot5 = new PictureBox();
			shipb_slot4 = new PictureBox();
			shipb_slot3 = new PictureBox();
			shipb_slot2 = new PictureBox();
			shipb_slot1 = new PictureBox();
			shipa_slot6 = new PictureBox();
			shipa_slot5 = new PictureBox();
			shipa_slot4 = new PictureBox();
			shipa_slot3 = new PictureBox();
			shipa_slot2 = new PictureBox();
			shipa_slot1 = new PictureBox();
			shipc_pic = new PictureBox();
			shipb_pic = new PictureBox();
			shipa_pic = new PictureBox();
			Label10 = new Label();
			Button1 = new Button();
			wharf_pic = new PictureBox();
			vpremain_label = new Label();
			Label12 = new Label();
			done_trading_button = new Button();
			Button2 = new Button();
			done_choosing_craftsman_button = new Button();
			start_game_button = new Button();
			PictureBox1 = new PictureBox();
			Label2 = new Label();
			Button3 = new Button();
			nondis_label = new Label();
			nondis_button = new Button();
			auto_captain_button = new Button();
			prcoverbox = new PictureBox();
			prnondistext = new Label();
			Label11 = new Label();
			SuspendLayout();
			Menu.MenuItemCollection menuItems = MainMenu1.MenuItems;
			MenuItem[] menuGame = new MenuItem[] { menu_game, menu_view, menu_help };
			menuItems.AddRange(menuGame);
			menu_game.Enabled=false;
			menu_game.Index = 0;
			Menu.MenuItemCollection menuItemCollection = menu_game.MenuItems;
			menuGame = new MenuItem[] { menu_game_new, MenuItem3, MenuItem2, menu_game_exit };
			menuItemCollection.AddRange(menuGame);
			menu_game.Text = "&Game";
			menu_game_new.Index = 0;
			menu_game_new.Text = "&New";
			MenuItem3.Index = 1;
			MenuItem3.Text = "Setup";
			MenuItem2.Index = 2;
			MenuItem2.Text = "-";
			menu_game_exit.Index = 3;
			menu_game_exit.Text = "E&xit";
			menu_view.Enabled=false;
			menu_view.Index = 1;
			Menu.MenuItemCollection menuItems1 = menu_view.MenuItems;
			menuGame = new MenuItem[] { MenuItem4, MenuItem5, MenuItem6, MenuItem7, MenuItem8 };
			menuItems1.AddRange(menuGame);
			menu_view.Text = "&View";
			MenuItem4.Enabled=false;
			MenuItem4.Index = 0;
			MenuItem4.Text = "Player &2";
			MenuItem5.Enabled=false;
			MenuItem5.Index = 1;
			MenuItem5.Text = "Player &3";
			MenuItem6.Enabled=false;
			MenuItem6.Index = 2;
			MenuItem6.Text = "Player &4";
			MenuItem7.Enabled=false;
			MenuItem7.Index = 3;
			MenuItem7.Text = "Player &5";
			MenuItem8.Enabled=false;
			MenuItem8.Index = 4;
			MenuItem8.Text = "Buildings";
			menu_help.Enabled=false;
			menu_help.Index = 2;
			Menu.MenuItemCollection menuItemCollection1 = menu_help.MenuItems;
			menuGame = new MenuItem[] { menu_help_rules, MenuItem1, menu_help_about };
			menuItemCollection1.AddRange(menuGame);
			menu_help.Text = "&Help";
			menu_help_rules.Index = 0;
			menu_help_rules.Text = "&Rules";
			MenuItem1.Index = 1;
			MenuItem1.Text = "-";
			menu_help_about.Index = 2;
			menu_help_about.Text = "&About Puerto Rico";
			player_board_pic.Cursor = Cursors.No;
			player_board_pic.Image = (Image)resourceManager.GetObject("player_board_pic.Image");
			PictureBox playerBoardPic = player_board_pic;
			Point point = new Point(-12, -12);
			playerBoardPic.Location = point;
			player_board_pic.Name = "player_board_pic";
			PictureBox pictureBox = player_board_pic;
			Size size = new Size(824, 624);
			pictureBox.Size = size;
			player_board_pic.SizeMode = PictureBoxSizeMode.CenterImage;
			player_board_pic.TabIndex=1;
			player_board_pic.TabStop = false;
			Label5.Cursor = Cursors.No;
			Label5.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label5 = Label5;
			point = new Point(8, 568);
			label5.Location = point;
			Label5.Name = "Label5";
			Label label = Label5;
			size = new Size(72, 16);
			label.Size = size;
			Label5.TabIndex = 23;
			Label5.Text = "VP Total";
			Label5.TextAlign = ContentAlignment.MiddleCenter;
			Label4.Cursor = Cursors.No;
			Label4.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label4 = Label4;
			point = new Point(8, 496);
			label4.Location = point;
			Label4.Name = "Label4";
			Label label41 = Label4;
			size = new Size(72, 16);
			label41.Size = size;
			Label4.TabIndex = 22;
			Label4.Text = "VP Chips";
			Label4.TextAlign = ContentAlignment.MiddleCenter;
			vp_chips_label.BackColor = SystemColors.ActiveBorder;
			vp_chips_label.Cursor = Cursors.No;
			vp_chips_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label vpChipsLabel = vp_chips_label;
			point = new Point(24, 464);
			vpChipsLabel.Location = point;
			vp_chips_label.Name = "vp_chips_label";
			Label vpChipsLabel1 = vp_chips_label;
			size = new Size(36, 32);
			vpChipsLabel1.Size = size;
			vp_chips_label.TabIndex = 21;
			vp_chips_label.Text="0";
			vp_chips_label.TextAlign = ContentAlignment.MiddleCenter;
			vp_total_label.BackColor = SystemColors.ActiveBorder;
			vp_total_label.Cursor = Cursors.No;
			vp_total_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label vpTotalLabel = vp_total_label;
			point = new Point(24, 536);
			vpTotalLabel.Location = point;
			vp_total_label.Name = "vp_total_label";
			Label vpTotalLabel1 = vp_total_label;
			size = new Size(36, 32);
			vpTotalLabel1.Size = size;
			vp_total_label.TabIndex = 20;
			vp_total_label.Text="0";
			vp_total_label.TextAlign = ContentAlignment.MiddleCenter;
			idle_colonists_label.BackColor = SystemColors.ActiveBorder;
			idle_colonists_label.Cursor = Cursors.No;
			idle_colonists_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label idleColonistsLabel = idle_colonists_label;
			point = new Point(40, 272);
			idleColonistsLabel.Location = point;
			idle_colonists_label.Name = "idle_colonists_label";
			Label idleColonistsLabel1 = idle_colonists_label;
			size = new Size(36, 32);
			idleColonistsLabel1.Size = size;
			idle_colonists_label.TabIndex = 19;
			idle_colonists_label.Text="0";
			idle_colonists_label.TextAlign = ContentAlignment.MiddleCenter;
			num_coffee_label.BackColor = Color.SaddleBrown;
			num_coffee_label.Cursor = Cursors.No;
			num_coffee_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			num_coffee_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numCoffeeLabel = num_coffee_label;
			point = new Point(392, 256);
			numCoffeeLabel.Location = point;
			num_coffee_label.Name = "num_coffee_label";
			Label numCoffeeLabel1 = num_coffee_label;
			size = new Size(36, 32);
			numCoffeeLabel1.Size = size;
			num_coffee_label.TabIndex = 28;
			num_coffee_label.Text="0";
			num_coffee_label.TextAlign = ContentAlignment.MiddleCenter;
			num_tobacco_label.BackColor=Color.Goldenrod;
			num_tobacco_label.Cursor = Cursors.No;
			num_tobacco_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numTobaccoLabel = num_tobacco_label;
			point = new Point(336, 256);
			numTobaccoLabel.Location = point;
			num_tobacco_label.Name = "num_tobacco_label";
			Label numTobaccoLabel1 = num_tobacco_label;
			size = new Size(36, 32);
			numTobaccoLabel1.Size = size;
			num_tobacco_label.TabIndex = 27;
			num_tobacco_label.Text="0";
			num_tobacco_label.TextAlign = ContentAlignment.MiddleCenter;
			num_corn_label.BackColor = Color.Yellow;
			num_corn_label.Cursor = Cursors.No;
			num_corn_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numCornLabel = num_corn_label;
			point = new Point(280, 256);
			numCornLabel.Location = point;
			num_corn_label.Name = "num_corn_label";
			Label numCornLabel1 = num_corn_label;
			size = new Size(36, 32);
			numCornLabel1.Size = size;
			num_corn_label.TabIndex = 26;
			num_corn_label.Text="0";
			num_corn_label.TextAlign = ContentAlignment.MiddleCenter;
			num_sugar_label.BackColor = Color.White;
			num_sugar_label.Cursor = Cursors.No;
			num_sugar_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numSugarLabel = num_sugar_label;
			point = new Point(224, 256);
			numSugarLabel.Location = point;
			num_sugar_label.Name = "num_sugar_label";
			Label numSugarLabel1 = num_sugar_label;
			size = new Size(36, 32);
			numSugarLabel1.Size = size;
			num_sugar_label.TabIndex = 25;
			num_sugar_label.Text="0";
			num_sugar_label.TextAlign = ContentAlignment.MiddleCenter;
			num_indigo_label.BackColor = Color.Blue;
			num_indigo_label.Cursor = Cursors.No;
			num_indigo_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			num_indigo_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numIndigoLabel = num_indigo_label;
			point = new Point(168, 256);
			numIndigoLabel.Location = point;
			num_indigo_label.Name = "num_indigo_label";
			Label numIndigoLabel1 = num_indigo_label;
			size = new Size(36, 32);
			numIndigoLabel1.Size = size;
			num_indigo_label.TabIndex = 24;
			num_indigo_label.Text="0";
			num_indigo_label.TextAlign = ContentAlignment.MiddleCenter;
			num_coffee_bank_label.BackColor = Color.SaddleBrown;
			num_coffee_bank_label.Cursor = Cursors.No;
			num_coffee_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			num_coffee_bank_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numCoffeeBankLabel = num_coffee_bank_label;
			point = new Point(728, 464);
			numCoffeeBankLabel.Location = point;
			num_coffee_bank_label.Name = "num_coffee_bank_label";
			Label numCoffeeBankLabel1 = num_coffee_bank_label;
			size = new Size(36, 32);
			numCoffeeBankLabel1.Size = size;
			num_coffee_bank_label.TabIndex = 48;
			num_coffee_bank_label.Text = "9";
			num_coffee_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			num_tobacco_bank_label.BackColor=Color.Goldenrod;
			num_tobacco_bank_label.Cursor = Cursors.No;
			num_tobacco_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numTobaccoBankLabel = num_tobacco_bank_label;
			point = new Point(728, 416);
			numTobaccoBankLabel.Location = point;
			num_tobacco_bank_label.Name = "num_tobacco_bank_label";
			Label numTobaccoBankLabel1 = num_tobacco_bank_label;
			size = new Size(36, 32);
			numTobaccoBankLabel1.Size = size;
			num_tobacco_bank_label.TabIndex = 47;
			num_tobacco_bank_label.Text = "9";
			num_tobacco_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			num_corn_bank_label.BackColor = Color.Yellow;
			num_corn_bank_label.Cursor = Cursors.No;
			num_corn_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numCornBankLabel = num_corn_bank_label;
			point = new Point(728, 368);
			numCornBankLabel.Location = point;
			num_corn_bank_label.Name = "num_corn_bank_label";
			Label numCornBankLabel1 = num_corn_bank_label;
			size = new Size(36, 32);
			numCornBankLabel1.Size = size;
			num_corn_bank_label.TabIndex = 46;
			num_corn_bank_label.Text = "10";
			num_corn_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			num_sugar_bank_label.BackColor = Color.White;
			num_sugar_bank_label.Cursor = Cursors.No;
			num_sugar_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numSugarBankLabel = num_sugar_bank_label;
			point = new Point(728, 320);
			numSugarBankLabel.Location = point;
			num_sugar_bank_label.Name = "num_sugar_bank_label";
			Label numSugarBankLabel1 = num_sugar_bank_label;
			size = new Size(36, 32);
			numSugarBankLabel1.Size = size;
			num_sugar_bank_label.TabIndex = 45;
			num_sugar_bank_label.Text = "11";
			num_sugar_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			num_indigo_bank_label.BackColor = Color.Blue;
			num_indigo_bank_label.Cursor = Cursors.No;
			num_indigo_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			num_indigo_bank_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numIndigoBankLabel = num_indigo_bank_label;
			point = new Point(728, 272);
			numIndigoBankLabel.Location = point;
			num_indigo_bank_label.Name = "num_indigo_bank_label";
			Label numIndigoBankLabel1 = num_indigo_bank_label;
			size = new Size(36, 32);
			numIndigoBankLabel1.Size = size;
			num_indigo_bank_label.TabIndex = 44;
			num_indigo_bank_label.Text = "11";
			num_indigo_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			plantation_available_slot6.BackColor=SystemColors.ActiveCaption;
			plantation_available_slot6.BorderStyle=BorderStyle.FixedSingle;
			plantation_available_slot6.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot6 = plantation_available_slot6;
			point = new Point(648, 344);
			plantationAvailableSlot6.Location = point;
			plantation_available_slot6.Name = "plantation_available_slot6";
			PictureBox plantationAvailableSlot61 = plantation_available_slot6;
			size = new Size(52, 56);
			plantationAvailableSlot61.Size = size;
			plantation_available_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			plantation_available_slot6.TabIndex = 43;
			plantation_available_slot6.TabStop = false;
			plantation_available_slot6.Visible = false;
			plantation_available_slot5.BackColor=SystemColors.ActiveCaption;
			plantation_available_slot5.BorderStyle=BorderStyle.FixedSingle;
			plantation_available_slot5.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot5 = plantation_available_slot5;
			point = new Point(592, 344);
			plantationAvailableSlot5.Location = point;
			plantation_available_slot5.Name = "plantation_available_slot5";
			PictureBox plantationAvailableSlot51 = plantation_available_slot5;
			size = new Size(52, 56);
			plantationAvailableSlot51.Size = size;
			plantation_available_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			plantation_available_slot5.TabIndex = 42;
			plantation_available_slot5.TabStop = false;
			plantation_available_slot5.Visible = false;
			plantation_available_slot2.BackColor=SystemColors.ActiveCaption;
			plantation_available_slot2.BorderStyle=BorderStyle.FixedSingle;
			plantation_available_slot2.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot2 = plantation_available_slot2;
			point = new Point(648, 472);
			plantationAvailableSlot2.Location = point;
			plantation_available_slot2.Name = "plantation_available_slot2";
			PictureBox plantationAvailableSlot21 = plantation_available_slot2;
			size = new Size(52, 56);
			plantationAvailableSlot21.Size = size;
			plantation_available_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			plantation_available_slot2.TabIndex = 41;
			plantation_available_slot2.TabStop = false;
			plantation_available_slot2.Visible = false;
			plantation_available_slot4.BackColor=SystemColors.ActiveCaption;
			plantation_available_slot4.BorderStyle=BorderStyle.FixedSingle;
			plantation_available_slot4.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot4 = plantation_available_slot4;
			point = new Point(648, 408);
			plantationAvailableSlot4.Location = point;
			plantation_available_slot4.Name = "plantation_available_slot4";
			PictureBox plantationAvailableSlot41 = plantation_available_slot4;
			size = new Size(52, 56);
			plantationAvailableSlot41.Size = size;
			plantation_available_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			plantation_available_slot4.TabIndex = 40;
			plantation_available_slot4.TabStop = false;
			plantation_available_slot4.Visible = false;
			plantation_available_slot1.BackColor=SystemColors.ActiveCaption;
			plantation_available_slot1.BorderStyle=BorderStyle.FixedSingle;
			plantation_available_slot1.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot1 = plantation_available_slot1;
			point = new Point(592, 472);
			plantationAvailableSlot1.Location = point;
			plantation_available_slot1.Name = "plantation_available_slot1";
			PictureBox plantationAvailableSlot11 = plantation_available_slot1;
			size = new Size(52, 56);
			plantationAvailableSlot11.Size = size;
			plantation_available_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			plantation_available_slot1.TabIndex = 39;
			plantation_available_slot1.TabStop = false;
			plantation_available_slot1.Visible = false;
			tradehouse_slot4.BackColor=SystemColors.ActiveCaption;
			tradehouse_slot4.BorderStyle=BorderStyle.FixedSingle;
			tradehouse_slot4.Cursor = Cursors.No;
			PictureBox tradehouseSlot4 = tradehouse_slot4;
			point = new Point(652, 278);
			tradehouseSlot4.Location = point;
			tradehouse_slot4.Name = "tradehouse_slot4";
			PictureBox tradehouseSlot41 = tradehouse_slot4;
			size = new Size(32, 32);
			tradehouseSlot41.Size = size;
			tradehouse_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			tradehouse_slot4.TabIndex = 38;
			tradehouse_slot4.TabStop = false;
			tradehouse_slot3.BackColor=SystemColors.ActiveCaption;
			tradehouse_slot3.BorderStyle=BorderStyle.FixedSingle;
			tradehouse_slot3.Cursor = Cursors.No;
			PictureBox tradehouseSlot3 = tradehouse_slot3;
			point = new Point(612, 278);
			tradehouseSlot3.Location = point;
			tradehouse_slot3.Name = "tradehouse_slot3";
			PictureBox tradehouseSlot31 = tradehouse_slot3;
			size = new Size(32, 32);
			tradehouseSlot31.Size = size;
			tradehouse_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			tradehouse_slot3.TabIndex = 37;
			tradehouse_slot3.TabStop = false;
			tradehouse_slot2.BackColor=SystemColors.ActiveCaption;
			tradehouse_slot2.BorderStyle=BorderStyle.FixedSingle;
			tradehouse_slot2.Cursor = Cursors.No;
			PictureBox tradehouseSlot2 = tradehouse_slot2;
			point = new Point(652, 238);
			tradehouseSlot2.Location = point;
			tradehouse_slot2.Name = "tradehouse_slot2";
			PictureBox tradehouseSlot21 = tradehouse_slot2;
			size = new Size(32, 32);
			tradehouseSlot21.Size = size;
			tradehouse_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			tradehouse_slot2.TabIndex = 36;
			tradehouse_slot2.TabStop = false;
			tradehouse_slot1.BackColor=SystemColors.ActiveCaption;
			tradehouse_slot1.BorderStyle=BorderStyle.FixedSingle;
			tradehouse_slot1.Cursor = Cursors.No;
			PictureBox tradehouseSlot1 = tradehouse_slot1;
			point = new Point(612, 238);
			tradehouseSlot1.Location = point;
			tradehouse_slot1.Name = "tradehouse_slot1";
			PictureBox tradehouseSlot11 = tradehouse_slot1;
			size = new Size(32, 32);
			tradehouseSlot11.Size = size;
			tradehouse_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			tradehouse_slot1.TabIndex = 35;
			tradehouse_slot1.TabStop = false;
			plantation_available_slot3.BackColor=SystemColors.ActiveCaption;
			plantation_available_slot3.BorderStyle=BorderStyle.FixedSingle;
			plantation_available_slot3.Cursor = Cursors.No;
			PictureBox plantationAvailableSlot3 = plantation_available_slot3;
			point = new Point(592, 408);
			plantationAvailableSlot3.Location = point;
			plantation_available_slot3.Name = "plantation_available_slot3";
			PictureBox plantationAvailableSlot31 = plantation_available_slot3;
			size = new Size(52, 56);
			plantationAvailableSlot31.Size = size;
			plantation_available_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			plantation_available_slot3.TabIndex = 34;
			plantation_available_slot3.TabStop = false;
			plantation_available_slot3.Visible = false;
			role_settler_pic.Cursor = Cursors.Help;
			role_settler_pic.Image = (Image)resourceManager.GetObject("role_settler_pic.Image");
			PictureBox roleSettlerPic = role_settler_pic;
			point = new Point(520, 236);
			roleSettlerPic.Location = point;
			role_settler_pic.Name = "role_settler_pic";
			PictureBox roleSettlerPic1 = role_settler_pic;
			size = new Size(56, 48);
			roleSettlerPic1.Size = size;
			role_settler_pic.TabIndex = 49;
			role_settler_pic.TabStop = false;
			role_mayor_pic.Cursor = Cursors.Help;
			role_mayor_pic.Image = (Image)resourceManager.GetObject("role_mayor_pic.Image");
			PictureBox roleMayorPic = role_mayor_pic;
			point = new Point(520, 288);
			roleMayorPic.Location = point;
			role_mayor_pic.Name = "role_mayor_pic";
			PictureBox roleMayorPic1 = role_mayor_pic;
			size = new Size(60, 48);
			roleMayorPic1.Size = size;
			role_mayor_pic.TabIndex = 50;
			role_mayor_pic.TabStop = false;
			role_builder_pic.Cursor = Cursors.Help;
			role_builder_pic.Image = (Image)resourceManager.GetObject("role_builder_pic.Image");
			PictureBox roleBuilderPic = role_builder_pic;
			point = new Point(524, 336);
			roleBuilderPic.Location = point;
			role_builder_pic.Name = "role_builder_pic";
			PictureBox roleBuilderPic1 = role_builder_pic;
			size = new Size(56, 40);
			roleBuilderPic1.Size = size;
			role_builder_pic.TabIndex = 51;
			role_builder_pic.TabStop = false;
			role_craftsman_pic.Cursor = Cursors.Help;
			role_craftsman_pic.Image = (Image)resourceManager.GetObject("role_craftsman_pic.Image");
			PictureBox roleCraftsmanPic = role_craftsman_pic;
			point = new Point(528, 384);
			roleCraftsmanPic.Location = point;
			role_craftsman_pic.Name = "role_craftsman_pic";
			PictureBox roleCraftsmanPic1 = role_craftsman_pic;
			size = new Size(48, 40);
			roleCraftsmanPic1.Size = size;
			role_craftsman_pic.TabIndex = 52;
			role_craftsman_pic.TabStop = false;
			role_trader_pic.Cursor = Cursors.Help;
			role_trader_pic.Image = (Image)resourceManager.GetObject("role_trader_pic.Image");
			PictureBox roleTraderPic = role_trader_pic;
			point = new Point(528, 432);
			roleTraderPic.Location = point;
			role_trader_pic.Name = "role_trader_pic";
			PictureBox roleTraderPic1 = role_trader_pic;
			size = new Size(48, 40);
			roleTraderPic1.Size = size;
			role_trader_pic.TabIndex = 53;
			role_trader_pic.TabStop = false;
			role_captain_pic.Cursor = Cursors.Help;
			role_captain_pic.Image = (Image)resourceManager.GetObject("role_captain_pic.Image");
			PictureBox roleCaptainPic = role_captain_pic;
			point = new Point(532, 476);
			roleCaptainPic.Location = point;
			role_captain_pic.Name = "role_captain_pic";
			PictureBox roleCaptainPic1 = role_captain_pic;
			size = new Size(48, 44);
			roleCaptainPic1.Size = size;
			role_captain_pic.TabIndex = 54;
			role_captain_pic.TabStop = false;
			role_prospector1_pic.Cursor = Cursors.Help;
			role_prospector1_pic.Image = (Image)resourceManager.GetObject("role_prospector1_pic.Image");
			PictureBox roleProspector1Pic = role_prospector1_pic;
			point = new Point(532, 524);
			roleProspector1Pic.Location = point;
			role_prospector1_pic.Name = "role_prospector1_pic";
			PictureBox roleProspector1Pic1 = role_prospector1_pic;
			size = new Size(40, 40);
			roleProspector1Pic1.Size = size;
			role_prospector1_pic.TabIndex = 55;
			role_prospector1_pic.TabStop = false;
			colonist_ship_pic.Cursor = Cursors.Help;
			colonist_ship_pic.Image = (Image)resourceManager.GetObject("colonist_ship_pic.Image");
			PictureBox colonistShipPic = colonist_ship_pic;
			point = new Point(696, 20);
			colonistShipPic.Location = point;
			colonist_ship_pic.Name = "colonist_ship_pic";
			PictureBox colonistShipPic1 = colonist_ship_pic;
			size = new Size(100, 68);
			colonistShipPic1.Size = size;
			colonist_ship_pic.SizeMode = PictureBoxSizeMode.CenterImage;
			colonist_ship_pic.TabIndex = 95;
			colonist_ship_pic.TabStop = false;
			num_colonist_ship_label.BackColor = SystemColors.ActiveBorder;
			num_colonist_ship_label.Cursor = Cursors.Help;
			num_colonist_ship_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numColonistShipLabel = num_colonist_ship_label;
			point = new Point(732, 44);
			numColonistShipLabel.Location = point;
			num_colonist_ship_label.Name = "num_colonist_ship_label";
			Label numColonistShipLabel1 = num_colonist_ship_label;
			size = new Size(36, 32);
			numColonistShipLabel1.Size = size;
			num_colonist_ship_label.TabIndex = 96;
			num_colonist_ship_label.Text="0";
			num_colonist_ship_label.TextAlign = ContentAlignment.MiddleCenter;
			role_prospector2_pic.Cursor = Cursors.Help;
			role_prospector2_pic.Image = (Image)resourceManager.GetObject("role_prospector2_pic.Image");
			PictureBox roleProspector2Pic = role_prospector2_pic;
			point = new Point(584, 540);
			roleProspector2Pic.Location = point;
			role_prospector2_pic.Name = "role_prospector2_pic";
			PictureBox roleProspector2Pic1 = role_prospector2_pic;
			size = new Size(40, 40);
			roleProspector2Pic1.Size = size;
			role_prospector2_pic.TabIndex = 97;
			role_prospector2_pic.TabStop = false;
			num_colonist_bank_label.BackColor = SystemColors.ActiveBorder;
			num_colonist_bank_label.Cursor = Cursors.Help;
			num_colonist_bank_label.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label numColonistBankLabel = num_colonist_bank_label;
			point = new Point(660, 20);
			numColonistBankLabel.Location = point;
			num_colonist_bank_label.Name = "num_colonist_bank_label";
			Label numColonistBankLabel1 = num_colonist_bank_label;
			size = new Size(36, 32);
			numColonistBankLabel1.Size = size;
			num_colonist_bank_label.TabIndex = 98;
			num_colonist_bank_label.Text="0";
			num_colonist_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			num_quarry_bank_label.BackColor = Color.Gray;
			num_quarry_bank_label.Cursor = Cursors.No;
			num_quarry_bank_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			num_quarry_bank_label.ForeColor=SystemColors.ActiveCaptionText;
			Label numQuarryBankLabel = num_quarry_bank_label;
			point = new Point(728, 530);
			numQuarryBankLabel.Location = point;
			num_quarry_bank_label.Name = "num_quarry_bank_label";
			Label numQuarryBankLabel1 = num_quarry_bank_label;
			size = new Size(36, 32);
			numQuarryBankLabel1.Size = size;
			num_quarry_bank_label.TabIndex = 99;
			num_quarry_bank_label.Text = "8";
			num_quarry_bank_label.TextAlign = ContentAlignment.MiddleCenter;
			Label1.Cursor = Cursors.No;
			Label1.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label1 = Label1;
			point = new Point(8, 416);
			label1.Location = point;
			Label1.Name = "Label1";
			Label label11 = Label1;
			size = new Size(72, 16);
			label11.Size = size;
			Label1.TabIndex = 101;
			Label1.Text = "Doubloons";
			Label1.TextAlign = ContentAlignment.MiddleCenter;
			gold_label.BackColor = SystemColors.ActiveBorder;
			gold_label.Cursor = Cursors.No;
			gold_label.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label goldLabel = gold_label;
			point = new Point(24, 384);
			goldLabel.Location = point;
			gold_label.Name = "gold_label";
			Label goldLabel1 = gold_label;
			size = new Size(36, 32);
			goldLabel1.Size = size;
			gold_label.TabIndex=100;
			gold_label.Text="0";
			gold_label.TextAlign = ContentAlignment.MiddleCenter;
			settler_bonus_label.BackColor = SystemColors.ActiveBorder;
			settler_bonus_label.Cursor = Cursors.Help;
			settler_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label settlerBonusLabel = settler_bonus_label;
			point = new Point(484, 248);
			settlerBonusLabel.Location = point;
			settler_bonus_label.Name = "settler_bonus_label";
			Label settlerBonusLabel1 = settler_bonus_label;
			size = new Size(36, 32);
			settlerBonusLabel1.Size = size;
			settler_bonus_label.TabIndex = 102;
			settler_bonus_label.Text="0";
			settler_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			mayor_bonus_label.BackColor = SystemColors.ActiveBorder;
			mayor_bonus_label.Cursor = Cursors.Help;
			mayor_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label mayorBonusLabel = mayor_bonus_label;
			point = new Point(484, 296);
			mayorBonusLabel.Location = point;
			mayor_bonus_label.Name = "mayor_bonus_label";
			Label mayorBonusLabel1 = mayor_bonus_label;
			size = new Size(36, 32);
			mayorBonusLabel1.Size = size;
			mayor_bonus_label.TabIndex = 103;
			mayor_bonus_label.Text="0";
			mayor_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			builder_bonus_label.BackColor = SystemColors.ActiveBorder;
			builder_bonus_label.Cursor = Cursors.Help;
			builder_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label builderBonusLabel = builder_bonus_label;
			point = new Point(484, 344);
			builderBonusLabel.Location = point;
			builder_bonus_label.Name = "builder_bonus_label";
			Label builderBonusLabel1 = builder_bonus_label;
			size = new Size(36, 32);
			builderBonusLabel1.Size = size;
			builder_bonus_label.TabIndex = 104;
			builder_bonus_label.Text="0";
			builder_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			craftsman_bonus_label.BackColor = SystemColors.ActiveBorder;
			craftsman_bonus_label.Cursor = Cursors.Help;
			craftsman_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label craftsmanBonusLabel = craftsman_bonus_label;
			point = new Point(484, 388);
			craftsmanBonusLabel.Location = point;
			craftsman_bonus_label.Name = "craftsman_bonus_label";
			Label craftsmanBonusLabel1 = craftsman_bonus_label;
			size = new Size(36, 32);
			craftsmanBonusLabel1.Size = size;
			craftsman_bonus_label.TabIndex = 105;
			craftsman_bonus_label.Text="0";
			craftsman_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			trader_bonus_label.BackColor = SystemColors.ActiveBorder;
			trader_bonus_label.Cursor = Cursors.Help;
			trader_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label traderBonusLabel = trader_bonus_label;
			point = new Point(484, 436);
			traderBonusLabel.Location = point;
			trader_bonus_label.Name = "trader_bonus_label";
			Label traderBonusLabel1 = trader_bonus_label;
			size = new Size(36, 32);
			traderBonusLabel1.Size = size;
			trader_bonus_label.TabIndex = 106;
			trader_bonus_label.Text="0";
			trader_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			captain_bonus_label.BackColor = SystemColors.ActiveBorder;
			captain_bonus_label.Cursor = Cursors.Help;
			captain_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label captainBonusLabel = captain_bonus_label;
			point = new Point(484, 484);
			captainBonusLabel.Location = point;
			captain_bonus_label.Name = "captain_bonus_label";
			Label captainBonusLabel1 = captain_bonus_label;
			size = new Size(36, 32);
			captainBonusLabel1.Size = size;
			captain_bonus_label.TabIndex = 107;
			captain_bonus_label.Text="0";
			captain_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			pros1_bonus_label.BackColor = SystemColors.ActiveBorder;
			pros1_bonus_label.Cursor = Cursors.Help;
			pros1_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label pros1BonusLabel = pros1_bonus_label;
			point = new Point(484, 528);
			pros1BonusLabel.Location = point;
			pros1_bonus_label.Name = "pros1_bonus_label";
			Label pros1BonusLabel1 = pros1_bonus_label;
			size = new Size(36, 32);
			pros1BonusLabel1.Size = size;
			pros1_bonus_label.TabIndex = 108;
			pros1_bonus_label.Text="0";
			pros1_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			pros2_bonus_label.BackColor = SystemColors.ActiveBorder;
			pros2_bonus_label.Cursor = Cursors.Help;
			pros2_bonus_label.Font = new Font("Comic Sans MS", 12f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label pros2BonusLabel = pros2_bonus_label;
			point = new Point(628, 544);
			pros2BonusLabel.Location = point;
			pros2_bonus_label.Name = "pros2_bonus_label";
			Label pros2BonusLabel1 = pros2_bonus_label;
			size = new Size(36, 32);
			pros2BonusLabel1.Size = size;
			pros2_bonus_label.TabIndex = 109;
			pros2_bonus_label.Text="0";
			pros2_bonus_label.TextAlign = ContentAlignment.MiddleCenter;
			governor_pic.Cursor = Cursors.Help;
			governor_pic.Image = (Image)resourceManager.GetObject("governor_pic.Image");
			PictureBox governorPic = governor_pic;
			point = new Point(412, 504);
			governorPic.Location = point;
			governor_pic.Name = "governor_pic";
			PictureBox governorPic1 = governor_pic;
			size = new Size(52, 72);
			governorPic1.Size = size;
			governor_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			governor_pic.TabIndex = 111;
			governor_pic.TabStop = false;
			plant_p1_slot1.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot1.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot1.Cursor = Cursors.No;
			PictureBox plantP1Slot1 = plant_p1_slot1;
			point = new Point(94, 330);
			plantP1Slot1.Location = point;
			plant_p1_slot1.Name = "plant_p1_slot1";
			PictureBox plantP1Slot11 = plant_p1_slot1;
			size = new Size(72, 74);
			plantP1Slot11.Size = size;
			plant_p1_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot1.TabIndex = 112;
			plant_p1_slot1.TabStop = false;
			plant_p1_slot1.Visible = false;
			plant_p1_slot2.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot2.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot2.Cursor = Cursors.No;
			PictureBox plantP1Slot2 = plant_p1_slot2;
			point = new Point(94, 408);
			plantP1Slot2.Location = point;
			plant_p1_slot2.Name = "plant_p1_slot2";
			PictureBox plantP1Slot21 = plant_p1_slot2;
			size = new Size(72, 74);
			plantP1Slot21.Size = size;
			plant_p1_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot2.TabIndex = 113;
			plant_p1_slot2.TabStop = false;
			plant_p1_slot2.Visible = false;
			plant_p1_slot3.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot3.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot3.Cursor = Cursors.No;
			PictureBox plantP1Slot3 = plant_p1_slot3;
			point = new Point(94, 484);
			plantP1Slot3.Location = point;
			plant_p1_slot3.Name = "plant_p1_slot3";
			PictureBox plantP1Slot31 = plant_p1_slot3;
			size = new Size(72, 74);
			plantP1Slot31.Size = size;
			plant_p1_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot3.TabIndex = 114;
			plant_p1_slot3.TabStop = false;
			plant_p1_slot3.Visible = false;
			plant_p1_slot6.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot6.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot6.Cursor = Cursors.No;
			PictureBox plantP1Slot6 = plant_p1_slot6;
			point = new Point(170, 450);
			plantP1Slot6.Location = point;
			plant_p1_slot6.Name = "plant_p1_slot6";
			PictureBox plantP1Slot61 = plant_p1_slot6;
			size = new Size(72, 74);
			plantP1Slot61.Size = size;
			plant_p1_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot6.TabIndex = 117;
			plant_p1_slot6.TabStop = false;
			plant_p1_slot6.Visible = false;
			plant_p1_slot5.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot5.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot5.Cursor = Cursors.No;
			PictureBox plantP1Slot5 = plant_p1_slot5;
			point = new Point(170, 374);
			plantP1Slot5.Location = point;
			plant_p1_slot5.Name = "plant_p1_slot5";
			PictureBox plantP1Slot51 = plant_p1_slot5;
			size = new Size(72, 74);
			plantP1Slot51.Size = size;
			plant_p1_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot5.TabIndex = 116;
			plant_p1_slot5.TabStop = false;
			plant_p1_slot5.Visible = false;
			plant_p1_slot4.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot4.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot4.Cursor = Cursors.No;
			PictureBox plantP1Slot4 = plant_p1_slot4;
			point = new Point(170, 296);
			plantP1Slot4.Location = point;
			plant_p1_slot4.Name = "plant_p1_slot4";
			PictureBox plantP1Slot41 = plant_p1_slot4;
			size = new Size(72, 74);
			plantP1Slot41.Size = size;
			plant_p1_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot4.TabIndex = 115;
			plant_p1_slot4.TabStop = false;
			plant_p1_slot4.Visible = false;
			plant_p1_slot9.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot9.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot9.Cursor = Cursors.No;
			PictureBox plantP1Slot9 = plant_p1_slot9;
			point = new Point(246, 474);
			plantP1Slot9.Location = point;
			plant_p1_slot9.Name = "plant_p1_slot9";
			PictureBox plantP1Slot91 = plant_p1_slot9;
			size = new Size(72, 74);
			plantP1Slot91.Size = size;
			plant_p1_slot9.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot9.TabIndex = 120;
			plant_p1_slot9.TabStop = false;
			plant_p1_slot9.Visible = false;
			plant_p1_slot8.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot8.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot8.Cursor = Cursors.No;
			PictureBox plantP1Slot8 = plant_p1_slot8;
			point = new Point(246, 398);
			plantP1Slot8.Location = point;
			plant_p1_slot8.Name = "plant_p1_slot8";
			PictureBox plantP1Slot81 = plant_p1_slot8;
			size = new Size(72, 74);
			plantP1Slot81.Size = size;
			plant_p1_slot8.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot8.TabIndex = 119;
			plant_p1_slot8.TabStop = false;
			plant_p1_slot8.Visible = false;
			plant_p1_slot7.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot7.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot7.Cursor = Cursors.No;
			PictureBox plantP1Slot7 = plant_p1_slot7;
			point = new Point(246, 320);
			plantP1Slot7.Location = point;
			plant_p1_slot7.Name = "plant_p1_slot7";
			PictureBox plantP1Slot71 = plant_p1_slot7;
			size = new Size(72, 74);
			plantP1Slot71.Size = size;
			plant_p1_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot7.TabIndex = 118;
			plant_p1_slot7.TabStop = false;
			plant_p1_slot7.Visible = false;
			plant_p1_slot11.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot11.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot11.Cursor = Cursors.No;
			PictureBox plantP1Slot111 = plant_p1_slot11;
			point = new Point(322, 434);
			plantP1Slot111.Location = point;
			plant_p1_slot11.Name = "plant_p1_slot11";
			PictureBox pictureBox1 = plant_p1_slot11;
			size = new Size(72, 74);
			pictureBox1.Size = size;
			plant_p1_slot11.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot11.TabIndex = 123;
			plant_p1_slot11.TabStop = false;
			plant_p1_slot11.Visible = false;
			plant_p1_slot10.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot10.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot10.Cursor = Cursors.No;
			PictureBox plantP1Slot10 = plant_p1_slot10;
			point = new Point(322, 358);
			plantP1Slot10.Location = point;
			plant_p1_slot10.Name = "plant_p1_slot10";
			PictureBox plantP1Slot101 = plant_p1_slot10;
			size = new Size(72, 74);
			plantP1Slot101.Size = size;
			plant_p1_slot10.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot10.TabIndex = 122;
			plant_p1_slot10.TabStop = false;
			plant_p1_slot10.Visible = false;
			plant_p1_slot12.BackColor=SystemColors.ActiveCaption;
			plant_p1_slot12.BorderStyle=BorderStyle.FixedSingle;
			plant_p1_slot12.Cursor = Cursors.No;
			PictureBox plantP1Slot12 = plant_p1_slot12;
			point = new Point(398, 392);
			plantP1Slot12.Location = point;
			plant_p1_slot12.Name = "plant_p1_slot12";
			PictureBox plantP1Slot121 = plant_p1_slot12;
			size = new Size(72, 74);
			plantP1Slot121.Size = size;
			plant_p1_slot12.SizeMode=PictureBoxSizeMode.AutoSize;
			plant_p1_slot12.TabIndex = 124;
			plant_p1_slot12.TabStop = false;
			plant_p1_slot12.Visible = false;
			Label3.Cursor = Cursors.No;
			Label3.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label3 = Label3;
			point = new Point(606, 312);
			label3.Location = point;
			Label3.Name = "Label3";
			Label label31 = Label3;
			size = new Size(84, 16);
			label31.Size = size;
			Label3.TabIndex = 125;
			Label3.Text = "Trading House";
			Label3.TextAlign = ContentAlignment.MiddleCenter;
			build_p1_slot1.BackColor=SystemColors.ActiveCaption;
			build_p1_slot1.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot1 = build_p1_slot1;
			point = new Point(16, 38);
			buildP1Slot1.Location = point;
			build_p1_slot1.Name = "build_p1_slot1";
			PictureBox buildP1Slot11 = build_p1_slot1;
			size = new Size(114, 64);
			buildP1Slot11.Size = size;
			build_p1_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot1.TabIndex = 126;
			build_p1_slot1.TabStop = false;
			build_p1_slot1.Visible = false;
			build_p1_slot2.BackColor=SystemColors.ActiveCaption;
			build_p1_slot2.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot2 = build_p1_slot2;
			point = new Point(16, 106);
			buildP1Slot2.Location = point;
			build_p1_slot2.Name = "build_p1_slot2";
			PictureBox buildP1Slot21 = build_p1_slot2;
			size = new Size(114, 64);
			buildP1Slot21.Size = size;
			build_p1_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot2.TabIndex = 127;
			build_p1_slot2.TabStop = false;
			build_p1_slot2.Visible = false;
			build_p1_slot3.BackColor=SystemColors.ActiveCaption;
			build_p1_slot3.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot3 = build_p1_slot3;
			point = new Point(16, 174);
			buildP1Slot3.Location = point;
			build_p1_slot3.Name = "build_p1_slot3";
			PictureBox buildP1Slot31 = build_p1_slot3;
			size = new Size(114, 64);
			buildP1Slot31.Size = size;
			build_p1_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot3.TabIndex = 128;
			build_p1_slot3.TabStop = false;
			build_p1_slot3.Visible = false;
			build_p1_slot6.BackColor=SystemColors.ActiveCaption;
			build_p1_slot6.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot6 = build_p1_slot6;
			point = new Point(132, 174);
			buildP1Slot6.Location = point;
			build_p1_slot6.Name = "build_p1_slot6";
			PictureBox buildP1Slot61 = build_p1_slot6;
			size = new Size(114, 64);
			buildP1Slot61.Size = size;
			build_p1_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot6.TabIndex = 131;
			build_p1_slot6.TabStop = false;
			build_p1_slot6.Visible = false;
			build_p1_slot5.BackColor=SystemColors.ActiveCaption;
			build_p1_slot5.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot5 = build_p1_slot5;
			point = new Point(132, 106);
			buildP1Slot5.Location = point;
			build_p1_slot5.Name = "build_p1_slot5";
			PictureBox buildP1Slot51 = build_p1_slot5;
			size = new Size(114, 64);
			buildP1Slot51.Size = size;
			build_p1_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot5.TabIndex = 130;
			build_p1_slot5.TabStop = false;
			build_p1_slot5.Visible = false;
			build_p1_slot4.BackColor=SystemColors.ActiveCaption;
			build_p1_slot4.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot4 = build_p1_slot4;
			point = new Point(132, 38);
			buildP1Slot4.Location = point;
			build_p1_slot4.Name = "build_p1_slot4";
			PictureBox buildP1Slot41 = build_p1_slot4;
			size = new Size(114, 64);
			buildP1Slot41.Size = size;
			build_p1_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot4.TabIndex = 129;
			build_p1_slot4.TabStop = false;
			build_p1_slot4.Visible = false;
			build_p1_slot9.BackColor=SystemColors.ActiveCaption;
			build_p1_slot9.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot9 = build_p1_slot9;
			point = new Point(248, 174);
			buildP1Slot9.Location = point;
			build_p1_slot9.Name = "build_p1_slot9";
			PictureBox buildP1Slot91 = build_p1_slot9;
			size = new Size(114, 64);
			buildP1Slot91.Size = size;
			build_p1_slot9.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot9.TabIndex = 134;
			build_p1_slot9.TabStop = false;
			build_p1_slot9.Visible = false;
			build_p1_slot8.BackColor=SystemColors.ActiveCaption;
			build_p1_slot8.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot8 = build_p1_slot8;
			point = new Point(248, 106);
			buildP1Slot8.Location = point;
			build_p1_slot8.Name = "build_p1_slot8";
			PictureBox buildP1Slot81 = build_p1_slot8;
			size = new Size(114, 64);
			buildP1Slot81.Size = size;
			build_p1_slot8.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot8.TabIndex = 133;
			build_p1_slot8.TabStop = false;
			build_p1_slot8.Visible = false;
			build_p1_slot7.BackColor=SystemColors.ActiveCaption;
			build_p1_slot7.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot7 = build_p1_slot7;
			point = new Point(248, 38);
			buildP1Slot7.Location = point;
			build_p1_slot7.Name = "build_p1_slot7";
			PictureBox buildP1Slot71 = build_p1_slot7;
			size = new Size(114, 64);
			buildP1Slot71.Size = size;
			build_p1_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot7.TabIndex = 132;
			build_p1_slot7.TabStop = false;
			build_p1_slot7.Visible = false;
			build_p1_slot12.BackColor=SystemColors.ActiveCaption;
			build_p1_slot12.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot12 = build_p1_slot12;
			point = new Point(364, 174);
			buildP1Slot12.Location = point;
			build_p1_slot12.Name = "build_p1_slot12";
			PictureBox buildP1Slot121 = build_p1_slot12;
			size = new Size(114, 64);
			buildP1Slot121.Size = size;
			build_p1_slot12.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot12.TabIndex = 137;
			build_p1_slot12.TabStop = false;
			build_p1_slot12.Visible = false;
			build_p1_slot11.BackColor=SystemColors.ActiveCaption;
			build_p1_slot11.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot111 = build_p1_slot11;
			point = new Point(364, 106);
			buildP1Slot111.Location = point;
			build_p1_slot11.Name = "build_p1_slot11";
			PictureBox buildP1Slot112 = build_p1_slot11;
			size = new Size(114, 64);
			buildP1Slot112.Size = size;
			build_p1_slot11.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot11.TabIndex = 136;
			build_p1_slot11.TabStop = false;
			build_p1_slot11.Visible = false;
			build_p1_slot10.BackColor=SystemColors.ActiveCaption;
			build_p1_slot10.BorderStyle=BorderStyle.FixedSingle;
			PictureBox buildP1Slot10 = build_p1_slot10;
			point = new Point(364, 38);
			buildP1Slot10.Location = point;
			build_p1_slot10.Name = "build_p1_slot10";
			PictureBox buildP1Slot101 = build_p1_slot10;
			size = new Size(114, 64);
			buildP1Slot101.Size = size;
			build_p1_slot10.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot10.TabIndex = 135;
			build_p1_slot10.TabStop = false;
			build_p1_slot10.Visible = false;
			build_p1_slot19.BackColor=SystemColors.ActiveCaption;
			build_p1_slot19.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot19.Cursor = Cursors.No;
			PictureBox buildP1Slot19 = build_p1_slot19;
			point = new Point(364, 38);
			buildP1Slot19.Location = point;
			build_p1_slot19.Name = "build_p1_slot19";
			PictureBox buildP1Slot191 = build_p1_slot19;
			size = new Size(114, 132);
			buildP1Slot191.Size = size;
			build_p1_slot19.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot19.TabIndex = 138;
			build_p1_slot19.TabStop = false;
			build_p1_slot19.Visible = false;
			build_p1_slot17.BackColor=SystemColors.ActiveCaption;
			build_p1_slot17.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot17.Cursor = Cursors.No;
			PictureBox buildP1Slot17 = build_p1_slot17;
			point = new Point(248, 38);
			buildP1Slot17.Location = point;
			build_p1_slot17.Name = "build_p1_slot17";
			PictureBox buildP1Slot171 = build_p1_slot17;
			size = new Size(114, 132);
			buildP1Slot171.Size = size;
			build_p1_slot17.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot17.TabIndex = 139;
			build_p1_slot17.TabStop = false;
			build_p1_slot17.Visible = false;
			build_p1_slot15.BackColor=SystemColors.ActiveCaption;
			build_p1_slot15.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot15.Cursor = Cursors.No;
			PictureBox buildP1Slot15 = build_p1_slot15;
			point = new Point(132, 38);
			buildP1Slot15.Location = point;
			build_p1_slot15.Name = "build_p1_slot15";
			PictureBox buildP1Slot151 = build_p1_slot15;
			size = new Size(114, 132);
			buildP1Slot151.Size = size;
			build_p1_slot15.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot15.TabIndex = 140;
			build_p1_slot15.TabStop = false;
			build_p1_slot15.Visible = false;
			build_p1_slot13.BackColor=SystemColors.ActiveCaption;
			build_p1_slot13.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot13.Cursor = Cursors.No;
			PictureBox buildP1Slot13 = build_p1_slot13;
			point = new Point(16, 38);
			buildP1Slot13.Location = point;
			build_p1_slot13.Name = "build_p1_slot13";
			PictureBox buildP1Slot131 = build_p1_slot13;
			size = new Size(114, 132);
			buildP1Slot131.Size = size;
			build_p1_slot13.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot13.TabIndex = 141;
			build_p1_slot13.TabStop = false;
			build_p1_slot13.Visible = false;
			Button nextTurnButton = next_turn_button;
			point = new Point(350, 304);
			nextTurnButton.Location = point;
			next_turn_button.Name = "next_turn_button";
			Button button = next_turn_button;
			size = new Size(104, 32);
			button.Size = size;
			next_turn_button.TabIndex = 142;
			next_turn_button.Visible = false;
			build_p1_slot14.BackColor=SystemColors.ActiveCaption;
			build_p1_slot14.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot14.Cursor = Cursors.No;
			PictureBox buildP1Slot14 = build_p1_slot14;
			point = new Point(16, 106);
			buildP1Slot14.Location = point;
			build_p1_slot14.Name = "build_p1_slot14";
			PictureBox buildP1Slot141 = build_p1_slot14;
			size = new Size(114, 132);
			buildP1Slot141.Size = size;
			build_p1_slot14.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot14.TabIndex = 146;
			build_p1_slot14.TabStop = false;
			build_p1_slot14.Visible = false;
			build_p1_slot16.BackColor=SystemColors.ActiveCaption;
			build_p1_slot16.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot16.Cursor = Cursors.No;
			PictureBox buildP1Slot16 = build_p1_slot16;
			point = new Point(132, 106);
			buildP1Slot16.Location = point;
			build_p1_slot16.Name = "build_p1_slot16";
			PictureBox buildP1Slot161 = build_p1_slot16;
			size = new Size(114, 132);
			buildP1Slot161.Size = size;
			build_p1_slot16.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot16.TabIndex = 145;
			build_p1_slot16.TabStop = false;
			build_p1_slot16.Visible = false;
			build_p1_slot18.BackColor=SystemColors.ActiveCaption;
			build_p1_slot18.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot18.Cursor = Cursors.No;
			PictureBox buildP1Slot18 = build_p1_slot18;
			point = new Point(248, 106);
			buildP1Slot18.Location = point;
			build_p1_slot18.Name = "build_p1_slot18";
			PictureBox buildP1Slot181 = build_p1_slot18;
			size = new Size(114, 132);
			buildP1Slot181.Size = size;
			build_p1_slot18.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot18.TabIndex = 144;
			build_p1_slot18.TabStop = false;
			build_p1_slot18.Visible = false;
			build_p1_slot20.BackColor=SystemColors.ActiveCaption;
			build_p1_slot20.BorderStyle=BorderStyle.FixedSingle;
			build_p1_slot20.Cursor = Cursors.No;
			PictureBox buildP1Slot20 = build_p1_slot20;
			point = new Point(364, 106);
			buildP1Slot20.Location = point;
			build_p1_slot20.Name = "build_p1_slot20";
			PictureBox buildP1Slot201 = build_p1_slot20;
			size = new Size(114, 132);
			buildP1Slot201.Size = size;
			build_p1_slot20.SizeMode=PictureBoxSizeMode.AutoSize;
			build_p1_slot20.TabIndex = 143;
			build_p1_slot20.TabStop = false;
			build_p1_slot20.Visible = false;
			Label6.Cursor = Cursors.No;
			Label6.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label6 = Label6;
			point = new Point(710, 238);
			label6.Location = point;
			Label6.Name = "Label6";
			Label label61 = Label6;
			size = new Size(72, 28);
			label61.Size = size;
			Label6.TabIndex = 147;
			Label6.Text = "Resource Bank";
			Label6.TextAlign = ContentAlignment.MiddleCenter;
			Label7.BackColor = SystemColors.ActiveBorder;
			Label7.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label7 = Label7;
			point = new Point(702, 580);
			label7.Location = point;
			Label7.Name = "Label7";
			Label label71 = Label7;
			size = new Size(26, 24);
			label71.Size = size;
			Label7.TabIndex = 148;
			Label7.Text="0";
			Label7.TextAlign = ContentAlignment.MiddleCenter;
			Label7.Visible = false;
			Label8.BackColor = SystemColors.ActiveBorder;
			Label8.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label8 = Label8;
			point = new Point(734, 580);
			label8.Location = point;
			Label8.Name = "Label8";
			Label label81 = Label8;
			size = new Size(26, 24);
			label81.Size = size;
			Label8.TabIndex = 149;
			Label8.Text="0";
			Label8.TextAlign = ContentAlignment.MiddleCenter;
			Label8.Visible = false;
			Label9.BackColor = SystemColors.ActiveBorder;
			Label9.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label9 = Label9;
			point = new Point(766, 580);
			label9.Location = point;
			Label9.Name = "Label9";
			Label label91 = Label9;
			size = new Size(26, 24);
			label91.Size = size;
			Label9.TabIndex = 150;
			Label9.Text="0";
			Label9.TextAlign = ContentAlignment.MiddleCenter;
			Label9.Visible = false;
			shipc_slot8.BackColor=SystemColors.ActiveCaption;
			shipc_slot8.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot8.Cursor = Cursors.No;
			PictureBox shipcSlot8 = shipc_slot8;
			point = new Point(724, 204);
			shipcSlot8.Location = point;
			shipc_slot8.Name = "shipc_slot8";
			PictureBox shipcSlot81 = shipc_slot8;
			size = new Size(32, 32);
			shipcSlot81.Size = size;
			shipc_slot8.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot8.TabIndex = 201;
			shipc_slot8.TabStop = false;
			shipc_slot8.Visible = false;
			shipc_slot7.BackColor=SystemColors.ActiveCaption;
			shipc_slot7.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot7.Cursor = Cursors.No;
			PictureBox shipcSlot7 = shipc_slot7;
			point = new Point(688, 204);
			shipcSlot7.Location = point;
			shipc_slot7.Name = "shipc_slot7";
			PictureBox shipcSlot71 = shipc_slot7;
			size = new Size(32, 32);
			shipcSlot71.Size = size;
			shipc_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot7.TabIndex = 200;
			shipc_slot7.TabStop = false;
			shipc_slot7.Visible = false;
			shipc_slot6.BackColor=SystemColors.ActiveCaption;
			shipc_slot6.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot6.Cursor = Cursors.No;
			PictureBox shipcSlot6 = shipc_slot6;
			point = new Point(724, 168);
			shipcSlot6.Location = point;
			shipc_slot6.Name = "shipc_slot6";
			PictureBox shipcSlot61 = shipc_slot6;
			size = new Size(32, 32);
			shipcSlot61.Size = size;
			shipc_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot6.TabIndex = 199;
			shipc_slot6.TabStop = false;
			shipc_slot6.Visible = false;
			shipc_slot5.BackColor=SystemColors.ActiveCaption;
			shipc_slot5.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot5.Cursor = Cursors.No;
			PictureBox shipcSlot5 = shipc_slot5;
			point = new Point(692, 168);
			shipcSlot5.Location = point;
			shipc_slot5.Name = "shipc_slot5";
			PictureBox shipcSlot51 = shipc_slot5;
			size = new Size(32, 32);
			shipcSlot51.Size = size;
			shipc_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot5.TabIndex = 198;
			shipc_slot5.TabStop = false;
			shipc_slot5.Visible = false;
			shipc_slot4.BackColor=SystemColors.ActiveCaption;
			shipc_slot4.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot4.Cursor = Cursors.No;
			PictureBox shipcSlot4 = shipc_slot4;
			point = new Point(724, 138);
			shipcSlot4.Location = point;
			shipc_slot4.Name = "shipc_slot4";
			PictureBox shipcSlot41 = shipc_slot4;
			size = new Size(32, 32);
			shipcSlot41.Size = size;
			shipc_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot4.TabIndex = 197;
			shipc_slot4.TabStop = false;
			shipc_slot4.Visible = false;
			shipc_slot3.BackColor=SystemColors.ActiveCaption;
			shipc_slot3.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot3.Cursor = Cursors.No;
			PictureBox shipcSlot3 = shipc_slot3;
			point = new Point(692, 138);
			shipcSlot3.Location = point;
			shipc_slot3.Name = "shipc_slot3";
			PictureBox shipcSlot31 = shipc_slot3;
			size = new Size(32, 32);
			shipcSlot31.Size = size;
			shipc_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot3.TabIndex = 196;
			shipc_slot3.TabStop = false;
			shipc_slot3.Visible = false;
			shipc_slot2.BackColor=SystemColors.ActiveCaption;
			shipc_slot2.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot2.Cursor = Cursors.No;
			PictureBox shipcSlot2 = shipc_slot2;
			point = new Point(724, 106);
			shipcSlot2.Location = point;
			shipc_slot2.Name = "shipc_slot2";
			PictureBox shipcSlot21 = shipc_slot2;
			size = new Size(32, 32);
			shipcSlot21.Size = size;
			shipc_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot2.TabIndex = 195;
			shipc_slot2.TabStop = false;
			shipc_slot2.Visible = false;
			shipc_slot1.BackColor=SystemColors.ActiveCaption;
			shipc_slot1.BorderStyle=BorderStyle.FixedSingle;
			shipc_slot1.Cursor = Cursors.No;
			PictureBox shipcSlot1 = shipc_slot1;
			point = new Point(692, 106);
			shipcSlot1.Location = point;
			shipc_slot1.Name = "shipc_slot1";
			PictureBox shipcSlot11 = shipc_slot1;
			size = new Size(32, 32);
			shipcSlot11.Size = size;
			shipc_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_slot1.TabIndex = 194;
			shipc_slot1.TabStop = false;
			shipc_slot1.Visible = false;
			shipb_slot7.BackColor=SystemColors.ActiveCaption;
			shipb_slot7.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot7.Cursor = Cursors.No;
			PictureBox shipbSlot7 = shipb_slot7;
			point = new Point(634, 204);
			shipbSlot7.Location = point;
			shipb_slot7.Name = "shipb_slot7";
			PictureBox shipbSlot71 = shipb_slot7;
			size = new Size(32, 32);
			shipbSlot71.Size = size;
			shipb_slot7.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot7.TabIndex = 193;
			shipb_slot7.TabStop = false;
			shipb_slot7.Visible = false;
			shipb_slot6.BackColor=SystemColors.ActiveCaption;
			shipb_slot6.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot6.Cursor = Cursors.No;
			PictureBox shipbSlot6 = shipb_slot6;
			point = new Point(600, 204);
			shipbSlot6.Location = point;
			shipb_slot6.Name = "shipb_slot6";
			PictureBox shipbSlot61 = shipb_slot6;
			size = new Size(32, 32);
			shipbSlot61.Size = size;
			shipb_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot6.TabIndex = 192;
			shipb_slot6.TabStop = false;
			shipb_slot6.Visible = false;
			shipb_slot5.BackColor=SystemColors.ActiveCaption;
			shipb_slot5.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot5.Cursor = Cursors.No;
			PictureBox shipbSlot5 = shipb_slot5;
			point = new Point(614, 166);
			shipbSlot5.Location = point;
			shipb_slot5.Name = "shipb_slot5";
			PictureBox shipbSlot51 = shipb_slot5;
			size = new Size(32, 32);
			shipbSlot51.Size = size;
			shipb_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot5.TabIndex = 191;
			shipb_slot5.TabStop = false;
			shipb_slot5.Visible = false;
			shipb_slot4.BackColor=SystemColors.ActiveCaption;
			shipb_slot4.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot4.Cursor = Cursors.No;
			PictureBox shipbSlot4 = shipb_slot4;
			point = new Point(630, 134);
			shipbSlot4.Location = point;
			shipb_slot4.Name = "shipb_slot4";
			PictureBox shipbSlot41 = shipb_slot4;
			size = new Size(32, 32);
			shipbSlot41.Size = size;
			shipb_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot4.TabIndex = 190;
			shipb_slot4.TabStop = false;
			shipb_slot4.Visible = false;
			shipb_slot3.BackColor=SystemColors.ActiveCaption;
			shipb_slot3.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot3.Cursor = Cursors.No;
			PictureBox shipbSlot3 = shipb_slot3;
			point = new Point(600, 134);
			shipbSlot3.Location = point;
			shipb_slot3.Name = "shipb_slot3";
			PictureBox shipbSlot31 = shipb_slot3;
			size = new Size(32, 32);
			shipbSlot31.Size = size;
			shipb_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot3.TabIndex = 189;
			shipb_slot3.TabStop = false;
			shipb_slot3.Visible = false;
			shipb_slot2.BackColor=SystemColors.ActiveCaption;
			shipb_slot2.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot2.Cursor = Cursors.No;
			PictureBox shipbSlot2 = shipb_slot2;
			point = new Point(630, 104);
			shipbSlot2.Location = point;
			shipb_slot2.Name = "shipb_slot2";
			PictureBox shipbSlot21 = shipb_slot2;
			size = new Size(32, 32);
			shipbSlot21.Size = size;
			shipb_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot2.TabIndex = 188;
			shipb_slot2.TabStop = false;
			shipb_slot2.Visible = false;
			shipb_slot1.BackColor=SystemColors.ActiveCaption;
			shipb_slot1.BorderStyle=BorderStyle.FixedSingle;
			shipb_slot1.Cursor = Cursors.No;
			PictureBox shipbSlot1 = shipb_slot1;
			point = new Point(600, 104);
			shipbSlot1.Location = point;
			shipb_slot1.Name = "shipb_slot1";
			PictureBox shipbSlot11 = shipb_slot1;
			size = new Size(32, 32);
			shipbSlot11.Size = size;
			shipb_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_slot1.TabIndex = 187;
			shipb_slot1.TabStop = false;
			shipb_slot1.Visible = false;
			shipa_slot6.BackColor=SystemColors.ActiveCaption;
			shipa_slot6.BorderStyle=BorderStyle.FixedSingle;
			shipa_slot6.Cursor = Cursors.No;
			PictureBox shipaSlot6 = shipa_slot6;
			point = new Point(548, 214);
			shipaSlot6.Location = point;
			shipa_slot6.Name = "shipa_slot6";
			PictureBox shipaSlot61 = shipa_slot6;
			size = new Size(32, 32);
			shipaSlot61.Size = size;
			shipa_slot6.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_slot6.TabIndex = 186;
			shipa_slot6.TabStop = false;
			shipa_slot6.Visible = false;
			shipa_slot5.BackColor=SystemColors.ActiveCaption;
			shipa_slot5.BorderStyle=BorderStyle.FixedSingle;
			shipa_slot5.Cursor = Cursors.No;
			PictureBox shipaSlot5 = shipa_slot5;
			point = new Point(514, 208);
			shipaSlot5.Location = point;
			shipa_slot5.Name = "shipa_slot5";
			PictureBox shipaSlot51 = shipa_slot5;
			size = new Size(32, 32);
			shipaSlot51.Size = size;
			shipa_slot5.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_slot5.TabIndex = 185;
			shipa_slot5.TabStop = false;
			shipa_slot5.Visible = false;
			shipa_slot4.BackColor=SystemColors.ActiveCaption;
			shipa_slot4.BorderStyle=BorderStyle.FixedSingle;
			shipa_slot4.Cursor = Cursors.No;
			PictureBox shipaSlot4 = shipa_slot4;
			point = new Point(544, 148);
			shipaSlot4.Location = point;
			shipa_slot4.Name = "shipa_slot4";
			PictureBox shipaSlot41 = shipa_slot4;
			size = new Size(32, 32);
			shipaSlot41.Size = size;
			shipa_slot4.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_slot4.TabIndex = 184;
			shipa_slot4.TabStop = false;
			shipa_slot4.Visible = false;
			shipa_slot3.BackColor=SystemColors.ActiveCaption;
			shipa_slot3.BorderStyle=BorderStyle.FixedSingle;
			shipa_slot3.Cursor = Cursors.No;
			PictureBox shipaSlot3 = shipa_slot3;
			point = new Point(512, 148);
			shipaSlot3.Location = point;
			shipa_slot3.Name = "shipa_slot3";
			PictureBox shipaSlot31 = shipa_slot3;
			size = new Size(32, 32);
			shipaSlot31.Size = size;
			shipa_slot3.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_slot3.TabIndex = 183;
			shipa_slot3.TabStop = false;
			shipa_slot3.Visible = false;
			shipa_slot2.BackColor=SystemColors.ActiveCaption;
			shipa_slot2.BorderStyle=BorderStyle.FixedSingle;
			shipa_slot2.Cursor = Cursors.No;
			PictureBox shipaSlot2 = shipa_slot2;
			point = new Point(544, 116);
			shipaSlot2.Location = point;
			shipa_slot2.Name = "shipa_slot2";
			PictureBox shipaSlot21 = shipa_slot2;
			size = new Size(32, 32);
			shipaSlot21.Size = size;
			shipa_slot2.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_slot2.TabIndex = 182;
			shipa_slot2.TabStop = false;
			shipa_slot2.Visible = false;
			shipa_slot1.BackColor=SystemColors.ActiveCaption;
			shipa_slot1.BorderStyle=BorderStyle.FixedSingle;
			shipa_slot1.Cursor = Cursors.No;
			PictureBox shipaSlot1 = shipa_slot1;
			point = new Point(512, 116);
			shipaSlot1.Location = point;
			shipa_slot1.Name = "shipa_slot1";
			PictureBox shipaSlot11 = shipa_slot1;
			size = new Size(32, 32);
			shipaSlot11.Size = size;
			shipa_slot1.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_slot1.TabIndex = 181;
			shipa_slot1.TabStop = false;
			shipa_slot1.Visible = false;
			shipc_pic.BackColor=SystemColors.ActiveCaption;
			shipc_pic.BorderStyle=BorderStyle.FixedSingle;
			shipc_pic.Cursor = Cursors.No;
			shipc_pic.Image = (Image)resourceManager.GetObject("shipc_pic.Image");
			PictureBox shipcPic = shipc_pic;
			point = new Point(686, 88);
			shipcPic.Location = point;
			shipc_pic.Name = "shipc_pic";
			PictureBox shipcPic1 = shipc_pic;
			size = new Size(76, 134);
			shipcPic1.Size = size;
			shipc_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			shipc_pic.TabIndex = 180;
			shipc_pic.TabStop = false;
			shipb_pic.BackColor=SystemColors.ActiveCaption;
			shipb_pic.BorderStyle=BorderStyle.FixedSingle;
			shipb_pic.Cursor = Cursors.No;
			shipb_pic.Image = (Image)resourceManager.GetObject("shipb_pic.Image");
			PictureBox shipbPic = shipb_pic;
			point = new Point(594, 88);
			shipbPic.Location = point;
			shipb_pic.Name = "shipb_pic";
			PictureBox shipbPic1 = shipb_pic;
			size = new Size(76, 134);
			shipbPic1.Size = size;
			shipb_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			shipb_pic.TabIndex = 179;
			shipb_pic.TabStop = false;
			shipa_pic.BackColor=SystemColors.ActiveCaption;
			shipa_pic.BorderStyle=BorderStyle.FixedSingle;
			shipa_pic.Cursor = Cursors.No;
			shipa_pic.Image = (Image)resourceManager.GetObject("shipa_pic.Image");
			PictureBox shipaPic = shipa_pic;
			point = new Point(506, 88);
			shipaPic.Location = point;
			shipa_pic.Name = "shipa_pic";
			PictureBox shipaPic1 = shipa_pic;
			size = new Size(76, 134);
			shipaPic1.Size = size;
			shipa_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			shipa_pic.TabIndex = 178;
			shipa_pic.TabStop = false;
			Label10.BackColor = SystemColors.ActiveBorder;
			Label10.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label label10 = Label10;
			point = new Point(272, 582);
			label10.Location = point;
			Label10.Name = "Label10";
			Label label101 = Label10;
			size = new Size(30, 20);
			label101.Size = size;
			Label10.TabIndex = 202;
			Label10.Text = "99";
			Label10.TextAlign = ContentAlignment.MiddleCenter;
			Label10.Visible = false;
			Button button1 = Button1;
			point = new Point(128, 582);
			button1.Location = point;
			Button1.Name = "Button1";
			Button button11 = Button1;
			size = new Size(56, 18);
			button11.Size = size;
			Button1.TabIndex = 203;
			Button1.TabStop = false;
			Button1.Text = "debug";
			Button1.Visible = false;
			wharf_pic.Cursor = Cursors.Hand;
			wharf_pic.Image = (Image)resourceManager.GetObject("wharf_pic.Image");
			PictureBox wharfPic = wharf_pic;
			point = new Point(770, 90);
			wharfPic.Location = point;
			wharf_pic.Name = "wharf_pic";
			PictureBox wharfPic1 = wharf_pic;
			size = new Size(30, 132);
			wharfPic1.Size = size;
			wharf_pic.SizeMode=PictureBoxSizeMode.AutoSize;
			wharf_pic.TabIndex = 204;
			wharf_pic.TabStop = false;
			wharf_pic.Visible = false;
			vpremain_label.BackColor = SystemColors.ActiveBorder;
			vpremain_label.Cursor = Cursors.Help;
			vpremain_label.Font = new Font("Comic Sans MS", 9.75f, FontStyle.Bold, GraphicsUnit.Point, 0);
			Label vpremainLabel = vpremain_label;
			point = new Point(508, 56);
			vpremainLabel.Location = point;
			vpremain_label.Name = "vpremain_label";
			Label vpremainLabel1 = vpremain_label;
			size = new Size(26, 24);
			vpremainLabel1.Size = size;
			vpremain_label.TabIndex = 205;
			vpremain_label.Text="0";
			vpremain_label.TextAlign = ContentAlignment.MiddleCenter;
			Label12.Cursor = Cursors.Help;
			Label12.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label12 = Label12;
			point = new Point(540, 60);
			label12.Location = point;
			Label12.Name = "Label12";
			Label label121 = Label12;
			size = new Size(88, 16);
			label121.Size = size;
			Label12.TabIndex = 206;
			Label12.Text = "VP Remaining";
			Label12.TextAlign = ContentAlignment.MiddleCenter;
			done_trading_button.Enabled=false;
			done_trading_button.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Button doneTradingButton = done_trading_button;
			point = new Point(350, 304);
			doneTradingButton.Location = point;
			done_trading_button.Name = "done_trading_button";
			Button doneTradingButton1 = done_trading_button;
			size = new Size(104, 32);
			doneTradingButton1.Size = size;
			done_trading_button.TabIndex = 207;
			done_trading_button.Text = "Done Trading";
			done_trading_button.Visible = false;
			Button button2 = Button2;
			point = new Point(190, 582);
			button2.Location = point;
			Button2.Name = "Button2";
			Button button21 = Button2;
			size = new Size(70, 18);
			button21.Size = size;
			Button2.TabIndex = 208;
			Button2.TabStop = false;
			Button2.Text = "Close Text";
			Button2.Visible = false;
			done_choosing_craftsman_button.Enabled=false;
			done_choosing_craftsman_button.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Button doneChoosingCraftsmanButton = done_choosing_craftsman_button;
			point = new Point(350, 304);
			doneChoosingCraftsmanButton.Location = point;
			done_choosing_craftsman_button.Name = "done_choosing_craftsman_button";
			Button doneChoosingCraftsmanButton1 = done_choosing_craftsman_button;
			size = new Size(104, 32);
			doneChoosingCraftsmanButton1.Size = size;
			done_choosing_craftsman_button.TabIndex = 209;
			done_choosing_craftsman_button.Text = "Done Choosing";
			done_choosing_craftsman_button.Visible = false;
			start_game_button.Enabled=false;
			start_game_button.Font = new Font("Comic Sans MS", 15.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Button startGameButton = start_game_button;
			point = new Point(326, 296);
			startGameButton.Location = point;
			start_game_button.Name = "start_game_button";
			Button startGameButton1 = start_game_button;
			size = new Size(154, 50);
			startGameButton1.Size = size;
			start_game_button.TabIndex = 210;
			start_game_button.Text = "Start Game";
			start_game_button.Visible = false;
			PictureBox1.Cursor = Cursors.No;
			PictureBox1.Image = (Image)resourceManager.GetObject("PictureBox1.Image");
			PictureBox pictureBox11 = PictureBox1;
			point = new Point(724, 504);
			pictureBox11.Location = point;
			PictureBox1.Name = "PictureBox1";
			PictureBox pictureBox12 = PictureBox1;
			size = new Size(66, 68);
			pictureBox12.Size = size;
			PictureBox1.SizeMode=PictureBoxSizeMode.AutoSize;
			PictureBox1.TabIndex = 211;
			PictureBox1.TabStop = false;
			Label2.Cursor = Cursors.Help;
			Label2.Font = new Font("Comic Sans MS", 8.25f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label2 = Label2;
			point = new Point(538, 28);
			label2.Location = point;
			Label2.Name = "Label2";
			Label label21 = Label2;
			size = new Size(116, 16);
			label21.Size = size;
			Label2.TabIndex = 213;
			Label2.Text = "Colonists Remaining";
			Label2.TextAlign = ContentAlignment.MiddleCenter;
			Button button3 = Button3;
			point = new Point(314, 580);
			button3.Location = point;
			Button3.Name = "Button3";
			Button button31 = Button3;
			size = new Size(42, 22);
			button31.Size = size;
			Button3.TabIndex = 214;
			Button3.Visible = false;
			nondis_label.Font = new Font("Microsoft Sans Serif", 21.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label nondisLabel = nondis_label;
			point = new Point(-2, 12);
			nondisLabel.Location = point;
			nondis_label.Name = "nondis_label";
			Label nondisLabel1 = nondis_label;
			size = new Size(800, 586);
			nondisLabel1.Size = size;
			nondis_label.TabIndex = 215;
			nondis_label.TextAlign = ContentAlignment.MiddleCenter;
			Button nondisButton = nondis_button;
			point = new Point(512, 418);
			nondisButton.Location = point;
			nondis_button.Name = "nondis_button";
			Button nondisButton1 = nondis_button;
			size = new Size(118, 36);
			nondisButton1.Size = size;
			nondis_button.TabIndex = 216;
			nondis_button.Text = "OK";
			auto_captain_button.Enabled=false;
			Button autoCaptainButton = auto_captain_button;
			point = new Point(350, 304);
			autoCaptainButton.Location = point;
			auto_captain_button.Name = "auto_captain_button";
			Button autoCaptainButton1 = auto_captain_button;
			size = new Size(104, 32);
			autoCaptainButton1.Size = size;
			auto_captain_button.TabIndex = 217;
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Visible = false;
			prcoverbox.Image = (Image)resourceManager.GetObject("prcoverbox.Image");
			PictureBox pictureBox2 = prcoverbox;
			point = new Point(16, 24);
			pictureBox2.Location = point;
			prcoverbox.Name = "prcoverbox";
			PictureBox pictureBox3 = prcoverbox;
			size = new Size(384, 530);
			pictureBox3.Size = size;
			prcoverbox.SizeMode=PictureBoxSizeMode.AutoSize;
			prcoverbox.TabIndex = 218;
			prcoverbox.TabStop = false;
			prnondistext.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label13 = prnondistext;
			point = new Point(420, 44);
			label13.Location = point;
			prnondistext.Name = "prnondistext";
			Label label14 = prnondistext;
			size = new Size(334, 144);
			label14.Size = size;
			prnondistext.TabIndex = 219;
			prnondistext.Text = "Puerto Rico v1.1 designed by Andreas Seyfarth - Programmed by Mark Blanco - Please run at resolution of at least 800x600";
			Label11.Font = new Font("Microsoft Sans Serif", 15.75f, FontStyle.Regular, GraphicsUnit.Point, 0);
			Label label111 = Label11;
			point = new Point(422, 206);
			label111.Location = point;
			Label11.Name = "Label11";
			Label label112 = Label11;
			size = new Size(334, 138);
			label112.Size = size;
			Label11.TabIndex = 220;
			Label11.Text = "10/09/05 This version contains the Prospector bug fix - Please feel free to report gameplay bugs to markblanco@hotmail.com - http://www.markblanco.com";
			size = new Size(5, 13);
			AutoScaleBaseSize = size;
			size = new Size(802, 623);
			ClientSize = size;
			Controls.Add(Label11);
			Controls.Add(prnondistext);
			Controls.Add(prcoverbox);
			Controls.Add(nondis_button);
			Controls.Add(nondis_label);
			Controls.Add(start_game_button);
			Controls.Add(auto_captain_button);
			Controls.Add(Button3);
			Controls.Add(Label2);
			Controls.Add(num_quarry_bank_label);
			Controls.Add(PictureBox1);
			Controls.Add(done_choosing_craftsman_button);
			Controls.Add(Button2);
			Controls.Add(done_trading_button);
			Controls.Add(Label12);
			Controls.Add(vpremain_label);
			Controls.Add(wharf_pic);
			Controls.Add(Button1);
			Controls.Add(Label10);
			Controls.Add(shipc_slot8);
			Controls.Add(shipc_slot7);
			Controls.Add(shipc_slot6);
			Controls.Add(shipc_slot5);
			Controls.Add(shipc_slot4);
			Controls.Add(shipc_slot3);
			Controls.Add(shipc_slot2);
			Controls.Add(shipc_slot1);
			Controls.Add(shipb_slot7);
			Controls.Add(shipb_slot6);
			Controls.Add(shipb_slot5);
			Controls.Add(shipb_slot4);
			Controls.Add(shipb_slot3);
			Controls.Add(shipb_slot2);
			Controls.Add(shipb_slot1);
			Controls.Add(shipa_slot6);
			Controls.Add(shipa_slot5);
			Controls.Add(shipa_slot4);
			Controls.Add(shipa_slot3);
			Controls.Add(shipa_slot2);
			Controls.Add(shipa_slot1);
			Controls.Add(shipc_pic);
			Controls.Add(shipb_pic);
			Controls.Add(shipa_pic);
			Controls.Add(Label9);
			Controls.Add(Label8);
			Controls.Add(Label7);
			Controls.Add(Label6);
			Controls.Add(build_p1_slot14);
			Controls.Add(build_p1_slot16);
			Controls.Add(build_p1_slot18);
			Controls.Add(build_p1_slot20);
			Controls.Add(next_turn_button);
			Controls.Add(build_p1_slot13);
			Controls.Add(build_p1_slot15);
			Controls.Add(build_p1_slot17);
			Controls.Add(build_p1_slot19);
			Controls.Add(build_p1_slot12);
			Controls.Add(build_p1_slot11);
			Controls.Add(build_p1_slot10);
			Controls.Add(build_p1_slot9);
			Controls.Add(build_p1_slot8);
			Controls.Add(build_p1_slot7);
			Controls.Add(build_p1_slot6);
			Controls.Add(build_p1_slot5);
			Controls.Add(build_p1_slot4);
			Controls.Add(build_p1_slot3);
			Controls.Add(build_p1_slot2);
			Controls.Add(build_p1_slot1);
			Controls.Add(Label3);
			Controls.Add(plant_p1_slot12);
			Controls.Add(plant_p1_slot11);
			Controls.Add(plant_p1_slot10);
			Controls.Add(plant_p1_slot9);
			Controls.Add(plant_p1_slot8);
			Controls.Add(plant_p1_slot7);
			Controls.Add(plant_p1_slot6);
			Controls.Add(plant_p1_slot5);
			Controls.Add(plant_p1_slot4);
			Controls.Add(plant_p1_slot3);
			Controls.Add(plant_p1_slot2);
			Controls.Add(plant_p1_slot1);
			Controls.Add(governor_pic);
			Controls.Add(pros2_bonus_label);
			Controls.Add(pros1_bonus_label);
			Controls.Add(captain_bonus_label);
			Controls.Add(trader_bonus_label);
			Controls.Add(craftsman_bonus_label);
			Controls.Add(builder_bonus_label);
			Controls.Add(mayor_bonus_label);
			Controls.Add(settler_bonus_label);
			Controls.Add(Label1);
			Controls.Add(gold_label);
			Controls.Add(num_colonist_bank_label);
			Controls.Add(role_prospector2_pic);
			Controls.Add(num_colonist_ship_label);
			Controls.Add(colonist_ship_pic);
			Controls.Add(role_prospector1_pic);
			Controls.Add(role_captain_pic);
			Controls.Add(role_trader_pic);
			Controls.Add(role_craftsman_pic);
			Controls.Add(role_builder_pic);
			Controls.Add(role_mayor_pic);
			Controls.Add(role_settler_pic);
			Controls.Add(num_coffee_bank_label);
			Controls.Add(num_tobacco_bank_label);
			Controls.Add(num_corn_bank_label);
			Controls.Add(num_sugar_bank_label);
			Controls.Add(num_indigo_bank_label);
			Controls.Add(plantation_available_slot6);
			Controls.Add(plantation_available_slot5);
			Controls.Add(plantation_available_slot2);
			Controls.Add(plantation_available_slot4);
			Controls.Add(plantation_available_slot1);
			Controls.Add(tradehouse_slot4);
			Controls.Add(tradehouse_slot3);
			Controls.Add(tradehouse_slot2);
			Controls.Add(tradehouse_slot1);
			Controls.Add(plantation_available_slot3);
			Controls.Add(num_coffee_label);
			Controls.Add(num_tobacco_label);
			Controls.Add(num_corn_label);
			Controls.Add(num_sugar_label);
			Controls.Add(num_indigo_label);
			Controls.Add(Label5);
			Controls.Add(Label4);
			Controls.Add(vp_chips_label);
			Controls.Add(vp_total_label);
			Controls.Add(idle_colonists_label);
			Controls.Add(player_board_pic);
			FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			size = new Size(808, 659);
			MaximumSize = size;
			Menu = MainMenu1;
			size = new Size(808, 659);
			MinimumSize = size;
			Name = "Form1";
			StartPosition = FormStartPosition.CenterScreen;
			Text = "Puerto Rico";
			ResumeLayout(false);
		}

		private void Label12_Click(object sender, EventArgs e)
		{
			help_vp_remaining();
		}

		private void Label2_Click(object sender, EventArgs e)
		{
			choose_quarry();
		}

		private void Label2_Click_1(object sender, EventArgs e)
		{
			help_colonists_bank();
		}

		public void load_shipa()
		{
			if (!captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (shipa_array[1] == 0)
			{
				p1_num_shipped = 0;
				if (ready_to_ship_indigo)
				{
					tempinteger = 0;
					tempstring2 = "Indigo";
				}
				if (ready_to_ship_sugar)
				{
					tempinteger = 1;
					tempstring2 = "Sugar";
				}
				if (ready_to_ship_corn)
				{
					tempinteger = 2;
					tempstring2 = "Corn";
				}
				if (ready_to_ship_tobacco)
				{
					tempinteger = 3;
					tempstring2 = "Tobacco";
				}
				if (ready_to_ship_coffee)
				{
					tempinteger = 4;
					tempstring2 = "Coffee";
				}
				string[] strArray = new string[] { "Are you sure you want to load the", Conversion.Str(shipa_array[0]), " capacity ship with ", tempstring2, "?" };
				confirmbox_nopic(string.Concat(strArray));
				if (confirmed)
				{
					if (!p1_done_shipping && goods_p1_array[tempinteger] >= shipa_array[0])
					{
						shipa_array[1] = shipa_array[0];
						shipa_array[2] = checked(tempinteger + 1);
						goods_p1_array[tempinteger] = checked(goods_p1_array[tempinteger] - shipa_array[0]);
						p1_num_shipped = shipa_array[0];
						end_shipping_turn_p1();
					}
					if (!p1_done_shipping && goods_p1_array[tempinteger] < shipa_array[0])
					{
						shipa_array[1] = goods_p1_array[tempinteger];
						shipa_array[2] = checked(tempinteger + 1);
						goods_p1_array[tempinteger] = 0;
						p1_num_shipped = shipa_array[1];
						end_shipping_turn_p1();
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					end_shipping_turn_p1();
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					strArray = new string[] { "You shipped your ", tempstring2, "  for", Conversion.Str(p1_num_shipped), " Victory Points" };
					infobox_role(string.Concat(strArray), "role_captain");
					update_all_labels();
				}
			}
		}

		public void load_shipb()
		{
			if (!captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (shipb_array[1] == 0)
			{
				p1_num_shipped = 0;
				if (ready_to_ship_indigo)
				{
					tempinteger = 0;
					tempstring2 = "Indigo";
				}
				if (ready_to_ship_sugar)
				{
					tempinteger = 1;
					tempstring2 = "Sugar";
				}
				if (ready_to_ship_corn)
				{
					tempinteger = 2;
					tempstring2 = "Corn";
				}
				if (ready_to_ship_tobacco)
				{
					tempinteger = 3;
					tempstring2 = "Tobacco";
				}
				if (ready_to_ship_coffee)
				{
					tempinteger = 4;
					tempstring2 = "Coffee";
				}
				string[] strArray = new string[] { "Are you sure you want to load the", Conversion.Str(shipb_array[0]), " capacity ship with ", tempstring2, "?" };
				confirmbox_nopic(string.Concat(strArray));
				if (confirmed)
				{
					if (!p1_done_shipping && goods_p1_array[tempinteger] >= shipb_array[0])
					{
						shipb_array[1] = shipb_array[0];
						shipb_array[2] = checked(tempinteger + 1);
						goods_p1_array[tempinteger] = checked(goods_p1_array[tempinteger] - shipb_array[0]);
						p1_num_shipped = shipb_array[0];
						end_shipping_turn_p1();
					}
					if (!p1_done_shipping && goods_p1_array[tempinteger] < shipb_array[0])
					{
						shipb_array[1] = goods_p1_array[tempinteger];
						shipb_array[2] = checked(tempinteger + 1);
						goods_p1_array[tempinteger] = 0;
						p1_num_shipped = shipb_array[1];
						end_shipping_turn_p1();
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					end_shipping_turn_p1();
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					strArray = new string[] { "You shipped your ", tempstring2, "  for", Conversion.Str(p1_num_shipped), " Victory Points" };
					infobox_role(string.Concat(strArray), "role_captain");
					update_all_labels();
				}
			}
		}

		public void load_shipc()
		{
			if (!captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (shipc_array[1] == 0)
			{
				p1_num_shipped = 0;
				if (ready_to_ship_indigo)
				{
					tempinteger = 0;
					tempstring2 = "Indigo";
				}
				if (ready_to_ship_sugar)
				{
					tempinteger = 1;
					tempstring2 = "Sugar";
				}
				if (ready_to_ship_corn)
				{
					tempinteger = 2;
					tempstring2 = "Corn";
				}
				if (ready_to_ship_tobacco)
				{
					tempinteger = 3;
					tempstring2 = "Tobacco";
				}
				if (ready_to_ship_coffee)
				{
					tempinteger = 4;
					tempstring2 = "Coffee";
				}
				string[] strArray = new string[] { "Are you sure you want to load the", Conversion.Str(shipc_array[0]), " capacity ship with ", tempstring2, "?" };
				confirmbox_nopic(string.Concat(strArray));
				if (confirmed)
				{
					if (!p1_done_shipping && goods_p1_array[tempinteger] >= shipc_array[0])
					{
						shipc_array[1] = shipc_array[0];
						shipc_array[2] = checked(tempinteger + 1);
						goods_p1_array[tempinteger] = checked(goods_p1_array[tempinteger] - shipc_array[0]);
						p1_num_shipped = shipc_array[0];
						end_shipping_turn_p1();
					}
					if (!p1_done_shipping && goods_p1_array[tempinteger] < shipc_array[0])
					{
						shipc_array[1] = goods_p1_array[tempinteger];
						shipc_array[2] = checked(tempinteger + 1);
						goods_p1_array[tempinteger] = 0;
						p1_num_shipped = shipc_array[1];
						end_shipping_turn_p1();
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					end_shipping_turn_p1();
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					strArray = new string[] { "You shipped your ", tempstring2, "  for", Conversion.Str(p1_num_shipped), " Victory Points" };
					infobox_role(string.Concat(strArray), "role_captain");
					update_all_labels();
				}
			}
		}

		public void load_wharf()
		{
			if (!captain_round)
			{
				Interaction.MsgBox("It's not the Captain Round - You can't load a ship right now.", 0, null);
			}
			else if (!p1_used_wharf)
			{
				p1_num_shipped = 0;
				if (ready_to_ship_indigo)
				{
					tempinteger = 0;
					tempstring2 = "Indigo";
				}
				if (ready_to_ship_sugar)
				{
					tempinteger = 1;
					tempstring2 = "Sugar";
				}
				if (ready_to_ship_corn)
				{
					tempinteger = 2;
					tempstring2 = "Corn";
				}
				if (ready_to_ship_tobacco)
				{
					tempinteger = 3;
					tempstring2 = "Tobacco";
				}
				if (ready_to_ship_coffee)
				{
					tempinteger = 4;
					tempstring2 = "Coffee";
				}
				confirmbox_building1(string.Concat("Are you sure you want use your Wharf to load ", tempstring2, "?"), 361);
				if (confirmed)
				{
					if (!p1_done_shipping)
					{
						p1_num_shipped = goods_p1_array[tempinteger];
						goods_bank_array[tempinteger] = checked(goods_bank_array[tempinteger] + goods_p1_array[tempinteger]);
						goods_p1_array[tempinteger] = 0;
						p1_used_wharf = true;
						end_shipping_turn_p1();
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					end_shipping_turn_p1();
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					string[] strArray = new string[] { "You shipped your ", tempstring2, "  for", Conversion.Str(p1_num_shipped), " Victory Points" };
					infobox_role(string.Concat(strArray), "role_captain");
					update_all_labels();
				}
			}
		}

		public void log_governor()
		{
			if (current_governor == 1)
			{
				sw.WriteLine("Player1 is the new governor");
			}
			if (current_governor == 2)
			{
				sw.WriteLine("Player2 is the new governor");
			}
			if (current_governor == 3)
			{
				sw.WriteLine("Player3 is the new governor");
			}
			if (current_governor == 4)
			{
				sw.WriteLine("Player4 is the new governor");
			}
			if (current_governor == 5)
			{
				sw.WriteLine("Player5 is the new governor");
			}
		}

		public void log_process_role(object pnum, object logrole)
		{
			if (ObjectType.ObjTst(pnum, "p1", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("          Player1 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p2", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("          Player2 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p3", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("          Player3 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p4", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("          Player4 is processing the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p5", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("          Player5 is processing the ", logrole));
			}
		}

		public void log_role_chooser(object pnum, object logrole)
		{
			if (ObjectType.ObjTst(pnum, "p1", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("     Player1 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p2", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("     Player2 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p3", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("     Player3 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p4", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("     Player4 chose the ", logrole));
			}
			if (ObjectType.ObjTst(pnum, "p5", false) == 0)
			{
				sw.WriteLine(ObjectType.AddObj("     Player5 chose the ", logrole));
			}
		}

		[STAThread]
		public static void Main()
		{
			Application.Run(new Form1());
		}

		public void make_building_pics_active()
		{
			build_p1_slot1.Cursor = Cursors.Hand;
			build_p1_slot2.Cursor = Cursors.Hand;
			build_p1_slot3.Cursor = Cursors.Hand;
			build_p1_slot4.Cursor = Cursors.Hand;
			build_p1_slot5.Cursor = Cursors.Hand;
			build_p1_slot6.Cursor = Cursors.Hand;
			build_p1_slot7.Cursor = Cursors.Hand;
			build_p1_slot8.Cursor = Cursors.Hand;
			build_p1_slot9.Cursor = Cursors.Hand;
			build_p1_slot10.Cursor = Cursors.Hand;
			build_p1_slot11.Cursor = Cursors.Hand;
			build_p1_slot12.Cursor = Cursors.Hand;
			build_p1_slot13.Cursor = Cursors.Hand;
			build_p1_slot14.Cursor = Cursors.Hand;
			build_p1_slot15.Cursor = Cursors.Hand;
			build_p1_slot16.Cursor = Cursors.Hand;
			build_p1_slot17.Cursor = Cursors.Hand;
			build_p1_slot18.Cursor = Cursors.Hand;
			build_p1_slot19.Cursor = Cursors.Hand;
			build_p1_slot20.Cursor = Cursors.Hand;
		}

		public void make_building_pics_inactive()
		{
			build_p1_slot1.Cursor = Cursors.No;
			build_p1_slot2.Cursor = Cursors.No;
			build_p1_slot3.Cursor = Cursors.No;
			build_p1_slot4.Cursor = Cursors.No;
			build_p1_slot5.Cursor = Cursors.No;
			build_p1_slot6.Cursor = Cursors.No;
			build_p1_slot7.Cursor = Cursors.No;
			build_p1_slot8.Cursor = Cursors.No;
			build_p1_slot9.Cursor = Cursors.No;
			build_p1_slot10.Cursor = Cursors.No;
			build_p1_slot11.Cursor = Cursors.No;
			build_p1_slot12.Cursor = Cursors.No;
			build_p1_slot13.Cursor = Cursors.No;
			build_p1_slot14.Cursor = Cursors.No;
			build_p1_slot15.Cursor = Cursors.No;
			build_p1_slot16.Cursor = Cursors.No;
			build_p1_slot17.Cursor = Cursors.No;
			build_p1_slot18.Cursor = Cursors.No;
			build_p1_slot19.Cursor = Cursors.No;
			build_p1_slot20.Cursor = Cursors.No;
		}

		public void make_goods_bank_buttons_active()
		{
			num_indigo_bank_label.Cursor = Cursors.Hand;
			num_sugar_bank_label.Cursor = Cursors.Hand;
			num_corn_bank_label.Cursor = Cursors.Hand;
			num_tobacco_bank_label.Cursor = Cursors.Hand;
			num_coffee_bank_label.Cursor = Cursors.Hand;
		}

		public void make_goods_bank_buttons_inactive()
		{
			num_indigo_bank_label.Cursor = Cursors.No;
			num_sugar_bank_label.Cursor = Cursors.No;
			num_corn_bank_label.Cursor = Cursors.No;
			num_tobacco_bank_label.Cursor = Cursors.No;
			num_coffee_bank_label.Cursor = Cursors.No;
		}

		public void make_plantation_pics_active()
		{
			plant_p1_slot1.Cursor = Cursors.Hand;
			plant_p1_slot2.Cursor = Cursors.Hand;
			plant_p1_slot3.Cursor = Cursors.Hand;
			plant_p1_slot4.Cursor = Cursors.Hand;
			plant_p1_slot5.Cursor = Cursors.Hand;
			plant_p1_slot6.Cursor = Cursors.Hand;
			plant_p1_slot7.Cursor = Cursors.Hand;
			plant_p1_slot8.Cursor = Cursors.Hand;
			plant_p1_slot9.Cursor = Cursors.Hand;
			plant_p1_slot10.Cursor = Cursors.Hand;
			plant_p1_slot11.Cursor = Cursors.Hand;
			plant_p1_slot12.Cursor = Cursors.Hand;
		}

		public void make_plantation_pics_inactive()
		{
			plant_p1_slot1.Cursor = Cursors.No;
			plant_p1_slot2.Cursor = Cursors.No;
			plant_p1_slot3.Cursor = Cursors.No;
			plant_p1_slot4.Cursor = Cursors.No;
			plant_p1_slot5.Cursor = Cursors.No;
			plant_p1_slot6.Cursor = Cursors.No;
			plant_p1_slot7.Cursor = Cursors.No;
			plant_p1_slot8.Cursor = Cursors.No;
			plant_p1_slot9.Cursor = Cursors.No;
			plant_p1_slot10.Cursor = Cursors.No;
			plant_p1_slot11.Cursor = Cursors.No;
			plant_p1_slot12.Cursor = Cursors.No;
		}

		public void make_player_goods_buttons_active()
		{
			num_indigo_label.Cursor = Cursors.Hand;
			num_sugar_label.Cursor = Cursors.Hand;
			num_corn_label.Cursor = Cursors.Hand;
			num_tobacco_label.Cursor = Cursors.Hand;
			num_coffee_label.Cursor = Cursors.Hand;
		}

		public void make_player_goods_buttons_inactive()
		{
			num_indigo_label.Cursor = Cursors.No;
			num_sugar_label.Cursor = Cursors.No;
			num_corn_label.Cursor = Cursors.No;
			num_tobacco_label.Cursor = Cursors.No;
			num_coffee_label.Cursor = Cursors.No;
		}

		public void make_role_buttons_active()
		{
			role_settler_pic.Cursor = Cursors.Hand;
			role_mayor_pic.Cursor = Cursors.Hand;
			role_builder_pic.Cursor = Cursors.Hand;
			role_craftsman_pic.Cursor = Cursors.Hand;
			role_trader_pic.Cursor = Cursors.Hand;
			role_captain_pic.Cursor = Cursors.Hand;
			role_prospector1_pic.Cursor = Cursors.Hand;
			role_prospector2_pic.Cursor = Cursors.Hand;
			settler_bonus_label.Cursor = Cursors.Hand;
			mayor_bonus_label.Cursor = Cursors.Hand;
			builder_bonus_label.Cursor = Cursors.Hand;
			craftsman_bonus_label.Cursor = Cursors.Hand;
			trader_bonus_label.Cursor = Cursors.Hand;
			captain_bonus_label.Cursor = Cursors.Hand;
			pros1_bonus_label.Cursor = Cursors.Hand;
			pros2_bonus_label.Cursor = Cursors.Hand;
		}

		public void make_role_buttons_inactive()
		{
			role_settler_pic.Cursor = Cursors.Help;
			role_mayor_pic.Cursor = Cursors.Help;
			role_builder_pic.Cursor = Cursors.Help;
			role_craftsman_pic.Cursor = Cursors.Help;
			role_trader_pic.Cursor = Cursors.Help;
			role_captain_pic.Cursor = Cursors.Help;
			role_prospector1_pic.Cursor = Cursors.Help;
			role_prospector2_pic.Cursor = Cursors.Help;
			settler_bonus_label.Cursor = Cursors.Help;
			mayor_bonus_label.Cursor = Cursors.Help;
			builder_bonus_label.Cursor = Cursors.Help;
			craftsman_bonus_label.Cursor = Cursors.Help;
			trader_bonus_label.Cursor = Cursors.Help;
			captain_bonus_label.Cursor = Cursors.Help;
			pros1_bonus_label.Cursor = Cursors.Help;
			pros2_bonus_label.Cursor = Cursors.Help;
		}

		public void make_settler_buttons_active()
		{
			plantation_available_slot1.Cursor = Cursors.Hand;
			plantation_available_slot2.Cursor = Cursors.Hand;
			plantation_available_slot3.Cursor = Cursors.Hand;
			plantation_available_slot4.Cursor = Cursors.Hand;
			plantation_available_slot5.Cursor = Cursors.Hand;
			plantation_available_slot6.Cursor = Cursors.Hand;
			check_for_building(231);
			if (current_player == 1 & (current_role_chooser == 1 | found_building))
			{
				PictureBox1.Cursor = Cursors.Hand;
				num_quarry_bank_label.Cursor = Cursors.Hand;
			}
		}

		public void make_settler_buttons_inactive()
		{
			plantation_available_slot1.Cursor = Cursors.No;
			plantation_available_slot2.Cursor = Cursors.No;
			plantation_available_slot3.Cursor = Cursors.No;
			plantation_available_slot4.Cursor = Cursors.No;
			plantation_available_slot5.Cursor = Cursors.No;
			plantation_available_slot6.Cursor = Cursors.No;
			PictureBox1.Cursor = Cursors.No;
			num_quarry_bank_label.Cursor = Cursors.No;
		}

		public void make_ship_pics_active()
		{
			shipa_pic.Cursor = Cursors.Hand;
			shipb_pic.Cursor = Cursors.Hand;
			shipc_pic.Cursor = Cursors.Hand;
			shipa_slot1.Cursor = Cursors.Hand;
			shipa_slot2.Cursor = Cursors.Hand;
			shipa_slot3.Cursor = Cursors.Hand;
			shipa_slot4.Cursor = Cursors.Hand;
			shipa_slot5.Cursor = Cursors.Hand;
			shipa_slot6.Cursor = Cursors.Hand;
			shipb_slot1.Cursor = Cursors.Hand;
			shipb_slot2.Cursor = Cursors.Hand;
			shipb_slot3.Cursor = Cursors.Hand;
			shipb_slot4.Cursor = Cursors.Hand;
			shipb_slot5.Cursor = Cursors.Hand;
			shipb_slot6.Cursor = Cursors.Hand;
			shipb_slot7.Cursor = Cursors.Hand;
			shipc_slot1.Cursor = Cursors.Hand;
			shipc_slot2.Cursor = Cursors.Hand;
			shipc_slot3.Cursor = Cursors.Hand;
			shipc_slot4.Cursor = Cursors.Hand;
			shipc_slot5.Cursor = Cursors.Hand;
			shipc_slot6.Cursor = Cursors.Hand;
			shipc_slot7.Cursor = Cursors.Hand;
			shipc_slot8.Cursor = Cursors.Hand;
			wharf_pic.Cursor = Cursors.Hand;
		}

		public void make_ship_pics_inactive()
		{
			shipa_pic.Cursor = Cursors.No;
			shipb_pic.Cursor = Cursors.No;
			shipc_pic.Cursor = Cursors.No;
			shipa_slot1.Cursor = Cursors.No;
			shipa_slot2.Cursor = Cursors.No;
			shipa_slot3.Cursor = Cursors.No;
			shipa_slot4.Cursor = Cursors.No;
			shipa_slot5.Cursor = Cursors.No;
			shipa_slot6.Cursor = Cursors.No;
			shipb_slot1.Cursor = Cursors.No;
			shipb_slot2.Cursor = Cursors.No;
			shipb_slot3.Cursor = Cursors.No;
			shipb_slot4.Cursor = Cursors.No;
			shipb_slot5.Cursor = Cursors.No;
			shipb_slot6.Cursor = Cursors.No;
			shipb_slot7.Cursor = Cursors.No;
			shipc_slot1.Cursor = Cursors.No;
			shipc_slot2.Cursor = Cursors.No;
			shipc_slot3.Cursor = Cursors.No;
			shipc_slot4.Cursor = Cursors.No;
			shipc_slot5.Cursor = Cursors.No;
			shipc_slot6.Cursor = Cursors.No;
			shipc_slot7.Cursor = Cursors.No;
			shipc_slot8.Cursor = Cursors.No;
			wharf_pic.Cursor = Cursors.No;
		}

		private void mayor_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_mayor();
			}
		}

		private void menu_game_exit_Click(object sender, EventArgs e)
		{
			sw.Close();
			ProjectData.EndApp();
		}

		private void menu_game_new_Click(object sender, EventArgs e)
		{
			start_new_game();
		}

		private void menu_help_about_Click(object sender, EventArgs e)
		{
			tempinteger = dialog_box_OK_timer;
			dialog_box_OK_timer = 10;
			infobox_nopic("Puerto Rico for Windows v1.1 - Designed by Andreas Seyfarth - Programmed by Mark Blanco - 09/02/03 - 10/24/03 - Prospector Bug Fixed on 10/09/05 markblanco@hotmail.com - http://www.markblanco.com");
			dialog_box_OK_timer = tempinteger;
		}

		private void menu_help_rules_Click(object sender, EventArgs e)
		{
			tempinteger = dialog_box_OK_timer;
			dialog_box_OK_timer = 10;
			infobox_nopic("If you don't know the rules, you shouldn't be playing.   - Just kidding...this section under construction.");
			dialog_box_OK_timer = tempinteger;
		}

		private void MenuItem3_Click(object sender, EventArgs e)
		{
			if (!game_started)
			{
				setup_form.ShowDialog();
			}
			else
			{
				Interaction.MsgBox("The game is in progress, you cannot modify the player settings.", 0, null);
			}
		}

		private void MenuItem4_Click(object sender, EventArgs e)
		{
			if (!player2_form.Visible)
			{
				player2_form.Visible = true;
			}
			else
			{
				player2_form.Visible = false;
			}
		}

		private void MenuItem5_Click(object sender, EventArgs e)
		{
			if (!player3_form.Visible)
			{
				player3_form.Visible = true;
			}
			else
			{
				player3_form.Visible = false;
			}
		}

		private void MenuItem6_Click(object sender, EventArgs e)
		{
			if (number_of_players == 4 | number_of_players == 5)
			{
				if (!player4_form.Visible)
				{
					player4_form.Visible = true;
				}
				else
				{
					player4_form.Visible = false;
				}
			}
		}

		private void MenuItem7_Click(object sender, EventArgs e)
		{
			if (number_of_players == 5)
			{
				if (!player5_form.Visible)
				{
					player5_form.Visible = true;
				}
				else
				{
					player5_form.Visible = false;
				}
			}
		}

		private void MenuItem8_Click(object sender, EventArgs e)
		{
			build_buildings();
		}

		private void next_turn_button_Click(object sender, EventArgs e)
		{
			next_turn_routine();
		}

		public void next_turn_routine()
		{
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			restart_turn_routine = false;
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (new_role_chooser)
				{
					restart_turn_routine = true;
					new_role_chooser = false;
					determine_next_role_chooser();
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (new_governor)
				{
					restart_turn_routine = true;
					new_governor = false;
					if (!(game_end_triggered_colonists | game_end_triggered_buildings | game_end_triggered_victorypoints))
					{
						determine_governor();
					}
					else
					{
						game_over_routine();
					}
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (settler_round)
				{
					next_turn_routine_settler();
					if (current_player != current_role_chooser & current_player != 1 & settler_round)
					{
						next_turn_routine();
					}
					if (!settler_round)
					{
						next_turn_button.Text = "End Settler Phase-x";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
					}
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (mayor_round)
				{
					next_turn_routine_mayor();
					if (current_player != current_role_chooser & current_player != 1 & mayor_round)
					{
						next_turn_routine();
					}
					if (!mayor_round)
					{
						next_turn_button.Text = "End Mayor Phase-x";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
					}
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (builder_round)
				{
					next_turn_routine_builder();
					if (current_player != current_role_chooser & current_player != 1 & builder_round)
					{
						next_turn_routine();
					}
					if (!builder_round)
					{
						next_turn_button.Text = "End Builder Phase-x";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
					}
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (craftsman_round)
				{
					next_turn_routine_craftsman();
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (trader_round)
				{
					next_turn_routine_trader();
					if (current_player != current_role_chooser & current_player != 1 & trader_round)
					{
						next_turn_routine();
					}
					if (!trader_round)
					{
						next_turn_button.Text = "End Trader Phase-x";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
					}
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (captain_round)
				{
					next_turn_routine_captain();
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (prospector1_round)
				{
					next_turn_routine_pros1();
					restart_turn_routine = true;
				}
			}
			if (ObjectType.ObjTst(restart_turn_routine, false, false) == 0)
			{
				if (prospector2_round)
				{
					next_turn_routine_pros2();
					restart_turn_routine = true;
				}
			}
		}

		public void next_turn_routine_builder()
		{
			if (player_order_array[checked(current_player + 1)] != 9)
			{
				current_player = player_order_array[checked(current_player + 1)];
			}
			else
			{
				current_player = 1;
			}
			if (current_player != current_role_chooser)
			{
				if (current_player == 1 & builder_round)
				{
					Text =string.Concat(p1_name, "'s Turn - builder Phase");
					infobox_role(string.Concat("It is now ", p1_name, "'s turn to perform the builder role."), "role_builder");
					p1_process_builder();
				}
				if (current_player == 2 & builder_round)
				{
					Text =string.Concat(p2_name, "'s Turn - builder Phase");
					p2_process_builder();
				}
				if (current_player == 3 & builder_round)
				{
					Text =string.Concat(p3_name, "'s Turn - builder Phase");
					p3_process_builder();
				}
				if (current_player == 4 & builder_round)
				{
					Text =string.Concat(p4_name, "'s Turn - builder Phase");
					p4_process_builder();
				}
				if (current_player == 5 & builder_round)
				{
					Text =string.Concat(p5_name, "'s Turn - builder Phase");
					p5_process_builder();
				}
			}
			else
			{
				builder_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("All players have completed the builder phase.", "role_builder");
				previous_role = "builder";
				next_turn_button.Text = "End Builder Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
			}
		}

		public void next_turn_routine_captain()
		{
			make_player_goods_buttons_inactive();
			all_done_all_shipping = false;
			if (number_of_players == 3 && p1_done_all_shipping & p2_done_all_shipping & p3_done_all_shipping)
			{
				all_done_all_shipping = true;
			}
			if (number_of_players == 4 && p1_done_all_shipping & p2_done_all_shipping & p3_done_all_shipping & p4_done_all_shipping)
			{
				all_done_all_shipping = true;
			}
			if (number_of_players == 5 && p1_done_all_shipping & p2_done_all_shipping & p3_done_all_shipping & p4_done_all_shipping & p5_done_all_shipping)
			{
				all_done_all_shipping = true;
			}
			if (player_order_array[checked(current_player + 1)] != 9)
			{
				current_player = player_order_array[checked(current_player + 1)];
			}
			else
			{
				current_player = 1;
			}
			if (!(current_player == current_role_chooser & all_done_all_shipping))
			{
				if (current_player == 1)
				{
					Text =string.Concat(p1_name, "'s Turn - captain Phase");
					p1_process_captain();
				}
				if (current_player == 2)
				{
					Text =string.Concat(p2_name, "'s Turn - captain Phase");
					p2_process_captain();
				}
				if (current_player == 3)
				{
					Text =string.Concat(p3_name, "'s Turn - captain Phase");
					p3_process_captain();
				}
				if (current_player == 4)
				{
					Text =string.Concat(p4_name, "'s Turn - captain Phase");
					p4_process_captain();
				}
				if (current_player == 5)
				{
					Text =string.Concat(p5_name, "'s Turn - captain Phase");
					p5_process_captain();
				}
			}
			else
			{
				captain_round = false;
				p1_done_shipping = false;
				p1_done_all_shipping = false;
				p2_done_all_shipping = false;
				p3_done_all_shipping = false;
				p4_done_all_shipping = false;
				p5_done_all_shipping = false;
				infobox_role("All players have completed the captain phase. Excess goods must be dumped and full ships emptied.", "role_captain");
				previous_role = "captain";
				end_captain_phase();
				autoclick_captain_phase_on = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
			}
		}

		public void next_turn_routine_craftsman()
		{
			if (current_player != current_role_chooser)
			{
				if (current_player == 1 & craftsman_round)
				{
					Text =string.Concat(p1_name, "'s Turn - craftsman Phase");
					infobox_role(string.Concat("It is now ", p1_name, "'s turn to perform the craftsman role."), "role_craftsman");
					p1_process_craftsman();
				}
				if (current_player == 2)
				{
					if (current_role_chooser == 2 & craftsman_round)
					{
						Text =string.Concat(p2_name, "'s Turn - craftsman Phase");
						infobox_role(string.Concat("It is now ", p2_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					p2_process_craftsman();
				}
				if (current_player == 3)
				{
					if (current_role_chooser == 3 & craftsman_round)
					{
						Text =string.Concat(p3_name, "'s Turn - craftsman Phase");
						infobox_role(string.Concat("It is now ", p3_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					p3_process_craftsman();
				}
				if (current_player == 4)
				{
					if (current_role_chooser == 4 & craftsman_round)
					{
						Text =string.Concat(p4_name, "'s Turn - craftsman Phase");
						infobox_role(string.Concat("It is now ", p4_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					p4_process_craftsman();
				}
				if (current_player == 5)
				{
					if (current_role_chooser == 5 & craftsman_round)
					{
						Text =string.Concat(p5_name, "'s Turn - craftsman Phase");
						infobox_role(string.Concat("It is now ", p5_name, "'s turn to perform the craftsman role."), "role_craftsman");
					}
					p5_process_craftsman();
				}
			}
			else
			{
				craftsman_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("The Craftsman Phase has completed.", "role_craftsman");
				previous_role = "craftsman";
				next_turn_button.Text = "End Craftsman Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				end_craftsman_phase();
			}
		}

		public void next_turn_routine_mayor()
		{
			make_plantation_pics_inactive();
			make_building_pics_inactive();
			if (player_order_array[checked(current_player + 1)] != 9)
			{
				current_player = player_order_array[checked(current_player + 1)];
			}
			else
			{
				current_player = 1;
			}
			if (current_player != current_role_chooser)
			{
				if (current_player == 1 & mayor_round)
				{
					Text =string.Concat(p1_name, "'s Turn - mayor Phase");
					p1_process_mayor();
				}
				if (current_player == 2 & mayor_round)
				{
					Text =string.Concat(p2_name, "'s Turn - mayor Phase");
					p2_process_mayor();
				}
				if (current_player == 3 & mayor_round)
				{
					Text =string.Concat(p3_name, "'s Turn - mayor Phase");
					p3_process_mayor();
				}
				if (current_player == 4 & mayor_round)
				{
					Text =string.Concat(p4_name, "'s Turn - mayor Phase");
					p4_process_mayor();
				}
				if (current_player == 5 & mayor_round)
				{
					Text =string.Concat(p5_name, "'s Turn - mayor Phase");
					p5_process_mayor();
				}
			}
			else
			{
				mayor_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("All players have completed the mayor phase. The colonist ship will be refilled.", "role_mayor");
				previous_role = "mayor";
				next_turn_button.Text = "End Mayor Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				end_mayor_phase();
			}
		}

		public void next_turn_routine_pros1()
		{
			if (current_player != current_role_chooser)
			{
				if (current_player == 1)
				{
					Text =string.Concat(p1_name, "'s Turn - prospector1 Phase");
					if (current_role_chooser == 1)
					{
						infobox_role(string.Concat("It is now ", p1_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					p1_process_prospector1();
				}
				if (current_player == 2)
				{
					Text =string.Concat(p2_name, "'s Turn - prospector1 Phase");
					if (current_role_chooser == 2)
					{
						infobox_role(string.Concat("It is now ", p2_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					p2_process_prospector1();
				}
				if (current_player == 3)
				{
					Text =string.Concat(p3_name, "'s Turn - prospector1 Phase");
					if (current_role_chooser == 3)
					{
						infobox_role(string.Concat("It is now ", p3_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					p3_process_prospector1();
				}
				if (current_player == 4)
				{
					Text =string.Concat(p4_name, "'s Turn - prospector1 Phase");
					if (current_role_chooser == 4)
					{
						infobox_role(string.Concat("It is now ", p4_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					p4_process_prospector1();
				}
				if (current_player == 5)
				{
					Text =string.Concat(p5_name, "'s Turn - prospector1 Phase");
					if (current_role_chooser == 5)
					{
						infobox_role(string.Concat("It is now ", p5_name, "'s turn to perform the prospector1 role."), "role_prospector1");
					}
					p5_process_prospector1();
				}
			}
			else
			{
				prospector1_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("All players have completed the Prospector Phase.", "role_prospector1");
				previous_role = "prospector";
				next_turn_button.Text = "End Prospector Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				end_pros1_phase();
			}
		}

		public void next_turn_routine_pros2()
		{
			if (current_player != current_role_chooser)
			{
				if (current_player == 1)
				{
					Text =string.Concat(p1_name, "'s Turn - prospector2 Phase");
					if (current_role_chooser == 1)
					{
						infobox_role(string.Concat("It is now ", p1_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					p1_process_prospector2();
				}
				if (current_player == 2)
				{
					Text =string.Concat(p2_name, "'s Turn - prospector2 Phase");
					if (current_role_chooser == 2)
					{
						infobox_role(string.Concat("It is now ", p2_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					p2_process_prospector2();
				}
				if (current_player == 3)
				{
					Text =string.Concat(p3_name, "'s Turn - prospector2 Phase");
					if (current_role_chooser == 3)
					{
						infobox_role(string.Concat("It is now ", p3_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					p3_process_prospector2();
				}
				if (current_player == 4)
				{
					Text =string.Concat(p4_name, "'s Turn - prospector2 Phase");
					if (current_role_chooser == 4)
					{
						infobox_role(string.Concat("It is now ", p4_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					p4_process_prospector2();
				}
				if (current_player == 5)
				{
					Text =string.Concat(p5_name, "'s Turn - prospector2 Phase");
					if (current_role_chooser == 5)
					{
						infobox_role(string.Concat("It is now ", p5_name, "'s turn to perform the prospector2 role."), "role_prospector1");
					}
					p5_process_prospector2();
				}
			}
			else
			{
				prospector2_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("All players have completed the prospector phase.", "role_prospector1");
				previous_role = "prospector";
				next_turn_button.Text = "End Prospector Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				end_pros2_phase();
			}
		}

		public void next_turn_routine_settler()
		{
			if (player_order_array[checked(current_player + 1)] != 9)
			{
				current_player = player_order_array[checked(current_player + 1)];
			}
			else
			{
				current_player = 1;
			}
			if (current_player != current_role_chooser)
			{
				if (current_player == 1 & settler_round)
				{
					formtitle("p1", "Settler Phase");
					p1_process_settler();
				}
				if (current_player == 2 & settler_round)
				{
					formtitle("p2", "Settler Phase");
					p2_process_settler();
				}
				if (current_player == 3 & settler_round)
				{
					formtitle("p3", "Settler Phase");
					p3_process_settler();
				}
				if (current_player == 4 & settler_round)
				{
					formtitle("p4", "Settler Phase");
					p4_process_settler();
				}
				if (current_player == 5 & settler_round)
				{
					formtitle("p5", "Settler Phase");
					p5_process_settler();
				}
			}
			else
			{
				Text = "End of Settler Phase";
				settler_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("All players have completed the Settler phase. New plantation tiles will be drawn now.", "role_settler");
				previous_role = "settler";
				next_turn_button.Text = "End Settler Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				end_settler_phase();
			}
		}

		public void next_turn_routine_trader()
		{
			if (player_order_array[checked(current_player + 1)] != 9)
			{
				current_player = player_order_array[checked(current_player + 1)];
			}
			else
			{
				current_player = 1;
			}
			if (current_player != current_role_chooser)
			{
				if (current_player == 1 & trader_round)
				{
					Text =string.Concat(p1_name, "'s Turn - trader Phase");
					infobox_role(string.Concat("It is now ", p1_name, "'s turn to perform the trader role."), "role_trader");
					p1_process_trader();
				}
				if (current_player == 2 & trader_round)
				{
					Text =string.Concat(p2_name, "'s Turn - trader Phase");
					p2_process_trader();
				}
				if (current_player == 3 & trader_round)
				{
					Text =string.Concat(p3_name, "'s Turn - trader Phase");
					p3_process_trader();
				}
				if (current_player == 4 & trader_round)
				{
					Text =string.Concat(p4_name, "'s Turn - trader Phase");
					p4_process_trader();
				}
				if (current_player == 5 & trader_round)
				{
					Text =string.Concat(p5_name, "'s Turn - trader Phase");
					p5_process_trader();
				}
			}
			else
			{
				trader_round = false;
				if (player_order_array[checked(current_player + 1)] != 9)
				{
					current_player = player_order_array[checked(current_player + 1)];
				}
				else
				{
					current_player = 1;
				}
				current_role_chooser = current_player;
				if (current_role_chooser != current_governor)
				{
					new_governor = false;
					new_role_chooser = true;
				}
				else
				{
					new_governor = true;
					new_role_chooser = false;
				}
				infobox_role("All players have completed the trader phase.", "role_trader");
				make_player_goods_buttons_inactive();
				previous_role = "trader";
				next_turn_button.Text = "End Trader Phase";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
				end_trader_phase();
			}
		}

		private void nondis_button_Click(object sender, EventArgs e)
		{
			nondis_button.Enabled=false;
			nondis_button.Visible = false;
			nondis_label.Enabled=false;
			nondis_label.Visible = false;
			prnondistext.Enabled=false;
			prnondistext.Visible = false;
			Label11.Enabled=false;
			Label11.Visible = false;
			prcoverbox.Enabled=false;
			prcoverbox.Visible = false;
			menu_game.Enabled = true;
			menu_view.Enabled = true;
			menu_help.Enabled = true;
		}

		private void num_coffee_bank_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (craftsman_round)
			{
				if (current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (goods_this_turn_p1_array[4] <= 0)
				{
					Interaction.MsgBox("You can't choose coffee, since you didn't produce it this turn.", 0, null);
				}
				else if (goods_bank_array[4] <= 1)
				{
					Interaction.MsgBox("There is no coffee left. Choose another good.", 0, null);
				}
				else
				{
					confirmbox_role("Do you want coffee as your extra good?", "role_craftsman");
					if (confirmed)
					{
						make_goods_bank_buttons_inactive();
						goods_bank_array[4] = checked(goods_bank_array[4] - 1);
						p1_chose_extra_good = true;
						formtitle("p1", "Craftsman Phase - Your Turn is Over");
						next_turn_button.Text = "End Turn";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
						goods_p1_array[4] = checked(goods_p1_array[4] + 1);
						update_all_labels();
					}
				}
			}
		}

		private void num_coffee_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (trader_round)
				{
					trade_coffee();
				}
				if (captain_round)
				{
					ship_coffee();
				}
			}
		}

		private void num_colonist_bank_label_Click(object sender, EventArgs e)
		{
			help_colonists_bank();
		}

		private void num_colonist_ship_label_Click(object sender, EventArgs e)
		{
			help_colonists_on_ship();
		}

		private void num_corn_bank_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (craftsman_round)
			{
				if (current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (goods_this_turn_p1_array[2] <= 0)
				{
					Interaction.MsgBox("You can't choose corn, since you didn't produce it this turn.", 0, null);
				}
				else if (goods_bank_array[2] <= 1)
				{
					Interaction.MsgBox("There is no corn left. Choose another good.", 0, null);
				}
				else
				{
					confirmbox_role("Do you want corn as your extra good?", "role_craftsman");
					if (confirmed)
					{
						make_goods_bank_buttons_inactive();
						goods_bank_array[2] = checked(goods_bank_array[2] - 1);
						goods_p1_array[2] = checked(goods_p1_array[2] + 1);
						p1_chose_extra_good = true;
						formtitle("p1", "Craftsman Phase - Your Turn is Over");
						next_turn_button.Text = "End Turn";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
						update_all_labels();
					}
				}
			}
		}

		private void num_corn_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (trader_round)
				{
					trade_corn();
				}
				if (captain_round)
				{
					ship_corn();
				}
			}
		}

		private void num_indigo_bank_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (craftsman_round)
			{
				if (current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (goods_this_turn_p1_array[0] <= 0)
				{
					Interaction.MsgBox("You can't choose indigo, since you didn't produce it this turn.", 0, null);
				}
				else if (goods_bank_array[0] <= 1)
				{
					Interaction.MsgBox("There is no indigo left. Choose another good.", 0, null);
				}
				else
				{
					confirmbox_role("Do you want indigo as your extra good?", "role_craftsman");
					if (confirmed)
					{
						make_goods_bank_buttons_inactive();
						goods_bank_array[0] = checked(goods_bank_array[0] - 1);
						goods_p1_array[0] = checked(goods_p1_array[0] + 1);
						p1_chose_extra_good = true;
						formtitle("p1", "Craftsman Phase - Your Turn is Over");
						next_turn_button.Text = "End Turn";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
						update_all_labels();
					}
				}
			}
		}

		private void num_indigo_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (trader_round)
				{
					trade_indigo();
				}
				if (captain_round)
				{
					ship_indigo();
				}
			}
		}

		private void num_quarry_bank_label_Click(object sender, EventArgs e)
		{
			choose_quarry();
		}

		private void num_sugar_bank_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (craftsman_round)
			{
				if (current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (goods_this_turn_p1_array[1] <= 0)
				{
					Interaction.MsgBox("You can't choose sugar, since you didn't produce it this turn.", 0, null);
				}
				else if (goods_bank_array[1] <= 1)
				{
					Interaction.MsgBox("There is no sugar left. Choose another good.", 0, null);
				}
				else
				{
					confirmbox_role("Do you want sugar as your extra good?", "role_craftsman");
					if (confirmed)
					{
						make_goods_bank_buttons_inactive();
						goods_bank_array[1] = checked(goods_bank_array[1] - 1);
						goods_p1_array[1] = checked(goods_p1_array[1] + 1);
						p1_chose_extra_good = true;
						formtitle("p1", "Craftsman Phase - Your Turn is Over");
						next_turn_button.Text = "End Turn";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
						update_all_labels();
					}
				}
			}
		}

		private void num_sugar_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (trader_round)
				{
					trade_sugar();
				}
				if (captain_round)
				{
					ship_sugar();
				}
			}
		}

		private void num_tobacco_bank_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (craftsman_round)
			{
				if (current_role_chooser != 1)
				{
					Interaction.MsgBox("You were not the role chooser. You can't take an extra good. Your turn is over.", 0, null);
				}
				else if (p1_chose_extra_good)
				{
					Interaction.MsgBox("You already chose your extra good. Your turn is over.", 0, null);
				}
				else if (goods_this_turn_p1_array[3] <= 0)
				{
					Interaction.MsgBox("You can't choose tobacco, since you didn't produce it this turn.", 0, null);
				}
				else if (goods_bank_array[3] <= 1)
				{
					Interaction.MsgBox("There is no tobacco left. Choose another good.", 0, null);
				}
				else
				{
					confirmbox_role("Do you want tobacco as your extra good?", "role_craftsman");
					if (confirmed)
					{
						make_goods_bank_buttons_inactive();
						goods_bank_array[3] = checked(goods_bank_array[3] - 1);
						goods_p1_array[3] = checked(goods_p1_array[3] + 1);
						p1_chose_extra_good = true;
						formtitle("p1", "Craftsman Phase - Your Turn is Over");
						next_turn_button.Text = "End Turn";
						next_turn_button.Enabled = true;
						next_turn_button.Visible = true;
						update_all_labels();
					}
				}
			}
		}

		private void num_tobacco_label_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else
			{
				if (trader_round)
				{
					trade_tobacco();
				}
				if (captain_round)
				{
					ship_tobacco();
				}
			}
		}

		public void p1_choose_role()
		{
			make_role_buttons_active();
			turn_number = checked(turn_number + 1);
			update_summary();
			next_turn_button.Visible = false;
			next_turn_button.Enabled=false;
			formtitle("p1", "Choose a role");
			p1_choosing_role = true;
		}

		public void p1_process_builder()
		{
			log_process_role("p1", "Builder");
			update_summary();
			next_turn_button.Text = "End Turn";
			next_turn_button.Visible = false;
			next_turn_button.Enabled=false;
			p1_built = false;
			p1_built_nothing = false;
			processed_builder = false;
			formtitle("p1", "Choose a Building to construct");
			infobox_role("Please choose a building to construct.", "role_builder");
			build_buildings();
		}

		public void p1_process_captain()
		{
			log_process_role("p1", "Captain");
			update_summary();
			ready_to_ship_indigo = false;
			ready_to_ship_sugar = false;
			ready_to_ship_corn = false;
			ready_to_ship_tobacco = false;
			ready_to_ship_coffee = false;
			need_to_pick_ship = false;
			p1_done_shipping = false;
			p1_done_all_shipping = false;
			next_turn_button.Text = "Next Shipper";
			next_turn_button.Visible = false;
			next_turn_button.Enabled=false;
			determine_goods_to_ship();
			update_ship_cargo();
			space_to_ship = false;
			if (goods_p1_array[0] > 0 & indigo_ship_available & !indigo_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[1] > 0 & sugar_ship_available & !sugar_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[2] > 0 & corn_ship_available & !corn_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[3] > 0 & tobacco_ship_available & !tobacco_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[4] > 0 & coffee_ship_available & !coffee_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[0] > 0 & empty_ship_available & !indigo_ship_available & !indigo_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[1] > 0 & empty_ship_available & !sugar_ship_available & !sugar_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[2] > 0 & empty_ship_available & !corn_ship_available & !corn_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[3] > 0 & empty_ship_available & !tobacco_ship_available & !tobacco_ship_full)
			{
				space_to_ship = true;
			}
			if (goods_p1_array[4] > 0 & empty_ship_available & !coffee_ship_available & !coffee_ship_full)
			{
				space_to_ship = true;
			}
			check_for_building(361);
			if (!(space_to_ship & goods_to_ship | found_building & goods_to_ship))
			{
				make_player_goods_buttons_inactive();
				infobox_role("You have no goods that are able to be shipped.", "role_captain");
				formtitle("p1", "Captain Phase - Your Turn is Over");
				auto_captain_button.Text = "Next Shipper Auto";
				auto_captain_button.Enabled = true;
				auto_captain_button.Visible = true;
				end_shipping_turn_p1();
				p1_done_all_shipping = true;
			}
			else
			{
				make_player_goods_buttons_active();
				infobox_role("Please select which goods you want to ship from your resources.", "role_captain");
				formtitle("p1", "Captain Phase - Select Goods to Ship");
				auto_captain_button.Text = "Next Shipper Auto";
				auto_captain_button.Enabled=false;
				auto_captain_button.Visible = false;
			}
			update_ship_cargo();
		}

		public void p1_process_craftsman()
		{
			log_process_role("p1", "Craftsman");
			update_summary();
			next_turn_button.Text = "End Turn";
			next_turn_button.Visible = false;
			next_turn_button.Enabled=false;
			p1_chose_extra_good = false;
			if (current_role_chooser == 1)
			{
				determine_production();
			}
			tempstring = "nogoodstopick";
			counter1 = 0;
			do
			{
				if (goods_this_turn_p1_array[counter1] > 0 & goods_bank_array[counter1] > 0)
				{
					tempstring = "goodstopick";
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (current_role_chooser == 1 & StringType.StrCmp(tempstring, "goodstopick", false) == 0)
			{
				formtitle("p1", "Craftsman Phase - Choose your extra good");
				make_goods_bank_buttons_active();
				infobox_role("You now need to choose your extra production good. You must choose from the goods you produced this turn.", "role_craftsman");
				next_turn_button.Text = "End Turn";
				next_turn_button.Visible = false;
				next_turn_button.Enabled=false;
			}
			if (current_role_chooser == 1 & StringType.StrCmp(tempstring, "nogoodstopick", false) == 0)
			{
				formtitle("p1", "Craftsman Phase - Turn Over");
				make_goods_bank_buttons_inactive();
				infobox_role("There are not any goods in the bank that you can get an extra one from. Your turn is over.", "role_craftsman");
				next_turn_button.Text = "End Turn";
				next_turn_button.Visible = true;
				next_turn_button.Enabled = true;
			}
		}

		public void p1_process_mayor()
		{
			log_process_role("p1", "Mayor");
			update_summary();
			make_plantation_pics_active();
			make_building_pics_active();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			if (current_role_chooser == 1)
			{
				distribute_new_colonists();
			}
			formtitle("p1", "Mayor Phase - Distribute your colonists");
			infobox_role("New colonists have arrived via ship. Please distribute them to your needs.", "role_mayor");
			determine_p1_mayor_phase_over();
		}

		public void p1_process_prospector1()
		{
			log_process_role("p1", "Prospector1");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			if (current_role_chooser == 1)
			{
				infobox_role("You are awarded 1 doubloon for your prospecting efforts.", "role_prospector1");
				gold_p1 = checked(gold_p1 + 1);
			}
			formtitle("p1", "Prospector Phase - Your turn is over");
			next_turn_button.Text = "End Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p1_process_prospector2()
		{
			log_process_role("p1", "Prospector2");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			if (current_role_chooser == 1)
			{
				infobox_role("You are awarded 1 doubloon for your prospecting efforts.", "role_prospector1");
				gold_p1 = checked(gold_p1 + 1);
			}
			formtitle("p1", "Prospector Phase - Your turn is over");
			next_turn_button.Text = "End Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p1_process_settler()
		{
			log_process_role("p1", "Settler");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p1_ready_to_end_settler = false;
			make_settler_buttons_active();
			if (current_player != current_role_chooser)
			{
				infobox_role("Settler Phase - Please choose a plantation", "role_settler");
				formtitle("p1", "Settler Phase - Choose a Plantation");
			}
			else
			{
				formtitle("p1", "Settler Phase - Choose a Plantation or Quarry");
			}
			check_for_building(141);
			if (found_building & num_plantations_p1 < 12)
			{
				confirmbox_building1("You have a manned hacienda. Would you like to draw a random plantation?", 141);
				if (confirmed)
				{
					draw_random_plantation_tile();
				}
			}
		}

		public void p1_process_trader()
		{
			log_process_role("p1", "Trader");
			update_summary();
			make_player_goods_buttons_active();
			tempstring = "nogoodstotrade";
			counter1 = 0;
			do
			{
				if (goods_p1_array[counter1] > 0)
				{
					tempstring = "goodstotrade";
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (trading_house_array[3] == 0 & StringType.StrCmp(tempstring, "goodstotrade", false) == 0)
			{
				check_for_building(241);
				if (found_building)
				{
					infobox_building1("Your manned Office allows you to sell goods to the trading house that are already there.", 241);
				}
			}
			next_turn_button.Visible = false;
			next_turn_button.Enabled=false;
			done_trading_button.Visible = true;
			done_trading_button.Enabled = true;
			p1_traded = false;
			formtitle("p1", "Trader Phase - Trade or End Your Turn");
		}

		public void p2_choose_role()
		{
			turn_number = checked(turn_number + 1);
			update_summary();
			update_player_turn_designations();
			determine_empty_colonists_slots_all();
			p2_finished_choosing_role = false;
			while (!p2_finished_choosing_role)
			{
				role_choice = "settler";
				need_to_choose_random = true;
				dont_choose_settler = false;
				dont_choose_mayor = false;
				dont_choose_builder = false;
				dont_choose_craftsman = false;
				dont_choose_trader = false;
				dont_choose_captain = false;
				dont_choose_prospector1 = false;
				dont_choose_prospector2 = false;
				goods_to_ship = false;
				determine_goods_to_ship();
				goods_to_trade = false;
				determine_goods_to_trade();
				goods_to_produce = false;
				determine_production_p2();
				if (!goods_to_produce & need_to_choose_random && bonus_roles_array[3] < 2)
				{
					dont_choose_craftsman = true;
				}
				if (!goods_to_ship & need_to_choose_random && bonus_roles_array[5] < 2)
				{
					dont_choose_captain = true;
				}
				if (!goods_to_trade & need_to_choose_random && bonus_roles_array[4] < 2)
				{
					dont_choose_trader = true;
				}
				if (num_plantations_p2 >= 8 & need_to_choose_random && bonus_roles_array[0] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_settler = true;
					}
				}
				if (p2_empty_colonists_slots == 0 & need_to_choose_random && bonus_roles_array[1] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_mayor = true;
					}
				}
				check_for_plantation(30);
				if (num_plantations_p2 == 1 & !found_plantation & num_buildings_p2 == 0)
				{
					dont_choose_mayor = true;
				}
				if (turn_number == 1 & need_to_choose_random)
				{
					chance_of_action(90);
					if (chance)
					{
						role_choice = "settler";
						need_to_choose_random = false;
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "mayor";
							need_to_choose_random = false;
						}
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (!found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "builder";
							need_to_choose_random = false;
						}
					}
				}
				chance_of_action(90);
				if (role_builder_pic.Visible & bonus_roles_array[2] >= 2 & chance & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_captain_pic.Visible & bonus_roles_array[5] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_craftsman_pic.Visible & bonus_roles_array[3] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_mayor_pic.Visible & bonus_roles_array[1] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "mayor";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_settler_pic.Visible & bonus_roles_array[0] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "settler";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_trader_pic.Visible & bonus_roles_array[4] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector1_pic.Visible & bonus_roles_array[6] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector1";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector2_pic.Visible & bonus_roles_array[7] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector2";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p2 + discount1) + num_manned_quarries_p2) >= 10 && role_builder_pic.Visible & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p2 + discount1) + num_manned_quarries_p2) >= 8)
				{
					chance_of_action(90);
					if (chance & role_builder_pic.Visible & need_to_choose_random)
					{
						role_choice = "builder";
						need_to_choose_random = false;
					}
				}
				if (checked(checked(gold_p2 + discount1) + num_manned_quarries_p2) >= 10)
				{
					chance = false;
				}
				if (checked(checked(gold_p2 + discount1) + num_manned_quarries_p2) < 10)
				{
					chance_of_action(90);
				}
				if (goods_to_trade & role_trader_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(80);
				if (goods_to_ship & role_captain_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(30);
				if (goods_to_produce & role_craftsman_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				ai_role_choice_maintenance();
				if (StringType.StrCmp(role_choice, "settler", false) == 0 && role_settler_pic.Visible)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Settler."), "role_settler");
					settler_round = true;
					role_settler_pic.Visible = false;
					settler_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[0]);
					bonus_roles_array[0] = 0;
					log_role_chooser("p2", "Settler");
					p2_process_settler();
					p2_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p2", false) == 0 & settler_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "mayor", false) == 0 && role_mayor_pic.Visible)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Mayor."), "role_mayor");
					mayor_round = true;
					role_mayor_pic.Visible = false;
					mayor_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[1]);
					bonus_roles_array[1] = 0;
					log_role_chooser("p2", "Mayor");
					p2_process_mayor();
					p2_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p2", false) == 0 & mayor_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "builder", false) == 0 && role_builder_pic.Visible & chance)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Builder."), "role_builder");
					builder_round = true;
					role_builder_pic.Visible = false;
					builder_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[2]);
					bonus_roles_array[2] = 0;
					log_role_chooser("p2", "Builder");
					p2_process_builder();
					p2_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p2", false) == 0 & builder_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "craftsman", false) == 0 && role_craftsman_pic.Visible)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Craftsman."), "role_craftsman");
					craftsman_round = true;
					role_craftsman_pic.Visible = false;
					craftsman_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[3]);
					bonus_roles_array[3] = 0;
					log_role_chooser("p2", "Craftsman");
					p2_process_craftsman();
					p2_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "trader", false) == 0 && role_trader_pic.Visible)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Trader."), "role_trader");
					trader_round = true;
					role_trader_pic.Visible = false;
					trader_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[4]);
					bonus_roles_array[4] = 0;
					log_role_chooser("p2", "Trader");
					p2_process_trader();
					p2_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p2", false) == 0 & trader_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "captain", false) == 0 && role_captain_pic.Visible)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Captain."), "role_captain");
					p1_used_wharf = false;
					p2_used_wharf = false;
					p3_used_wharf = false;
					p4_used_wharf = false;
					p5_used_wharf = false;
					captain_round = true;
					role_captain_pic.Visible = false;
					captain_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[5]);
					bonus_roles_array[5] = 0;
					captain_bonus_taken = false;
					log_role_chooser("p2", "Captain");
					p2_process_captain();
					p2_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector1", false) == 0 && role_prospector1_pic.Visible)
				{
					infobox_role(string.Concat(p2_name, " has chosen the Prospector."), "role_prospector1");
					prospector1_round = true;
					role_prospector1_pic.Visible = false;
					pros1_bonus_label.Visible = false;
					gold_p2 = checked(gold_p2 + bonus_roles_array[6]);
					bonus_roles_array[6] = 0;
					log_role_chooser("p2", "Prospector1");
					p2_process_prospector1();
					p2_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector2", false) != 0 || !role_prospector2_pic.Visible)
				{
					continue;
				}
				infobox_role(string.Concat(p2_name, " has chosen the Prospector."), "role_prospector1");
				prospector2_round = true;
				role_prospector2_pic.Visible = false;
				pros2_bonus_label.Visible = false;
				gold_p2 = checked(gold_p2 + bonus_roles_array[7]);
				bonus_roles_array[7] = 0;
				log_role_chooser("p2", "Prospector2");
				p2_process_prospector2();
				p2_finished_choosing_role = true;
			}
		}

		public void p2_place_matching_production()
		{
			plantations_p2_array[plantation_slot] = checked(plantations_p2_array[plantation_slot] + 1);
			buildings_p2_array[building_slot] = checked(buildings_p2_array[building_slot] + 1);
			idle_colonists_array[2] = checked(idle_colonists_array[2] - 2);
			update_all_labels();
		}

		public void p2_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				tempinteger = indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				tempinteger = sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				tempinteger = corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				tempinteger = tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				tempinteger = coffee_available_slot;
			}
			if (!p2_manned_hospice)
			{
				plantations_p2_array[num_plantations_p2] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				p2_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p2_array[num_plantations_p2] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p2_name, "'s Hospice has granted a colonist for their plantation."), 231);
				colonists_array[1] = checked(colonists_array[1] + 1);
				p2_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p2_array[num_plantations_p2] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p2_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p2_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p2_array[num_plantations_p2] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p2_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[1] = checked(colonists_array[1] + 1);
				p2_ai_done = true;
			}
			update_all_labels();
		}

		public void p2_place_quarry()
		{
			if (!p2_manned_hospice)
			{
				plantations_p2_array[num_plantations_p2] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				p2_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p2_array[num_plantations_p2] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p2_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				colonists_array[1] = checked(colonists_array[1] + 1);
				p2_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p2_array[num_plantations_p2] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p2_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p2_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p2_array[num_plantations_p2] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p2_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[1] = checked(colonists_array[1] + 1);
				p2_ai_done = true;
			}
			update_all_labels();
		}

		public void p2_process_builder()
		{
			log_process_role("p2", "Builder");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p2_ai_done = false;
			p2_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//p2_ai_done;
			compute_temporary_large_building_score();
			determine_if_afford_large();
			update_player_turn_designations();
			if (turn_number == 1 & StringType.StrCmp(current_role_chooser_string, "p2", false) != 0 & !p2_ai_done & builder_round)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Small Indigo Plant."), 110);
						p2_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done & afford_large & best_building_num != 999)
			{
				p2_process_building_large(best_building_num);
			}
			if (!p2_ai_done)
			{
				build_available_slot = 13;
				build_number = 320;
				build_cost = 6;
				build_name = "Coffee Roaster";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(50);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the ", build_name, "."), build_number);
						p2_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 12;
				build_number = 310;
				build_cost = 5;
				build_name = "Tobacco Storage";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(40);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the ", build_name, "."), build_number);
						p2_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 1;
				build_number = 120;
				build_cost = 2;
				build_name = "Small Sugar Mill";
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(220);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the ", build_name, "."), build_number);
						p2_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 7;
				build_number = 220;
				build_cost = 4;
				build_name = "Sugar Mill";
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(120);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(50);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the ", build_name, "."), build_number);
						p2_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Small Indigo Plant."), 110);
						p2_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 6;
				build_number = 210;
				build_cost = 3;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(110);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(60);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Indigo Plant."), 210);
						p2_process_building(210);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			update_player_turn_designations();
			if (!p2_ai_done)
			{
				chance_of_action(25);
				if (chance & StringType.StrCmp(current_role_chooser_string, "p2", false) != 0)
				{
					determine_if_buyable1(2, 130, 1);
					if (buyable & num_manned_quarries_p2 >= 1 & !p2_built)
					{
						infobox_building1(string.Concat(p2_name, " built the Small Market."), 130);
						p2_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
					determine_if_buyable1(0, 110, 1);
					if (buyable & num_manned_quarries_p2 >= 1 & !p2_built)
					{
						infobox_building1(string.Concat(p2_name, " built the Small Indigo Plant."), 110);
						p2_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
						p2_ai_done = true;
						p2_built = true;
					}
					if (!p2_ai_done & !p2_built)
					{
						p2_ai_done = true;
						p2_built = false;
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 14;
				build_number = 330;
				build_cost = 7;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Factory."), 330);
						p2_process_building(330);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 16;
				build_number = 350;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Harbor."), 350);
						p2_process_building(350);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 8;
				build_number = 230;
				build_cost = 4;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_plantations_p2 > 8)
					{
						chance_of_action(10);
					}
					else
					{
						chance_of_action(50);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Hospice."), 230);
						p2_process_building(230);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 10;
				build_number = 250;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Large Market."), 250);
						p2_process_building(250);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 2;
				build_number = 130;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Small Market."), 130);
						p2_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 5;
				build_number = 160;
				build_cost = 3;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(260);
					if (!found_building)
					{
						check_for_building(261);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(10);
						}
					}
					else
					{
						chance_of_action(10);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Small Warehouse."), 160);
						p2_process_building(160);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 3;
				build_number = 140;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Hacienda."), 140);
						p2_process_building(140);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 17;
				build_number = 361;
				build_cost = 9;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(50);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Wharf."), 360);
						p2_process_building(360);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 11;
				build_number = 260;
				build_cost = 6;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(160);
					if (!found_building)
					{
						check_for_building(161);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(5);
						}
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Large Warehouse."), 260);
						p2_process_building(260);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 9;
				build_number = 240;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(30);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Office."), 240);
						p2_process_building(240);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 4;
				build_number = 150;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_quarries_p2 < 2)
					{
						chance_of_action(30);
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the Construction Hut."), 150);
						p2_process_building(150);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			if (!p2_ai_done)
			{
				build_available_slot = 15;
				build_number = 340;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(20);
					if (chance)
					{
						infobox_building1(string.Concat(p2_name, " built the University."), 340);
						p2_process_building(340);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p2 = checked(gold_p2 - build_final_cost);
						p2_ai_done = true;
						p2_built = true;
						update_all_labels();
					}
				}
			}
			determine_if_buyable1(2, 130, 1);
			if (buyable & num_manned_quarries_p2 >= 1 & !p2_built & !p2_ai_done)
			{
				infobox_building1(string.Concat(p2_name, " built the Small Market."), 130);
				p2_process_building(130);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p2 = checked(gold_p2 - build_final_cost);
				p2_ai_done = true;
				p2_built = true;
				update_all_labels();
			}
			determine_if_buyable1(0, 110, 1);
			if (buyable & num_manned_quarries_p2 >= 1 & !p2_built & !p2_ai_done)
			{
				infobox_building1(string.Concat(p2_name, " built the Small Indigo Plant."), 110);
				p2_process_building(110);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p2 = checked(gold_p2 - build_final_cost);
				p2_ai_done = true;
				p2_built = true;
				update_all_labels();
			}
			if (!p2_built)
			{
				infobox_role(string.Concat(p2_name, " has decided not to build."), "role_builder");
			}
			formtitle("p2", "Done performing the Builder role - AI BLANK");
		}

		public void p2_process_building(object buildnum)
		{
			check_for_building(341);
			if (!found_building)
			{
				buildings_p2_array[num_buildings_p2] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					infobox_building1(string.Concat(p2_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[2] = checked(colonists_array[2] + 1);
				}
				else if (colonists_ship_num > 0)
				{
					colonists_ship_num = checked(colonists_ship_num - 1);
					infobox_building1(string.Concat(p2_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[2] = checked(colonists_array[2] + 1);
				}
				buildings_p2_array[num_buildings_p2] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p2_process_building_large(object buildnum)
		{
			determine_where_to_build_large_p2();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				tempinteger = 22;
			}
			if (large_build_spot != 99)
			{
				check_for_building(341);
				if (!found_building)
				{
					infobox_building2(string.Concat(p2_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p2_array[large_build_spot] = IntegerType.FromObject(buildnum);
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p2 = checked(gold_p2 - build_final_cost);
					p2_ai_done = true;
					p2_built = true;
				}
				else
				{
					if (colonists_bank_num > 0)
					{
						colonists_bank_num = checked(colonists_bank_num - 1);
						infobox_building1(string.Concat(p2_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[2] = checked(colonists_array[2] + 1);
					}
					else if (colonists_ship_num > 0)
					{
						colonists_ship_num = checked(colonists_ship_num - 1);
						infobox_building1(string.Concat(p2_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[2] = checked(colonists_array[2] + 1);
					}
					infobox_building2(string.Concat(p2_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p2_array[large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p2 = checked(gold_p2 - build_final_cost);
					p2_ai_done = true;
					p2_built = true;
				}
			}
			update_all_labels();
		}

		public void p2_process_captain()
		{
			log_process_role("p2", "Captain");
			update_summary();
			update_ship_cargo();
			p2_done_shipping = false;
			p2_done_all_shipping = false;
			p2_num_shipped = 0;
			goods_to_ship = false;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (goods_p2_array[counter1] > 0)
				{
					goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (goods_to_ship & !p2_done_shipping)
			{
				calculate_best_captain_points_p2();
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipa", false) == 0 & !p2_done_shipping)
			{
				ship_corn_via_shipa();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipb", false) == 0 & !p2_done_shipping)
			{
				ship_corn_via_shipb();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipc", false) == 0 & !p2_done_shipping)
			{
				ship_corn_via_shipc();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_wharf", false) == 0 & !p2_done_shipping)
			{
				ship_corn_via_wharf();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipa", false) == 0 & !p2_done_shipping)
			{
				ship_indigo_via_shipa();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipb", false) == 0 & !p2_done_shipping)
			{
				ship_indigo_via_shipb();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipc", false) == 0 & !p2_done_shipping)
			{
				ship_indigo_via_shipc();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_wharf", false) == 0 & !p2_done_shipping)
			{
				ship_Indigo_via_wharf();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipa", false) == 0 & !p2_done_shipping)
			{
				ship_sugar_via_shipa();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipb", false) == 0 & !p2_done_shipping)
			{
				ship_sugar_via_shipb();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipc", false) == 0 & !p2_done_shipping)
			{
				ship_sugar_via_shipc();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_wharf", false) == 0 & !p2_done_shipping)
			{
				ship_sugar_via_wharf();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipa", false) == 0 & !p2_done_shipping)
			{
				ship_tobacco_via_shipa();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipb", false) == 0 & !p2_done_shipping)
			{
				ship_tobacco_via_shipb();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipc", false) == 0 & !p2_done_shipping)
			{
				ship_tobacco_via_shipc();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_wharf", false) == 0 & !p2_done_shipping)
			{
				ship_tobacco_via_wharf();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipa", false) == 0 & !p2_done_shipping)
			{
				ship_coffee_via_shipa();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipb", false) == 0 & !p2_done_shipping)
			{
				ship_coffee_via_shipb();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipc", false) == 0 & !p2_done_shipping)
			{
				ship_coffee_via_shipc();
				p2_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_wharf", false) == 0 & !p2_done_shipping)
			{
				ship_coffee_via_wharf();
				p2_done_shipping = true;
			}
			if (!p2_done_shipping & StringType.StrCmp(best_shipping_method, "null", false) == 0 & goods_to_ship)
			{
				p2_done_shipping = true;
				p2_done_all_shipping = true;
				infobox_role(string.Concat(p2_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!goods_to_ship & !p2_done_shipping)
			{
				p2_done_shipping = true;
				p2_done_all_shipping = true;
				infobox_role(string.Concat(p2_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Enabled = true;
			auto_captain_button.Visible = true;
			formtitle("p2", "Done Shipping - Press Next Shipper");
			update_ship_cargo();
		}

		public void p2_process_craftsman()
		{
			log_process_role("p2", "Craftsman");
			formtitle("p2", "Craftsman Phase");
			p2_ai_done = false;
			update_summary();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				determine_production();
			}
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				if (goods_this_turn_p2_array[4] > 0 & goods_bank_array[4] > 0 & !p2_ai_done)
				{
					goods_bank_array[4] = checked(goods_bank_array[4] - 1);
					goods_p2_array[4] = checked(goods_p2_array[4] + 1);
					p2_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p2_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p2_array[3] > 0 & goods_bank_array[3] > 0 & !p2_ai_done)
				{
					goods_bank_array[3] = checked(goods_bank_array[3] - 1);
					goods_p2_array[3] = checked(goods_p2_array[3] + 1);
					p2_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p2_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p2_array[1] > 0 & goods_bank_array[1] > 0 & !p2_ai_done)
				{
					goods_bank_array[1] = checked(goods_bank_array[1] - 1);
					goods_p2_array[1] = checked(goods_p2_array[1] + 1);
					p2_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p2_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p2_array[0] > 0 & goods_bank_array[0] > 0 & !p2_ai_done)
				{
					goods_bank_array[0] = checked(goods_bank_array[0] - 1);
					goods_p2_array[0] = checked(goods_p2_array[0] + 1);
					p2_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p2_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p2_array[2] > 0 & goods_bank_array[2] > 0 & !p2_ai_done)
				{
					goods_bank_array[2] = checked(goods_bank_array[2] - 1);
					goods_p2_array[2] = checked(goods_p2_array[2] + 1);
					p2_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p2_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!p2_ai_done)
				{
					if (!((goods_this_turn_p2_array[0] > 0 | goods_this_turn_p2_array[1] > 0 | goods_this_turn_p2_array[2] > 0 | goods_this_turn_p2_array[3] > 0 | goods_this_turn_p2_array[4] > 0) & (goods_bank_array[0] == 0 | goods_bank_array[1] == 0 | goods_bank_array[2] == 0 | goods_bank_array[3] == 0 | goods_bank_array[4] == 0)))
					{
						infobox_role(string.Concat(p2_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						p2_ai_done = true;
						infobox_role(string.Concat("There were no goods available for ", p2_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			next_turn_button.Text = "End Craftsman Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void p2_process_mayor()
		{
			log_process_role("p2", "Mayor");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				distribute_new_colonists();
			}
			p2_remove_all_colonists_to_idle();
			p2_ai_done = false;
			if (idle_colonists_array[current_player] == 0)
			{
				p2_ai_done = true;
			}
			counter3 = 12;
			while (!(counter3 == 20 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				if (buildings_p2_array[counter3] == 410 | buildings_p2_array[counter3] == 420 | buildings_p2_array[counter3] == 430 | buildings_p2_array[counter3] == 440 | buildings_p2_array[counter3] == 450)
				{
					buildings_p2_array[counter3] = checked(buildings_p2_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				if (buildings_p2_array[counter3] == 350)
				{
					buildings_p2_array[counter3] = checked(buildings_p2_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				if (buildings_p2_array[counter3] == 330)
				{
					buildings_p2_array[counter3] = checked(buildings_p2_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				if (buildings_p2_array[counter3] == 360)
				{
					buildings_p2_array[counter3] = checked(buildings_p2_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			num_empty_corn_plant_p2 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] == 30)
				{
					num_empty_corn_plant_p2 = checked(num_empty_corn_plant_p2 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_empty_corn_plant_p2 >= 1 & num_quarries_p2 >= 1 & idle_colonists_array[current_player] >= 2)
			{
				finished = false;
				while (!finished)
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p2_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p2_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p2_ai_done = true;
					finished = true;
				}
				finished = false;
				while (!finished)
				{
					check_for_plantation(60);
					if (found_plantation)
					{
						plantations_p2_array[plantation_slot] = 61;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p2_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p2_ai_done = true;
					finished = true;
				}
			}
			num_empty_corn_plant_p2 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] == 30)
				{
					num_empty_corn_plant_p2 = checked(num_empty_corn_plant_p2 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			if (idle_colonists_array[current_player] >= 2 & num_empty_corn_plant_p2 >= 2)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p2_ai_done))
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p2_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p2_colonists();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p2_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p2_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p2_ai_done))
				{
					check_for_coffee_production();
					if (found_coffee_match)
					{
						p2_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p2_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p2_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p2_ai_done))
				{
					check_for_tobacco_production();
					if (found_tobacco_match)
					{
						p2_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p2_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p2_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p2_ai_done))
				{
					check_for_sugar_production();
					if (found_sugar_match)
					{
						p2_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p2_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p2_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p2_ai_done))
				{
					check_for_indigo_production();
					if (found_indigo_match)
					{
						p2_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p2_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				check_for_plantation(30);
				if (found_plantation)
				{
					plantations_p2_array[plantation_slot] = 31;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				check_for_plantation(60);
				if (found_plantation)
				{
					plantations_p2_array[plantation_slot] = 61;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				if (buildings_p2_array[counter3] == 130 | buildings_p2_array[counter3] == 140 | buildings_p2_array[counter3] == 150 | buildings_p2_array[counter3] == 160 | buildings_p2_array[counter3] == 230 | buildings_p2_array[counter3] == 240 | buildings_p2_array[counter3] == 250 | buildings_p2_array[counter3] == 260 | buildings_p2_array[counter3] == 330 | buildings_p2_array[counter3] == 340 | buildings_p2_array[counter3] == 350 | buildings_p2_array[counter3] == 360)
				{
					buildings_p2_array[counter3] = checked(buildings_p2_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p2_ai_done))
			{
				if (buildings_p2_array[counter3] == 110 | buildings_p2_array[counter3] == 120 | buildings_p2_array[counter3] == 210 | buildings_p2_array[counter3] == 211 | buildings_p2_array[counter3] == 212 | buildings_p2_array[counter3] == 220 | buildings_p2_array[counter3] == 221 | buildings_p2_array[counter3] == 222 | buildings_p2_array[counter3] == 310 | buildings_p2_array[counter3] == 311 | buildings_p2_array[counter3] == 312 | buildings_p2_array[counter3] == 320 | buildings_p2_array[counter3] == 321)
				{
					buildings_p2_array[counter3] = checked(buildings_p2_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p2_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p2_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			if (idle_colonists_array[current_player] <= 0)
			{
				p2_ai_done = true;
			}
			else
			{
				counter3 = 0;
				while (!(counter3 == 12 | idle_colonists_array[current_player] == 0 | p2_ai_done))
				{
					if (plantations_p2_array[counter3] == 10 | plantations_p2_array[counter3] == 20 | plantations_p2_array[counter3] == 30 | plantations_p2_array[counter3] == 40 | plantations_p2_array[counter3] == 50 | plantations_p2_array[counter3] == 60)
					{
						plantations_p2_array[counter3] = checked(plantations_p2_array[counter3] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p2_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			update_all_labels();
			determine_p2_mayor_phase_over();
			formtitle("p2", "Mayor Phase - Turn Over");
		}

		public void p2_process_prospector1()
		{
			log_process_role("p2", "Prospector1");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				infobox_role(string.Concat(p2_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p2 = checked(gold_p2 + 1);
			}
			formtitle("p2", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p2_process_prospector2()
		{
			log_process_role("p2", "Prospector2");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				infobox_role(string.Concat(p2_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p2 = checked(gold_p2 + 1);
			}
			formtitle("p2", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p2_process_settler()
		{
			log_process_role("p2", "Settler");
			update_summary();
			p2_ai_done = false;
			p2_ready_to_end_settler = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p2_chose_settler = false;
			p2_manned_construction_hut = false;
			p2_manned_hospice = false;
			p2_manned_hacienda = false;
			p2_chose_quarry = false;
			p2_chose_corn = false;
			p2_chose_random = false;
			p2_use_hacienda = false;
			p2_num_indigo_plants = 0;
			p2_num_sugar_plants = 0;
			p2_num_tobacco_plants = 0;
			p2_num_coffee_plants = 0;
			what_plantations_available();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				p2_chose_settler = true;
			}
			check_for_building(151);
			if (found_building)
			{
				p2_manned_construction_hut = true;
			}
			check_for_building(231);
			if (found_building)
			{
				p2_manned_hospice = true;
			}
			check_for_building(141);
			if (found_building)
			{
				p2_manned_hacienda = true;
			}
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] == 10 | plantations_p2_array[counter1] == 11)
				{
					p2_num_indigo_plants = checked(p2_num_indigo_plants + 1);
				}
				if (plantations_p2_array[counter1] == 20 | plantations_p2_array[counter1] == 21)
				{
					p2_num_sugar_plants = checked(p2_num_sugar_plants + 1);
				}
				if (plantations_p2_array[counter1] == 40 | plantations_p2_array[counter1] == 41)
				{
					p2_num_tobacco_plants = checked(p2_num_tobacco_plants + 1);
				}
				if (plantations_p2_array[counter1] == 50 | plantations_p2_array[counter1] == 51)
				{
					p2_num_coffee_plants = checked(p2_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_plantations_p2 >= 8 & num_plantations_p2 <= 10 & p2_manned_hacienda)
			{
				chance_of_action(20);
				if (chance)
				{
					p2_use_hacienda = true;
				}
			}
			if (num_plantations_p2 < 8 & p2_manned_hacienda)
			{
				chance_of_action(80);
				if (chance)
				{
					p2_use_hacienda = true;
				}
			}
			if (p2_use_hacienda & p2_chose_settler & quarry_available)
			{
				p2_chose_quarry = true;
				p2_chose_corn = false;
			}
			chance_of_action(10);
			if ((p2_chose_settler | p2_manned_construction_hut) & num_quarries_p2 == 3 & !corn_available & quarry_available & chance)
			{
				p2_chose_quarry = true;
				p2_chose_corn = false;
			}
			chance_of_action(40);
			if ((p2_chose_settler | p2_manned_construction_hut) & num_quarries_p2 == 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p2_chose_quarry = true;
				p2_chose_corn = false;
			}
			chance_of_action(90);
			if ((p2_chose_settler | p2_manned_construction_hut) & num_quarries_p2 < 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p2_chose_quarry = true;
				p2_chose_corn = false;
			}
			chance_of_action(90);
			if (chance & turn_number == 1 & p2_chose_settler)
			{
				p2_chose_quarry = true;
				p2_chose_corn = false;
				p2_chose_random = false;
			}
			chance_of_action(90);
			if (corn_available & chance & turn_number == 1 & !p2_chose_settler)
			{
				p2_chose_quarry = false;
				p2_chose_corn = true;
				p2_chose_random = false;
			}
			chance_of_action(90);
			if (turn_number != 1 & corn_available & !p2_manned_construction_hut)
			{
				p2_chose_quarry = false;
				p2_chose_corn = true;
				p2_chose_random = false;
			}
			if (num_plantations_p2 >= 12)
			{
				infobox_role(string.Concat(p2_name, " already has 12 plantations. ", p2_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (p2_use_hacienda)
				{
					infobox_building1(string.Concat(p2_name, "is using the Hacienda to get a random plantation."), 141);
					draw_random_plantation_tile();
				}
				if (!p2_use_hacienda & p2_manned_hacienda)
				{
					infobox_building1(string.Concat(p2_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (p2_chose_quarry & p2_chose_settler & !p2_ai_done)
				{
					infobox_plant(string.Concat(p2_name, " used the Settler bonus to choose a Quarry."), 60);
					p2_place_quarry();
				}
				if (p2_chose_quarry & !p2_chose_settler & p2_manned_construction_hut & !p2_ai_done)
				{
					infobox_building1(string.Concat(p2_name, " used the Construction Hut to choose a Quarry."), 151);
					p2_place_quarry();
				}
				if (p2_chose_corn & corn_available & !p2_ai_done)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Corn."), 30);
					p2_place_plantation(30);
				}
				chance_of_action(20);
				if (!p2_ai_done & indigo_available & p2_num_indigo_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Indigo."), 10);
					p2_place_plantation(10);
				}
				chance_of_action(20);
				if (!p2_ai_done & sugar_available & p2_num_sugar_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Sugar."), 20);
					p2_place_plantation(20);
				}
				if (!p2_ai_done & tobacco_available & p2_num_tobacco_plants < 3)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Tobacco."), 40);
					p2_place_plantation(40);
				}
				if (!p2_ai_done & sugar_available & p2_num_sugar_plants < 3)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Sugar."), 20);
					p2_place_plantation(20);
				}
				if (!p2_ai_done & coffee_available & p2_num_coffee_plants < 2)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Coffee."), 50);
					p2_place_plantation(50);
				}
				if (!p2_ai_done & indigo_available & p2_num_indigo_plants < 3)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Indigo."), 10);
					p2_place_plantation(10);
				}
				if (!p2_ai_done & coffee_available)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Coffee."), 50);
					p2_place_plantation(50);
				}
				if (!p2_ai_done & tobacco_available)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Tobacco."), 40);
					p2_place_plantation(40);
				}
				if (!p2_ai_done & sugar_available)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Sugar."), 20);
					p2_place_plantation(20);
				}
				if (!p2_ai_done & indigo_available)
				{
					infobox_plant(string.Concat(p2_name, " is choosing Indigo."), 10);
					p2_place_plantation(10);
				}
			}
			update_all_labels();
			formtitle("p2", "Done performing the Settler role - ");
		}

		public void p2_process_trader()
		{
			log_process_role("p2", "Trader");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p2_ai_done = false;
			p2_traded = false;
			p2_chose_trader = false;
			p2_manned_small_market = false;
			p2_manned_large_market = false;
			p2_manned_office = false;
			trading_house_full = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
			{
				p2_chose_trader = true;
			}
			check_for_building(131);
			if (found_building)
			{
				p2_manned_small_market = true;
			}
			check_for_building(251);
			if (found_building)
			{
				p2_manned_large_market = true;
			}
			check_for_building(241);
			if (found_building)
			{
				p2_manned_office = true;
			}
			if (trading_house_array[3] != 0)
			{
				trading_house_full = true;
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 5 & !p2_manned_office)
				{
					already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p2_array[4] > 0 & !p2_traded & (chance | p2_chose_trader))
			{
				goods_p2_array[4] = checked(goods_p2_array[4] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 5;
						counter1 = 4;
					}
				}
				counter3 = 4;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p2_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (p2_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p2_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Coffee for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p2 = checked(gold_p2 + counter3);
				p2_ai_done = true;
				p2_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 4 & !p2_manned_office)
				{
					already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p2_array[3] > 0 & !p2_traded & (chance | p2_chose_trader))
			{
				goods_p2_array[3] = checked(goods_p2_array[3] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 4;
						counter1 = 4;
					}
				}
				counter3 = 3;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p2_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (p2_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p2_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Tobacco for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p2 = checked(gold_p2 + counter3);
				p2_ai_done = true;
				p2_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 2 & !p2_manned_office)
				{
					already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p2_array[1] > 0 & !p2_traded & (chance | p2_chose_trader))
			{
				goods_p2_array[1] = checked(goods_p2_array[1] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 2;
						counter1 = 4;
					}
				}
				counter3 = 2;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p2_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (p2_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p2_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Sugar for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p2 = checked(gold_p2 + counter3);
				p2_ai_done = true;
				p2_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 1 & !p2_manned_office)
				{
					already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(75);
			if (!already_there & !trading_house_full & goods_p2_array[0] > 0 & !p2_traded & (chance | p2_chose_trader))
			{
				goods_p2_array[0] = checked(goods_p2_array[0] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 1;
						counter1 = 4;
					}
				}
				counter3 = 1;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p2_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (p2_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p2_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Indigo for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p2 = checked(gold_p2 + counter3);
				p2_ai_done = true;
				p2_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 3 & !p2_manned_office)
				{
					already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(10);
			if (!already_there & goods_p2_array[2] > 0 & !p2_traded & !trading_house_full & (p2_chose_trader | p2_manned_small_market | p2_manned_large_market | chance))
			{
				goods_p2_array[2] = checked(goods_p2_array[2] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 3;
						counter1 = 4;
					}
				}
				counter3 = 0;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p2", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				check_for_building(131);
				if (found_building)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				check_for_building(251);
				if (found_building)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p2_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p2_name, " sold their Corn for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p2 = checked(gold_p2 + counter3);
				p2_ai_done = true;
				p2_traded = true;
				update_all_labels();
			}
			if (!p2_traded)
			{
				infobox_role(string.Concat(p2_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			formtitle("p2", "Done performing the Trader role - Turn Over");
		}

		public void p2_remove_all_colonists_to_idle()
		{
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), "1", false) == 0)
					{
						plantations_p2_array[counter1] = checked(plantations_p2_array[counter1] - 1);
						idle_colonists_array[2] = checked(idle_colonists_array[2] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				counter2 = 0;
				do
				{
					if (buildings_p2_array[counter1] != 0 & buildings_p2_array[counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), "0", false) != 0)
						{
							buildings_p2_array[counter1] = checked(buildings_p2_array[counter1] - 1);
							idle_colonists_array[2] = checked(idle_colonists_array[2] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void p3_choose_role()
		{
			turn_number = checked(turn_number + 1);
			update_summary();
			update_player_turn_designations();
			determine_empty_colonists_slots_all();
			p3_finished_choosing_role = false;
			while (!p3_finished_choosing_role)
			{
				role_choice = "settler";
				need_to_choose_random = true;
				dont_choose_settler = false;
				dont_choose_mayor = false;
				dont_choose_builder = false;
				dont_choose_craftsman = false;
				dont_choose_trader = false;
				dont_choose_captain = false;
				dont_choose_prospector1 = false;
				dont_choose_prospector2 = false;
				goods_to_ship = false;
				determine_goods_to_ship();
				goods_to_trade = false;
				determine_goods_to_trade();
				goods_to_produce = false;
				determine_production_p3();
				if (!goods_to_produce & need_to_choose_random && bonus_roles_array[3] < 2)
				{
					dont_choose_craftsman = true;
				}
				if (!goods_to_ship & need_to_choose_random && bonus_roles_array[5] < 2)
				{
					dont_choose_captain = true;
				}
				if (!goods_to_trade & need_to_choose_random && bonus_roles_array[4] < 2)
				{
					dont_choose_trader = true;
				}
				if (num_plantations_p3 >= 8 & need_to_choose_random && bonus_roles_array[0] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_settler = true;
					}
				}
				if (p3_empty_colonists_slots == 0 & need_to_choose_random && bonus_roles_array[1] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_mayor = true;
					}
				}
				check_for_plantation(30);
				if (num_plantations_p3 == 1 & !found_plantation & num_buildings_p3 == 0)
				{
					dont_choose_mayor = true;
				}
				if (turn_number == 1 & need_to_choose_random)
				{
					chance_of_action(90);
					if (chance)
					{
						role_choice = "settler";
						need_to_choose_random = false;
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "mayor";
							need_to_choose_random = false;
						}
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (!found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "builder";
							need_to_choose_random = false;
						}
					}
				}
				chance_of_action(90);
				if (role_builder_pic.Visible & bonus_roles_array[2] >= 2 & chance & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_captain_pic.Visible & bonus_roles_array[5] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_craftsman_pic.Visible & bonus_roles_array[3] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_mayor_pic.Visible & bonus_roles_array[1] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "mayor";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_settler_pic.Visible & bonus_roles_array[0] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "settler";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_trader_pic.Visible & bonus_roles_array[4] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector1_pic.Visible & bonus_roles_array[6] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector1";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector2_pic.Visible & bonus_roles_array[7] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector2";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p3 + discount1) + num_manned_quarries_p3) >= 10 && role_builder_pic.Visible & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p3 + discount1) + num_manned_quarries_p3) >= 8)
				{
					chance_of_action(90);
					if (chance & role_builder_pic.Visible & need_to_choose_random)
					{
						role_choice = "builder";
						need_to_choose_random = false;
					}
				}
				if (checked(checked(gold_p3 + discount1) + num_manned_quarries_p3) >= 10)
				{
					chance = false;
				}
				if (checked(checked(gold_p3 + discount1) + num_manned_quarries_p3) < 10)
				{
					chance_of_action(90);
				}
				if (goods_to_trade & role_trader_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(80);
				if (goods_to_ship & role_captain_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(30);
				if (goods_to_produce & role_craftsman_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				ai_role_choice_maintenance();
				if (StringType.StrCmp(role_choice, "settler", false) == 0 && role_settler_pic.Visible)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Settler."), "role_settler");
					settler_round = true;
					role_settler_pic.Visible = false;
					settler_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[0]);
					bonus_roles_array[0] = 0;
					log_role_chooser("p3", "Settler");
					p3_process_settler();
					p3_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p3", false) == 0 & settler_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "mayor", false) == 0 && role_mayor_pic.Visible)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Mayor."), "role_mayor");
					mayor_round = true;
					role_mayor_pic.Visible = false;
					mayor_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[1]);
					bonus_roles_array[1] = 0;
					log_role_chooser("p3", "Mayor");
					p3_process_mayor();
					p3_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p3", false) == 0 & mayor_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "builder", false) == 0 && role_builder_pic.Visible & chance)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Builder."), "role_builder");
					builder_round = true;
					role_builder_pic.Visible = false;
					builder_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[2]);
					bonus_roles_array[2] = 0;
					log_role_chooser("p3", "Builder");
					p3_process_builder();
					p3_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p3", false) == 0 & builder_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "craftsman", false) == 0 && role_craftsman_pic.Visible)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Craftsman."), "role_craftsman");
					craftsman_round = true;
					role_craftsman_pic.Visible = false;
					craftsman_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[3]);
					bonus_roles_array[3] = 0;
					log_role_chooser("p3", "Craftsman");
					p3_process_craftsman();
					p3_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "trader", false) == 0 && role_trader_pic.Visible)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Trader."), "role_trader");
					trader_round = true;
					role_trader_pic.Visible = false;
					trader_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[4]);
					bonus_roles_array[4] = 0;
					log_role_chooser("p3", "Trader");
					p3_process_trader();
					p3_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p3", false) == 0 & trader_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "captain", false) == 0 && role_captain_pic.Visible)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Captain."), "role_captain");
					p1_used_wharf = false;
					p2_used_wharf = false;
					p3_used_wharf = false;
					p4_used_wharf = false;
					p5_used_wharf = false;
					captain_round = true;
					role_captain_pic.Visible = false;
					captain_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[5]);
					bonus_roles_array[5] = 0;
					captain_bonus_taken = false;
					log_role_chooser("p3", "Captain");
					p3_process_captain();
					p3_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector1", false) == 0 && role_prospector1_pic.Visible)
				{
					infobox_role(string.Concat(p3_name, " has chosen the Prospector."), "role_prospector1");
					prospector1_round = true;
					role_prospector1_pic.Visible = false;
					pros1_bonus_label.Visible = false;
					gold_p3 = checked(gold_p3 + bonus_roles_array[6]);
					bonus_roles_array[6] = 0;
					log_role_chooser("p3", "Prospector1");
					p3_process_prospector1();
					p3_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector2", false) != 0 || !role_prospector2_pic.Visible)
				{
					continue;
				}
				infobox_role(string.Concat(p3_name, " has chosen the Prospector."), "role_prospector1");
				prospector2_round = true;
				role_prospector2_pic.Visible = false;
				pros2_bonus_label.Visible = false;
				gold_p3 = checked(gold_p3 + bonus_roles_array[7]);
				bonus_roles_array[7] = 0;
				log_role_chooser("p3", "Prospector2");
				p3_process_prospector2();
				p3_finished_choosing_role = true;
			}
		}

		public void p3_place_matching_production()
		{
			plantations_p3_array[plantation_slot] = checked(plantations_p3_array[plantation_slot] + 1);
			buildings_p3_array[building_slot] = checked(buildings_p3_array[building_slot] + 1);
			idle_colonists_array[3] = checked(idle_colonists_array[3] - 2);
			update_all_labels();
		}

		public void p3_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				tempinteger = indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				tempinteger = sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				tempinteger = corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				tempinteger = tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				tempinteger = coffee_available_slot;
			}
			if (!p3_manned_hospice)
			{
				plantations_p3_array[num_plantations_p3] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				p3_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p3_array[num_plantations_p3] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p3_name, "'s Hospice has granted a colonist for their plantation."), 231);
				colonists_array[2] = checked(colonists_array[2] + 1);
				p3_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p3_array[num_plantations_p3] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p3_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p3_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p3_array[num_plantations_p3] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p3_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[2] = checked(colonists_array[2] + 1);
				p3_ai_done = true;
			}
			update_all_labels();
		}

		public void p3_place_quarry()
		{
			if (!p3_manned_hospice)
			{
				plantations_p3_array[num_plantations_p3] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				p3_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p3_array[num_plantations_p3] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p3_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				colonists_array[2] = checked(colonists_array[2] + 1);
				p3_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p3_array[num_plantations_p3] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p3_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p3_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p3_array[num_plantations_p3] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p3_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[2] = checked(colonists_array[2] + 1);
				p3_ai_done = true;
			}
			update_all_labels();
		}

		public void p3_process_builder()
		{
			log_process_role("p3", "Builder");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p3_ai_done = false;
			p3_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//p3_ai_done;
			compute_temporary_large_building_score();
			determine_if_afford_large();
			update_player_turn_designations();
			if (turn_number == 1 & StringType.StrCmp(current_role_chooser_string, "p3", false) != 0 & !p3_ai_done & builder_round)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Small Indigo Plant."), 110);
						p3_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done & afford_large & best_building_num != 999)
			{
				p3_process_building_large(best_building_num);
			}
			if (!p3_ai_done)
			{
				build_available_slot = 13;
				build_number = 320;
				build_cost = 6;
				build_name = "Coffee Roaster";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(50);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the ", build_name, "."), build_number);
						p3_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 12;
				build_number = 310;
				build_cost = 5;
				build_name = "Tobacco Storage";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(40);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the ", build_name, "."), build_number);
						p3_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 1;
				build_number = 120;
				build_cost = 2;
				build_name = "Small Sugar Mill";
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(220);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the ", build_name, "."), build_number);
						p3_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 7;
				build_number = 220;
				build_cost = 4;
				build_name = "Sugar Mill";
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(120);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(50);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the ", build_name, "."), build_number);
						p3_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Small Indigo Plant."), 110);
						p3_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 6;
				build_number = 210;
				build_cost = 3;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(110);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(60);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Indigo Plant."), 210);
						p3_process_building(210);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			update_player_turn_designations();
			if (!p3_ai_done)
			{
				chance_of_action(25);
				if (chance & StringType.StrCmp(current_role_chooser_string, "p3", false) != 0)
				{
					determine_if_buyable1(2, 130, 1);
					if (buyable & num_manned_quarries_p3 >= 1 & !p3_built)
					{
						infobox_building1(string.Concat(p3_name, " built the Small Market."), 130);
						p3_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
					determine_if_buyable1(0, 110, 1);
					if (buyable & num_manned_quarries_p3 >= 1 & !p3_built)
					{
						infobox_building1(string.Concat(p3_name, " built the Small Indigo Plant."), 110);
						p3_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
						p3_ai_done = true;
						p3_built = true;
					}
					if (!p3_ai_done & !p3_built)
					{
						p3_ai_done = true;
						p3_built = false;
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 14;
				build_number = 330;
				build_cost = 7;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Factory."), 330);
						p3_process_building(330);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 16;
				build_number = 350;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Harbor."), 350);
						p3_process_building(350);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 8;
				build_number = 230;
				build_cost = 4;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_plantations_p3 > 8)
					{
						chance_of_action(10);
					}
					else
					{
						chance_of_action(50);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Hospice."), 230);
						p3_process_building(230);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 10;
				build_number = 250;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Large Market."), 250);
						p3_process_building(250);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 2;
				build_number = 130;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Small Market."), 130);
						p3_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 5;
				build_number = 160;
				build_cost = 3;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(260);
					if (!found_building)
					{
						check_for_building(261);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(10);
						}
					}
					else
					{
						chance_of_action(10);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Small Warehouse."), 160);
						p3_process_building(160);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 3;
				build_number = 140;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Hacienda."), 140);
						p3_process_building(140);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 17;
				build_number = 361;
				build_cost = 9;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(50);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Wharf."), 360);
						p3_process_building(360);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 11;
				build_number = 260;
				build_cost = 6;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(160);
					if (!found_building)
					{
						check_for_building(161);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(5);
						}
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Large Warehouse."), 260);
						p3_process_building(260);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 9;
				build_number = 240;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(30);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Office."), 240);
						p3_process_building(240);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 4;
				build_number = 150;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_quarries_p3 < 2)
					{
						chance_of_action(30);
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the Construction Hut."), 150);
						p3_process_building(150);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			if (!p3_ai_done)
			{
				build_available_slot = 15;
				build_number = 340;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(20);
					if (chance)
					{
						infobox_building1(string.Concat(p3_name, " built the University."), 340);
						p3_process_building(340);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p3 = checked(gold_p3 - build_final_cost);
						p3_ai_done = true;
						p3_built = true;
						update_all_labels();
					}
				}
			}
			determine_if_buyable1(2, 130, 1);
			if (buyable & num_manned_quarries_p3 >= 1 & !p3_built & !p3_ai_done)
			{
				infobox_building1(string.Concat(p3_name, " built the Small Market."), 130);
				p3_process_building(130);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p3 = checked(gold_p3 - build_final_cost);
				p3_ai_done = true;
				p3_built = true;
				update_all_labels();
			}
			determine_if_buyable1(0, 110, 1);
			if (buyable & num_manned_quarries_p3 >= 1 & !p3_built & !p3_ai_done)
			{
				infobox_building1(string.Concat(p3_name, " built the Small Indigo Plant."), 110);
				p3_process_building(110);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p3 = checked(gold_p3 - build_final_cost);
				p3_ai_done = true;
				p3_built = true;
				update_all_labels();
			}
			if (!p3_built)
			{
				infobox_role(string.Concat(p3_name, " has decided not to build."), "role_builder");
			}
			formtitle("p3", "Done performing the Builder role - AI BLANK");
		}

		public void p3_process_building(object buildnum)
		{
			check_for_building(341);
			if (!found_building)
			{
				buildings_p3_array[num_buildings_p3] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					infobox_building1(string.Concat(p3_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[3] = checked(colonists_array[3] + 1);
				}
				else if (colonists_ship_num > 0)
				{
					colonists_ship_num = checked(colonists_ship_num - 1);
					infobox_building1(string.Concat(p3_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[3] = checked(colonists_array[3] + 1);
				}
				buildings_p3_array[num_buildings_p3] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p3_process_building_large(object buildnum)
		{
			determine_where_to_build_large_p3();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				tempinteger = 22;
			}
			if (large_build_spot != 99)
			{
				check_for_building(341);
				if (!found_building)
				{
					infobox_building2(string.Concat(p3_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p3_array[large_build_spot] = IntegerType.FromObject(buildnum);
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p3 = checked(gold_p3 - build_final_cost);
					p3_ai_done = true;
					p3_built = true;
				}
				else
				{
					if (colonists_bank_num > 0)
					{
						colonists_bank_num = checked(colonists_bank_num - 1);
						infobox_building1(string.Concat(p3_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[3] = checked(colonists_array[3] + 1);
					}
					else if (colonists_ship_num > 0)
					{
						colonists_ship_num = checked(colonists_ship_num - 1);
						infobox_building1(string.Concat(p3_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[3] = checked(colonists_array[3] + 1);
					}
					infobox_building2(string.Concat(p3_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p3_array[large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p3 = checked(gold_p3 - build_final_cost);
					p3_ai_done = true;
					p3_built = true;
				}
			}
			update_all_labels();
		}

		public void p3_process_captain()
		{
			log_process_role("p3", "Captain");
			update_summary();
			update_ship_cargo();
			p3_done_shipping = false;
			p3_done_all_shipping = false;
			p3_num_shipped = 0;
			goods_to_ship = false;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (goods_p3_array[counter1] > 0)
				{
					goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (goods_to_ship & !p3_done_shipping)
			{
				calculate_best_captain_points_p3();
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipa", false) == 0 & !p3_done_shipping)
			{
				ship_corn_via_shipa();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipb", false) == 0 & !p3_done_shipping)
			{
				ship_corn_via_shipb();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipc", false) == 0 & !p3_done_shipping)
			{
				ship_corn_via_shipc();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_wharf", false) == 0 & !p3_done_shipping)
			{
				ship_corn_via_wharf();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipa", false) == 0 & !p3_done_shipping)
			{
				ship_indigo_via_shipa();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipb", false) == 0 & !p3_done_shipping)
			{
				ship_indigo_via_shipb();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipc", false) == 0 & !p3_done_shipping)
			{
				ship_indigo_via_shipc();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_wharf", false) == 0 & !p3_done_shipping)
			{
				ship_Indigo_via_wharf();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipa", false) == 0 & !p3_done_shipping)
			{
				ship_sugar_via_shipa();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipb", false) == 0 & !p3_done_shipping)
			{
				ship_sugar_via_shipb();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipc", false) == 0 & !p3_done_shipping)
			{
				ship_sugar_via_shipc();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_wharf", false) == 0 & !p3_done_shipping)
			{
				ship_sugar_via_wharf();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipa", false) == 0 & !p3_done_shipping)
			{
				ship_tobacco_via_shipa();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipb", false) == 0 & !p3_done_shipping)
			{
				ship_tobacco_via_shipb();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipc", false) == 0 & !p3_done_shipping)
			{
				ship_tobacco_via_shipc();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_wharf", false) == 0 & !p3_done_shipping)
			{
				ship_tobacco_via_wharf();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipa", false) == 0 & !p3_done_shipping)
			{
				ship_coffee_via_shipa();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipb", false) == 0 & !p3_done_shipping)
			{
				ship_coffee_via_shipb();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipc", false) == 0 & !p3_done_shipping)
			{
				ship_coffee_via_shipc();
				p3_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_wharf", false) == 0 & !p3_done_shipping)
			{
				ship_coffee_via_wharf();
				p3_done_shipping = true;
			}
			if (!p3_done_shipping & StringType.StrCmp(best_shipping_method, "null", false) == 0 & goods_to_ship)
			{
				p3_done_shipping = true;
				p3_done_all_shipping = true;
				infobox_role(string.Concat(p3_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!goods_to_ship & !p3_done_shipping)
			{
				p3_done_shipping = true;
				p3_done_all_shipping = true;
				infobox_role(string.Concat(p3_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Enabled = true;
			auto_captain_button.Visible = true;
			formtitle("p3", "Done Shipping - Press Next Shipper");
			update_ship_cargo();
		}

		public void p3_process_craftsman()
		{
			log_process_role("p3", "Craftsman");
			formtitle("p3", "Craftsman Phase");
			p3_ai_done = false;
			update_summary();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				determine_production();
			}
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				if (goods_this_turn_p3_array[4] > 0 & goods_bank_array[4] > 0 & !p3_ai_done)
				{
					goods_bank_array[4] = checked(goods_bank_array[4] - 1);
					goods_p3_array[4] = checked(goods_p3_array[4] + 1);
					p3_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p3_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p3_array[3] > 0 & goods_bank_array[3] > 0 & !p3_ai_done)
				{
					goods_bank_array[3] = checked(goods_bank_array[3] - 1);
					goods_p3_array[3] = checked(goods_p3_array[3] + 1);
					p3_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p3_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p3_array[1] > 0 & goods_bank_array[1] > 0 & !p3_ai_done)
				{
					goods_bank_array[1] = checked(goods_bank_array[1] - 1);
					goods_p3_array[1] = checked(goods_p3_array[1] + 1);
					p3_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p3_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p3_array[0] > 0 & goods_bank_array[0] > 0 & !p3_ai_done)
				{
					goods_bank_array[0] = checked(goods_bank_array[0] - 1);
					goods_p3_array[0] = checked(goods_p3_array[0] + 1);
					p3_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p3_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p3_array[2] > 0 & goods_bank_array[2] > 0 & !p3_ai_done)
				{
					goods_bank_array[2] = checked(goods_bank_array[2] - 1);
					goods_p3_array[2] = checked(goods_p3_array[2] + 1);
					p3_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p3_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!p3_ai_done)
				{
					if (!((goods_this_turn_p3_array[0] > 0 | goods_this_turn_p3_array[1] > 0 | goods_this_turn_p3_array[2] > 0 | goods_this_turn_p3_array[3] > 0 | goods_this_turn_p3_array[4] > 0) & (goods_bank_array[0] == 0 | goods_bank_array[1] == 0 | goods_bank_array[2] == 0 | goods_bank_array[3] == 0 | goods_bank_array[4] == 0)))
					{
						infobox_role(string.Concat(p3_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						p3_ai_done = true;
						infobox_role(string.Concat("There were no goods available for ", p3_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			next_turn_button.Text = "End Craftsman Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void p3_process_mayor()
		{
			log_process_role("p3", "Mayor");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				distribute_new_colonists();
			}
			p3_remove_all_colonists_to_idle();
			p3_ai_done = false;
			if (idle_colonists_array[current_player] == 0)
			{
				p3_ai_done = true;
			}
			counter3 = 12;
			while (!(counter3 == 20 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				if (buildings_p3_array[counter3] == 410 | buildings_p3_array[counter3] == 420 | buildings_p3_array[counter3] == 430 | buildings_p3_array[counter3] == 440 | buildings_p3_array[counter3] == 450)
				{
					buildings_p3_array[counter3] = checked(buildings_p3_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				if (buildings_p3_array[counter3] == 350)
				{
					buildings_p3_array[counter3] = checked(buildings_p3_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				if (buildings_p3_array[counter3] == 330)
				{
					buildings_p3_array[counter3] = checked(buildings_p3_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				if (buildings_p3_array[counter3] == 360)
				{
					buildings_p3_array[counter3] = checked(buildings_p3_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			num_empty_corn_plant_p3 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] == 30)
				{
					num_empty_corn_plant_p3 = checked(num_empty_corn_plant_p3 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_empty_corn_plant_p3 >= 1 & num_quarries_p3 >= 1 & idle_colonists_array[current_player] >= 2)
			{
				finished = false;
				while (!finished)
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p3_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p3_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p3_ai_done = true;
					finished = true;
				}
				finished = false;
				while (!finished)
				{
					check_for_plantation(60);
					if (found_plantation)
					{
						plantations_p3_array[plantation_slot] = 61;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p3_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p3_ai_done = true;
					finished = true;
				}
			}
			num_empty_corn_plant_p3 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] == 30)
				{
					num_empty_corn_plant_p3 = checked(num_empty_corn_plant_p3 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			if (idle_colonists_array[current_player] >= 2 & num_empty_corn_plant_p3 >= 2)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p3_ai_done))
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p3_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p3_colonists();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p3_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p3_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p3_ai_done))
				{
					check_for_coffee_production();
					if (found_coffee_match)
					{
						p3_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p3_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p3_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p3_ai_done))
				{
					check_for_tobacco_production();
					if (found_tobacco_match)
					{
						p3_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p3_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p3_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p3_ai_done))
				{
					check_for_sugar_production();
					if (found_sugar_match)
					{
						p3_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p3_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p3_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p3_ai_done))
				{
					check_for_indigo_production();
					if (found_indigo_match)
					{
						p3_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p3_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				check_for_plantation(30);
				if (found_plantation)
				{
					plantations_p3_array[plantation_slot] = 31;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				check_for_plantation(60);
				if (found_plantation)
				{
					plantations_p3_array[plantation_slot] = 61;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				if (buildings_p3_array[counter3] == 130 | buildings_p3_array[counter3] == 140 | buildings_p3_array[counter3] == 150 | buildings_p3_array[counter3] == 160 | buildings_p3_array[counter3] == 230 | buildings_p3_array[counter3] == 240 | buildings_p3_array[counter3] == 250 | buildings_p3_array[counter3] == 260 | buildings_p3_array[counter3] == 330 | buildings_p3_array[counter3] == 340 | buildings_p3_array[counter3] == 350 | buildings_p3_array[counter3] == 360)
				{
					buildings_p3_array[counter3] = checked(buildings_p3_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p3_ai_done))
			{
				if (buildings_p3_array[counter3] == 110 | buildings_p3_array[counter3] == 120 | buildings_p3_array[counter3] == 210 | buildings_p3_array[counter3] == 211 | buildings_p3_array[counter3] == 212 | buildings_p3_array[counter3] == 220 | buildings_p3_array[counter3] == 221 | buildings_p3_array[counter3] == 222 | buildings_p3_array[counter3] == 310 | buildings_p3_array[counter3] == 311 | buildings_p3_array[counter3] == 312 | buildings_p3_array[counter3] == 320 | buildings_p3_array[counter3] == 321)
				{
					buildings_p3_array[counter3] = checked(buildings_p3_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p3_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p3_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			if (idle_colonists_array[current_player] <= 0)
			{
				p3_ai_done = true;
			}
			else
			{
				counter3 = 0;
				while (!(counter3 == 12 | idle_colonists_array[current_player] == 0 | p3_ai_done))
				{
					if (plantations_p3_array[counter3] == 10 | plantations_p3_array[counter3] == 20 | plantations_p3_array[counter3] == 30 | plantations_p3_array[counter3] == 40 | plantations_p3_array[counter3] == 50 | plantations_p3_array[counter3] == 60)
					{
						plantations_p3_array[counter3] = checked(plantations_p3_array[counter3] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p3_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			update_all_labels();
			determine_p3_mayor_phase_over();
			formtitle("p3", "Mayor Phase - Turn Over");
		}

		public void p3_process_prospector1()
		{
			log_process_role("p3", "Prospector1");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				infobox_role(string.Concat(p3_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p3 = checked(gold_p3 + 1);
			}
			formtitle("p3", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p3_process_prospector2()
		{
			log_process_role("p3", "Prospector2");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				infobox_role(string.Concat(p3_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p3 = checked(gold_p3 + 1);
			}
			formtitle("p3", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p3_process_settler()
		{
			log_process_role("p3", "Settler");
			update_summary();
			p3_ai_done = false;
			p3_ready_to_end_settler = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p3_chose_settler = false;
			p3_manned_construction_hut = false;
			p3_manned_hospice = false;
			p3_manned_hacienda = false;
			p3_chose_quarry = false;
			p3_chose_corn = false;
			p3_chose_random = false;
			p3_use_hacienda = false;
			p3_num_indigo_plants = 0;
			p3_num_sugar_plants = 0;
			p3_num_tobacco_plants = 0;
			p3_num_coffee_plants = 0;
			what_plantations_available();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				p3_chose_settler = true;
			}
			check_for_building(151);
			if (found_building)
			{
				p3_manned_construction_hut = true;
			}
			check_for_building(231);
			if (found_building)
			{
				p3_manned_hospice = true;
			}
			check_for_building(141);
			if (found_building)
			{
				p3_manned_hacienda = true;
			}
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] == 10 | plantations_p3_array[counter1] == 11)
				{
					p3_num_indigo_plants = checked(p3_num_indigo_plants + 1);
				}
				if (plantations_p3_array[counter1] == 20 | plantations_p3_array[counter1] == 21)
				{
					p3_num_sugar_plants = checked(p3_num_sugar_plants + 1);
				}
				if (plantations_p3_array[counter1] == 40 | plantations_p3_array[counter1] == 41)
				{
					p3_num_tobacco_plants = checked(p3_num_tobacco_plants + 1);
				}
				if (plantations_p3_array[counter1] == 50 | plantations_p3_array[counter1] == 51)
				{
					p3_num_coffee_plants = checked(p3_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_plantations_p3 >= 8 & num_plantations_p3 <= 10 & p3_manned_hacienda)
			{
				chance_of_action(20);
				if (chance)
				{
					p3_use_hacienda = true;
				}
			}
			if (num_plantations_p3 < 8 & p3_manned_hacienda)
			{
				chance_of_action(80);
				if (chance)
				{
					p3_use_hacienda = true;
				}
			}
			if (p3_use_hacienda & p3_chose_settler & quarry_available)
			{
				p3_chose_quarry = true;
				p3_chose_corn = false;
			}
			chance_of_action(10);
			if ((p3_chose_settler | p3_manned_construction_hut) & num_quarries_p3 == 3 & !corn_available & quarry_available & chance)
			{
				p3_chose_quarry = true;
				p3_chose_corn = false;
			}
			chance_of_action(40);
			if ((p3_chose_settler | p3_manned_construction_hut) & num_quarries_p3 == 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p3_chose_quarry = true;
				p3_chose_corn = false;
			}
			chance_of_action(90);
			if ((p3_chose_settler | p3_manned_construction_hut) & num_quarries_p3 < 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p3_chose_quarry = true;
				p3_chose_corn = false;
			}
			chance_of_action(90);
			if (chance & turn_number == 1 & p3_chose_settler)
			{
				p3_chose_quarry = true;
				p3_chose_corn = false;
				p3_chose_random = false;
			}
			chance_of_action(90);
			if (corn_available & chance & turn_number == 1 & !p3_chose_settler)
			{
				p3_chose_quarry = false;
				p3_chose_corn = true;
				p3_chose_random = false;
			}
			chance_of_action(90);
			if (turn_number != 1 & corn_available & !p3_manned_construction_hut)
			{
				p3_chose_quarry = false;
				p3_chose_corn = true;
				p3_chose_random = false;
			}
			if (num_plantations_p3 >= 12)
			{
				infobox_role(string.Concat(p3_name, " already has 12 plantations. ", p3_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (p3_use_hacienda)
				{
					infobox_building1(string.Concat(p3_name, "is using the Hacienda to get a random plantation."), 141);
					draw_random_plantation_tile();
				}
				if (!p3_use_hacienda & p3_manned_hacienda)
				{
					infobox_building1(string.Concat(p3_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (p3_chose_quarry & p3_chose_settler & !p3_ai_done)
				{
					infobox_plant(string.Concat(p3_name, " used the Settler bonus to choose a Quarry."), 60);
					p3_place_quarry();
				}
				if (p3_chose_quarry & !p3_chose_settler & p3_manned_construction_hut & !p3_ai_done)
				{
					infobox_building1(string.Concat(p3_name, " used the Construction Hut to choose a Quarry."), 151);
					p3_place_quarry();
				}
				if (p3_chose_corn & corn_available & !p3_ai_done)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Corn."), 30);
					p3_place_plantation(30);
				}
				chance_of_action(20);
				if (!p3_ai_done & indigo_available & p3_num_indigo_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Indigo."), 10);
					p3_place_plantation(10);
				}
				chance_of_action(20);
				if (!p3_ai_done & sugar_available & p3_num_sugar_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Sugar."), 20);
					p3_place_plantation(20);
				}
				if (!p3_ai_done & tobacco_available & p3_num_tobacco_plants < 3)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Tobacco."), 40);
					p3_place_plantation(40);
				}
				if (!p3_ai_done & sugar_available & p3_num_sugar_plants < 3)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Sugar."), 20);
					p3_place_plantation(20);
				}
				if (!p3_ai_done & coffee_available & p3_num_coffee_plants < 2)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Coffee."), 50);
					p3_place_plantation(50);
				}
				if (!p3_ai_done & indigo_available & p3_num_indigo_plants < 3)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Indigo."), 10);
					p3_place_plantation(10);
				}
				if (!p3_ai_done & coffee_available)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Coffee."), 50);
					p3_place_plantation(50);
				}
				if (!p3_ai_done & tobacco_available)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Tobacco."), 40);
					p3_place_plantation(40);
				}
				if (!p3_ai_done & sugar_available)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Sugar."), 20);
					p3_place_plantation(20);
				}
				if (!p3_ai_done & indigo_available)
				{
					infobox_plant(string.Concat(p3_name, " is choosing Indigo."), 10);
					p3_place_plantation(10);
				}
			}
			update_all_labels();
			formtitle("p3", "Done performing the Settler role - ");
		}

		public void p3_process_trader()
		{
			log_process_role("p3", "Trader");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p3_ai_done = false;
			p3_traded = false;
			p3_chose_trader = false;
			p3_manned_small_market = false;
			p3_manned_large_market = false;
			p3_manned_office = false;
			trading_house_full = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
			{
				p3_chose_trader = true;
			}
			check_for_building(131);
			if (found_building)
			{
				p3_manned_small_market = true;
			}
			check_for_building(251);
			if (found_building)
			{
				p3_manned_large_market = true;
			}
			check_for_building(241);
			if (found_building)
			{
				p3_manned_office = true;
			}
			if (trading_house_array[3] != 0)
			{
				trading_house_full = true;
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 5 & !p3_manned_office)
				{
					already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p3_array[4] > 0 & !p3_traded & (chance | p3_chose_trader))
			{
				goods_p3_array[4] = checked(goods_p3_array[4] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 5;
						counter1 = 4;
					}
				}
				counter3 = 4;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p3_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (p3_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p3_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Coffee for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p3 = checked(gold_p3 + counter3);
				p3_ai_done = true;
				p3_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 4 & !p3_manned_office)
				{
					already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p3_array[3] > 0 & !p3_traded & (chance | p3_chose_trader))
			{
				goods_p3_array[3] = checked(goods_p3_array[3] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 4;
						counter1 = 4;
					}
				}
				counter3 = 3;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p3_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (p3_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p3_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Tobacco for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p3 = checked(gold_p3 + counter3);
				p3_ai_done = true;
				p3_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 2 & !p3_manned_office)
				{
					already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p3_array[1] > 0 & !p3_traded & (chance | p3_chose_trader))
			{
				goods_p3_array[1] = checked(goods_p3_array[1] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 2;
						counter1 = 4;
					}
				}
				counter3 = 2;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p3_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (p3_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p3_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Sugar for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p3 = checked(gold_p3 + counter3);
				p3_ai_done = true;
				p3_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 1 & !p3_manned_office)
				{
					already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(75);
			if (!already_there & !trading_house_full & goods_p3_array[0] > 0 & !p3_traded & (chance | p3_chose_trader))
			{
				goods_p3_array[0] = checked(goods_p3_array[0] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 1;
						counter1 = 4;
					}
				}
				counter3 = 1;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p3_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (p3_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p3_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Indigo for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p3 = checked(gold_p3 + counter3);
				p3_ai_done = true;
				p3_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 3 & !p3_manned_office)
				{
					already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(10);
			if (!already_there & goods_p3_array[2] > 0 & !p3_traded & !trading_house_full & (p3_chose_trader | p3_manned_small_market | p3_manned_large_market | chance))
			{
				goods_p3_array[2] = checked(goods_p3_array[2] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 3;
						counter1 = 4;
					}
				}
				counter3 = 0;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p3", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				check_for_building(131);
				if (found_building)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				check_for_building(251);
				if (found_building)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p3_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p3_name, " sold their Corn for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p3 = checked(gold_p3 + counter3);
				p3_ai_done = true;
				p3_traded = true;
				update_all_labels();
			}
			if (!p3_traded)
			{
				infobox_role(string.Concat(p3_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			formtitle("p3", "Done performing the Trader role - Turn Over");
		}

		public void p3_remove_all_colonists_to_idle()
		{
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), "1", false) == 0)
					{
						plantations_p3_array[counter1] = checked(plantations_p3_array[counter1] - 1);
						idle_colonists_array[3] = checked(idle_colonists_array[3] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				counter2 = 0;
				do
				{
					if (buildings_p3_array[counter1] != 0 & buildings_p3_array[counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), "0", false) != 0)
						{
							buildings_p3_array[counter1] = checked(buildings_p3_array[counter1] - 1);
							idle_colonists_array[3] = checked(idle_colonists_array[3] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void p4_choose_role()
		{
			turn_number = checked(turn_number + 1);
			update_summary();
			update_player_turn_designations();
			determine_empty_colonists_slots_all();
			p4_finished_choosing_role = false;
			while (!p4_finished_choosing_role)
			{
				role_choice = "settler";
				need_to_choose_random = true;
				dont_choose_settler = false;
				dont_choose_mayor = false;
				dont_choose_builder = false;
				dont_choose_craftsman = false;
				dont_choose_trader = false;
				dont_choose_captain = false;
				dont_choose_prospector1 = false;
				dont_choose_prospector2 = false;
				goods_to_ship = false;
				determine_goods_to_ship();
				goods_to_trade = false;
				determine_goods_to_trade();
				goods_to_produce = false;
				determine_production_p4();
				if (!goods_to_produce & need_to_choose_random && bonus_roles_array[3] < 2)
				{
					dont_choose_craftsman = true;
				}
				if (!goods_to_ship & need_to_choose_random && bonus_roles_array[5] < 2)
				{
					dont_choose_captain = true;
				}
				if (!goods_to_trade & need_to_choose_random && bonus_roles_array[4] < 2)
				{
					dont_choose_trader = true;
				}
				if (num_plantations_p4 >= 8 & need_to_choose_random && bonus_roles_array[0] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_settler = true;
					}
				}
				if (p4_empty_colonists_slots == 0 & need_to_choose_random && bonus_roles_array[1] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_mayor = true;
					}
				}
				check_for_plantation(30);
				if (num_plantations_p4 == 1 & !found_plantation & num_buildings_p4 == 0)
				{
					dont_choose_mayor = true;
				}
				if (turn_number == 1 & need_to_choose_random)
				{
					chance_of_action(90);
					if (chance)
					{
						role_choice = "settler";
						need_to_choose_random = false;
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "mayor";
							need_to_choose_random = false;
						}
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (!found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "builder";
							need_to_choose_random = false;
						}
					}
				}
				chance_of_action(90);
				if (role_builder_pic.Visible & bonus_roles_array[2] >= 2 & chance & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_captain_pic.Visible & bonus_roles_array[5] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_craftsman_pic.Visible & bonus_roles_array[3] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_mayor_pic.Visible & bonus_roles_array[1] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "mayor";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_settler_pic.Visible & bonus_roles_array[0] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "settler";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_trader_pic.Visible & bonus_roles_array[4] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector1_pic.Visible & bonus_roles_array[6] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector1";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector2_pic.Visible & bonus_roles_array[7] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector2";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p4 + discount1) + num_manned_quarries_p4) >= 10 && role_builder_pic.Visible & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p4 + discount1) + num_manned_quarries_p4) >= 8)
				{
					chance_of_action(90);
					if (chance & role_builder_pic.Visible & need_to_choose_random)
					{
						role_choice = "builder";
						need_to_choose_random = false;
					}
				}
				if (checked(checked(gold_p4 + discount1) + num_manned_quarries_p4) >= 10)
				{
					chance = false;
				}
				if (checked(checked(gold_p4 + discount1) + num_manned_quarries_p4) < 10)
				{
					chance_of_action(90);
				}
				if (goods_to_trade & role_trader_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(80);
				if (goods_to_ship & role_captain_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(30);
				if (goods_to_produce & role_craftsman_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				ai_role_choice_maintenance();
				if (StringType.StrCmp(role_choice, "settler", false) == 0 && role_settler_pic.Visible)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Settler."), "role_settler");
					settler_round = true;
					role_settler_pic.Visible = false;
					settler_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[0]);
					bonus_roles_array[0] = 0;
					log_role_chooser("p4", "Settler");
					p4_process_settler();
					p4_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p4", false) == 0 & settler_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "mayor", false) == 0 && role_mayor_pic.Visible)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Mayor."), "role_mayor");
					mayor_round = true;
					role_mayor_pic.Visible = false;
					mayor_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[1]);
					bonus_roles_array[1] = 0;
					log_role_chooser("p4", "Mayor");
					p4_process_mayor();
					p4_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p4", false) == 0 & mayor_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "builder", false) == 0 && role_builder_pic.Visible & chance)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Builder."), "role_builder");
					builder_round = true;
					role_builder_pic.Visible = false;
					builder_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[2]);
					bonus_roles_array[2] = 0;
					log_role_chooser("p4", "Builder");
					p4_process_builder();
					p4_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p4", false) == 0 & builder_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "craftsman", false) == 0 && role_craftsman_pic.Visible)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Craftsman."), "role_craftsman");
					craftsman_round = true;
					role_craftsman_pic.Visible = false;
					craftsman_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[3]);
					bonus_roles_array[3] = 0;
					log_role_chooser("p4", "Craftsman");
					p4_process_craftsman();
					p4_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "trader", false) == 0 && role_trader_pic.Visible)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Trader."), "role_trader");
					trader_round = true;
					role_trader_pic.Visible = false;
					trader_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[4]);
					bonus_roles_array[4] = 0;
					log_role_chooser("p4", "Trader");
					p4_process_trader();
					p4_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p4", false) == 0 & trader_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "captain", false) == 0 && role_captain_pic.Visible)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Captain."), "role_captain");
					p1_used_wharf = false;
					p2_used_wharf = false;
					p3_used_wharf = false;
					p4_used_wharf = false;
					p5_used_wharf = false;
					captain_round = true;
					role_captain_pic.Visible = false;
					captain_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[5]);
					bonus_roles_array[5] = 0;
					captain_bonus_taken = false;
					log_role_chooser("p4", "Captain");
					p4_process_captain();
					p4_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector1", false) == 0 && role_prospector1_pic.Visible)
				{
					infobox_role(string.Concat(p4_name, " has chosen the Prospector."), "role_prospector1");
					prospector1_round = true;
					role_prospector1_pic.Visible = false;
					pros1_bonus_label.Visible = false;
					gold_p4 = checked(gold_p4 + bonus_roles_array[6]);
					bonus_roles_array[6] = 0;
					log_role_chooser("p4", "Prospector1");
					p4_process_prospector1();
					p4_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector2", false) != 0 || !role_prospector2_pic.Visible)
				{
					continue;
				}
				infobox_role(string.Concat(p4_name, " has chosen the Prospector."), "role_prospector1");
				prospector2_round = true;
				role_prospector2_pic.Visible = false;
				pros2_bonus_label.Visible = false;
				gold_p4 = checked(gold_p4 + bonus_roles_array[7]);
				bonus_roles_array[7] = 0;
				log_role_chooser("p4", "Prospector2");
				p4_process_prospector2();
				p4_finished_choosing_role = true;
			}
		}

		public void p4_place_matching_production()
		{
			plantations_p4_array[plantation_slot] = checked(plantations_p4_array[plantation_slot] + 1);
			buildings_p4_array[building_slot] = checked(buildings_p4_array[building_slot] + 1);
			idle_colonists_array[4] = checked(idle_colonists_array[4] - 2);
			update_all_labels();
		}

		public void p4_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				tempinteger = indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				tempinteger = sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				tempinteger = corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				tempinteger = tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				tempinteger = coffee_available_slot;
			}
			if (!p4_manned_hospice)
			{
				plantations_p4_array[num_plantations_p4] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				p4_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p4_array[num_plantations_p4] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p4_name, "'s Hospice has granted a colonist for their plantation."), 231);
				colonists_array[3] = checked(colonists_array[3] + 1);
				p4_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p4_array[num_plantations_p4] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p4_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p4_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p4_array[num_plantations_p4] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p4_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[3] = checked(colonists_array[3] + 1);
				p4_ai_done = true;
			}
			update_all_labels();
		}

		public void p4_place_quarry()
		{
			if (!p4_manned_hospice)
			{
				plantations_p4_array[num_plantations_p4] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				p4_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p4_array[num_plantations_p4] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p4_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				colonists_array[3] = checked(colonists_array[3] + 1);
				p4_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p4_array[num_plantations_p4] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p4_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p4_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p4_array[num_plantations_p4] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p4_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[3] = checked(colonists_array[3] + 1);
				p4_ai_done = true;
			}
			update_all_labels();
		}

		public void p4_process_builder()
		{
			log_process_role("p4", "Builder");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p4_ai_done = false;
			p4_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//p4_ai_done;
			compute_temporary_large_building_score();
			determine_if_afford_large();
			update_player_turn_designations();
			if (turn_number == 1 & StringType.StrCmp(current_role_chooser_string, "p4", false) != 0 & !p4_ai_done & builder_round)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Small Indigo Plant."), 110);
						p4_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done & afford_large & best_building_num != 999)
			{
				p4_process_building_large(best_building_num);
			}
			if (!p4_ai_done)
			{
				build_available_slot = 13;
				build_number = 320;
				build_cost = 6;
				build_name = "Coffee Roaster";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(50);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the ", build_name, "."), build_number);
						p4_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 12;
				build_number = 310;
				build_cost = 5;
				build_name = "Tobacco Storage";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(40);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the ", build_name, "."), build_number);
						p4_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 1;
				build_number = 120;
				build_cost = 2;
				build_name = "Small Sugar Mill";
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(220);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the ", build_name, "."), build_number);
						p4_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 7;
				build_number = 220;
				build_cost = 4;
				build_name = "Sugar Mill";
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(120);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(50);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the ", build_name, "."), build_number);
						p4_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Small Indigo Plant."), 110);
						p4_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 6;
				build_number = 210;
				build_cost = 3;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(110);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(60);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Indigo Plant."), 210);
						p4_process_building(210);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			update_player_turn_designations();
			if (!p4_ai_done)
			{
				chance_of_action(25);
				if (chance & StringType.StrCmp(current_role_chooser_string, "p4", false) != 0)
				{
					determine_if_buyable1(2, 130, 1);
					if (buyable & num_manned_quarries_p4 >= 1 & !p4_built)
					{
						infobox_building1(string.Concat(p4_name, " built the Small Market."), 130);
						p4_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
					determine_if_buyable1(0, 110, 1);
					if (buyable & num_manned_quarries_p4 >= 1 & !p4_built)
					{
						infobox_building1(string.Concat(p4_name, " built the Small Indigo Plant."), 110);
						p4_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
						p4_ai_done = true;
						p4_built = true;
					}
					if (!p4_ai_done & !p4_built)
					{
						p4_ai_done = true;
						p4_built = false;
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 14;
				build_number = 330;
				build_cost = 7;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Factory."), 330);
						p4_process_building(330);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 16;
				build_number = 350;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Harbor."), 350);
						p4_process_building(350);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 8;
				build_number = 230;
				build_cost = 4;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_plantations_p4 > 8)
					{
						chance_of_action(10);
					}
					else
					{
						chance_of_action(50);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Hospice."), 230);
						p4_process_building(230);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 10;
				build_number = 250;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Large Market."), 250);
						p4_process_building(250);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 2;
				build_number = 130;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Small Market."), 130);
						p4_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 5;
				build_number = 160;
				build_cost = 3;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(260);
					if (!found_building)
					{
						check_for_building(261);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(10);
						}
					}
					else
					{
						chance_of_action(10);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Small Warehouse."), 160);
						p4_process_building(160);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 3;
				build_number = 140;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Hacienda."), 140);
						p4_process_building(140);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 17;
				build_number = 361;
				build_cost = 9;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(50);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Wharf."), 360);
						p4_process_building(360);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 11;
				build_number = 260;
				build_cost = 6;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(160);
					if (!found_building)
					{
						check_for_building(161);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(5);
						}
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Large Warehouse."), 260);
						p4_process_building(260);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 9;
				build_number = 240;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(30);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Office."), 240);
						p4_process_building(240);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 4;
				build_number = 150;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_quarries_p4 < 2)
					{
						chance_of_action(30);
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the Construction Hut."), 150);
						p4_process_building(150);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			if (!p4_ai_done)
			{
				build_available_slot = 15;
				build_number = 340;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(20);
					if (chance)
					{
						infobox_building1(string.Concat(p4_name, " built the University."), 340);
						p4_process_building(340);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p4 = checked(gold_p4 - build_final_cost);
						p4_ai_done = true;
						p4_built = true;
						update_all_labels();
					}
				}
			}
			determine_if_buyable1(2, 130, 1);
			if (buyable & num_manned_quarries_p4 >= 1 & !p4_built & !p4_ai_done)
			{
				infobox_building1(string.Concat(p4_name, " built the Small Market."), 130);
				p4_process_building(130);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p4 = checked(gold_p4 - build_final_cost);
				p4_ai_done = true;
				p4_built = true;
				update_all_labels();
			}
			determine_if_buyable1(0, 110, 1);
			if (buyable & num_manned_quarries_p4 >= 1 & !p4_built & !p4_ai_done)
			{
				infobox_building1(string.Concat(p4_name, " built the Small Indigo Plant."), 110);
				p4_process_building(110);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p4 = checked(gold_p4 - build_final_cost);
				p4_ai_done = true;
				p4_built = true;
				update_all_labels();
			}
			if (!p4_built)
			{
				infobox_role(string.Concat(p4_name, " has decided not to build."), "role_builder");
			}
			formtitle("p4", "Done performing the Builder role - AI BLANK");
		}

		public void p4_process_building(object buildnum)
		{
			check_for_building(341);
			if (!found_building)
			{
				buildings_p4_array[num_buildings_p4] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					infobox_building1(string.Concat(p4_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[4] = checked(colonists_array[4] + 1);
				}
				else if (colonists_ship_num > 0)
				{
					colonists_ship_num = checked(colonists_ship_num - 1);
					infobox_building1(string.Concat(p4_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[4] = checked(colonists_array[4] + 1);
				}
				buildings_p4_array[num_buildings_p4] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p4_process_building_large(object buildnum)
		{
			determine_where_to_build_large_p4();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				tempinteger = 22;
			}
			if (large_build_spot != 99)
			{
				check_for_building(341);
				if (!found_building)
				{
					infobox_building2(string.Concat(p4_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p4_array[large_build_spot] = IntegerType.FromObject(buildnum);
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p4 = checked(gold_p4 - build_final_cost);
					p4_ai_done = true;
					p4_built = true;
				}
				else
				{
					if (colonists_bank_num > 0)
					{
						colonists_bank_num = checked(colonists_bank_num - 1);
						infobox_building1(string.Concat(p4_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[4] = checked(colonists_array[4] + 1);
					}
					else if (colonists_ship_num > 0)
					{
						colonists_ship_num = checked(colonists_ship_num - 1);
						infobox_building1(string.Concat(p4_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[4] = checked(colonists_array[4] + 1);
					}
					infobox_building2(string.Concat(p4_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p4_array[large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p4 = checked(gold_p4 - build_final_cost);
					p4_ai_done = true;
					p4_built = true;
				}
			}
			update_all_labels();
		}

		public void p4_process_captain()
		{
			log_process_role("p4", "Captain");
			update_summary();
			update_ship_cargo();
			p4_done_shipping = false;
			p4_done_all_shipping = false;
			p4_num_shipped = 0;
			goods_to_ship = false;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (goods_p4_array[counter1] > 0)
				{
					goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (goods_to_ship & !p4_done_shipping)
			{
				calculate_best_captain_points_p4();
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipa", false) == 0 & !p4_done_shipping)
			{
				ship_corn_via_shipa();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipb", false) == 0 & !p4_done_shipping)
			{
				ship_corn_via_shipb();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipc", false) == 0 & !p4_done_shipping)
			{
				ship_corn_via_shipc();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_wharf", false) == 0 & !p4_done_shipping)
			{
				ship_corn_via_wharf();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipa", false) == 0 & !p4_done_shipping)
			{
				ship_indigo_via_shipa();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipb", false) == 0 & !p4_done_shipping)
			{
				ship_indigo_via_shipb();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipc", false) == 0 & !p4_done_shipping)
			{
				ship_indigo_via_shipc();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_wharf", false) == 0 & !p4_done_shipping)
			{
				ship_Indigo_via_wharf();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipa", false) == 0 & !p4_done_shipping)
			{
				ship_sugar_via_shipa();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipb", false) == 0 & !p4_done_shipping)
			{
				ship_sugar_via_shipb();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipc", false) == 0 & !p4_done_shipping)
			{
				ship_sugar_via_shipc();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_wharf", false) == 0 & !p4_done_shipping)
			{
				ship_sugar_via_wharf();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipa", false) == 0 & !p4_done_shipping)
			{
				ship_tobacco_via_shipa();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipb", false) == 0 & !p4_done_shipping)
			{
				ship_tobacco_via_shipb();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipc", false) == 0 & !p4_done_shipping)
			{
				ship_tobacco_via_shipc();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_wharf", false) == 0 & !p4_done_shipping)
			{
				ship_tobacco_via_wharf();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipa", false) == 0 & !p4_done_shipping)
			{
				ship_coffee_via_shipa();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipb", false) == 0 & !p4_done_shipping)
			{
				ship_coffee_via_shipb();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipc", false) == 0 & !p4_done_shipping)
			{
				ship_coffee_via_shipc();
				p4_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_wharf", false) == 0 & !p4_done_shipping)
			{
				ship_coffee_via_wharf();
				p4_done_shipping = true;
			}
			if (!p4_done_shipping & StringType.StrCmp(best_shipping_method, "null", false) == 0 & goods_to_ship)
			{
				p4_done_shipping = true;
				p4_done_all_shipping = true;
				infobox_role(string.Concat(p4_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!goods_to_ship & !p4_done_shipping)
			{
				p4_done_shipping = true;
				p4_done_all_shipping = true;
				infobox_role(string.Concat(p4_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Enabled = true;
			auto_captain_button.Visible = true;
			formtitle("p4", "Done Shipping - Press Next Shipper");
			update_ship_cargo();
		}

		public void p4_process_craftsman()
		{
			log_process_role("p4", "Craftsman");
			formtitle("p4", "Craftsman Phase");
			p4_ai_done = false;
			update_summary();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				determine_production();
			}
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				if (goods_this_turn_p4_array[4] > 0 & goods_bank_array[4] > 0 & !p4_ai_done)
				{
					goods_bank_array[4] = checked(goods_bank_array[4] - 1);
					goods_p4_array[4] = checked(goods_p4_array[4] + 1);
					p4_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p4_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p4_array[3] > 0 & goods_bank_array[3] > 0 & !p4_ai_done)
				{
					goods_bank_array[3] = checked(goods_bank_array[3] - 1);
					goods_p4_array[3] = checked(goods_p4_array[3] + 1);
					p4_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p4_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p4_array[1] > 0 & goods_bank_array[1] > 0 & !p4_ai_done)
				{
					goods_bank_array[1] = checked(goods_bank_array[1] - 1);
					goods_p4_array[1] = checked(goods_p4_array[1] + 1);
					p4_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p4_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p4_array[0] > 0 & goods_bank_array[0] > 0 & !p4_ai_done)
				{
					goods_bank_array[0] = checked(goods_bank_array[0] - 1);
					goods_p4_array[0] = checked(goods_p4_array[0] + 1);
					p4_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p4_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p4_array[2] > 0 & goods_bank_array[2] > 0 & !p4_ai_done)
				{
					goods_bank_array[2] = checked(goods_bank_array[2] - 1);
					goods_p4_array[2] = checked(goods_p4_array[2] + 1);
					p4_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p4_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!p4_ai_done)
				{
					if (!((goods_this_turn_p4_array[0] > 0 | goods_this_turn_p4_array[1] > 0 | goods_this_turn_p4_array[2] > 0 | goods_this_turn_p4_array[3] > 0 | goods_this_turn_p4_array[4] > 0) & (goods_bank_array[0] == 0 | goods_bank_array[1] == 0 | goods_bank_array[2] == 0 | goods_bank_array[3] == 0 | goods_bank_array[4] == 0)))
					{
						infobox_role(string.Concat(p4_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						p4_ai_done = true;
						infobox_role(string.Concat("There were no goods available for ", p4_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			next_turn_button.Text = "End Craftsman Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void p4_process_mayor()
		{
			log_process_role("p4", "Mayor");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				distribute_new_colonists();
			}
			p4_remove_all_colonists_to_idle();
			p4_ai_done = false;
			if (idle_colonists_array[current_player] == 0)
			{
				p4_ai_done = true;
			}
			counter3 = 12;
			while (!(counter3 == 20 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				if (buildings_p4_array[counter3] == 410 | buildings_p4_array[counter3] == 420 | buildings_p4_array[counter3] == 430 | buildings_p4_array[counter3] == 440 | buildings_p4_array[counter3] == 450)
				{
					buildings_p4_array[counter3] = checked(buildings_p4_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				if (buildings_p4_array[counter3] == 350)
				{
					buildings_p4_array[counter3] = checked(buildings_p4_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				if (buildings_p4_array[counter3] == 330)
				{
					buildings_p4_array[counter3] = checked(buildings_p4_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				if (buildings_p4_array[counter3] == 360)
				{
					buildings_p4_array[counter3] = checked(buildings_p4_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			num_empty_corn_plant_p4 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] == 30)
				{
					num_empty_corn_plant_p4 = checked(num_empty_corn_plant_p4 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_empty_corn_plant_p4 >= 1 & num_quarries_p4 >= 1 & idle_colonists_array[current_player] >= 2)
			{
				finished = false;
				while (!finished)
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p4_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p4_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p4_ai_done = true;
					finished = true;
				}
				finished = false;
				while (!finished)
				{
					check_for_plantation(60);
					if (found_plantation)
					{
						plantations_p4_array[plantation_slot] = 61;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p4_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p4_ai_done = true;
					finished = true;
				}
			}
			num_empty_corn_plant_p4 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] == 30)
				{
					num_empty_corn_plant_p4 = checked(num_empty_corn_plant_p4 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			if (idle_colonists_array[current_player] >= 2 & num_empty_corn_plant_p4 >= 2)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p4_ai_done))
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p4_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p4_colonists();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p4_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p4_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p4_ai_done))
				{
					check_for_coffee_production();
					if (found_coffee_match)
					{
						p4_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p4_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p4_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p4_ai_done))
				{
					check_for_tobacco_production();
					if (found_tobacco_match)
					{
						p4_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p4_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p4_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p4_ai_done))
				{
					check_for_sugar_production();
					if (found_sugar_match)
					{
						p4_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p4_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p4_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p4_ai_done))
				{
					check_for_indigo_production();
					if (found_indigo_match)
					{
						p4_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p4_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				check_for_plantation(30);
				if (found_plantation)
				{
					plantations_p4_array[plantation_slot] = 31;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				check_for_plantation(60);
				if (found_plantation)
				{
					plantations_p4_array[plantation_slot] = 61;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				if (buildings_p4_array[counter3] == 130 | buildings_p4_array[counter3] == 140 | buildings_p4_array[counter3] == 150 | buildings_p4_array[counter3] == 160 | buildings_p4_array[counter3] == 230 | buildings_p4_array[counter3] == 240 | buildings_p4_array[counter3] == 250 | buildings_p4_array[counter3] == 260 | buildings_p4_array[counter3] == 330 | buildings_p4_array[counter3] == 340 | buildings_p4_array[counter3] == 350 | buildings_p4_array[counter3] == 360)
				{
					buildings_p4_array[counter3] = checked(buildings_p4_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p4_ai_done))
			{
				if (buildings_p4_array[counter3] == 110 | buildings_p4_array[counter3] == 120 | buildings_p4_array[counter3] == 210 | buildings_p4_array[counter3] == 211 | buildings_p4_array[counter3] == 212 | buildings_p4_array[counter3] == 220 | buildings_p4_array[counter3] == 221 | buildings_p4_array[counter3] == 222 | buildings_p4_array[counter3] == 310 | buildings_p4_array[counter3] == 311 | buildings_p4_array[counter3] == 312 | buildings_p4_array[counter3] == 320 | buildings_p4_array[counter3] == 321)
				{
					buildings_p4_array[counter3] = checked(buildings_p4_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p4_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p4_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			if (idle_colonists_array[current_player] <= 0)
			{
				p4_ai_done = true;
			}
			else
			{
				counter3 = 0;
				while (!(counter3 == 12 | idle_colonists_array[current_player] == 0 | p4_ai_done))
				{
					if (plantations_p4_array[counter3] == 10 | plantations_p4_array[counter3] == 20 | plantations_p4_array[counter3] == 30 | plantations_p4_array[counter3] == 40 | plantations_p4_array[counter3] == 50 | plantations_p4_array[counter3] == 60)
					{
						plantations_p4_array[counter3] = checked(plantations_p4_array[counter3] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p4_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			update_all_labels();
			determine_p4_mayor_phase_over();
			formtitle("p4", "Mayor Phase - Turn Over");
		}

		public void p4_process_prospector1()
		{
			log_process_role("p4", "Prospector1");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				infobox_role(string.Concat(p4_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p4 = checked(gold_p4 + 1);
			}
			formtitle("p4", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p4_process_prospector2()
		{
			log_process_role("p4", "Prospector2");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				infobox_role(string.Concat(p4_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p4 = checked(gold_p4 + 1);
			}
			formtitle("p4", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p4_process_settler()
		{
			log_process_role("p4", "Settler");
			update_summary();
			p4_ai_done = false;
			p4_ready_to_end_settler = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p4_chose_settler = false;
			p4_manned_construction_hut = false;
			p4_manned_hospice = false;
			p4_manned_hacienda = false;
			p4_chose_quarry = false;
			p4_chose_corn = false;
			p4_chose_random = false;
			p4_use_hacienda = false;
			p4_num_indigo_plants = 0;
			p4_num_sugar_plants = 0;
			p4_num_tobacco_plants = 0;
			p4_num_coffee_plants = 0;
			what_plantations_available();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				p4_chose_settler = true;
			}
			check_for_building(151);
			if (found_building)
			{
				p4_manned_construction_hut = true;
			}
			check_for_building(231);
			if (found_building)
			{
				p4_manned_hospice = true;
			}
			check_for_building(141);
			if (found_building)
			{
				p4_manned_hacienda = true;
			}
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] == 10 | plantations_p4_array[counter1] == 11)
				{
					p4_num_indigo_plants = checked(p4_num_indigo_plants + 1);
				}
				if (plantations_p4_array[counter1] == 20 | plantations_p4_array[counter1] == 21)
				{
					p4_num_sugar_plants = checked(p4_num_sugar_plants + 1);
				}
				if (plantations_p4_array[counter1] == 40 | plantations_p4_array[counter1] == 41)
				{
					p4_num_tobacco_plants = checked(p4_num_tobacco_plants + 1);
				}
				if (plantations_p4_array[counter1] == 50 | plantations_p4_array[counter1] == 51)
				{
					p4_num_coffee_plants = checked(p4_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_plantations_p4 >= 8 & num_plantations_p4 <= 10 & p4_manned_hacienda)
			{
				chance_of_action(20);
				if (chance)
				{
					p4_use_hacienda = true;
				}
			}
			if (num_plantations_p4 < 8 & p4_manned_hacienda)
			{
				chance_of_action(80);
				if (chance)
				{
					p4_use_hacienda = true;
				}
			}
			if (p4_use_hacienda & p4_chose_settler & quarry_available)
			{
				p4_chose_quarry = true;
				p4_chose_corn = false;
			}
			chance_of_action(10);
			if ((p4_chose_settler | p4_manned_construction_hut) & num_quarries_p4 == 3 & !corn_available & quarry_available & chance)
			{
				p4_chose_quarry = true;
				p4_chose_corn = false;
			}
			chance_of_action(40);
			if ((p4_chose_settler | p4_manned_construction_hut) & num_quarries_p4 == 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p4_chose_quarry = true;
				p4_chose_corn = false;
			}
			chance_of_action(90);
			if ((p4_chose_settler | p4_manned_construction_hut) & num_quarries_p4 < 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p4_chose_quarry = true;
				p4_chose_corn = false;
			}
			chance_of_action(90);
			if (chance & turn_number == 1 & p4_chose_settler)
			{
				p4_chose_quarry = true;
				p4_chose_corn = false;
				p4_chose_random = false;
			}
			chance_of_action(90);
			if (corn_available & chance & turn_number == 1 & !p4_chose_settler)
			{
				p4_chose_quarry = false;
				p4_chose_corn = true;
				p4_chose_random = false;
			}
			chance_of_action(90);
			if (turn_number != 1 & corn_available & !p4_manned_construction_hut)
			{
				p4_chose_quarry = false;
				p4_chose_corn = true;
				p4_chose_random = false;
			}
			if (num_plantations_p4 >= 12)
			{
				infobox_role(string.Concat(p4_name, " already has 12 plantations. ", p4_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (p4_use_hacienda)
				{
					infobox_building1(string.Concat(p4_name, "is using the Hacienda to get a random plantation."), 141);
					draw_random_plantation_tile();
				}
				if (!p4_use_hacienda & p4_manned_hacienda)
				{
					infobox_building1(string.Concat(p4_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (p4_chose_quarry & p4_chose_settler & !p4_ai_done)
				{
					infobox_plant(string.Concat(p4_name, " used the Settler bonus to choose a Quarry."), 60);
					p4_place_quarry();
				}
				if (p4_chose_quarry & !p4_chose_settler & p4_manned_construction_hut & !p4_ai_done)
				{
					infobox_building1(string.Concat(p4_name, " used the Construction Hut to choose a Quarry."), 151);
					p4_place_quarry();
				}
				if (p4_chose_corn & corn_available & !p4_ai_done)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Corn."), 30);
					p4_place_plantation(30);
				}
				chance_of_action(20);
				if (!p4_ai_done & indigo_available & p4_num_indigo_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Indigo."), 10);
					p4_place_plantation(10);
				}
				chance_of_action(20);
				if (!p4_ai_done & sugar_available & p4_num_sugar_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Sugar."), 20);
					p4_place_plantation(20);
				}
				if (!p4_ai_done & tobacco_available & p4_num_tobacco_plants < 3)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Tobacco."), 40);
					p4_place_plantation(40);
				}
				if (!p4_ai_done & sugar_available & p4_num_sugar_plants < 3)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Sugar."), 20);
					p4_place_plantation(20);
				}
				if (!p4_ai_done & coffee_available & p4_num_coffee_plants < 2)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Coffee."), 50);
					p4_place_plantation(50);
				}
				if (!p4_ai_done & indigo_available & p4_num_indigo_plants < 3)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Indigo."), 10);
					p4_place_plantation(10);
				}
				if (!p4_ai_done & coffee_available)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Coffee."), 50);
					p4_place_plantation(50);
				}
				if (!p4_ai_done & tobacco_available)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Tobacco."), 40);
					p4_place_plantation(40);
				}
				if (!p4_ai_done & sugar_available)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Sugar."), 20);
					p4_place_plantation(20);
				}
				if (!p4_ai_done & indigo_available)
				{
					infobox_plant(string.Concat(p4_name, " is choosing Indigo."), 10);
					p4_place_plantation(10);
				}
			}
			update_all_labels();
			formtitle("p4", "Done performing the Settler role - ");
		}

		public void p4_process_trader()
		{
			log_process_role("p4", "Trader");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p4_ai_done = false;
			p4_traded = false;
			p4_chose_trader = false;
			p4_manned_small_market = false;
			p4_manned_large_market = false;
			p4_manned_office = false;
			trading_house_full = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
			{
				p4_chose_trader = true;
			}
			check_for_building(131);
			if (found_building)
			{
				p4_manned_small_market = true;
			}
			check_for_building(251);
			if (found_building)
			{
				p4_manned_large_market = true;
			}
			check_for_building(241);
			if (found_building)
			{
				p4_manned_office = true;
			}
			if (trading_house_array[3] != 0)
			{
				trading_house_full = true;
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 5 & !p4_manned_office)
				{
					already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p4_array[4] > 0 & !p4_traded & (chance | p4_chose_trader))
			{
				goods_p4_array[4] = checked(goods_p4_array[4] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 5;
						counter1 = 4;
					}
				}
				counter3 = 4;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p4_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (p4_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p4_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Coffee for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p4 = checked(gold_p4 + counter3);
				p4_ai_done = true;
				p4_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 4 & !p4_manned_office)
				{
					already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p4_array[3] > 0 & !p4_traded & (chance | p4_chose_trader))
			{
				goods_p4_array[3] = checked(goods_p4_array[3] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 4;
						counter1 = 4;
					}
				}
				counter3 = 3;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p4_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (p4_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p4_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Tobacco for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p4 = checked(gold_p4 + counter3);
				p4_ai_done = true;
				p4_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 2 & !p4_manned_office)
				{
					already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p4_array[1] > 0 & !p4_traded & (chance | p4_chose_trader))
			{
				goods_p4_array[1] = checked(goods_p4_array[1] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 2;
						counter1 = 4;
					}
				}
				counter3 = 2;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p4_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (p4_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p4_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Sugar for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p4 = checked(gold_p4 + counter3);
				p4_ai_done = true;
				p4_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 1 & !p4_manned_office)
				{
					already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(75);
			if (!already_there & !trading_house_full & goods_p4_array[0] > 0 & !p4_traded & (chance | p4_chose_trader))
			{
				goods_p4_array[0] = checked(goods_p4_array[0] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 1;
						counter1 = 4;
					}
				}
				counter3 = 1;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p4_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (p4_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p4_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Indigo for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p4 = checked(gold_p4 + counter3);
				p4_ai_done = true;
				p4_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 3 & !p4_manned_office)
				{
					already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(10);
			if (!already_there & goods_p4_array[2] > 0 & !p4_traded & !trading_house_full & (p4_chose_trader | p4_manned_small_market | p4_manned_large_market | chance))
			{
				goods_p4_array[2] = checked(goods_p4_array[2] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 3;
						counter1 = 4;
					}
				}
				counter3 = 0;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p4", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				check_for_building(131);
				if (found_building)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				check_for_building(251);
				if (found_building)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p4_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p4_name, " sold their Corn for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p4 = checked(gold_p4 + counter3);
				p4_ai_done = true;
				p4_traded = true;
				update_all_labels();
			}
			if (!p4_traded)
			{
				infobox_role(string.Concat(p4_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			formtitle("p4", "Done performing the Trader role - Turn Over");
		}

		public void p4_remove_all_colonists_to_idle()
		{
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), "1", false) == 0)
					{
						plantations_p4_array[counter1] = checked(plantations_p4_array[counter1] - 1);
						idle_colonists_array[4] = checked(idle_colonists_array[4] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				counter2 = 0;
				do
				{
					if (buildings_p4_array[counter1] != 0 & buildings_p4_array[counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), "0", false) != 0)
						{
							buildings_p4_array[counter1] = checked(buildings_p4_array[counter1] - 1);
							idle_colonists_array[4] = checked(idle_colonists_array[4] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		public void p5_choose_role()
		{
			turn_number = checked(turn_number + 1);
			update_summary();
			update_player_turn_designations();
			determine_empty_colonists_slots_all();
			p5_finished_choosing_role = false;
			while (!p5_finished_choosing_role)
			{
				role_choice = "settler";
				need_to_choose_random = true;
				dont_choose_settler = false;
				dont_choose_mayor = false;
				dont_choose_builder = false;
				dont_choose_craftsman = false;
				dont_choose_trader = false;
				dont_choose_captain = false;
				dont_choose_prospector1 = false;
				dont_choose_prospector2 = false;
				goods_to_ship = false;
				determine_goods_to_ship();
				goods_to_trade = false;
				determine_goods_to_trade();
				goods_to_produce = false;
				determine_production_p5();
				if (!goods_to_produce & need_to_choose_random && bonus_roles_array[3] < 2)
				{
					dont_choose_craftsman = true;
				}
				if (!goods_to_ship & need_to_choose_random && bonus_roles_array[5] < 2)
				{
					dont_choose_captain = true;
				}
				if (!goods_to_trade & need_to_choose_random && bonus_roles_array[4] < 2)
				{
					dont_choose_trader = true;
				}
				if (num_plantations_p5 >= 8 & need_to_choose_random && bonus_roles_array[0] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_settler = true;
					}
				}
				if (p5_empty_colonists_slots == 0 & need_to_choose_random && bonus_roles_array[1] < 2)
				{
					chance_of_action(75);
					if (chance)
					{
						dont_choose_mayor = true;
					}
				}
				check_for_plantation(30);
				if (num_plantations_p5 == 1 & !found_plantation & num_buildings_p5 == 0)
				{
					dont_choose_mayor = true;
				}
				if (turn_number == 1 & need_to_choose_random)
				{
					chance_of_action(90);
					if (chance)
					{
						role_choice = "settler";
						need_to_choose_random = false;
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "mayor";
							need_to_choose_random = false;
						}
					}
				}
				if (turn_number == 2 & StringType.StrCmp(previous_role, "settler", false) == 0 & need_to_choose_random)
				{
					check_for_plantation(30);
					if (!found_building)
					{
						chance_of_action(90);
						if (chance)
						{
							role_choice = "builder";
							need_to_choose_random = false;
						}
					}
				}
				chance_of_action(90);
				if (role_builder_pic.Visible & bonus_roles_array[2] >= 2 & chance & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_captain_pic.Visible & bonus_roles_array[5] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_craftsman_pic.Visible & bonus_roles_array[3] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_mayor_pic.Visible & bonus_roles_array[1] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "mayor";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_settler_pic.Visible & bonus_roles_array[0] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "settler";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_trader_pic.Visible & bonus_roles_array[4] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector1_pic.Visible & bonus_roles_array[6] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector1";
					need_to_choose_random = false;
				}
				chance_of_action(90);
				if (role_prospector2_pic.Visible & bonus_roles_array[7] >= 3 & chance & need_to_choose_random)
				{
					role_choice = "prospector2";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p5 + discount1) + num_manned_quarries_p5) >= 10 && role_builder_pic.Visible & need_to_choose_random)
				{
					role_choice = "builder";
					need_to_choose_random = false;
				}
				discount1 = 0;
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					discount1 = 1;
				}
				if (checked(checked(gold_p5 + discount1) + num_manned_quarries_p5) >= 8)
				{
					chance_of_action(90);
					if (chance & role_builder_pic.Visible & need_to_choose_random)
					{
						role_choice = "builder";
						need_to_choose_random = false;
					}
				}
				if (checked(checked(gold_p5 + discount1) + num_manned_quarries_p5) >= 10)
				{
					chance = false;
				}
				if (checked(checked(gold_p5 + discount1) + num_manned_quarries_p5) < 10)
				{
					chance_of_action(90);
				}
				if (goods_to_trade & role_trader_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "trader";
					need_to_choose_random = false;
				}
				chance_of_action(80);
				if (goods_to_ship & role_captain_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "captain";
					need_to_choose_random = false;
				}
				chance_of_action(30);
				if (goods_to_produce & role_craftsman_pic.Visible & chance & need_to_choose_random)
				{
					role_choice = "craftsman";
					need_to_choose_random = false;
				}
				ai_role_choice_maintenance();
				if (StringType.StrCmp(role_choice, "settler", false) == 0 && role_settler_pic.Visible)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Settler."), "role_settler");
					settler_round = true;
					role_settler_pic.Visible = false;
					settler_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[0]);
					bonus_roles_array[0] = 0;
					log_role_chooser("p5", "Settler");
					p5_process_settler();
					p5_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p5", false) == 0 & settler_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "mayor", false) == 0 && role_mayor_pic.Visible)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Mayor."), "role_mayor");
					mayor_round = true;
					role_mayor_pic.Visible = false;
					mayor_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[1]);
					bonus_roles_array[1] = 0;
					log_role_chooser("p5", "Mayor");
					p5_process_mayor();
					p5_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p5", false) == 0 & mayor_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "builder", false) == 0 && role_builder_pic.Visible & chance)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Builder."), "role_builder");
					builder_round = true;
					role_builder_pic.Visible = false;
					builder_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[2]);
					bonus_roles_array[2] = 0;
					log_role_chooser("p5", "Builder");
					p5_process_builder();
					p5_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p5", false) == 0 & builder_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "craftsman", false) == 0 && role_craftsman_pic.Visible)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Craftsman."), "role_craftsman");
					craftsman_round = true;
					role_craftsman_pic.Visible = false;
					craftsman_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[3]);
					bonus_roles_array[3] = 0;
					log_role_chooser("p5", "Craftsman");
					p5_process_craftsman();
					p5_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "trader", false) == 0 && role_trader_pic.Visible)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Trader."), "role_trader");
					trader_round = true;
					role_trader_pic.Visible = false;
					trader_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[4]);
					bonus_roles_array[4] = 0;
					log_role_chooser("p5", "Trader");
					p5_process_trader();
					p5_finished_choosing_role = true;
				}
				update_player_turn_designations();
				if (StringType.StrCmp(current_player_string, "p5", false) == 0 & trader_round)
				{
					next_turn_routine();
				}
				if (StringType.StrCmp(role_choice, "captain", false) == 0 && role_captain_pic.Visible)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Captain."), "role_captain");
					p1_used_wharf = false;
					p2_used_wharf = false;
					p3_used_wharf = false;
					p4_used_wharf = false;
					p5_used_wharf = false;
					captain_round = true;
					role_captain_pic.Visible = false;
					captain_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[5]);
					bonus_roles_array[5] = 0;
					captain_bonus_taken = false;
					log_role_chooser("p5", "Captain");
					p5_process_captain();
					p5_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector1", false) == 0 && role_prospector1_pic.Visible)
				{
					infobox_role(string.Concat(p5_name, " has chosen the Prospector."), "role_prospector1");
					prospector1_round = true;
					role_prospector1_pic.Visible = false;
					pros1_bonus_label.Visible = false;
					gold_p5 = checked(gold_p5 + bonus_roles_array[6]);
					bonus_roles_array[6] = 0;
					log_role_chooser("p5", "Prospector1");
					p5_process_prospector1();
					p5_finished_choosing_role = true;
				}
				if (StringType.StrCmp(role_choice, "prospector2", false) != 0 || !role_prospector2_pic.Visible)
				{
					continue;
				}
				infobox_role(string.Concat(p5_name, " has chosen the Prospector."), "role_prospector1");
				prospector2_round = true;
				role_prospector2_pic.Visible = false;
				pros2_bonus_label.Visible = false;
				gold_p5 = checked(gold_p5 + bonus_roles_array[7]);
				bonus_roles_array[7] = 0;
				log_role_chooser("p5", "Prospector2");
				p5_process_prospector2();
				p5_finished_choosing_role = true;
			}
		}

		public void p5_place_matching_production()
		{
			plantations_p5_array[plantation_slot] = checked(plantations_p5_array[plantation_slot] + 1);
			buildings_p5_array[building_slot] = checked(buildings_p5_array[building_slot] + 1);
			idle_colonists_array[5] = checked(idle_colonists_array[5] - 2);
			update_all_labels();
		}

		public void p5_place_plantation(object plant_type)
		{
			if (ObjectType.ObjTst(plant_type, 10, false) == 0)
			{
				tempinteger = indigo_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 20, false) == 0)
			{
				tempinteger = sugar_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 30, false) == 0)
			{
				tempinteger = corn_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 40, false) == 0)
			{
				tempinteger = tobacco_available_slot;
			}
			if (ObjectType.ObjTst(plant_type, 50, false) == 0)
			{
				tempinteger = coffee_available_slot;
			}
			if (!p5_manned_hospice)
			{
				plantations_p5_array[num_plantations_p5] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				p5_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p5_array[num_plantations_p5] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p5_name, "'s Hospice has granted a colonist for their plantation."), 231);
				colonists_array[4] = checked(colonists_array[4] + 1);
				p5_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p5_array[num_plantations_p5] = IntegerType.FromObject(plant_type);
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p5_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p5_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p5_array[num_plantations_p5] = IntegerType.FromObject(ObjectType.AddObj(plant_type, 1));
				update_num_plantations();
				plantation_available_array[tempinteger] = 0;
				infobox_building1(string.Concat(p5_name, "'s Hospice has granted a colonist for their plantation. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[4] = checked(colonists_array[4] + 1);
				p5_ai_done = true;
			}
			update_all_labels();
		}

		public void p5_place_quarry()
		{
			if (!p5_manned_hospice)
			{
				plantations_p5_array[num_plantations_p5] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				p5_ai_done = true;
			}
			else if (colonists_bank_num > 0)
			{
				colonists_bank_num = checked(colonists_bank_num - 1);
				plantations_p5_array[num_plantations_p5] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p5_name, "'s Hospice has granted a colonist for their Quarry."), 231);
				colonists_array[4] = checked(colonists_array[4] + 1);
				p5_ai_done = true;
			}
			else if (colonists_ship_num <= 0)
			{
				plantations_p5_array[num_plantations_p5] = 60;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p5_name, "has a manned Hospice. However, since there are no colonists remaining, they did not receive one."), 231);
				p5_ai_done = true;
			}
			else
			{
				colonists_ship_num = checked(colonists_ship_num - 1);
				plantations_p5_array[num_plantations_p5] = 61;
				update_num_plantations();
				goods_bank_array[5] = checked(goods_bank_array[5] - 1);
				infobox_building1(string.Concat(p5_name, "'s Hospice has granted a colonist for their Quarry. Since there were no colonists left in the bank, you were given one from the ship."), 231);
				colonists_array[4] = checked(colonists_array[4] + 1);
				p5_ai_done = true;
			}
			update_all_labels();
		}

		public void p5_process_builder()
		{
			log_process_role("p5", "Builder");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p5_ai_done = false;
			p5_built = false;
#warning Modified from .NET framework v1, where there was no assignment, purpose of this line is unclear.  Field set true later, and so recently set, it can't possibly be an implicit test, so I'm just commenting out
			//p5_ai_done;
			compute_temporary_large_building_score();
			determine_if_afford_large();
			update_player_turn_designations();
			if (turn_number == 1 & StringType.StrCmp(current_role_chooser_string, "p5", false) != 0 & !p5_ai_done & builder_round)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Small Indigo Plant."), 110);
						p5_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done & afford_large & best_building_num != 999)
			{
				p5_process_building_large(best_building_num);
			}
			if (!p5_ai_done)
			{
				build_available_slot = 13;
				build_number = 320;
				build_cost = 6;
				build_name = "Coffee Roaster";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(50);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the ", build_name, "."), build_number);
						p5_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 12;
				build_number = 310;
				build_cost = 5;
				build_name = "Tobacco Storage";
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(40);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						chance = true;
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the ", build_name, "."), build_number);
						p5_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 1;
				build_number = 120;
				build_cost = 2;
				build_name = "Small Sugar Mill";
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(220);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the ", build_name, "."), build_number);
						p5_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 7;
				build_number = 220;
				build_cost = 4;
				build_name = "Sugar Mill";
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(20);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(120);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(50);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the ", build_name, "."), build_number);
						p5_process_building(build_number);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 0;
				build_number = 110;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(210);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(10);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Small Indigo Plant."), 110);
						p5_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 6;
				build_number = 210;
				build_cost = 3;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_plantation1(10);
					if (!found_plantation)
					{
						chance = false;
					}
					else
					{
						check_for_building3(110);
						if (!found_building)
						{
							chance = true;
						}
						else
						{
							chance_of_action(60);
						}
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Indigo Plant."), 210);
						p5_process_building(210);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			update_player_turn_designations();
			if (!p5_ai_done)
			{
				chance_of_action(25);
				if (chance & StringType.StrCmp(current_role_chooser_string, "p5", false) != 0)
				{
					determine_if_buyable1(2, 130, 1);
					if (buyable & num_manned_quarries_p5 >= 1 & !p5_built)
					{
						infobox_building1(string.Concat(p5_name, " built the Small Market."), 130);
						p5_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
					determine_if_buyable1(0, 110, 1);
					if (buyable & num_manned_quarries_p5 >= 1 & !p5_built)
					{
						infobox_building1(string.Concat(p5_name, " built the Small Indigo Plant."), 110);
						p5_process_building(110);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
						p5_ai_done = true;
						p5_built = true;
					}
					if (!p5_ai_done & !p5_built)
					{
						p5_ai_done = true;
						p5_built = false;
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 14;
				build_number = 330;
				build_cost = 7;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Factory."), 330);
						p5_process_building(330);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 16;
				build_number = 350;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(80);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Harbor."), 350);
						p5_process_building(350);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 8;
				build_number = 230;
				build_cost = 4;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_plantations_p5 > 8)
					{
						chance_of_action(10);
					}
					else
					{
						chance_of_action(50);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Hospice."), 230);
						p5_process_building(230);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 10;
				build_number = 250;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Large Market."), 250);
						p5_process_building(250);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 2;
				build_number = 130;
				build_cost = 1;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Small Market."), 130);
						p5_process_building(130);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 5;
				build_number = 160;
				build_cost = 3;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(260);
					if (!found_building)
					{
						check_for_building(261);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(10);
						}
					}
					else
					{
						chance_of_action(10);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Small Warehouse."), 160);
						p5_process_building(160);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 3;
				build_number = 140;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(60);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Hacienda."), 140);
						p5_process_building(140);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 17;
				build_number = 361;
				build_cost = 9;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(50);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Wharf."), 360);
						p5_process_building(360);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 11;
				build_number = 260;
				build_cost = 6;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					check_for_building(160);
					if (!found_building)
					{
						check_for_building(161);
						if (!found_building)
						{
							chance_of_action(60);
						}
						else
						{
							chance_of_action(5);
						}
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Large Warehouse."), 260);
						p5_process_building(260);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 9;
				build_number = 240;
				build_cost = 5;
				determine_if_buyable2(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(30);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Office."), 240);
						p5_process_building(240);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 4;
				build_number = 150;
				build_cost = 2;
				determine_if_buyable1(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					if (num_quarries_p5 < 2)
					{
						chance_of_action(30);
					}
					else
					{
						chance_of_action(5);
					}
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the Construction Hut."), 150);
						p5_process_building(150);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			if (!p5_ai_done)
			{
				build_available_slot = 15;
				build_number = 340;
				build_cost = 8;
				determine_if_buyable3(build_available_slot, build_number, build_cost);
				if (buyable)
				{
					chance_of_action(20);
					if (chance)
					{
						infobox_building1(string.Concat(p5_name, " built the University."), 340);
						p5_process_building(340);
						buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
						gold_p5 = checked(gold_p5 - build_final_cost);
						p5_ai_done = true;
						p5_built = true;
						update_all_labels();
					}
				}
			}
			determine_if_buyable1(2, 130, 1);
			if (buyable & num_manned_quarries_p5 >= 1 & !p5_built & !p5_ai_done)
			{
				infobox_building1(string.Concat(p5_name, " built the Small Market."), 130);
				p5_process_building(130);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p5 = checked(gold_p5 - build_final_cost);
				p5_ai_done = true;
				p5_built = true;
				update_all_labels();
			}
			determine_if_buyable1(0, 110, 1);
			if (buyable & num_manned_quarries_p5 >= 1 & !p5_built & !p5_ai_done)
			{
				infobox_building1(string.Concat(p5_name, " built the Small Indigo Plant."), 110);
				p5_process_building(110);
				buildings_available_array[build_available_slot] = checked(buildings_available_array[build_available_slot] - 1);
				gold_p5 = checked(gold_p5 - build_final_cost);
				p5_ai_done = true;
				p5_built = true;
				update_all_labels();
			}
			if (!p5_built)
			{
				infobox_role(string.Concat(p5_name, " has decided not to build."), "role_builder");
			}
			formtitle("p5", "Done performing the Builder role - AI BLANK");
		}

		public void p5_process_building(object buildnum)
		{
			check_for_building(341);
			if (!found_building)
			{
				buildings_p5_array[num_buildings_p5] = IntegerType.FromObject(buildnum);
			}
			else
			{
				if (colonists_bank_num > 0)
				{
					colonists_bank_num = checked(colonists_bank_num - 1);
					infobox_building1(string.Concat(p5_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[5] = checked(colonists_array[5] + 1);
				}
				else if (colonists_ship_num > 0)
				{
					colonists_ship_num = checked(colonists_ship_num - 1);
					infobox_building1(string.Concat(p5_name, "'s manned University granted a colonist for their building."), 341);
					colonists_array[5] = checked(colonists_array[5] + 1);
				}
				buildings_p5_array[num_buildings_p5] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
			}
		}

		public void p5_process_building_large(object buildnum)
		{
			determine_where_to_build_large_p5();
			if (ObjectType.ObjTst(buildnum, 410, false) == 0)
			{
				tempinteger = 18;
			}
			if (ObjectType.ObjTst(buildnum, 420, false) == 0)
			{
				tempinteger = 19;
			}
			if (ObjectType.ObjTst(buildnum, 430, false) == 0)
			{
				tempinteger = 20;
			}
			if (ObjectType.ObjTst(buildnum, 440, false) == 0)
			{
				tempinteger = 21;
			}
			if (ObjectType.ObjTst(buildnum, 450, false) == 0)
			{
				tempinteger = 22;
			}
			if (large_build_spot != 99)
			{
				check_for_building(341);
				if (!found_building)
				{
					infobox_building2(string.Concat(p5_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p5_array[large_build_spot] = IntegerType.FromObject(buildnum);
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p5 = checked(gold_p5 - build_final_cost);
					p5_ai_done = true;
					p5_built = true;
				}
				else
				{
					if (colonists_bank_num > 0)
					{
						colonists_bank_num = checked(colonists_bank_num - 1);
						infobox_building1(string.Concat(p5_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[5] = checked(colonists_array[5] + 1);
					}
					else if (colonists_ship_num > 0)
					{
						colonists_ship_num = checked(colonists_ship_num - 1);
						infobox_building1(string.Concat(p5_name, "'s manned University granted a colonist for their building."), 341);
						colonists_array[5] = checked(colonists_array[5] + 1);
					}
					infobox_building2(string.Concat(p5_name, " built this large building."), RuntimeHelpers.GetObjectValue(buildnum));
					buildings_p5_array[large_build_spot] = IntegerType.FromObject(ObjectType.AddObj(buildnum, 1));
					buildings_available_array[tempinteger] = checked(buildings_available_array[tempinteger] - 1);
					gold_p5 = checked(gold_p5 - build_final_cost);
					p5_ai_done = true;
					p5_built = true;
				}
			}
			update_all_labels();
		}

		public void p5_process_captain()
		{
			log_process_role("p5", "Captain");
			update_summary();
			update_ship_cargo();
			p5_done_shipping = false;
			p5_done_all_shipping = false;
			p5_num_shipped = 0;
			goods_to_ship = false;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (goods_p5_array[counter1] > 0)
				{
					goods_to_ship = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			if (goods_to_ship & !p5_done_shipping)
			{
				calculate_best_captain_points_p5();
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipa", false) == 0 & !p5_done_shipping)
			{
				ship_corn_via_shipa();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipb", false) == 0 & !p5_done_shipping)
			{
				ship_corn_via_shipb();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_shipc", false) == 0 & !p5_done_shipping)
			{
				ship_corn_via_shipc();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "corn_wharf", false) == 0 & !p5_done_shipping)
			{
				ship_corn_via_wharf();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipa", false) == 0 & !p5_done_shipping)
			{
				ship_indigo_via_shipa();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipb", false) == 0 & !p5_done_shipping)
			{
				ship_indigo_via_shipb();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_shipc", false) == 0 & !p5_done_shipping)
			{
				ship_indigo_via_shipc();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "indigo_wharf", false) == 0 & !p5_done_shipping)
			{
				ship_Indigo_via_wharf();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipa", false) == 0 & !p5_done_shipping)
			{
				ship_sugar_via_shipa();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipb", false) == 0 & !p5_done_shipping)
			{
				ship_sugar_via_shipb();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_shipc", false) == 0 & !p5_done_shipping)
			{
				ship_sugar_via_shipc();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "sugar_wharf", false) == 0 & !p5_done_shipping)
			{
				ship_sugar_via_wharf();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipa", false) == 0 & !p5_done_shipping)
			{
				ship_tobacco_via_shipa();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipb", false) == 0 & !p5_done_shipping)
			{
				ship_tobacco_via_shipb();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_shipc", false) == 0 & !p5_done_shipping)
			{
				ship_tobacco_via_shipc();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "tobacco_wharf", false) == 0 & !p5_done_shipping)
			{
				ship_tobacco_via_wharf();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipa", false) == 0 & !p5_done_shipping)
			{
				ship_coffee_via_shipa();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipb", false) == 0 & !p5_done_shipping)
			{
				ship_coffee_via_shipb();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_shipc", false) == 0 & !p5_done_shipping)
			{
				ship_coffee_via_shipc();
				p5_done_shipping = true;
			}
			if (goods_to_ship & StringType.StrCmp(best_shipping_method, "coffee_wharf", false) == 0 & !p5_done_shipping)
			{
				ship_coffee_via_wharf();
				p5_done_shipping = true;
			}
			if (!p5_done_shipping & StringType.StrCmp(best_shipping_method, "null", false) == 0 & goods_to_ship)
			{
				p5_done_shipping = true;
				p5_done_all_shipping = true;
				infobox_role(string.Concat(p5_name, " is not able to ship any more goods. Their turn is over."), "role_captain");
			}
			if (!goods_to_ship & !p5_done_shipping)
			{
				p5_done_shipping = true;
				p5_done_all_shipping = true;
				infobox_role(string.Concat(p5_name, " has no goods to ship. Their turn is over."), "role_captain");
			}
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Enabled = true;
			auto_captain_button.Visible = true;
			formtitle("p5", "Done Shipping - Press Next Shipper");
			update_ship_cargo();
		}

		public void p5_process_craftsman()
		{
			log_process_role("p5", "Craftsman");
			formtitle("p5", "Craftsman Phase");
			p5_ai_done = false;
			update_summary();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				determine_production();
			}
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				if (goods_this_turn_p5_array[4] > 0 & goods_bank_array[4] > 0 & !p5_ai_done)
				{
					goods_bank_array[4] = checked(goods_bank_array[4] - 1);
					goods_p5_array[4] = checked(goods_p5_array[4] + 1);
					p5_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p5_name, " has chosen Coffee for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p5_array[3] > 0 & goods_bank_array[3] > 0 & !p5_ai_done)
				{
					goods_bank_array[3] = checked(goods_bank_array[3] - 1);
					goods_p5_array[3] = checked(goods_p5_array[3] + 1);
					p5_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p5_name, " has chosen Tobacco for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p5_array[1] > 0 & goods_bank_array[1] > 0 & !p5_ai_done)
				{
					goods_bank_array[1] = checked(goods_bank_array[1] - 1);
					goods_p5_array[1] = checked(goods_p5_array[1] + 1);
					p5_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p5_name, " has chosen Sugar for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p5_array[0] > 0 & goods_bank_array[0] > 0 & !p5_ai_done)
				{
					goods_bank_array[0] = checked(goods_bank_array[0] - 1);
					goods_p5_array[0] = checked(goods_p5_array[0] + 1);
					p5_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p5_name, " has chosen Indigo for their extra production good."), "role_craftsman");
				}
				if (goods_this_turn_p5_array[2] > 0 & goods_bank_array[2] > 0 & !p5_ai_done)
				{
					goods_bank_array[2] = checked(goods_bank_array[2] - 1);
					goods_p5_array[2] = checked(goods_p5_array[2] + 1);
					p5_ai_done = true;
					update_all_labels();
					infobox_role(string.Concat(p5_name, " has chosen Corn for their extra production good."), "role_craftsman");
				}
				if (!p5_ai_done)
				{
					if (!((goods_this_turn_p5_array[0] > 0 | goods_this_turn_p5_array[1] > 0 | goods_this_turn_p5_array[2] > 0 | goods_this_turn_p5_array[3] > 0 | goods_this_turn_p5_array[4] > 0) & (goods_bank_array[0] == 0 | goods_bank_array[1] == 0 | goods_bank_array[2] == 0 | goods_bank_array[3] == 0 | goods_bank_array[4] == 0)))
					{
						infobox_role(string.Concat(p5_name, " produced no goods this turn, so no extra good will be awarded."), "role_craftsman");
					}
					else
					{
						p5_ai_done = true;
						infobox_role(string.Concat("There were no goods available for ", p5_name, " to choose as the extra production good."), "role_craftsman");
					}
				}
			}
			next_turn_button.Text = "End Craftsman Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void p5_process_mayor()
		{
			log_process_role("p5", "Mayor");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				distribute_new_colonists();
			}
			p5_remove_all_colonists_to_idle();
			p5_ai_done = false;
			if (idle_colonists_array[current_player] == 0)
			{
				p5_ai_done = true;
			}
			counter3 = 12;
			while (!(counter3 == 20 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				if (buildings_p5_array[counter3] == 410 | buildings_p5_array[counter3] == 420 | buildings_p5_array[counter3] == 430 | buildings_p5_array[counter3] == 440 | buildings_p5_array[counter3] == 450)
				{
					buildings_p5_array[counter3] = checked(buildings_p5_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				if (buildings_p5_array[counter3] == 350)
				{
					buildings_p5_array[counter3] = checked(buildings_p5_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				if (buildings_p5_array[counter3] == 330)
				{
					buildings_p5_array[counter3] = checked(buildings_p5_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				if (buildings_p5_array[counter3] == 360)
				{
					buildings_p5_array[counter3] = checked(buildings_p5_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			num_empty_corn_plant_p5 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] == 30)
				{
					num_empty_corn_plant_p5 = checked(num_empty_corn_plant_p5 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_empty_corn_plant_p5 >= 1 & num_quarries_p5 >= 1 & idle_colonists_array[current_player] >= 2)
			{
				finished = false;
				while (!finished)
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p5_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p5_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p5_ai_done = true;
					finished = true;
				}
				finished = false;
				while (!finished)
				{
					check_for_plantation(60);
					if (found_plantation)
					{
						plantations_p5_array[plantation_slot] = 61;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p5_colonists();
						finished = true;
					}
					if (idle_colonists_array[current_player] != 0)
					{
						continue;
					}
					p5_ai_done = true;
					finished = true;
				}
			}
			num_empty_corn_plant_p5 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] == 30)
				{
					num_empty_corn_plant_p5 = checked(num_empty_corn_plant_p5 + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			if (idle_colonists_array[current_player] >= 2 & num_empty_corn_plant_p5 >= 2)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p5_ai_done))
				{
					check_for_plantation(30);
					if (found_plantation)
					{
						plantations_p5_array[plantation_slot] = 31;
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						update_p5_colonists();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p5_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p5_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p5_ai_done))
				{
					check_for_coffee_production();
					if (found_coffee_match)
					{
						p5_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p5_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p5_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p5_ai_done))
				{
					check_for_tobacco_production();
					if (found_tobacco_match)
					{
						p5_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p5_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p5_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p5_ai_done))
				{
					check_for_sugar_production();
					if (found_sugar_match)
					{
						p5_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p5_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			if (idle_colonists_array[current_player] >= 2 & !p5_ai_done)
			{
				counter3 = 0;
				while (!(counter3 == 15 | idle_colonists_array[current_player] < 2 | p5_ai_done))
				{
					check_for_indigo_production();
					if (found_indigo_match)
					{
						p5_place_matching_production();
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p5_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				check_for_plantation(30);
				if (found_plantation)
				{
					plantations_p5_array[plantation_slot] = 31;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 15 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				check_for_plantation(60);
				if (found_plantation)
				{
					plantations_p5_array[plantation_slot] = 61;
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				if (buildings_p5_array[counter3] == 130 | buildings_p5_array[counter3] == 140 | buildings_p5_array[counter3] == 150 | buildings_p5_array[counter3] == 160 | buildings_p5_array[counter3] == 230 | buildings_p5_array[counter3] == 240 | buildings_p5_array[counter3] == 250 | buildings_p5_array[counter3] == 260 | buildings_p5_array[counter3] == 330 | buildings_p5_array[counter3] == 340 | buildings_p5_array[counter3] == 350 | buildings_p5_array[counter3] == 360)
				{
					buildings_p5_array[counter3] = checked(buildings_p5_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			counter3 = 0;
			while (!(counter3 == 11 | idle_colonists_array[current_player] == 0 | p5_ai_done))
			{
				if (buildings_p5_array[counter3] == 110 | buildings_p5_array[counter3] == 120 | buildings_p5_array[counter3] == 210 | buildings_p5_array[counter3] == 211 | buildings_p5_array[counter3] == 212 | buildings_p5_array[counter3] == 220 | buildings_p5_array[counter3] == 221 | buildings_p5_array[counter3] == 222 | buildings_p5_array[counter3] == 310 | buildings_p5_array[counter3] == 311 | buildings_p5_array[counter3] == 312 | buildings_p5_array[counter3] == 320 | buildings_p5_array[counter3] == 321)
				{
					buildings_p5_array[counter3] = checked(buildings_p5_array[counter3] + 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					update_p5_colonists();
				}
				if (idle_colonists_array[current_player] == 0)
				{
					p5_ai_done = true;
				}
				counter3 = checked(counter3 + 1);
			}
			if (idle_colonists_array[current_player] <= 0)
			{
				p5_ai_done = true;
			}
			else
			{
				counter3 = 0;
				while (!(counter3 == 12 | idle_colonists_array[current_player] == 0 | p5_ai_done))
				{
					if (plantations_p5_array[counter3] == 10 | plantations_p5_array[counter3] == 20 | plantations_p5_array[counter3] == 30 | plantations_p5_array[counter3] == 40 | plantations_p5_array[counter3] == 50 | plantations_p5_array[counter3] == 60)
					{
						plantations_p5_array[counter3] = checked(plantations_p5_array[counter3] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
					}
					if (idle_colonists_array[current_player] == 0)
					{
						p5_ai_done = true;
					}
					counter3 = checked(counter3 + 1);
				}
			}
			update_all_labels();
			determine_p5_mayor_phase_over();
			formtitle("p5", "Mayor Phase - Turn Over");
		}

		public void p5_process_prospector1()
		{
			log_process_role("p5", "Prospector1");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				infobox_role(string.Concat(p5_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p5 = checked(gold_p5 + 1);
			}
			formtitle("p5", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p5_process_prospector2()
		{
			log_process_role("p5", "Prospector2");
			update_summary();
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				infobox_role(string.Concat(p5_name, " is awarded 1 doubloon for prospecting."), "role_prospector1");
				gold_p5 = checked(gold_p5 + 1);
			}
			formtitle("p5", "Prospector Phase - Turn Over");
			next_turn_button.Text = "Next Turn";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
			update_all_labels();
		}

		public void p5_process_settler()
		{
			log_process_role("p5", "Settler");
			update_summary();
			p5_ai_done = false;
			p5_ready_to_end_settler = false;
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p5_chose_settler = false;
			p5_manned_construction_hut = false;
			p5_manned_hospice = false;
			p5_manned_hacienda = false;
			p5_chose_quarry = false;
			p5_chose_corn = false;
			p5_chose_random = false;
			p5_use_hacienda = false;
			p5_num_indigo_plants = 0;
			p5_num_sugar_plants = 0;
			p5_num_tobacco_plants = 0;
			p5_num_coffee_plants = 0;
			what_plantations_available();
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				p5_chose_settler = true;
			}
			check_for_building(151);
			if (found_building)
			{
				p5_manned_construction_hut = true;
			}
			check_for_building(231);
			if (found_building)
			{
				p5_manned_hospice = true;
			}
			check_for_building(141);
			if (found_building)
			{
				p5_manned_hacienda = true;
			}
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] == 10 | plantations_p5_array[counter1] == 11)
				{
					p5_num_indigo_plants = checked(p5_num_indigo_plants + 1);
				}
				if (plantations_p5_array[counter1] == 20 | plantations_p5_array[counter1] == 21)
				{
					p5_num_sugar_plants = checked(p5_num_sugar_plants + 1);
				}
				if (plantations_p5_array[counter1] == 40 | plantations_p5_array[counter1] == 41)
				{
					p5_num_tobacco_plants = checked(p5_num_tobacco_plants + 1);
				}
				if (plantations_p5_array[counter1] == 50 | plantations_p5_array[counter1] == 51)
				{
					p5_num_coffee_plants = checked(p5_num_coffee_plants + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			if (num_plantations_p5 >= 8 & num_plantations_p5 <= 10 & p5_manned_hacienda)
			{
				chance_of_action(20);
				if (chance)
				{
					p5_use_hacienda = true;
				}
			}
			if (num_plantations_p5 < 8 & p5_manned_hacienda)
			{
				chance_of_action(80);
				if (chance)
				{
					p5_use_hacienda = true;
				}
			}
			if (p5_use_hacienda & p5_chose_settler & quarry_available)
			{
				p5_chose_quarry = true;
				p5_chose_corn = false;
			}
			chance_of_action(10);
			if ((p5_chose_settler | p5_manned_construction_hut) & num_quarries_p5 == 3 & !corn_available & quarry_available & chance)
			{
				p5_chose_quarry = true;
				p5_chose_corn = false;
			}
			chance_of_action(40);
			if ((p5_chose_settler | p5_manned_construction_hut) & num_quarries_p5 == 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p5_chose_quarry = true;
				p5_chose_corn = false;
			}
			chance_of_action(90);
			if ((p5_chose_settler | p5_manned_construction_hut) & num_quarries_p5 < 2 & !corn_available & goods_bank_array[5] > 0 & chance)
			{
				p5_chose_quarry = true;
				p5_chose_corn = false;
			}
			chance_of_action(90);
			if (chance & turn_number == 1 & p5_chose_settler)
			{
				p5_chose_quarry = true;
				p5_chose_corn = false;
				p5_chose_random = false;
			}
			chance_of_action(90);
			if (corn_available & chance & turn_number == 1 & !p5_chose_settler)
			{
				p5_chose_quarry = false;
				p5_chose_corn = true;
				p5_chose_random = false;
			}
			chance_of_action(90);
			if (turn_number != 1 & corn_available & !p5_manned_construction_hut)
			{
				p5_chose_quarry = false;
				p5_chose_corn = true;
				p5_chose_random = false;
			}
			if (num_plantations_p5 >= 12)
			{
				infobox_role(string.Concat(p5_name, " already has 12 plantations. ", p5_name, "'s turn is over."), "role_settler");
			}
			else
			{
				if (p5_use_hacienda)
				{
					infobox_building1(string.Concat(p5_name, "is using the Hacienda to get a random plantation."), 141);
					draw_random_plantation_tile();
				}
				if (!p5_use_hacienda & p5_manned_hacienda)
				{
					infobox_building1(string.Concat(p5_name, "is choosing NOT to use their manned Hacienda."), 141);
				}
				if (p5_chose_quarry & p5_chose_settler & !p5_ai_done)
				{
					infobox_plant(string.Concat(p5_name, " used the Settler bonus to choose a Quarry."), 60);
					p5_place_quarry();
				}
				if (p5_chose_quarry & !p5_chose_settler & p5_manned_construction_hut & !p5_ai_done)
				{
					infobox_building1(string.Concat(p5_name, " used the Construction Hut to choose a Quarry."), 151);
					p5_place_quarry();
				}
				if (p5_chose_corn & corn_available & !p5_ai_done)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Corn."), 30);
					p5_place_plantation(30);
				}
				chance_of_action(20);
				if (!p5_ai_done & indigo_available & p5_num_indigo_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Indigo."), 10);
					p5_place_plantation(10);
				}
				chance_of_action(20);
				if (!p5_ai_done & sugar_available & p5_num_sugar_plants == 2 & chance)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Sugar."), 20);
					p5_place_plantation(20);
				}
				if (!p5_ai_done & tobacco_available & p5_num_tobacco_plants < 3)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Tobacco."), 40);
					p5_place_plantation(40);
				}
				if (!p5_ai_done & sugar_available & p5_num_sugar_plants < 3)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Sugar."), 20);
					p5_place_plantation(20);
				}
				if (!p5_ai_done & coffee_available & p5_num_coffee_plants < 2)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Coffee."), 50);
					p5_place_plantation(50);
				}
				if (!p5_ai_done & indigo_available & p5_num_indigo_plants < 3)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Indigo."), 10);
					p5_place_plantation(10);
				}
				if (!p5_ai_done & coffee_available)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Coffee."), 50);
					p5_place_plantation(50);
				}
				if (!p5_ai_done & tobacco_available)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Tobacco."), 40);
					p5_place_plantation(40);
				}
				if (!p5_ai_done & sugar_available)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Sugar."), 20);
					p5_place_plantation(20);
				}
				if (!p5_ai_done & indigo_available)
				{
					infobox_plant(string.Concat(p5_name, " is choosing Indigo."), 10);
					p5_place_plantation(10);
				}
			}
			update_all_labels();
			formtitle("p5", "Done performing the Settler role - ");
		}

		public void p5_process_trader()
		{
			log_process_role("p5", "Trader");
			update_summary();
			next_turn_button.Enabled=false;
			next_turn_button.Visible = false;
			p5_ai_done = false;
			p5_traded = false;
			p5_chose_trader = false;
			p5_manned_small_market = false;
			p5_manned_large_market = false;
			p5_manned_office = false;
			trading_house_full = false;
			update_player_turn_designations();
			if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
			{
				p5_chose_trader = true;
			}
			check_for_building(131);
			if (found_building)
			{
				p5_manned_small_market = true;
			}
			check_for_building(251);
			if (found_building)
			{
				p5_manned_large_market = true;
			}
			check_for_building(241);
			if (found_building)
			{
				p5_manned_office = true;
			}
			if (trading_house_array[3] != 0)
			{
				trading_house_full = true;
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 5 & !p5_manned_office)
				{
					already_there = true;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p5_array[4] > 0 & !p5_traded & (chance | p5_chose_trader))
			{
				goods_p5_array[4] = checked(goods_p5_array[4] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 5;
						counter1 = 4;
					}
				}
				counter3 = 4;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p5_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Small Market gave them +1 doubloons for their Coffee sale."), 131);
				}
				if (p5_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p5_name, "'s manned Large Market gave them +2 doubloons for their Coffee sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Coffee for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Coffee for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p5 = checked(gold_p5 + counter3);
				p5_ai_done = true;
				p5_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 4 & !p5_manned_office)
				{
					already_there = true;
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p5_array[3] > 0 & !p5_traded & (chance | p5_chose_trader))
			{
				goods_p5_array[3] = checked(goods_p5_array[3] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 4;
						counter1 = 4;
					}
				}
				counter3 = 3;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p5_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Small Market gave them +1 doubloons for their Tobacco sale."), 131);
				}
				if (p5_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p5_name, "'s manned Large Market gave them +2 doubloons for their Tobacco sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Tobacco for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Tobacco for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p5 = checked(gold_p5 + counter3);
				p5_ai_done = true;
				p5_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 2 & !p5_manned_office)
				{
					already_there = true;
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(90);
			if (!already_there & !trading_house_full & goods_p5_array[1] > 0 & !p5_traded & (chance | p5_chose_trader))
			{
				goods_p5_array[1] = checked(goods_p5_array[1] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 2;
						counter1 = 4;
					}
				}
				counter3 = 2;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p5_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Small Market gave them +1 doubloons for their Sugar sale."), 131);
				}
				if (p5_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p5_name, "'s manned Large Market gave them +2 doubloons for their Sugar sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Sugar for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Sugar for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p5 = checked(gold_p5 + counter3);
				p5_ai_done = true;
				p5_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 1 & !p5_manned_office)
				{
					already_there = true;
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(75);
			if (!already_there & !trading_house_full & goods_p5_array[0] > 0 & !p5_traded & (chance | p5_chose_trader))
			{
				goods_p5_array[0] = checked(goods_p5_array[0] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 1;
						counter1 = 4;
					}
				}
				counter3 = 1;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				if (p5_manned_small_market)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Small Market gave them +1 doubloons for their Indigo sale."), 131);
				}
				if (p5_manned_large_market)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p5_name, "'s manned Large Market gave them +2 doubloons for their Indigo sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Indigo for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Indigo for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p5 = checked(gold_p5 + counter3);
				p5_ai_done = true;
				p5_traded = true;
				update_all_labels();
			}
			already_there = false;
			counter1 = 0;
			do
			{
				if (trading_house_array[counter1] == 3 & !p5_manned_office)
				{
					already_there = true;
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 3);
			chance_of_action(10);
			if (!already_there & goods_p5_array[2] > 0 & !p5_traded & !trading_house_full & (p5_chose_trader | p5_manned_small_market | p5_manned_large_market | chance))
			{
				goods_p5_array[2] = checked(goods_p5_array[2] - 1);
				counter1 = 0;
				while (counter1 != 4)
				{
					if (trading_house_array[counter1] != 0)
					{
						counter1 = checked(counter1 + 1);
					}
					else
					{
						trading_house_array[counter1] = 3;
						counter1 = 4;
					}
				}
				counter3 = 0;
				update_player_turn_designations();
				if (StringType.StrCmp(current_role_chooser_string, "p5", false) == 0)
				{
					counter3 = checked(counter3 + 1);
				}
				check_for_building(131);
				if (found_building)
				{
					counter3 = checked(counter3 + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Small Market gave them +1 doubloons for their Corn sale."), 131);
				}
				check_for_building(251);
				if (found_building)
				{
					counter3 = checked(counter3 + 2);
					infobox_building1(string.Concat(p5_name, "'s manned Large Market gave them +2 doubloons for their Corn sale."), 251);
				}
				if (counter3 == 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Corn for 1 doubloon."), "role_trader");
				}
				if (counter3 > 1 | counter3 < 1)
				{
					infobox_role(string.Concat(p5_name, " sold their Corn for", Conversion.Str(counter3), " doubloons."), "role_trader");
				}
				gold_p5 = checked(gold_p5 + counter3);
				p5_ai_done = true;
				p5_traded = true;
				update_all_labels();
			}
			if (!p5_traded)
			{
				infobox_role(string.Concat(p5_name, " is not trading this round. Please press Next Turn."), "role_trader");
			}
			formtitle("p5", "Done performing the Trader role - Turn Over");
		}

		public void p5_remove_all_colonists_to_idle()
		{
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] != 0)
				{
					if (StringType.StrCmp(StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), "1", false) == 0)
					{
						plantations_p5_array[counter1] = checked(plantations_p5_array[counter1] - 1);
						idle_colonists_array[5] = checked(idle_colonists_array[5] + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			do
			{
				counter2 = 0;
				do
				{
					if (buildings_p5_array[counter1] != 0 & buildings_p5_array[counter1] != 999)
					{
						if (StringType.StrCmp(StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), "0", false) != 0)
						{
							buildings_p5_array[counter1] = checked(buildings_p5_array[counter1] - 1);
							idle_colonists_array[5] = checked(idle_colonists_array[5] + 1);
						}
					}
					Form1 form11 = this;
					form11.counter2 = checked(form11.counter2 + 1);
				}
				while (counter2 <= 4);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 19);
		}

		private void PictureBox1_Click(object sender, EventArgs e)
		{
			choose_quarry();
		}

		private void plant_p1_slot1_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[0] == 10 | plantations_p1_array[0] == 20 | plantations_p1_array[0] == 30 | plantations_p1_array[0] == 40 | plantations_p1_array[0] == 50 | plantations_p1_array[0] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[0] = checked(plantations_p1_array[0] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[0] == 11 | plantations_p1_array[0] == 21 | plantations_p1_array[0] == 31 | plantations_p1_array[0] == 41 | plantations_p1_array[0] == 51 | plantations_p1_array[0] == 61)
				{
					plantations_p1_array[0] = checked(plantations_p1_array[0] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot10_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[9] == 10 | plantations_p1_array[9] == 20 | plantations_p1_array[9] == 30 | plantations_p1_array[9] == 40 | plantations_p1_array[9] == 50 | plantations_p1_array[9] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[9] = checked(plantations_p1_array[9] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[9] == 11 | plantations_p1_array[9] == 21 | plantations_p1_array[9] == 31 | plantations_p1_array[9] == 41 | plantations_p1_array[9] == 51 | plantations_p1_array[9] == 61)
				{
					plantations_p1_array[9] = checked(plantations_p1_array[9] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot11_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[10] == 10 | plantations_p1_array[10] == 20 | plantations_p1_array[10] == 30 | plantations_p1_array[10] == 40 | plantations_p1_array[10] == 50 | plantations_p1_array[10] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[10] = checked(plantations_p1_array[10] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[10] == 11 | plantations_p1_array[10] == 21 | plantations_p1_array[10] == 31 | plantations_p1_array[10] == 41 | plantations_p1_array[10] == 51 | plantations_p1_array[10] == 61)
				{
					plantations_p1_array[10] = checked(plantations_p1_array[10] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot12_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[11] == 10 | plantations_p1_array[11] == 20 | plantations_p1_array[11] == 30 | plantations_p1_array[11] == 40 | plantations_p1_array[11] == 50 | plantations_p1_array[11] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[11] = checked(plantations_p1_array[11] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[11] == 11 | plantations_p1_array[11] == 21 | plantations_p1_array[11] == 31 | plantations_p1_array[11] == 41 | plantations_p1_array[11] == 51 | plantations_p1_array[11] == 61)
				{
					plantations_p1_array[11] = checked(plantations_p1_array[11] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot2_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[1] == 10 | plantations_p1_array[1] == 20 | plantations_p1_array[1] == 30 | plantations_p1_array[1] == 40 | plantations_p1_array[1] == 50 | plantations_p1_array[1] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[1] = checked(plantations_p1_array[1] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[1] == 11 | plantations_p1_array[1] == 21 | plantations_p1_array[1] == 31 | plantations_p1_array[1] == 41 | plantations_p1_array[1] == 51 | plantations_p1_array[1] == 61)
				{
					plantations_p1_array[1] = checked(plantations_p1_array[1] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot3_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[2] == 10 | plantations_p1_array[2] == 20 | plantations_p1_array[2] == 30 | plantations_p1_array[2] == 40 | plantations_p1_array[2] == 50 | plantations_p1_array[2] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[2] = checked(plantations_p1_array[2] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[2] == 11 | plantations_p1_array[2] == 21 | plantations_p1_array[2] == 31 | plantations_p1_array[2] == 41 | plantations_p1_array[2] == 51 | plantations_p1_array[2] == 61)
				{
					plantations_p1_array[2] = checked(plantations_p1_array[2] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot4_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[3] == 10 | plantations_p1_array[3] == 20 | plantations_p1_array[3] == 30 | plantations_p1_array[3] == 40 | plantations_p1_array[3] == 50 | plantations_p1_array[3] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[3] = checked(plantations_p1_array[3] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[3] == 11 | plantations_p1_array[3] == 21 | plantations_p1_array[3] == 31 | plantations_p1_array[3] == 41 | plantations_p1_array[3] == 51 | plantations_p1_array[3] == 61)
				{
					plantations_p1_array[3] = checked(plantations_p1_array[3] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot5_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[4] == 10 | plantations_p1_array[4] == 20 | plantations_p1_array[4] == 30 | plantations_p1_array[4] == 40 | plantations_p1_array[4] == 50 | plantations_p1_array[4] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[4] = checked(plantations_p1_array[4] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[4] == 11 | plantations_p1_array[4] == 21 | plantations_p1_array[4] == 31 | plantations_p1_array[4] == 41 | plantations_p1_array[4] == 51 | plantations_p1_array[4] == 61)
				{
					plantations_p1_array[4] = checked(plantations_p1_array[4] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot6_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[5] == 10 | plantations_p1_array[5] == 20 | plantations_p1_array[5] == 30 | plantations_p1_array[5] == 40 | plantations_p1_array[5] == 50 | plantations_p1_array[5] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[5] = checked(plantations_p1_array[5] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[5] == 11 | plantations_p1_array[5] == 21 | plantations_p1_array[5] == 31 | plantations_p1_array[5] == 41 | plantations_p1_array[5] == 51 | plantations_p1_array[5] == 61)
				{
					plantations_p1_array[5] = checked(plantations_p1_array[5] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot7_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[6] == 10 | plantations_p1_array[6] == 20 | plantations_p1_array[6] == 30 | plantations_p1_array[6] == 40 | plantations_p1_array[6] == 50 | plantations_p1_array[6] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[6] = checked(plantations_p1_array[6] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[6] == 11 | plantations_p1_array[6] == 21 | plantations_p1_array[6] == 31 | plantations_p1_array[6] == 41 | plantations_p1_array[6] == 51 | plantations_p1_array[6] == 61)
				{
					plantations_p1_array[6] = checked(plantations_p1_array[6] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot8_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[7] == 10 | plantations_p1_array[7] == 20 | plantations_p1_array[7] == 30 | plantations_p1_array[7] == 40 | plantations_p1_array[7] == 50 | plantations_p1_array[7] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[7] = checked(plantations_p1_array[7] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[7] == 11 | plantations_p1_array[7] == 21 | plantations_p1_array[7] == 31 | plantations_p1_array[7] == 41 | plantations_p1_array[7] == 51 | plantations_p1_array[7] == 61)
				{
					plantations_p1_array[7] = checked(plantations_p1_array[7] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plant_p1_slot9_Click(object sender, EventArgs e)
		{
			finished = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (mayor_round)
			{
				if (!finished && plantations_p1_array[8] == 10 | plantations_p1_array[8] == 20 | plantations_p1_array[8] == 30 | plantations_p1_array[8] == 40 | plantations_p1_array[8] == 50 | plantations_p1_array[8] == 60)
				{
					if (idle_colonists_array[current_player] > 0)
					{
						plantations_p1_array[8] = checked(plantations_p1_array[8] + 1);
						idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] - 1);
						finished = true;
						update_all_labels();
					}
				}
				if (!finished && plantations_p1_array[8] == 11 | plantations_p1_array[8] == 21 | plantations_p1_array[8] == 31 | plantations_p1_array[8] == 41 | plantations_p1_array[8] == 51 | plantations_p1_array[8] == 61)
				{
					plantations_p1_array[8] = checked(plantations_p1_array[8] - 1);
					idle_colonists_array[current_player] = checked(idle_colonists_array[current_player] + 1);
					finished = true;
					update_all_labels();
				}
				determine_p1_mayor_phase_over();
			}
		}

		private void plantation_available_slot1_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_ready_to_end_settler = true;
					p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					formtitle("p1", "Your turn is over");
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
					p1_taken_turn = true;
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[0]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[0];
							plantation_available_array[0] = 0;
							update_num_plantations();
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[0]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[0] + 1);
							plantation_available_array[0] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[0]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[0];
							plantation_available_array[0] = 0;
							update_num_plantations();
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[0]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[0] + 1);
							plantation_available_array[0] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						plantation_available_slot1.Visible = false;
						p1_chose_plantation = true;
						update_plantations_p1_labels();
						formtitle("p1", "Your turn is over");
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
						p1_taken_turn = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		private void plantation_available_slot2_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_ready_to_end_settler = true;
					p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					formtitle("p1", "Your turn is over");
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
					p1_taken_turn = true;
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[1]);
						if (confirmed)
						{
							plantations_p1_array[num_plantations_p1] = plantation_available_array[1];
							plantation_available_array[1] = 0;
							update_num_plantations();
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[1]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[1] + 1);
							plantation_available_array[1] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[1]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[1];
							plantation_available_array[1] = 0;
							update_num_plantations();
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[1]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[1] + 1);
							plantation_available_array[1] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						plantation_available_slot1.Visible = false;
						p1_chose_plantation = true;
						update_plantations_p1_labels();
						formtitle("p1", "Your turn is over");
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
						p1_taken_turn = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		private void plantation_available_slot3_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_chose_plantation = true;
					p1_ready_to_end_settler = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					formtitle("p1", "Your turn is over");
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
					p1_taken_turn = true;
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[2]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[2];
							plantation_available_array[2] = 0;
							update_num_plantations();
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[2]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[2] + 1);
							plantation_available_array[2] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[2]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[2];
							plantation_available_array[2] = 0;
							update_num_plantations();
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[2]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[2] + 1);
							plantation_available_array[2] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						plantation_available_slot1.Visible = false;
						p1_chose_plantation = true;
						update_plantations_p1_labels();
						formtitle("p1", "Your turn is over");
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
						p1_taken_turn = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		private void plantation_available_slot4_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_ready_to_end_settler = true;
					p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					formtitle("p1", "Your turn is over");
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
					p1_taken_turn = true;
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[3]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[3];
							plantation_available_array[3] = 0;
							update_num_plantations();
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[3]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[3] + 1);
							plantation_available_array[3] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[3]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[3];
							plantation_available_array[3] = 0;
							update_num_plantations();
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[3]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[3] + 1);
							plantation_available_array[3] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						plantation_available_slot1.Visible = false;
						p1_chose_plantation = true;
						update_plantations_p1_labels();
						formtitle("p1", "Your turn is over");
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
						p1_taken_turn = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		private void plantation_available_slot5_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_ready_to_end_settler = true;
					p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					formtitle("p1", "Your turn is over");
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
					p1_taken_turn = true;
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[4]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[4];
							plantation_available_array[4] = 0;
							update_num_plantations();
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[4]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[4] + 1);
							plantation_available_array[4] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[4]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[4];
							plantation_available_array[4] = 0;
							update_num_plantations();
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[4]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[4] + 1);
							plantation_available_array[4] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						plantation_available_slot1.Visible = false;
						p1_chose_plantation = true;
						update_plantations_p1_labels();
						formtitle("p1", "Your turn is over");
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
						p1_taken_turn = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		private void plantation_available_slot6_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn", 0, null);
			}
			else if (settler_round)
			{
				if (p1_chose_plantation)
				{
					Interaction.MsgBox("You've already chosen a plantation or quarry. Please click NEXT TURN.", 0, null);
				}
				else if (num_plantations_p1 >= 12)
				{
					p1_ready_to_end_settler = true;
					p1_chose_plantation = true;
					Interaction.MsgBox("You already have 12 plantations. You cannot take another. Your turn is over.", 0, null);
					formtitle("p1", "Your turn is over");
					next_turn_button.Visible = true;
					next_turn_button.Enabled = true;
					p1_taken_turn = true;
				}
				else
				{
					check_for_building(231);
					if (!found_building)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[5]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[5];
							plantation_available_array[5] = 0;
							update_num_plantations();
						}
					}
					else if (colonists_bank_num > 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[5]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_bank_num = checked(colonists_bank_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[5] + 1);
							plantation_available_array[5] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					else if (colonists_ship_num <= 0)
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[5]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							plantations_p1_array[num_plantations_p1] = plantation_available_array[5];
							plantation_available_array[5] = 0;
							update_num_plantations();
							infobox_building1("You have a manned Hospice. However, since there are no colonists remaining, you did not receive one.", 231);
						}
					}
					else
					{
						confirmbox_plant("Is this the Plantation you want to choose?", plantation_available_array[5]);
						if (confirmed)
						{
							p1_ready_to_end_settler = true;
							colonists_ship_num = checked(colonists_ship_num - 1);
							plantations_p1_array[num_plantations_p1] = checked(plantation_available_array[5] + 1);
							plantation_available_array[5] = 0;
							update_num_plantations();
							infobox_building1("Your Hospice has granted you a colonist for your Plantation. Since there were no colonists left in the bank, you were given one from the ship.", 231);
							colonists_array[1] = checked(colonists_array[1] + 1);
						}
					}
					if (confirmed)
					{
						make_settler_buttons_inactive();
						p1_ready_to_end_settler = true;
						plantation_available_slot1.Visible = false;
						p1_chose_plantation = true;
						update_plantations_p1_labels();
						formtitle("p1", "Your turn is over");
						next_turn_button.Visible = true;
						next_turn_button.Enabled = true;
						p1_taken_turn = true;
					}
				}
			}
			update_all_labels();
			if (p1_ready_to_end_settler & settler_round & current_player == 1)
			{
				p1_ready_to_end_settler = false;
				next_turn_routine();
			}
		}

		private void prnondistext_Click(object sender, EventArgs e)
		{
		}

		public void process_p1_dumping()
		{
			storage_form.indigo1.Checked = false;
			storage_form.indigo2.Checked = false;
			storage_form.indigo3.Checked = false;
			storage_form.indigo4.Checked = false;
			storage_form.sugar1.Checked = false;
			storage_form.sugar2.Checked = false;
			storage_form.sugar3.Checked = false;
			storage_form.sugar4.Checked = false;
			storage_form.corn1.Checked = false;
			storage_form.corn2.Checked = false;
			storage_form.corn3.Checked = false;
			storage_form.corn4.Checked = false;
			storage_form.tobacco1.Checked = false;
			storage_form.tobacco2.Checked = false;
			storage_form.tobacco3.Checked = false;
			storage_form.tobacco4.Checked = false;
			storage_form.coffee1.Checked = false;
			storage_form.coffee2.Checked = false;
			storage_form.coffee3.Checked = false;
			storage_form.coffee4.Checked = false;
			storage_form.indigo1.Visible = false;
			storage_form.indigo2.Visible = false;
			storage_form.indigo3.Visible = false;
			storage_form.indigo4.Visible = false;
			storage_form.sugar1.Visible = false;
			storage_form.sugar2.Visible = false;
			storage_form.sugar3.Visible = false;
			storage_form.sugar4.Visible = false;
			storage_form.corn1.Visible = false;
			storage_form.corn2.Visible = false;
			storage_form.corn3.Visible = false;
			storage_form.corn4.Visible = false;
			storage_form.tobacco1.Visible = false;
			storage_form.tobacco2.Visible = false;
			storage_form.tobacco3.Visible = false;
			storage_form.tobacco4.Visible = false;
			storage_form.coffee1.Visible = false;
			storage_form.coffee2.Visible = false;
			storage_form.coffee3.Visible = false;
			storage_form.coffee4.Visible = false;
			storage_form.indigo_label.Text =StringType.FromInteger(goods_p1_array[0]);
			storage_form.sugar_label.Text =StringType.FromInteger(goods_p1_array[1]);
			storage_form.corn_label.Text =StringType.FromInteger(goods_p1_array[2]);
			storage_form.tobacco_label.Text =StringType.FromInteger(goods_p1_array[3]);
			storage_form.coffee_label.Text =StringType.FromInteger(goods_p1_array[4]);
			storage_form.GroupBox2.Visible = false;
			storage_form.GroupBox3.Visible = false;
			storage_form.GroupBox4.Visible = false;
			check_for_building_p1(161);
			if (!found_building)
			{
				storage_form.GroupBox2.Visible = false;
			}
			else
			{
				storage_form.GroupBox2.Visible = true;
			}
			check_for_building_p1(261);
			if (!found_building)
			{
				storage_form.GroupBox3.Visible = false;
				storage_form.GroupBox4.Visible = false;
			}
			else
			{
				storage_form.GroupBox3.Visible = true;
				storage_form.GroupBox4.Visible = true;
			}
			if (goods_p1_array[0] > 0)
			{
				storage_form.indigo1.Visible = true;
				storage_form.indigo2.Visible = true;
				storage_form.indigo3.Visible = true;
				storage_form.indigo4.Visible = true;
			}
			if (goods_p1_array[1] > 0)
			{
				storage_form.sugar1.Visible = true;
				storage_form.sugar2.Visible = true;
				storage_form.sugar3.Visible = true;
				storage_form.sugar4.Visible = true;
			}
			if (goods_p1_array[2] > 0)
			{
				storage_form.corn1.Visible = true;
				storage_form.corn2.Visible = true;
				storage_form.corn3.Visible = true;
				storage_form.corn4.Visible = true;
			}
			if (goods_p1_array[3] > 0)
			{
				storage_form.tobacco1.Visible = true;
				storage_form.tobacco2.Visible = true;
				storage_form.tobacco3.Visible = true;
				storage_form.tobacco4.Visible = true;
			}
			if (goods_p1_array[4] > 0)
			{
				storage_form.coffee1.Visible = true;
				storage_form.coffee2.Visible = true;
				storage_form.coffee3.Visible = true;
				storage_form.coffee4.Visible = true;
			}
			if (!(goods_p1_array[0] == 0 & goods_p1_array[1] == 0 & goods_p1_array[2] == 0 & goods_p1_array[3] == 0 & goods_p1_array[4] == 0))
			{
				storage_form.storage_close_button.Enabled=false;
				storage_form.storage_close_button.Visible = false;
				storage_form.ShowDialog();
			}
			else
			{
				infobox_role("You have no goods to store. Please click End Turn.", "role_captain");
				auto_captain_button.Text = "Next Shipper Auto";
				auto_captain_button.Enabled=false;
				auto_captain_button.Visible = false;
				next_turn_button.Text = "End Captain Turn";
				next_turn_button.Enabled = true;
				next_turn_button.Visible = true;
			}
			if (storage_form.indigo1.Checked)
			{
				p1_storage_array[0] = 1;
				infobox_role("You stored 1 barrel of Indigo.", "role_captain");
			}
			if (storage_form.indigo2.Checked)
			{
				p1_storage_array[0] = 2;
				infobox_building1("You stored all of your Indigo in your Small Warehouse.", 161);
			}
			if (storage_form.indigo3.Checked)
			{
				p1_storage_array[0] = 2;
				infobox_building1("You stored all of your Indigo in your Large Warehouse.", 261);
			}
			if (storage_form.indigo4.Checked)
			{
				p1_storage_array[0] = 2;
				infobox_building1("You stored all of your Indigo in your Large Warehouse.", 261);
			}
			if (storage_form.sugar1.Checked)
			{
				p1_storage_array[1] = 1;
				infobox_role("You stored 1 barrel of Sugar.", "role_captain");
			}
			if (storage_form.sugar2.Checked)
			{
				p1_storage_array[1] = 2;
				infobox_building1("You stored all of your Sugar in your Small Warehouse.", 161);
			}
			if (storage_form.sugar3.Checked)
			{
				p1_storage_array[1] = 2;
				infobox_building1("You stored all of your Sugar in your Large Warehouse.", 261);
			}
			if (storage_form.sugar4.Checked)
			{
				p1_storage_array[1] = 2;
				infobox_building1("You stored all of your Sugar in your Large Warehouse.", 261);
			}
			if (storage_form.corn1.Checked)
			{
				p1_storage_array[2] = 1;
				infobox_role("You stored 1 barrel of Corn.", "role_captain");
			}
			if (storage_form.corn2.Checked)
			{
				p1_storage_array[2] = 2;
				infobox_building1("You stored all of your Corn in your Small Warehouse.", 161);
			}
			if (storage_form.corn3.Checked)
			{
				p1_storage_array[2] = 2;
				infobox_building1("You stored all of your Corn in your Large Warehouse.", 261);
			}
			if (storage_form.corn4.Checked)
			{
				p1_storage_array[2] = 2;
				infobox_building1("You stored all of your Corn in your Large Warehouse.", 261);
			}
			if (storage_form.tobacco1.Checked)
			{
				p1_storage_array[3] = 1;
				infobox_role("You stored 1 barrel of Tobacco.", "role_captain");
			}
			if (storage_form.tobacco2.Checked)
			{
				p1_storage_array[3] = 2;
				infobox_building1("You stored all of your Tobacco in your Small Warehouse.", 161);
			}
			if (storage_form.tobacco3.Checked)
			{
				p1_storage_array[3] = 2;
				infobox_building1("You stored all of your Tobacco in your Large Warehouse.", 261);
			}
			if (storage_form.tobacco4.Checked)
			{
				p1_storage_array[3] = 2;
				infobox_building1("You stored all of your Tobacco in your Large Warehouse.", 261);
			}
			if (storage_form.coffee1.Checked)
			{
				p1_storage_array[4] = 1;
				infobox_role("You stored 1 barrel of Coffee.", "role_captain");
			}
			if (storage_form.coffee2.Checked)
			{
				p1_storage_array[4] = 2;
				infobox_building1("You stored all of your Coffee in your Small Warehouse.", 161);
			}
			if (storage_form.coffee3.Checked)
			{
				p1_storage_array[4] = 2;
				infobox_building1("You stored all of your Coffee in your Large Warehouse.", 261);
			}
			if (storage_form.coffee4.Checked)
			{
				p1_storage_array[4] = 2;
				infobox_building1("You stored all of your Coffee in your Large Warehouse.", 261);
			}
			counter1 = 0;
			do
			{
				if (p1_storage_array[counter1] == 0)
				{
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] + goods_p1_array[counter1]);
					goods_p1_array[counter1] = 0;
				}
				if (p1_storage_array[counter1] == 1)
				{
					goods_bank_array[counter1] = checked(goods_bank_array[counter1] + (checked(goods_p1_array[counter1] - 1)));
					goods_p1_array[counter1] = 1;
				}
#warning Best guess: what is now contained in an if statement was simply a statement in the .NET framework 1 version of the application
				if (p1_storage_array[counter1] != 2)
				{
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
			}
			while (counter1 <= 4);
			p1_dumped = true;
			auto_captain_button.Text = "Next Shipper Auto";
			auto_captain_button.Enabled=false;
			auto_captain_button.Visible = false;
			next_turn_button.Text = "End Captain Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void process_p2_dumping()
		{
			done_dumping = false;
			stored_indigo = false;
			stored_sugar = false;
			stored_corn = false;
			stored_tobacco = false;
			stored_coffee = false;
			slots_to_store = 0;
			check_for_building_p2(161);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 1);
			}
			check_for_building_p2(261);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 2);
			}
			finished = false;
			counter1 = 1;
			while (!(counter1 == checked(slots_to_store + 1) | finished))
			{
				determine_best_goods_to_store();
				if (best_storage_type == 999)
				{
					finished = true;
				}
				if (best_storage_type == 0)
				{
					stored_indigo = true;
					infobox_role(string.Concat(p2_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 1)
				{
					stored_sugar = true;
					infobox_role(string.Concat(p2_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 2)
				{
					stored_corn = true;
					infobox_role(string.Concat(p2_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 3)
				{
					stored_tobacco = true;
					infobox_role(string.Concat(p2_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 4)
				{
					stored_coffee = true;
					infobox_role(string.Concat(p2_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				counter1 = checked(counter1 + 1);
			}
			if ((stored_indigo | goods_p2_array[0] == 0) & (stored_sugar | goods_p2_array[1] == 0) & (stored_corn | goods_p2_array[2] == 0) & (stored_tobacco | goods_p2_array[3] == 0) & (stored_coffee | goods_p2_array[4] == 0))
			{
				done_dumping = true;
			}
			while (!done_dumping)
			{
				generate_random1(1, 100);
				if (random1 > 60 & goods_p2_array[4] > 0 & !done_dumping)
				{
					goods_p2_array[4] = checked(goods_p2_array[4] - 1);
					goods_bank_array[4] = checked(goods_bank_array[4] + goods_p2_array[4]);
					goods_p2_array[4] = 1;
					stored_coffee = true;
					done_dumping = true;
					infobox_role(string.Concat(p2_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (random1 > 40 & random1 < 60 & goods_p2_array[3] > 0 & !done_dumping)
				{
					goods_p2_array[3] = checked(goods_p2_array[3] - 1);
					goods_bank_array[3] = checked(goods_bank_array[3] + goods_p2_array[3]);
					goods_p2_array[3] = 1;
					stored_tobacco = true;
					done_dumping = true;
					infobox_role(string.Concat(p2_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (random1 > 30 & random1 < 40 & goods_p2_array[2] > 0 & !done_dumping)
				{
					goods_p2_array[2] = checked(goods_p2_array[2] - 1);
					goods_bank_array[2] = checked(goods_bank_array[2] + goods_p2_array[2]);
					goods_p2_array[2] = 1;
					stored_corn = true;
					done_dumping = true;
					infobox_role(string.Concat(p2_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (random1 > 20 & random1 < 30 & goods_p2_array[1] > 0 & !done_dumping)
				{
					goods_p2_array[1] = checked(goods_p2_array[1] - 1);
					goods_bank_array[1] = checked(goods_bank_array[1] + goods_p2_array[1]);
					goods_p2_array[1] = 1;
					stored_sugar = true;
					done_dumping = true;
					infobox_role(string.Concat(p2_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(random1 > 10 & random1 < 20 & goods_p2_array[0] > 0 & !done_dumping))
				{
					continue;
				}
				goods_p2_array[0] = checked(goods_p2_array[0] - 1);
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p2_array[0]);
				goods_p2_array[0] = 1;
				stored_indigo = true;
				done_dumping = true;
				infobox_role(string.Concat(p2_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!stored_indigo)
			{
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p2_array[0]);
				goods_p2_array[0] = 0;
			}
			if (!stored_sugar)
			{
				goods_bank_array[1] = checked(goods_bank_array[1] + goods_p2_array[1]);
				goods_p2_array[1] = 0;
			}
			if (!stored_corn)
			{
				goods_bank_array[2] = checked(goods_bank_array[2] + goods_p2_array[2]);
				goods_p2_array[2] = 0;
			}
			if (!stored_tobacco)
			{
				goods_bank_array[3] = checked(goods_bank_array[3] + goods_p2_array[3]);
				goods_p2_array[3] = 0;
			}
			if (!stored_coffee)
			{
				goods_bank_array[4] = checked(goods_bank_array[4] + goods_p2_array[4]);
				goods_p2_array[4] = 0;
			}
			next_turn_button.Text = "End Captain Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void process_p3_dumping()
		{
			done_dumping = false;
			stored_indigo = false;
			stored_sugar = false;
			stored_corn = false;
			stored_tobacco = false;
			stored_coffee = false;
			slots_to_store = 0;
			check_for_building_p3(161);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 1);
			}
			check_for_building_p3(261);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 2);
			}
			finished = false;
			counter1 = 1;
			while (!(counter1 == checked(slots_to_store + 1) | finished))
			{
				determine_best_goods_to_store();
				if (best_storage_type == 999)
				{
					finished = true;
				}
				if (best_storage_type == 0)
				{
					stored_indigo = true;
					infobox_role(string.Concat(p3_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 1)
				{
					stored_sugar = true;
					infobox_role(string.Concat(p3_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 2)
				{
					stored_corn = true;
					infobox_role(string.Concat(p3_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 3)
				{
					stored_tobacco = true;
					infobox_role(string.Concat(p3_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 4)
				{
					stored_coffee = true;
					infobox_role(string.Concat(p3_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				counter1 = checked(counter1 + 1);
			}
			if ((stored_indigo | goods_p3_array[0] == 0) & (stored_sugar | goods_p3_array[1] == 0) & (stored_corn | goods_p3_array[2] == 0) & (stored_tobacco | goods_p3_array[3] == 0) & (stored_coffee | goods_p3_array[4] == 0))
			{
				done_dumping = true;
			}
			while (!done_dumping)
			{
				generate_random1(1, 100);
				if (random1 > 60 & goods_p3_array[4] > 0 & !done_dumping)
				{
					goods_p3_array[4] = checked(goods_p3_array[4] - 1);
					goods_bank_array[4] = checked(goods_bank_array[4] + goods_p3_array[4]);
					goods_p3_array[4] = 1;
					stored_coffee = true;
					done_dumping = true;
					infobox_role(string.Concat(p3_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (random1 > 40 & random1 < 60 & goods_p3_array[3] > 0 & !done_dumping)
				{
					goods_p3_array[3] = checked(goods_p3_array[3] - 1);
					goods_bank_array[3] = checked(goods_bank_array[3] + goods_p3_array[3]);
					goods_p3_array[3] = 1;
					stored_tobacco = true;
					done_dumping = true;
					infobox_role(string.Concat(p3_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (random1 > 30 & random1 < 40 & goods_p3_array[2] > 0 & !done_dumping)
				{
					goods_p3_array[2] = checked(goods_p3_array[2] - 1);
					goods_bank_array[2] = checked(goods_bank_array[2] + goods_p3_array[2]);
					goods_p3_array[2] = 1;
					stored_corn = true;
					done_dumping = true;
					infobox_role(string.Concat(p3_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (random1 > 20 & random1 < 30 & goods_p3_array[1] > 0 & !done_dumping)
				{
					goods_p3_array[1] = checked(goods_p3_array[1] - 1);
					goods_bank_array[1] = checked(goods_bank_array[1] + goods_p3_array[1]);
					goods_p3_array[1] = 1;
					stored_sugar = true;
					done_dumping = true;
					infobox_role(string.Concat(p3_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(random1 > 10 & random1 < 20 & goods_p3_array[0] > 0 & !done_dumping))
				{
					continue;
				}
				goods_p3_array[0] = checked(goods_p3_array[0] - 1);
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p3_array[0]);
				goods_p3_array[0] = 1;
				stored_indigo = true;
				done_dumping = true;
				infobox_role(string.Concat(p3_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!stored_indigo)
			{
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p3_array[0]);
				goods_p3_array[0] = 0;
			}
			if (!stored_sugar)
			{
				goods_bank_array[1] = checked(goods_bank_array[1] + goods_p3_array[1]);
				goods_p3_array[1] = 0;
			}
			if (!stored_corn)
			{
				goods_bank_array[2] = checked(goods_bank_array[2] + goods_p3_array[2]);
				goods_p3_array[2] = 0;
			}
			if (!stored_tobacco)
			{
				goods_bank_array[3] = checked(goods_bank_array[3] + goods_p3_array[3]);
				goods_p3_array[3] = 0;
			}
			if (!stored_coffee)
			{
				goods_bank_array[4] = checked(goods_bank_array[4] + goods_p3_array[4]);
				goods_p3_array[4] = 0;
			}
			next_turn_button.Text = "End Captain Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void process_p4_dumping()
		{
			done_dumping = false;
			stored_indigo = false;
			stored_sugar = false;
			stored_corn = false;
			stored_tobacco = false;
			stored_coffee = false;
			slots_to_store = 0;
			check_for_building_p4(161);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 1);
			}
			check_for_building_p4(261);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 2);
			}
			finished = false;
			counter1 = 1;
			while (!(counter1 == checked(slots_to_store + 1) | finished))
			{
				determine_best_goods_to_store();
				if (best_storage_type == 999)
				{
					finished = true;
				}
				if (best_storage_type == 0)
				{
					stored_indigo = true;
					infobox_role(string.Concat(p4_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 1)
				{
					stored_sugar = true;
					infobox_role(string.Concat(p4_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 2)
				{
					stored_corn = true;
					infobox_role(string.Concat(p4_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 3)
				{
					stored_tobacco = true;
					infobox_role(string.Concat(p4_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 4)
				{
					stored_coffee = true;
					infobox_role(string.Concat(p4_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				counter1 = checked(counter1 + 1);
			}
			if ((stored_indigo | goods_p4_array[0] == 0) & (stored_sugar | goods_p4_array[1] == 0) & (stored_corn | goods_p4_array[2] == 0) & (stored_tobacco | goods_p4_array[3] == 0) & (stored_coffee | goods_p4_array[4] == 0))
			{
				done_dumping = true;
			}
			while (!done_dumping)
			{
				generate_random1(1, 100);
				if (random1 > 60 & goods_p4_array[4] > 0 & !done_dumping)
				{
					goods_p4_array[4] = checked(goods_p4_array[4] - 1);
					goods_bank_array[4] = checked(goods_bank_array[4] + goods_p4_array[4]);
					goods_p4_array[4] = 1;
					stored_coffee = true;
					done_dumping = true;
					infobox_role(string.Concat(p4_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (random1 > 40 & random1 < 60 & goods_p4_array[3] > 0 & !done_dumping)
				{
					goods_p4_array[3] = checked(goods_p4_array[3] - 1);
					goods_bank_array[3] = checked(goods_bank_array[3] + goods_p4_array[3]);
					goods_p4_array[3] = 1;
					stored_tobacco = true;
					done_dumping = true;
					infobox_role(string.Concat(p4_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (random1 > 30 & random1 < 40 & goods_p4_array[2] > 0 & !done_dumping)
				{
					goods_p4_array[2] = checked(goods_p4_array[2] - 1);
					goods_bank_array[2] = checked(goods_bank_array[2] + goods_p4_array[2]);
					goods_p4_array[2] = 1;
					stored_corn = true;
					done_dumping = true;
					infobox_role(string.Concat(p4_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (random1 > 20 & random1 < 30 & goods_p4_array[1] > 0 & !done_dumping)
				{
					goods_p4_array[1] = checked(goods_p4_array[1] - 1);
					goods_bank_array[1] = checked(goods_bank_array[1] + goods_p4_array[1]);
					goods_p4_array[1] = 1;
					stored_sugar = true;
					done_dumping = true;
					infobox_role(string.Concat(p4_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(random1 > 10 & random1 < 20 & goods_p4_array[0] > 0 & !done_dumping))
				{
					continue;
				}
				goods_p4_array[0] = checked(goods_p4_array[0] - 1);
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p4_array[0]);
				goods_p4_array[0] = 1;
				stored_indigo = true;
				done_dumping = true;
				infobox_role(string.Concat(p4_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!stored_indigo)
			{
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p4_array[0]);
				goods_p4_array[0] = 0;
			}
			if (!stored_sugar)
			{
				goods_bank_array[1] = checked(goods_bank_array[1] + goods_p4_array[1]);
				goods_p4_array[1] = 0;
			}
			if (!stored_corn)
			{
				goods_bank_array[2] = checked(goods_bank_array[2] + goods_p4_array[2]);
				goods_p4_array[2] = 0;
			}
			if (!stored_tobacco)
			{
				goods_bank_array[3] = checked(goods_bank_array[3] + goods_p4_array[3]);
				goods_p4_array[3] = 0;
			}
			if (!stored_coffee)
			{
				goods_bank_array[4] = checked(goods_bank_array[4] + goods_p4_array[4]);
				goods_p4_array[4] = 0;
			}
			next_turn_button.Text = "End Captain Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		public void process_p5_dumping()
		{
			done_dumping = false;
			stored_indigo = false;
			stored_sugar = false;
			stored_corn = false;
			stored_tobacco = false;
			stored_coffee = false;
			slots_to_store = 0;
			check_for_building_p5(161);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 1);
			}
			check_for_building_p5(261);
			if (found_building)
			{
				slots_to_store = checked(slots_to_store + 2);
			}
			finished = false;
			counter1 = 1;
			while (!(counter1 == checked(slots_to_store + 1) | finished))
			{
				determine_best_goods_to_store();
				if (best_storage_type == 999)
				{
					finished = true;
				}
				if (best_storage_type == 0)
				{
					stored_indigo = true;
					infobox_role(string.Concat(p5_name, " is storing all their Indigo in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 1)
				{
					stored_sugar = true;
					infobox_role(string.Concat(p5_name, " is storing all their Sugar in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 2)
				{
					stored_corn = true;
					infobox_role(string.Concat(p5_name, " is storing all their Corn in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 3)
				{
					stored_tobacco = true;
					infobox_role(string.Concat(p5_name, " is storing all their Tobacco in a Warehouse."), "role_captain");
				}
				if (best_storage_type == 4)
				{
					stored_coffee = true;
					infobox_role(string.Concat(p5_name, " is storing all their Coffee in a Warehouse."), "role_captain");
				}
				counter1 = checked(counter1 + 1);
			}
			if ((stored_indigo | goods_p5_array[0] == 0) & (stored_sugar | goods_p5_array[1] == 0) & (stored_corn | goods_p5_array[2] == 0) & (stored_tobacco | goods_p5_array[3] == 0) & (stored_coffee | goods_p5_array[4] == 0))
			{
				done_dumping = true;
			}
			while (!done_dumping)
			{
				generate_random1(1, 100);
				if (random1 > 60 & goods_p5_array[4] > 0 & !done_dumping)
				{
					goods_p5_array[4] = checked(goods_p5_array[4] - 1);
					goods_bank_array[4] = checked(goods_bank_array[4] + goods_p5_array[4]);
					goods_p5_array[4] = 1;
					stored_coffee = true;
					done_dumping = true;
					infobox_role(string.Concat(p5_name, "is storing a free barrel of Coffee."), "role_captain");
				}
				if (random1 > 40 & random1 < 60 & goods_p5_array[3] > 0 & !done_dumping)
				{
					goods_p5_array[3] = checked(goods_p5_array[3] - 1);
					goods_bank_array[3] = checked(goods_bank_array[3] + goods_p5_array[3]);
					goods_p5_array[3] = 1;
					stored_tobacco = true;
					done_dumping = true;
					infobox_role(string.Concat(p5_name, "is storing a free barrel of Tobacco."), "role_captain");
				}
				if (random1 > 30 & random1 < 40 & goods_p5_array[2] > 0 & !done_dumping)
				{
					goods_p5_array[2] = checked(goods_p5_array[2] - 1);
					goods_bank_array[2] = checked(goods_bank_array[2] + goods_p5_array[2]);
					goods_p5_array[2] = 1;
					stored_corn = true;
					done_dumping = true;
					infobox_role(string.Concat(p5_name, "is storing a free barrel of Corn."), "role_captain");
				}
				if (random1 > 20 & random1 < 30 & goods_p5_array[1] > 0 & !done_dumping)
				{
					goods_p5_array[1] = checked(goods_p5_array[1] - 1);
					goods_bank_array[1] = checked(goods_bank_array[1] + goods_p5_array[1]);
					goods_p5_array[1] = 1;
					stored_sugar = true;
					done_dumping = true;
					infobox_role(string.Concat(p5_name, "is storing a free barrel of Sugar."), "role_captain");
				}
				if (!(random1 > 10 & random1 < 20 & goods_p5_array[0] > 0 & !done_dumping))
				{
					continue;
				}
				goods_p5_array[0] = checked(goods_p5_array[0] - 1);
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p5_array[0]);
				goods_p5_array[0] = 1;
				stored_indigo = true;
				done_dumping = true;
				infobox_role(string.Concat(p5_name, "is storing a free barrel of Indigo."), "role_captain");
			}
			if (!stored_indigo)
			{
				goods_bank_array[0] = checked(goods_bank_array[0] + goods_p5_array[0]);
				goods_p5_array[0] = 0;
			}
			if (!stored_sugar)
			{
				goods_bank_array[1] = checked(goods_bank_array[1] + goods_p5_array[1]);
				goods_p5_array[1] = 0;
			}
			if (!stored_corn)
			{
				goods_bank_array[2] = checked(goods_bank_array[2] + goods_p5_array[2]);
				goods_p5_array[2] = 0;
			}
			if (!stored_tobacco)
			{
				goods_bank_array[3] = checked(goods_bank_array[3] + goods_p5_array[3]);
				goods_p5_array[3] = 0;
			}
			if (!stored_coffee)
			{
				goods_bank_array[4] = checked(goods_bank_array[4] + goods_p5_array[4]);
				goods_p5_array[4] = 0;
			}
			next_turn_button.Text = "End Captain Phase";
			next_turn_button.Enabled = true;
			next_turn_button.Visible = true;
		}

		private void pros1_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_prospector1();
			}
		}

		private void pros2_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_prospector2();
			}
		}

		public void reset_all_variables()
		{
		}

		public void reset_captain_ai_variables()
		{
			indigo_points_shipa = 0;
			indigo_points_shipb = 0;
			indigo_points_shipc = 0;
			indigo_points_wharf = 0;
			sugar_points_shipa = 0;
			sugar_points_shipb = 0;
			sugar_points_shipc = 0;
			sugar_points_wharf = 0;
			corn_points_shipa = 0;
			corn_points_shipb = 0;
			corn_points_shipc = 0;
			corn_points_wharf = 0;
			tobacco_points_shipa = 0;
			tobacco_points_shipb = 0;
			tobacco_points_shipc = 0;
			tobacco_points_wharf = 0;
			coffee_points_shipa = 0;
			coffee_points_shipb = 0;
			coffee_points_shipc = 0;
			coffee_points_wharf = 0;
		}

		public void reset_for_new_governor()
		{
			if (!role_settler_pic.Visible)
			{
				role_settler_pic.Visible = true;
			}
			else
			{
				bonus_roles_array[0] = checked(bonus_roles_array[0] + 1);
			}
			if (!role_mayor_pic.Visible)
			{
				role_mayor_pic.Visible = true;
			}
			else
			{
				bonus_roles_array[1] = checked(bonus_roles_array[1] + 1);
			}
			if (!role_builder_pic.Visible)
			{
				role_builder_pic.Visible = true;
			}
			else
			{
				bonus_roles_array[2] = checked(bonus_roles_array[2] + 1);
			}
			if (!role_craftsman_pic.Visible)
			{
				role_craftsman_pic.Visible = true;
			}
			else
			{
				bonus_roles_array[3] = checked(bonus_roles_array[3] + 1);
			}
			if (!role_trader_pic.Visible)
			{
				role_trader_pic.Visible = true;
			}
			else
			{
				bonus_roles_array[4] = checked(bonus_roles_array[4] + 1);
			}
			if (!role_captain_pic.Visible)
			{
				role_captain_pic.Visible = true;
			}
			else
			{
				bonus_roles_array[5] = checked(bonus_roles_array[5] + 1);
			}
			if (role_prospector1_pic.Visible)
			{
				bonus_roles_array[6] = checked(bonus_roles_array[6] + 1);
			}
			else if (number_of_players == 4 | number_of_players == 5)
			{
				role_prospector1_pic.Visible = true;
			}
			if (role_prospector2_pic.Visible)
			{
				bonus_roles_array[7] = checked(bonus_roles_array[7] + 1);
			}
			else if (number_of_players == 5)
			{
				role_prospector2_pic.Visible = true;
			}
			update_summary();
		}

		private void role_builder_pic_Click(object sender, EventArgs e)
		{
			choose_builder();
		}

		private void role_captain_pic_Click(object sender, EventArgs e)
		{
			choose_captain();
		}

		private void role_craftsman_pic_Click(object sender, EventArgs e)
		{
			choose_craftsman();
		}

		private void role_mayor_pic_Click(object sender, EventArgs e)
		{
			choose_mayor();
		}

		private void role_prospector1_pic_Click(object sender, EventArgs e)
		{
			choose_prospector1();
		}

		private void role_prospector2_pic_Click(object sender, EventArgs e)
		{
			choose_prospector2();
		}

		private void role_settler_pic_Click(object sender, EventArgs e)
		{
			choose_settler();
		}

		private void role_trader_pic_Click(object sender, EventArgs e)
		{
			choose_trader();
		}

		public void score_summary()
		{
			update_all_labels();
			if (number_of_players == 3)
			{
				score_form.groupbox4.Visible = false;
				score_form.groupbox5.Visible = false;
			}
			if (number_of_players == 4)
			{
				score_form.groupbox4.Visible = true;
				score_form.groupbox5.Visible = false;
			}
			if (number_of_players == 5)
			{
				score_form.groupbox4.Visible = true;
				score_form.groupbox5.Visible = true;
			}
			p1_tiebreaker = gold_p1;
			counter1 = 0;
			do
			{
				p1_tiebreaker = checked(p1_tiebreaker + goods_p1_array[counter1]);
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 4);
			score_form.p1_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p1 + vp_buildings_p1));
			score_form.p1_vp_chips_label.Text =StringType.FromInteger(vpchips_p1);
			score_form.p1_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p1);
			score_form.p1_tie_breaker_label.Text =StringType.FromInteger(p1_tiebreaker);
			p2_tiebreaker = gold_p2;
			counter1 = 0;
			do
			{
				p2_tiebreaker = checked(p2_tiebreaker + goods_p2_array[counter1]);
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 4);
			score_form.p2_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p2 + vp_buildings_p2));
			score_form.p2_vp_chips_label.Text =StringType.FromInteger(vpchips_p2);
			score_form.p2_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p2);
			score_form.p2_tie_breaker_label.Text =StringType.FromInteger(p2_tiebreaker);
			p3_tiebreaker = gold_p3;
			counter1 = 0;
			do
			{
				p3_tiebreaker = checked(p3_tiebreaker + goods_p3_array[counter1]);
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 4);
			score_form.p3_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p3 + vp_buildings_p3));
			score_form.p3_vp_chips_label.Text =StringType.FromInteger(vpchips_p3);
			score_form.p3_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p3);
			score_form.p3_tie_breaker_label.Text =StringType.FromInteger(p3_tiebreaker);
			p4_tiebreaker = gold_p4;
			counter1 = 0;
			do
			{
				p4_tiebreaker = checked(p4_tiebreaker + goods_p4_array[counter1]);
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 4);
			score_form.p4_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p4 + vp_buildings_p4));
			score_form.p4_vp_chips_label.Text =StringType.FromInteger(vpchips_p4);
			score_form.p4_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p4);
			score_form.p4_tie_breaker_label.Text =StringType.FromInteger(p4_tiebreaker);
			p5_tiebreaker = gold_p5;
			counter1 = 0;
			do
			{
				p5_tiebreaker = checked(p5_tiebreaker + goods_p5_array[counter1]);
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 4);
			score_form.p5_vp_total_label.Text =StringType.FromInteger(checked(vpchips_p5 + vp_buildings_p5));
			score_form.p5_vp_chips_label.Text =StringType.FromInteger(vpchips_p5);
			score_form.p5_vp_buildings_label.Text =StringType.FromInteger(vp_buildings_p5);
			score_form.p5_tie_breaker_label.Text =StringType.FromInteger(p5_tiebreaker);
			score_form.ShowDialog();
		}

		private void settler_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_settler();
			}
		}

		public void ship_coffee()
		{
			update_ship_cargo();
			p1_num_shipped = 0;
			if (need_to_pick_ship)
			{
				if (p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(goods_p1_array[4] > 0 & coffee_ship_available))
			{
				check_for_building(361);
				if (found_building && goods_p1_array[4] > 0 & (coffee_ship_full | !empty_ship_available) & !p1_used_wharf)
				{
					ready_to_ship_coffee = true;
					load_wharf();
				}
				if (!(goods_to_ship & empty_ship_available & goods_p1_array[4] > 0 & !coffee_ship_full))
				{
					if (need_to_pick_ship & !p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					confirmbox_plant("Are you sure you want to ship your Coffee?", 50);
					if (confirmed)
					{
						formtitle("p1", "Captain's Phase - Choose a ship to load");
						make_player_goods_buttons_inactive();
						make_ship_pics_active();
						infobox_role("Choose the ship that you want to load with your Coffee", "role_captain");
						need_to_pick_ship = true;
						ready_to_ship_coffee = true;
					}
				}
			}
			else
			{
				confirmbox_plant("Are you sure you want to ship your Coffee?", 50);
				if (confirmed)
				{
					make_player_goods_buttons_inactive();
					if (coffee_shipnum == 1)
					{
						if (goods_p1_array[4] <= shipa_array[3])
						{
							shipa_array[1] = checked(shipa_array[1] + goods_p1_array[4]);
							p1_num_shipped = goods_p1_array[4];
							goods_p1_array[4] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[4] > shipa_array[3])
						{
							shipa_array[1] = shipa_array[0];
							goods_p1_array[4] = checked(goods_p1_array[4] - shipa_array[3]);
							p1_num_shipped = shipa_array[3];
							end_shipping_turn_p1();
						}
					}
					if (coffee_shipnum == 2)
					{
						if (goods_p1_array[4] <= shipb_array[3])
						{
							shipb_array[1] = checked(shipb_array[1] + goods_p1_array[4]);
							p1_num_shipped = goods_p1_array[4];
							goods_p1_array[4] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[4] > shipb_array[3])
						{
							shipb_array[1] = shipb_array[0];
							goods_p1_array[4] = checked(goods_p1_array[4] - shipb_array[3]);
							p1_num_shipped = shipb_array[3];
							end_shipping_turn_p1();
						}
					}
					if (coffee_shipnum == 3)
					{
						if (goods_p1_array[4] <= shipc_array[3])
						{
							shipc_array[1] = checked(shipc_array[1] + goods_p1_array[4]);
							p1_num_shipped = goods_p1_array[4];
							goods_p1_array[4] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[4] > shipc_array[3])
						{
							shipc_array[1] = shipc_array[0];
							goods_p1_array[4] = checked(goods_p1_array[4] - shipc_array[3]);
							p1_num_shipped = shipc_array[3];
							end_shipping_turn_p1();
						}
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					infobox_role(string.Concat("You shipped your Coffee for", Conversion.Str(p1_num_shipped), " Victory Points"), "role_captain");
					update_all_labels();
				}
			}
		}

		public void ship_coffee_via_shipa()
		{
			if (current_player == 2)
			{
				if (shipa_array[3] < goods_p2_array[4])
				{
					p2_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p2_array[4] = checked(goods_p2_array[4] - p2_num_shipped);
					shipa_array[2] = 5;
				}
				else
				{
					p2_num_shipped = goods_p2_array[4];
					shipa_array[1] = checked(shipa_array[1] + goods_p2_array[4]);
					shipa_array[2] = 5;
					goods_p2_array[4] = 0;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Coffee for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipa_array[3] < goods_p3_array[4])
				{
					p3_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p3_array[4] = checked(goods_p3_array[4] - p3_num_shipped);
					shipa_array[2] = 5;
				}
				else
				{
					p3_num_shipped = goods_p3_array[4];
					shipa_array[1] = checked(shipa_array[1] + goods_p3_array[4]);
					goods_p3_array[4] = 0;
					shipa_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Coffee for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipa_array[3] < goods_p4_array[4])
				{
					p4_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p4_array[4] = checked(goods_p4_array[4] - p4_num_shipped);
					shipa_array[2] = 5;
				}
				else
				{
					p4_num_shipped = goods_p4_array[4];
					shipa_array[1] = checked(shipa_array[1] + goods_p4_array[4]);
					goods_p4_array[4] = 0;
					shipa_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Coffee for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipa_array[3] < goods_p5_array[4])
				{
					p5_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p5_array[4] = checked(goods_p5_array[4] - p5_num_shipped);
					shipa_array[2] = 5;
				}
				else
				{
					p5_num_shipped = goods_p5_array[4];
					shipa_array[1] = checked(shipa_array[1] + goods_p5_array[4]);
					goods_p5_array[4] = 0;
					shipa_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Coffee for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_coffee_via_shipb()
		{
			if (current_player == 2)
			{
				if (shipb_array[3] < goods_p2_array[4])
				{
					p2_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p2_array[4] = checked(goods_p2_array[4] - p2_num_shipped);
					shipb_array[2] = 5;
				}
				else
				{
					p2_num_shipped = goods_p2_array[4];
					shipb_array[1] = checked(shipb_array[1] + goods_p2_array[4]);
					shipb_array[2] = 5;
					goods_p2_array[4] = 0;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Coffee for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipb_array[3] < goods_p3_array[4])
				{
					p3_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p3_array[4] = checked(goods_p3_array[4] - p3_num_shipped);
					shipb_array[2] = 5;
				}
				else
				{
					p3_num_shipped = goods_p3_array[4];
					shipb_array[1] = checked(shipb_array[1] + goods_p3_array[4]);
					goods_p3_array[4] = 0;
					shipb_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Coffee for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipb_array[3] < goods_p4_array[4])
				{
					p4_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p4_array[4] = checked(goods_p4_array[4] - p4_num_shipped);
					shipb_array[2] = 5;
				}
				else
				{
					p4_num_shipped = goods_p4_array[4];
					shipb_array[1] = checked(shipb_array[1] + goods_p4_array[4]);
					goods_p4_array[4] = 0;
					shipb_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Coffee for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipb_array[3] < goods_p5_array[4])
				{
					p5_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p5_array[4] = checked(goods_p5_array[4] - p5_num_shipped);
					shipb_array[2] = 5;
				}
				else
				{
					p5_num_shipped = goods_p5_array[4];
					shipb_array[1] = checked(shipb_array[1] + goods_p5_array[4]);
					goods_p5_array[4] = 0;
					shipb_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Coffee for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_coffee_via_shipc()
		{
			if (current_player == 2)
			{
				if (shipc_array[3] < goods_p2_array[4])
				{
					p2_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p2_array[4] = checked(goods_p2_array[4] - p2_num_shipped);
					shipc_array[2] = 5;
				}
				else
				{
					p2_num_shipped = goods_p2_array[4];
					shipc_array[1] = checked(shipc_array[1] + goods_p2_array[4]);
					shipc_array[2] = 5;
					goods_p2_array[4] = 0;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Coffee for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipc_array[3] < goods_p3_array[4])
				{
					p3_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p3_array[4] = checked(goods_p3_array[4] - p3_num_shipped);
					shipc_array[2] = 5;
				}
				else
				{
					p3_num_shipped = goods_p3_array[4];
					shipc_array[1] = checked(shipc_array[1] + goods_p3_array[4]);
					goods_p3_array[4] = 0;
					shipc_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Coffee for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipc_array[3] < goods_p4_array[4])
				{
					p4_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p4_array[4] = checked(goods_p4_array[4] - p4_num_shipped);
					shipc_array[2] = 5;
				}
				else
				{
					p4_num_shipped = goods_p4_array[4];
					shipc_array[1] = checked(shipc_array[1] + goods_p4_array[4]);
					goods_p4_array[4] = 0;
					shipc_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Coffee for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipc_array[3] < goods_p5_array[4])
				{
					p5_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p5_array[4] = checked(goods_p5_array[4] - p5_num_shipped);
					shipc_array[2] = 5;
				}
				else
				{
					p5_num_shipped = goods_p5_array[4];
					shipc_array[1] = checked(shipc_array[1] + goods_p5_array[4]);
					goods_p5_array[4] = 0;
					shipc_array[2] = 5;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Coffee for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_coffee_via_wharf()
		{
			if (current_player == 2)
			{
				p2_num_shipped = goods_p2_array[2];
				goods_p2_array[2] = 0;
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p2_name, "is using their manned Wharf to ship all their Coffee."), 361);
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Coffee for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				p3_num_shipped = goods_p3_array[2];
				goods_p3_array[2] = 0;
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p3_name, "is using their manned Wharf to ship all their Coffee."), 361);
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Coffee for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				p4_num_shipped = goods_p4_array[2];
				goods_p4_array[2] = 0;
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p4_name, "is using their manned Wharf to ship all their Coffee."), 361);
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Coffee for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				p5_num_shipped = goods_p5_array[2];
				goods_p5_array[2] = 0;
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p5_name, "is using their manned Wharf to ship all their Coffee."), 361);
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Coffee for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_corn()
		{
			update_ship_cargo();
			p1_num_shipped = 0;
			if (need_to_pick_ship)
			{
				if (p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(goods_p1_array[2] > 0 & corn_ship_available))
			{
				check_for_building(361);
				if (found_building && goods_p1_array[2] > 0 & (corn_ship_full | !empty_ship_available) & !p1_used_wharf)
				{
					ready_to_ship_corn = true;
					load_wharf();
				}
				if (!(goods_to_ship & empty_ship_available & goods_p1_array[2] > 0 & !corn_ship_full))
				{
					if (need_to_pick_ship & !p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					confirmbox_plant("Are you sure you want to ship your Corn?", 30);
					if (confirmed)
					{
						formtitle("p1", "Captain's Phase - Choose a ship to load");
						make_player_goods_buttons_inactive();
						make_ship_pics_active();
						infobox_role("Choose the ship that you want to load with your Corn", "role_captain");
						need_to_pick_ship = true;
						ready_to_ship_corn = true;
					}
				}
			}
			else
			{
				confirmbox_plant("Are you sure you want to ship your Corn?", 30);
				if (confirmed)
				{
					make_player_goods_buttons_inactive();
					if (corn_shipnum == 1)
					{
						if (goods_p1_array[2] <= shipa_array[3])
						{
							shipa_array[1] = checked(shipa_array[1] + goods_p1_array[2]);
							p1_num_shipped = goods_p1_array[2];
							goods_p1_array[2] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[2] > shipa_array[3])
						{
							shipa_array[1] = shipa_array[0];
							goods_p1_array[2] = checked(goods_p1_array[2] - shipa_array[3]);
							p1_num_shipped = shipa_array[3];
							end_shipping_turn_p1();
						}
					}
					if (corn_shipnum == 2)
					{
						if (goods_p1_array[2] <= shipb_array[3])
						{
							shipb_array[1] = checked(shipb_array[1] + goods_p1_array[2]);
							p1_num_shipped = goods_p1_array[2];
							goods_p1_array[2] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[2] > shipb_array[3])
						{
							shipb_array[1] = shipb_array[0];
							goods_p1_array[2] = checked(goods_p1_array[2] - shipb_array[3]);
							p1_num_shipped = shipb_array[3];
							end_shipping_turn_p1();
						}
					}
					if (corn_shipnum == 3)
					{
						if (goods_p1_array[2] <= shipc_array[3])
						{
							shipc_array[1] = checked(shipc_array[1] + goods_p1_array[2]);
							p1_num_shipped = goods_p1_array[2];
							goods_p1_array[2] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[2] > shipc_array[3])
						{
							shipc_array[1] = shipc_array[0];
							goods_p1_array[2] = checked(goods_p1_array[2] - shipc_array[3]);
							p1_num_shipped = shipc_array[3];
							end_shipping_turn_p1();
						}
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					infobox_role(string.Concat("You shipped your Corn for", Conversion.Str(p1_num_shipped), " Victory Points"), "role_captain");
					update_all_labels();
				}
			}
		}

		public void ship_corn_via_shipa()
		{
			if (current_player == 2)
			{
				if (shipa_array[3] < goods_p2_array[2])
				{
					p2_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p2_array[2] = checked(goods_p2_array[2] - p2_num_shipped);
					shipa_array[2] = 3;
				}
				else
				{
					p2_num_shipped = goods_p2_array[2];
					shipa_array[1] = checked(shipa_array[1] + goods_p2_array[2]);
					goods_p2_array[2] = 0;
					shipa_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Corn for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipa_array[3] < goods_p3_array[2])
				{
					p3_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p3_array[2] = checked(goods_p3_array[2] - p3_num_shipped);
					shipa_array[2] = 3;
				}
				else
				{
					p3_num_shipped = goods_p3_array[2];
					shipa_array[1] = checked(shipa_array[1] + goods_p3_array[2]);
					goods_p3_array[2] = 0;
					shipa_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Corn for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipa_array[3] < goods_p4_array[2])
				{
					p4_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p4_array[2] = checked(goods_p4_array[2] - p4_num_shipped);
					shipa_array[2] = 3;
				}
				else
				{
					p4_num_shipped = goods_p4_array[2];
					shipa_array[1] = checked(shipa_array[1] + goods_p4_array[2]);
					goods_p4_array[2] = 0;
					shipa_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Corn for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipa_array[3] < goods_p5_array[2])
				{
					p5_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p5_array[2] = checked(goods_p5_array[2] - p5_num_shipped);
					shipa_array[2] = 3;
				}
				else
				{
					p5_num_shipped = goods_p5_array[2];
					shipa_array[1] = checked(shipa_array[1] + goods_p5_array[2]);
					goods_p5_array[2] = 0;
					shipa_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Corn for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_corn_via_shipb()
		{
			if (current_player == 2)
			{
				if (shipb_array[3] < goods_p2_array[2])
				{
					p2_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p2_array[2] = checked(goods_p2_array[2] - p2_num_shipped);
					shipb_array[2] = 3;
				}
				else
				{
					p2_num_shipped = goods_p2_array[2];
					shipb_array[1] = checked(shipb_array[1] + goods_p2_array[2]);
					goods_p2_array[2] = 0;
					shipb_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Corn for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipb_array[3] < goods_p3_array[2])
				{
					p3_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p3_array[2] = checked(goods_p3_array[2] - p3_num_shipped);
					shipb_array[2] = 3;
				}
				else
				{
					p3_num_shipped = goods_p3_array[2];
					shipb_array[1] = checked(shipb_array[1] + goods_p3_array[2]);
					goods_p3_array[2] = 0;
					shipb_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Corn for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipb_array[3] < goods_p4_array[2])
				{
					p4_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p4_array[2] = checked(goods_p4_array[2] - p4_num_shipped);
					shipb_array[2] = 3;
				}
				else
				{
					p4_num_shipped = goods_p4_array[2];
					shipb_array[1] = checked(shipb_array[1] + goods_p4_array[2]);
					goods_p4_array[2] = 0;
					shipb_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Corn for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipb_array[3] < goods_p5_array[2])
				{
					p5_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p5_array[2] = checked(goods_p5_array[2] - p5_num_shipped);
					shipb_array[2] = 3;
				}
				else
				{
					p5_num_shipped = goods_p5_array[2];
					shipb_array[1] = checked(shipb_array[1] + goods_p5_array[2]);
					goods_p5_array[2] = 0;
					shipb_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Corn for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_corn_via_shipc()
		{
			if (current_player == 2)
			{
				if (shipc_array[3] < goods_p2_array[2])
				{
					p2_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p2_array[2] = checked(goods_p2_array[2] - p2_num_shipped);
					shipc_array[2] = 3;
				}
				else
				{
					p2_num_shipped = goods_p2_array[2];
					shipc_array[1] = checked(shipc_array[1] + goods_p2_array[2]);
					goods_p2_array[2] = 0;
					shipc_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Corn for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipc_array[3] < goods_p3_array[2])
				{
					p3_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p3_array[2] = checked(goods_p3_array[2] - p3_num_shipped);
					shipc_array[2] = 3;
				}
				else
				{
					p3_num_shipped = goods_p3_array[2];
					shipc_array[1] = checked(shipc_array[1] + goods_p3_array[2]);
					goods_p3_array[2] = 0;
					shipc_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Corn for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipc_array[3] < goods_p4_array[2])
				{
					p4_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p4_array[2] = checked(goods_p4_array[2] - p4_num_shipped);
					shipc_array[2] = 3;
				}
				else
				{
					p4_num_shipped = goods_p4_array[2];
					shipc_array[1] = checked(shipc_array[1] + goods_p4_array[2]);
					goods_p4_array[2] = 0;
					shipc_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Corn for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipc_array[3] < goods_p5_array[2])
				{
					p5_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p5_array[2] = checked(goods_p5_array[2] - p5_num_shipped);
					shipc_array[2] = 3;
				}
				else
				{
					p5_num_shipped = goods_p5_array[2];
					shipc_array[1] = checked(shipc_array[1] + goods_p5_array[2]);
					goods_p5_array[2] = 0;
					shipc_array[2] = 3;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Corn for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_corn_via_wharf()
		{
			if (current_player == 2)
			{
				p2_num_shipped = goods_p2_array[2];
				goods_p2_array[2] = 0;
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p2_name, "is using their manned Wharf to ship all their Corn."), 361);
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Corn for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				p3_num_shipped = goods_p3_array[2];
				goods_p3_array[2] = 0;
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p3_name, "is using their manned Wharf to ship all their Corn."), 361);
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Corn for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				p4_num_shipped = goods_p4_array[2];
				goods_p4_array[2] = 0;
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p4_name, "is using their manned Wharf to ship all their Corn."), 361);
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Corn for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				p5_num_shipped = goods_p5_array[2];
				goods_p5_array[2] = 0;
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p5_name, "is using their manned Wharf to ship all their Corn."), 361);
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Corn for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_indigo()
		{
			update_ship_cargo();
			p1_num_shipped = 0;
			if (need_to_pick_ship)
			{
				if (p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(goods_p1_array[0] > 0 & indigo_ship_available))
			{
				check_for_building(361);
				if (found_building && goods_p1_array[0] > 0 & (indigo_ship_full | !empty_ship_available) & !p1_used_wharf)
				{
					ready_to_ship_indigo = true;
					load_wharf();
				}
				if (!(goods_to_ship & empty_ship_available & goods_p1_array[0] > 0 & !indigo_ship_full))
				{
					if (need_to_pick_ship & !p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					confirmbox_plant("Are you sure you want to ship your Indigo?", 10);
					if (confirmed)
					{
						formtitle("p1", "Captain's Phase - Choose a ship to load");
						make_player_goods_buttons_inactive();
						make_ship_pics_active();
						infobox_role("Choose the ship that you want to load with your Indigo", "role_captain");
						need_to_pick_ship = true;
						ready_to_ship_indigo = true;
					}
				}
			}
			else
			{
				confirmbox_plant("Are you sure you want to ship your Indigo?", 10);
				if (confirmed)
				{
					make_player_goods_buttons_inactive();
					if (indigo_shipnum == 1)
					{
						if (goods_p1_array[0] <= shipa_array[3])
						{
							shipa_array[1] = checked(shipa_array[1] + goods_p1_array[0]);
							p1_num_shipped = goods_p1_array[0];
							goods_p1_array[0] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[0] > shipa_array[3])
						{
							shipa_array[1] = shipa_array[0];
							goods_p1_array[0] = checked(goods_p1_array[0] - shipa_array[3]);
							p1_num_shipped = shipa_array[3];
							end_shipping_turn_p1();
						}
					}
					if (indigo_shipnum == 2)
					{
						if (goods_p1_array[0] <= shipb_array[3])
						{
							shipb_array[1] = checked(shipb_array[1] + goods_p1_array[0]);
							p1_num_shipped = goods_p1_array[0];
							goods_p1_array[0] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[0] > shipb_array[3])
						{
							shipb_array[1] = shipb_array[0];
							goods_p1_array[0] = checked(goods_p1_array[0] - shipb_array[3]);
							p1_num_shipped = shipb_array[3];
							end_shipping_turn_p1();
						}
					}
					if (indigo_shipnum == 3)
					{
						if (goods_p1_array[0] <= shipc_array[3])
						{
							shipc_array[1] = checked(shipc_array[1] + goods_p1_array[0]);
							p1_num_shipped = goods_p1_array[0];
							goods_p1_array[0] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[0] > shipc_array[3])
						{
							shipc_array[1] = shipc_array[0];
							goods_p1_array[0] = checked(goods_p1_array[0] - shipc_array[3]);
							p1_num_shipped = shipc_array[3];
							end_shipping_turn_p1();
						}
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					infobox_role(string.Concat("You shipped your Indigo for", Conversion.Str(p1_num_shipped), " Victory Points"), "role_captain");
					update_all_labels();
				}
			}
		}

		public void ship_indigo_via_shipa()
		{
			if (current_player == 2)
			{
				if (shipa_array[3] < goods_p2_array[0])
				{
					p2_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p2_array[0] = checked(goods_p2_array[0] - p2_num_shipped);
					shipa_array[2] = 1;
				}
				else
				{
					p2_num_shipped = goods_p2_array[0];
					shipa_array[1] = checked(shipa_array[1] + goods_p2_array[0]);
					goods_p2_array[0] = 0;
					shipa_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their indigo for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipa_array[3] < goods_p3_array[0])
				{
					p3_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p3_array[0] = checked(goods_p3_array[0] - p3_num_shipped);
					shipa_array[2] = 1;
				}
				else
				{
					p3_num_shipped = goods_p3_array[0];
					shipa_array[1] = checked(shipa_array[1] + goods_p3_array[0]);
					goods_p3_array[0] = 0;
					shipa_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their indigo for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipa_array[3] < goods_p4_array[0])
				{
					p4_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p4_array[0] = checked(goods_p4_array[0] - p4_num_shipped);
					shipa_array[2] = 1;
				}
				else
				{
					p4_num_shipped = goods_p4_array[0];
					shipa_array[1] = checked(shipa_array[1] + goods_p4_array[0]);
					goods_p4_array[0] = 0;
					shipa_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their indigo for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipa_array[3] < goods_p5_array[0])
				{
					p5_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p5_array[0] = checked(goods_p5_array[0] - p5_num_shipped);
					shipa_array[2] = 1;
				}
				else
				{
					p5_num_shipped = goods_p5_array[0];
					shipa_array[1] = checked(shipa_array[1] + goods_p5_array[0]);
					goods_p5_array[0] = 0;
					shipa_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their indigo for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_indigo_via_shipb()
		{
			if (current_player == 2)
			{
				if (shipb_array[3] < goods_p2_array[0])
				{
					p2_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p2_array[0] = checked(goods_p2_array[0] - p2_num_shipped);
					shipb_array[2] = 1;
				}
				else
				{
					p2_num_shipped = goods_p2_array[0];
					shipb_array[1] = checked(shipb_array[1] + goods_p2_array[0]);
					goods_p2_array[0] = 0;
					shipb_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their indigo for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipb_array[3] < goods_p3_array[0])
				{
					p3_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p3_array[0] = checked(goods_p3_array[0] - p3_num_shipped);
					shipb_array[2] = 1;
				}
				else
				{
					p3_num_shipped = goods_p3_array[0];
					shipb_array[1] = checked(shipb_array[1] + goods_p3_array[0]);
					goods_p3_array[0] = 0;
					shipb_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their indigo for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipb_array[3] < goods_p4_array[0])
				{
					p4_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p4_array[0] = checked(goods_p4_array[0] - p4_num_shipped);
					shipb_array[2] = 1;
				}
				else
				{
					p4_num_shipped = goods_p4_array[0];
					shipb_array[1] = checked(shipb_array[1] + goods_p4_array[0]);
					goods_p4_array[0] = 0;
					shipb_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their indigo for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipb_array[3] < goods_p5_array[0])
				{
					p5_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p5_array[0] = checked(goods_p5_array[0] - p5_num_shipped);
					shipb_array[2] = 1;
				}
				else
				{
					p5_num_shipped = goods_p5_array[0];
					shipb_array[1] = checked(shipb_array[1] + goods_p5_array[0]);
					goods_p5_array[0] = 0;
					shipb_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their indigo for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_indigo_via_shipc()
		{
			if (current_player == 2)
			{
				if (shipc_array[3] < goods_p2_array[0])
				{
					p2_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p2_array[0] = checked(goods_p2_array[0] - p2_num_shipped);
					shipc_array[2] = 1;
				}
				else
				{
					p2_num_shipped = goods_p2_array[0];
					shipc_array[1] = checked(shipc_array[1] + goods_p2_array[0]);
					goods_p2_array[0] = 0;
					shipc_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their indigo for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipc_array[3] < goods_p3_array[0])
				{
					p3_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p3_array[0] = checked(goods_p3_array[0] - p3_num_shipped);
					shipc_array[2] = 1;
				}
				else
				{
					p3_num_shipped = goods_p3_array[0];
					shipc_array[1] = checked(shipc_array[1] + goods_p3_array[0]);
					goods_p3_array[0] = 0;
					shipc_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their indigo for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipc_array[3] < goods_p4_array[0])
				{
					p4_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p4_array[0] = checked(goods_p4_array[0] - p4_num_shipped);
					shipc_array[2] = 1;
				}
				else
				{
					p4_num_shipped = goods_p4_array[0];
					shipc_array[1] = checked(shipc_array[1] + goods_p4_array[0]);
					goods_p4_array[0] = 0;
					shipc_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their indigo for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipc_array[3] < goods_p5_array[0])
				{
					p5_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p5_array[0] = checked(goods_p5_array[0] - p5_num_shipped);
					shipc_array[2] = 1;
				}
				else
				{
					p5_num_shipped = goods_p5_array[0];
					shipc_array[1] = checked(shipc_array[1] + goods_p5_array[0]);
					goods_p5_array[0] = 0;
					shipc_array[2] = 1;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their indigo for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_Indigo_via_wharf()
		{
			if (current_player == 2)
			{
				p2_num_shipped = goods_p2_array[2];
				goods_p2_array[2] = 0;
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p2_name, "is using their manned Wharf to ship all their Indigo."), 361);
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Indigo for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				p3_num_shipped = goods_p3_array[2];
				goods_p3_array[2] = 0;
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p3_name, "is using their manned Wharf to ship all their Indigo."), 361);
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Indigo for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				p4_num_shipped = goods_p4_array[2];
				goods_p4_array[2] = 0;
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p4_name, "is using their manned Wharf to ship all their Indigo."), 361);
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Indigo for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				p5_num_shipped = goods_p5_array[2];
				goods_p5_array[2] = 0;
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p5_name, "is using their manned Wharf to ship all their Indigo."), 361);
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Indigo for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_sugar()
		{
			update_ship_cargo();
			p1_num_shipped = 0;
			if (need_to_pick_ship)
			{
				if (p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(goods_p1_array[1] > 0 & sugar_ship_available))
			{
				check_for_building(361);
				if (found_building && goods_p1_array[1] > 0 & (sugar_ship_full | !empty_ship_available) & !p1_used_wharf)
				{
					ready_to_ship_sugar = true;
					load_wharf();
				}
				if (!(goods_to_ship & empty_ship_available & goods_p1_array[1] > 0 & !sugar_ship_full))
				{
					if (need_to_pick_ship & !p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					confirmbox_plant("Are you sure you want to ship your Sugar?", 20);
					if (confirmed)
					{
						formtitle("p1", "Captain's Phase - Choose a ship to load");
						make_player_goods_buttons_inactive();
						make_ship_pics_active();
						infobox_role("Choose the ship that you want to load with your Sugar", "role_captain");
						need_to_pick_ship = true;
						ready_to_ship_sugar = true;
					}
				}
			}
			else
			{
				confirmbox_plant("Are you sure you want to ship your Sugar", 20);
				if (confirmed)
				{
					make_player_goods_buttons_inactive();
					if (sugar_shipnum == 1)
					{
						if (goods_p1_array[1] <= shipa_array[3])
						{
							shipa_array[1] = checked(shipa_array[1] + goods_p1_array[1]);
							p1_num_shipped = goods_p1_array[1];
							goods_p1_array[1] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[1] > shipa_array[3])
						{
							shipa_array[1] = shipa_array[0];
							goods_p1_array[1] = checked(goods_p1_array[1] - shipa_array[3]);
							p1_num_shipped = shipa_array[3];
							end_shipping_turn_p1();
						}
					}
					if (sugar_shipnum == 2)
					{
						if (goods_p1_array[1] <= shipb_array[3])
						{
							shipb_array[1] = checked(shipb_array[1] + goods_p1_array[1]);
							p1_num_shipped = goods_p1_array[1];
							goods_p1_array[1] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[1] > shipb_array[3])
						{
							shipb_array[1] = shipb_array[0];
							goods_p1_array[1] = checked(goods_p1_array[1] - shipb_array[3]);
							p1_num_shipped = shipb_array[3];
							end_shipping_turn_p1();
						}
					}
					if (sugar_shipnum == 3)
					{
						if (goods_p1_array[1] <= shipc_array[3])
						{
							shipc_array[1] = checked(shipc_array[1] + goods_p1_array[1]);
							p1_num_shipped = goods_p1_array[1];
							goods_p1_array[1] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[1] > shipc_array[3])
						{
							shipc_array[1] = shipc_array[0];
							goods_p1_array[1] = checked(goods_p1_array[1] - shipc_array[3]);
							p1_num_shipped = shipc_array[3];
							end_shipping_turn_p1();
						}
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					infobox_role(string.Concat("You shipped your Sugar for", Conversion.Str(p1_num_shipped), " Victory Points"), "role_captain");
					update_all_labels();
				}
			}
		}

		public void ship_sugar_via_shipa()
		{
			if (current_player == 2)
			{
				if (shipa_array[3] < goods_p2_array[1])
				{
					p2_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p2_array[1] = checked(goods_p2_array[1] - p2_num_shipped);
					shipa_array[2] = 2;
				}
				else
				{
					p2_num_shipped = goods_p2_array[1];
					shipa_array[1] = checked(shipa_array[1] + goods_p2_array[1]);
					goods_p2_array[1] = 0;
					shipa_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their sugar for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipa_array[3] < goods_p3_array[1])
				{
					p3_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p3_array[1] = checked(goods_p3_array[1] - p3_num_shipped);
					shipa_array[2] = 2;
				}
				else
				{
					p3_num_shipped = goods_p3_array[1];
					shipa_array[1] = checked(shipa_array[1] + goods_p3_array[1]);
					goods_p3_array[1] = 0;
					shipa_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their sugar for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipa_array[3] < goods_p4_array[1])
				{
					p4_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p4_array[1] = checked(goods_p4_array[1] - p4_num_shipped);
					shipa_array[2] = 2;
				}
				else
				{
					p4_num_shipped = goods_p4_array[1];
					shipa_array[1] = checked(shipa_array[1] + goods_p4_array[1]);
					goods_p4_array[1] = 0;
					shipa_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their sugar for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipa_array[3] < goods_p5_array[1])
				{
					p5_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p5_array[1] = checked(goods_p5_array[1] - p5_num_shipped);
					shipa_array[2] = 2;
				}
				else
				{
					p5_num_shipped = goods_p5_array[1];
					shipa_array[1] = checked(shipa_array[1] + goods_p5_array[1]);
					goods_p5_array[1] = 0;
					shipa_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their sugar for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_sugar_via_shipb()
		{
			if (current_player == 2)
			{
				if (shipb_array[3] < goods_p2_array[1])
				{
					p2_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p2_array[1] = checked(goods_p2_array[1] - p2_num_shipped);
					shipb_array[2] = 2;
				}
				else
				{
					p2_num_shipped = goods_p2_array[1];
					shipb_array[1] = checked(shipb_array[1] + goods_p2_array[1]);
					goods_p2_array[1] = 0;
					shipb_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their sugar for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipb_array[3] < goods_p3_array[1])
				{
					p3_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p3_array[1] = checked(goods_p3_array[1] - p3_num_shipped);
					shipb_array[2] = 2;
				}
				else
				{
					p3_num_shipped = goods_p3_array[1];
					shipb_array[1] = checked(shipb_array[1] + goods_p3_array[1]);
					goods_p3_array[1] = 0;
					shipb_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their sugar for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipb_array[3] < goods_p4_array[1])
				{
					p4_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p4_array[1] = checked(goods_p4_array[1] - p4_num_shipped);
					shipb_array[2] = 2;
				}
				else
				{
					p4_num_shipped = goods_p4_array[1];
					shipb_array[1] = checked(shipb_array[1] + goods_p4_array[1]);
					goods_p4_array[1] = 0;
					shipb_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their sugar for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipb_array[3] < goods_p5_array[1])
				{
					p5_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p5_array[1] = checked(goods_p5_array[1] - p5_num_shipped);
					shipb_array[2] = 2;
				}
				else
				{
					p5_num_shipped = goods_p5_array[1];
					shipb_array[1] = checked(shipb_array[1] + goods_p5_array[1]);
					goods_p5_array[1] = 0;
					shipb_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their sugar for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_sugar_via_shipc()
		{
			if (current_player == 2)
			{
				if (shipc_array[3] < goods_p2_array[1])
				{
					p2_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p2_array[1] = checked(goods_p2_array[1] - p2_num_shipped);
					shipc_array[2] = 2;
				}
				else
				{
					p2_num_shipped = goods_p2_array[1];
					shipc_array[1] = checked(shipc_array[1] + goods_p2_array[1]);
					goods_p2_array[1] = 0;
					shipc_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their sugar for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipc_array[3] < goods_p3_array[1])
				{
					p3_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p3_array[1] = checked(goods_p3_array[1] - p3_num_shipped);
					shipc_array[2] = 2;
				}
				else
				{
					p3_num_shipped = goods_p3_array[1];
					shipc_array[1] = checked(shipc_array[1] + goods_p3_array[1]);
					goods_p3_array[1] = 0;
					shipc_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their sugar for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipc_array[3] < goods_p4_array[1])
				{
					p4_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p4_array[1] = checked(goods_p4_array[1] - p4_num_shipped);
					shipc_array[2] = 2;
				}
				else
				{
					p4_num_shipped = goods_p4_array[1];
					shipc_array[1] = checked(shipc_array[1] + goods_p4_array[1]);
					goods_p4_array[1] = 0;
					shipc_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their sugar for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipc_array[3] < goods_p5_array[1])
				{
					p5_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p5_array[1] = checked(goods_p5_array[1] - p5_num_shipped);
					shipc_array[2] = 2;
				}
				else
				{
					p5_num_shipped = goods_p5_array[1];
					shipc_array[1] = checked(shipc_array[1] + goods_p5_array[1]);
					goods_p5_array[1] = 0;
					shipc_array[2] = 2;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their sugar for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_sugar_via_wharf()
		{
			if (current_player == 2)
			{
				p2_num_shipped = goods_p2_array[2];
				goods_p2_array[2] = 0;
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p2_name, "is using their manned Wharf to ship all their Sugar."), 361);
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Sugar for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				p3_num_shipped = goods_p3_array[2];
				goods_p3_array[2] = 0;
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p3_name, "is using their manned Wharf to ship all their Sugar."), 361);
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Sugar for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				p4_num_shipped = goods_p4_array[2];
				goods_p4_array[2] = 0;
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p4_name, "is using their manned Wharf to ship all their Sugar."), 361);
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Sugar for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				p5_num_shipped = goods_p5_array[2];
				goods_p5_array[2] = 0;
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p5_name, "is using their manned Wharf to ship all their Sugar."), 361);
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Sugar for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_tobacco()
		{
			update_ship_cargo();
			p1_num_shipped = 0;
			if (need_to_pick_ship)
			{
				if (p1_done_shipping)
				{
					Interaction.MsgBox("You've already shipped this turn. Your turn is over.", 0, null);
				}
				else
				{
					Interaction.MsgBox("You need to choose a ship to load.", 0, null);
				}
			}
			else if (p1_done_shipping)
			{
				Interaction.MsgBox("Your shipping turn is over.", 0, null);
			}
			else if (!(goods_p1_array[3] > 0 & tobacco_ship_available))
			{
				check_for_building(361);
				if (found_building && goods_p1_array[3] > 0 & (tobacco_ship_full | !empty_ship_available) & !p1_used_wharf)
				{
					ready_to_ship_tobacco = true;
					load_wharf();
				}
				if (!(goods_to_ship & empty_ship_available & goods_p1_array[3] > 0 & !tobacco_ship_full))
				{
					if (need_to_pick_ship & !p1_done_shipping)
					{
						Interaction.MsgBox("You need to pick a ship to load.", 0, null);
					}
					if (p1_done_shipping)
					{
						Interaction.MsgBox("Your shipping turn is over.", 0, null);
					}
				}
				else
				{
					confirmbox_plant("Are you sure you want to ship your Tobacco?", 40);
					if (confirmed)
					{
						formtitle("p1", "Captain's Phase - Choose a ship to load");
						make_player_goods_buttons_inactive();
						make_ship_pics_active();
						infobox_role("Choose the ship that you want to load with your Tobacco", "role_captain");
						need_to_pick_ship = true;
						ready_to_ship_tobacco = true;
					}
				}
			}
			else
			{
				confirmbox_plant("Are you sure you want to ship your Tobacco?", 40);
				if (confirmed)
				{
					make_player_goods_buttons_inactive();
					if (tobacco_shipnum == 1)
					{
						if (goods_p1_array[3] <= shipa_array[3])
						{
							shipa_array[1] = checked(shipa_array[1] + goods_p1_array[3]);
							p1_num_shipped = goods_p1_array[3];
							goods_p1_array[3] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[3] > shipa_array[3])
						{
							shipa_array[1] = shipa_array[0];
							goods_p1_array[3] = checked(goods_p1_array[3] - shipa_array[3]);
							p1_num_shipped = shipa_array[3];
							end_shipping_turn_p1();
						}
					}
					if (tobacco_shipnum == 2)
					{
						if (goods_p1_array[3] <= shipb_array[3])
						{
							shipb_array[1] = checked(shipb_array[1] + goods_p1_array[3]);
							p1_num_shipped = goods_p1_array[3];
							goods_p1_array[3] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[3] > shipb_array[3])
						{
							shipb_array[1] = shipb_array[0];
							goods_p1_array[3] = checked(goods_p1_array[3] - shipb_array[3]);
							p1_num_shipped = shipb_array[3];
							end_shipping_turn_p1();
						}
					}
					if (tobacco_shipnum == 3)
					{
						if (goods_p1_array[3] <= shipc_array[3])
						{
							shipc_array[1] = checked(shipc_array[1] + goods_p1_array[3]);
							p1_num_shipped = goods_p1_array[3];
							goods_p1_array[3] = 0;
							end_shipping_turn_p1();
						}
						if (goods_p1_array[3] > shipc_array[3])
						{
							shipc_array[1] = shipc_array[0];
							goods_p1_array[3] = checked(goods_p1_array[3] - shipc_array[3]);
							p1_num_shipped = shipc_array[3];
							end_shipping_turn_p1();
						}
					}
					if (current_role_chooser == 1 && !captain_bonus_taken)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						captain_bonus_taken = true;
					}
					check_for_building(351);
					if (found_building)
					{
						p1_num_shipped = checked(p1_num_shipped + 1);
						infobox_building1("Your manned Harbor generated +1 Victory Point for shipping.", 351);
					}
					vpchips_p1 = checked(vpchips_p1 + p1_num_shipped);
					update_vp_bank_num_via_shipping();
					make_player_goods_buttons_inactive();
					make_ship_pics_inactive();
					infobox_role(string.Concat("You shipped your Tobacco for", Conversion.Str(p1_num_shipped), " Victory Points"), "role_captain");
					update_all_labels();
				}
			}
		}

		public void ship_tobacco_via_shipa()
		{
			if (current_player == 2)
			{
				if (shipa_array[3] < goods_p2_array[3])
				{
					p2_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p2_array[3] = checked(goods_p2_array[3] - p2_num_shipped);
					shipa_array[2] = 4;
				}
				else
				{
					p2_num_shipped = goods_p2_array[3];
					shipa_array[1] = checked(shipa_array[1] + goods_p2_array[3]);
					shipa_array[2] = 4;
					goods_p2_array[3] = 0;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their tobacco for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipa_array[3] < goods_p3_array[3])
				{
					p3_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p3_array[3] = checked(goods_p3_array[3] - p3_num_shipped);
					shipa_array[2] = 4;
				}
				else
				{
					p3_num_shipped = goods_p3_array[3];
					shipa_array[1] = checked(shipa_array[1] + goods_p3_array[3]);
					goods_p3_array[3] = 0;
					shipa_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their tobacco for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipa_array[3] < goods_p4_array[3])
				{
					p4_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p4_array[3] = checked(goods_p4_array[3] - p4_num_shipped);
					shipa_array[2] = 4;
				}
				else
				{
					p4_num_shipped = goods_p4_array[3];
					shipa_array[1] = checked(shipa_array[1] + goods_p4_array[3]);
					goods_p4_array[3] = 0;
					shipa_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their tobacco for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipa_array[3] < goods_p5_array[3])
				{
					p5_num_shipped = shipa_array[3];
					shipa_array[1] = shipa_array[0];
					goods_p5_array[3] = checked(goods_p5_array[3] - p5_num_shipped);
					shipa_array[2] = 4;
				}
				else
				{
					p5_num_shipped = goods_p5_array[3];
					shipa_array[1] = checked(shipa_array[1] + goods_p5_array[3]);
					goods_p5_array[3] = 0;
					shipa_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their tobacco for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_tobacco_via_shipb()
		{
			if (current_player == 2)
			{
				if (shipb_array[3] < goods_p2_array[3])
				{
					p2_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p2_array[3] = checked(goods_p2_array[3] - p2_num_shipped);
					shipb_array[2] = 4;
				}
				else
				{
					p2_num_shipped = goods_p2_array[3];
					shipb_array[1] = checked(shipb_array[1] + goods_p2_array[3]);
					shipb_array[2] = 4;
					goods_p2_array[3] = 0;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their tobacco for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipb_array[3] < goods_p3_array[3])
				{
					p3_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p3_array[3] = checked(goods_p3_array[3] - p3_num_shipped);
					shipb_array[2] = 4;
				}
				else
				{
					p3_num_shipped = goods_p3_array[3];
					shipb_array[1] = checked(shipb_array[1] + goods_p3_array[3]);
					goods_p3_array[3] = 0;
					shipb_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their tobacco for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipb_array[3] < goods_p4_array[3])
				{
					p4_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p4_array[3] = checked(goods_p4_array[3] - p4_num_shipped);
					shipb_array[2] = 4;
				}
				else
				{
					p4_num_shipped = goods_p4_array[3];
					shipb_array[1] = checked(shipb_array[1] + goods_p4_array[3]);
					goods_p4_array[3] = 0;
					shipb_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their tobacco for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipb_array[3] < goods_p5_array[3])
				{
					p5_num_shipped = shipb_array[3];
					shipb_array[1] = shipb_array[0];
					goods_p5_array[3] = checked(goods_p5_array[3] - p5_num_shipped);
					shipb_array[2] = 4;
				}
				else
				{
					p5_num_shipped = goods_p5_array[3];
					shipb_array[1] = checked(shipb_array[1] + goods_p5_array[3]);
					goods_p5_array[3] = 0;
					shipb_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their tobacco for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_tobacco_via_shipc()
		{
			if (current_player == 2)
			{
				if (shipc_array[3] < goods_p2_array[3])
				{
					p2_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p2_array[3] = checked(goods_p2_array[3] - p2_num_shipped);
					shipc_array[2] = 4;
				}
				else
				{
					p2_num_shipped = goods_p2_array[3];
					shipc_array[1] = checked(shipc_array[1] + goods_p2_array[3]);
					shipc_array[2] = 4;
					goods_p2_array[3] = 0;
				}
				update_ship_cargo();
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their tobacco for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				if (shipc_array[3] < goods_p3_array[3])
				{
					p3_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p3_array[3] = checked(goods_p3_array[3] - p3_num_shipped);
					shipc_array[2] = 4;
				}
				else
				{
					p3_num_shipped = goods_p3_array[3];
					shipc_array[1] = checked(shipc_array[1] + goods_p3_array[3]);
					goods_p3_array[3] = 0;
					shipc_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their tobacco for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				if (shipc_array[3] < goods_p4_array[3])
				{
					p4_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p4_array[3] = checked(goods_p4_array[3] - p4_num_shipped);
					shipc_array[2] = 4;
				}
				else
				{
					p4_num_shipped = goods_p4_array[3];
					shipc_array[1] = checked(shipc_array[1] + goods_p4_array[3]);
					goods_p4_array[3] = 0;
					shipc_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their tobacco for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				if (shipc_array[3] < goods_p5_array[3])
				{
					p5_num_shipped = shipc_array[3];
					shipc_array[1] = shipc_array[0];
					goods_p5_array[3] = checked(goods_p5_array[3] - p5_num_shipped);
					shipc_array[2] = 4;
				}
				else
				{
					p5_num_shipped = goods_p5_array[3];
					shipc_array[1] = checked(shipc_array[1] + goods_p5_array[3]);
					goods_p5_array[3] = 0;
					shipc_array[2] = 4;
				}
				update_ship_cargo();
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their tobacco for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		public void ship_tobacco_via_wharf()
		{
			if (current_player == 2)
			{
				p2_num_shipped = goods_p2_array[2];
				goods_p2_array[2] = 0;
				if (current_role_chooser == 2 & !captain_bonus_taken)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p2_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				check_for_building(351);
				if (found_building)
				{
					p2_num_shipped = checked(p2_num_shipped + 1);
					infobox_building1(string.Concat(p2_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p2 = checked(vpchips_p2 + p2_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p2_name, " shipped their Tobacco for", Conversion.Str(p2_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 3)
			{
				p3_num_shipped = goods_p3_array[2];
				goods_p3_array[2] = 0;
				if (current_role_chooser == 3 & !captain_bonus_taken)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p3_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				check_for_building(351);
				if (found_building)
				{
					p3_num_shipped = checked(p3_num_shipped + 1);
					infobox_building1(string.Concat(p3_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p3 = checked(vpchips_p3 + p3_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p3_name, " shipped their Tobacco for", Conversion.Str(p3_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 4)
			{
				p4_num_shipped = goods_p4_array[2];
				goods_p4_array[2] = 0;
				if (current_role_chooser == 4 & !captain_bonus_taken)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p4_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				check_for_building(351);
				if (found_building)
				{
					p4_num_shipped = checked(p4_num_shipped + 1);
					infobox_building1(string.Concat(p4_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p4 = checked(vpchips_p4 + p4_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p4_name, " shipped their Tobacco for", Conversion.Str(p4_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
			if (current_player == 5)
			{
				p5_num_shipped = goods_p5_array[2];
				goods_p5_array[2] = 0;
				if (current_role_chooser == 5 & !captain_bonus_taken)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					captain_bonus_taken = true;
				}
				infobox_building1(string.Concat(p5_name, "is using their manned Wharf to ship all their Tobacco."), 361);
				check_for_building(351);
				if (found_building)
				{
					p5_num_shipped = checked(p5_num_shipped + 1);
					infobox_building1(string.Concat(p5_name, "'s manned Harbor generated +1 Victory Point for shipping."), 351);
				}
				vpchips_p5 = checked(vpchips_p5 + p5_num_shipped);
				update_vp_bank_num_via_shipping();
				infobox_role(string.Concat(p5_name, " shipped their Tobacco for", Conversion.Str(p5_num_shipped), " Victory Point(s)"), "role_captain");
				update_all_labels();
			}
		}

		private void shipa_pic_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipa_slot1_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipa_slot2_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipa_slot3_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipa_slot4_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipa_slot5_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipa_slot6_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipa();
			}
		}

		private void shipb_pic_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot1_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot2_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot3_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot4_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot5_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot6_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipb_slot7_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipb();
			}
		}

		private void shipc_pic_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot1_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot2_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot3_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot4_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot5_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot6_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot7_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		private void shipc_slot8_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_shipc();
			}
		}

		public void shuffle_plantation_tiles()
		{
			counter1 = 0;
			while (counter1 != 48)
			{
				generate_random1(0, 49);
				if (random1 == counter1)
				{
					random1 = checked(random1 + 1);
				}
				tempstring = StringType.FromInteger(plantations_tilebag_array[random1]);
				plantations_tilebag_array[random1] = plantations_tilebag_array[counter1];
				plantations_tilebag_array[counter1] = IntegerType.FromString(tempstring);
				counter1 = checked(counter1 + 1);
			}
		}

		private void start_game_button_Click(object sender, EventArgs e)
		{
			start_game_button.Visible = false;
			start_game_button.Enabled=false;
			next_turn_routine();
			starting_round_next_turn_routine();
		}

		public void start_new_game()
		{
			if (!game_started)
			{
				reset_all_variables();
				determine_setup_parameters();
				shuffle_plantation_tiles();
				draw_plantation_tiles();
				debug_setup_variables();
				update_all_labels();
				game_started = true;
				if (number_of_players == 3)
				{
					MenuItem4.Enabled = true;
					MenuItem5.Enabled = true;
				}
				if (number_of_players == 4)
				{
					MenuItem4.Enabled = true;
					MenuItem5.Enabled = true;
					MenuItem6.Enabled = true;
				}
				if (number_of_players == 5)
				{
					MenuItem4.Enabled = true;
					MenuItem5.Enabled = true;
					MenuItem6.Enabled = true;
					MenuItem7.Enabled = true;
				}
				MenuItem8.Enabled = true;
				tempinteger = dialog_box_OK_timer;
				dialog_box_OK_timer = 5;
				infobox_nopic(String.Format("This will be a {0} player game. {1} you are seat number {2}. Feel free to place all the windows where you would like them, then click Start Game when you are ready.", number_of_players, p1_name, seat_num));
				dialog_box_OK_timer = tempinteger;
				sw.WriteLine("************************************************************************");
				sw.WriteLine("New game started: {0:dd/MM/yyyy}", DateTime.Now);
				sw.WriteLine("   ");
				sw.WriteLine("This will be a {0} player game. {1} you are seat number {2}.", number_of_players, p1_name, seat_num);
				sw.WriteLine("   ");
				if (number_of_players == 3)
				{
					player2_form.Visible = true;
					player3_form.Visible = true;
				}
				if (number_of_players == 4)
				{
					player2_form.Visible = true;
					player3_form.Visible = true;
					player4_form.Visible = true;
				}
				if (number_of_players == 5)
				{
					player2_form.Visible = true;
					player3_form.Visible = true;
					player4_form.Visible = true;
					player5_form.Visible = true;
				}
				Activate();
				make_role_buttons_inactive();
				make_settler_buttons_inactive();
				make_player_goods_buttons_inactive();
				make_ship_pics_inactive();
				make_goods_bank_buttons_inactive();
				make_plantation_pics_inactive();
				make_building_pics_inactive();
				start_game_button.Visible = true;
				start_game_button.Enabled = true;
			}
			else
			{
				Interaction.MsgBox("The game has already started - you need to exit the game to start a new one.", 0, null);
			}
		}

		public void starting_round_next_turn_routine()
		{
			if (current_player != 1 & settler_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & settler_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & settler_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & settler_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & settler_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & mayor_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & mayor_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & mayor_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & mayor_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & mayor_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & trader_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & trader_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & trader_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & trader_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & trader_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & builder_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & builder_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & builder_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & builder_round)
			{
				next_turn_routine();
			}
			if (current_player != 1 & builder_round)
			{
				next_turn_routine();
			}
		}

		public void trade_coffee()
		{
			already_there = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] == 5)
					{
						already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
				check_for_building(241);
				if (found_building)
				{
					already_there = false;
				}
				if (already_there)
				{
					Interaction.MsgBox("coffee is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (goods_p1_array[4] <= 0)
				{
					Interaction.MsgBox("You don't have any coffee to sell.", 0, null);
				}
				else
				{
					counter3 = 4;
					if (current_role_chooser == 1)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(131);
					if (found_building)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(251);
					if (found_building)
					{
						counter3 = checked(counter3 + 2);
					}
					confirmbox_role(string.Concat("Are you sure you want to sell Coffee for", Conversion.Str(counter3), " doubloon(s) total?"), "role_trader");
					if (confirmed)
					{
						finished = false;
						counter1 = 0;
						while (!finished)
						{
							if (trading_house_array[counter1] != 0)
							{
								counter1 = checked(counter1 + 1);
								if (counter1 != 4)
								{
									continue;
								}
								finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								trading_house_array[counter1] = 5;
								goods_p1_array[4] = checked(goods_p1_array[4] - 1);
								counter3 = 4;
								if (current_role_chooser == 1)
								{
									counter3 = checked(counter3 + 1);
								}
								check_for_building(131);
								if (found_building)
								{
									counter3 = checked(counter3 + 1);
									infobox_building1("Your manned Small Market gave you +1 doubloons for your coffee sale.", 131);
								}
								check_for_building(251);
								if (found_building)
								{
									counter3 = checked(counter3 + 2);
									infobox_building1("Your manned Large Market gave you +2 doubloons for your coffee sale.", 131);
								}
								if (counter3 == 1)
								{
									infobox_role("You sold your coffee for 1 doubloon.", "role_trader");
									p1_traded = true;
								}
								if (counter3 > 1 | counter3 < 1)
								{
									infobox_role(string.Concat("You sold your coffee for", Conversion.Str(counter3), " doubloons."), "role_trader");
									p1_traded = true;
								}
								finished = true;
								make_player_goods_buttons_inactive();
								formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						gold_p1 = checked(gold_p1 + counter3);
						update_all_labels();
					}
				}
			}
		}

		public void trade_corn()
		{
			already_there = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] == 3)
					{
						already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
				check_for_building(241);
				if (found_building)
				{
					already_there = false;
				}
				if (already_there)
				{
					Interaction.MsgBox("corn is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (goods_p1_array[2] <= 0)
				{
					Interaction.MsgBox("You don't have any corn to sell.", 0, null);
				}
				else
				{
					counter3 = 0;
					if (current_role_chooser == 1)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(131);
					if (found_building)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(251);
					if (found_building)
					{
						counter3 = checked(counter3 + 2);
					}
					confirmbox_role(string.Concat("Are you sure you want to sell Corn for", Conversion.Str(counter3), " doubloon(s) total?"), "role_trader");
					if (confirmed)
					{
						finished = false;
						counter1 = 0;
						while (!finished)
						{
							if (trading_house_array[counter1] != 0)
							{
								counter1 = checked(counter1 + 1);
								if (counter1 != 4)
								{
									continue;
								}
								finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								trading_house_array[counter1] = 3;
								goods_p1_array[2] = checked(goods_p1_array[2] - 1);
								counter3 = 0;
								if (current_role_chooser == 1)
								{
									counter3 = checked(counter3 + 1);
								}
								check_for_building(131);
								if (found_building)
								{
									counter3 = checked(counter3 + 1);
									infobox_building1("Your manned Small Market gave you +1 doubloons for your corn sale.", 131);
								}
								check_for_building(251);
								if (found_building)
								{
									counter3 = checked(counter3 + 2);
									infobox_building1("Your manned Large Market gave you +2 doubloons for your corn sale.", 131);
								}
								if (counter3 == 1)
								{
									infobox_role("You sold your corn for 1 doubloon.", "role_trader");
									p1_traded = true;
								}
								if (counter3 > 1 | counter3 < 1)
								{
									infobox_role(string.Concat("You sold your corn for", Conversion.Str(counter3), " doubloons."), "role_trader");
									p1_traded = true;
								}
								finished = true;
								make_player_goods_buttons_inactive();
								formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						gold_p1 = checked(gold_p1 + counter3);
						update_all_labels();
					}
				}
			}
		}

		public void trade_indigo()
		{
			already_there = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] == 1)
					{
						already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
				check_for_building(241);
				if (found_building)
				{
					already_there = false;
				}
				if (already_there)
				{
					Interaction.MsgBox("Indigo is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (goods_p1_array[0] <= 0)
				{
					Interaction.MsgBox("You don't have any indigo to sell.", 0, null);
				}
				else
				{
					counter3 = 1;
					if (current_role_chooser == 1)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(131);
					if (found_building)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(251);
					if (found_building)
					{
						counter3 = checked(counter3 + 2);
					}
					confirmbox_role(string.Concat("Are you sure you want to sell Indigo for", Conversion.Str(counter3), " doubloon(s) total?"), "role_trader");
					if (confirmed)
					{
						finished = false;
						counter1 = 0;
						while (!finished)
						{
							if (trading_house_array[counter1] != 0)
							{
								counter1 = checked(counter1 + 1);
								if (counter1 != 4)
								{
									continue;
								}
								finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								trading_house_array[counter1] = 1;
								goods_p1_array[0] = checked(goods_p1_array[0] - 1);
								counter3 = 1;
								if (current_role_chooser == 1)
								{
									counter3 = checked(counter3 + 1);
								}
								check_for_building(131);
								if (found_building)
								{
									counter3 = checked(counter3 + 1);
									infobox_building1("Your manned Small Market gave you +1 doubloons for your indigo sale.", 131);
								}
								check_for_building(251);
								if (found_building)
								{
									counter3 = checked(counter3 + 2);
									infobox_building1("Your manned Large Market gave you +2 doubloons for your indigo sale.", 131);
								}
								if (counter3 == 1)
								{
									infobox_role("You sold your indigo for 1 doubloon.", "role_trader");
									p1_traded = true;
								}
								if (counter3 > 1 | counter3 < 1)
								{
									infobox_role(string.Concat("You sold your indigo for", Conversion.Str(counter3), " doubloons."), "role_trader");
									p1_traded = true;
								}
								finished = true;
								make_player_goods_buttons_inactive();
								formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						gold_p1 = checked(gold_p1 + counter3);
						update_all_labels();
					}
				}
			}
		}

		public void trade_sugar()
		{
			already_there = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] == 2)
					{
						already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
				check_for_building(241);
				if (found_building)
				{
					already_there = false;
				}
				if (already_there)
				{
					Interaction.MsgBox("sugar is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (goods_p1_array[1] <= 0)
				{
					Interaction.MsgBox("You don't have any sugar to sell.", 0, null);
				}
				else
				{
					counter3 = 2;
					if (current_role_chooser == 1)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(131);
					if (found_building)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(251);
					if (found_building)
					{
						counter3 = checked(counter3 + 2);
					}
					confirmbox_role(string.Concat("Are you sure you want to sell Sugar for", Conversion.Str(counter3), " doubloon(s) total?"), "role_trader");
					if (confirmed)
					{
						finished = false;
						counter1 = 0;
						while (!finished)
						{
							if (trading_house_array[counter1] != 0)
							{
								counter1 = checked(counter1 + 1);
								if (counter1 != 4)
								{
									continue;
								}
								finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								trading_house_array[counter1] = 2;
								goods_p1_array[1] = checked(goods_p1_array[1] - 1);
								counter3 = 2;
								if (current_role_chooser == 1)
								{
									counter3 = checked(counter3 + 1);
								}
								check_for_building(131);
								if (found_building)
								{
									counter3 = checked(counter3 + 1);
									infobox_building1("Your manned Small Market gave you +1 doubloons for your sugar sale.", 131);
								}
								check_for_building(251);
								if (found_building)
								{
									counter3 = checked(counter3 + 2);
									infobox_building1("Your manned Large Market gave you +2 doubloons for your sugar sale.", 131);
								}
								if (counter3 == 1)
								{
									infobox_role("You sold your sugar for 1 doubloon.", "role_trader");
									p1_traded = true;
								}
								if (counter3 > 1 | counter3 < 1)
								{
									infobox_role(string.Concat("You sold your sugar for", Conversion.Str(counter3), " doubloons."), "role_trader");
									p1_traded = true;
								}
								finished = true;
								make_player_goods_buttons_inactive();
								formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						gold_p1 = checked(gold_p1 + counter3);
						update_all_labels();
					}
				}
			}
		}

		public void trade_tobacco()
		{
			already_there = false;
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if (p1_traded)
			{
				Interaction.MsgBox("You've already sold a good this turn. Your turn is over.", 0, null);
			}
			else
			{
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] == 4)
					{
						already_there = true;
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
				check_for_building(241);
				if (found_building)
				{
					already_there = false;
				}
				if (already_there)
				{
					Interaction.MsgBox("tobacco is already in the trading house. Please choose another good to sell.", 0, null);
				}
				else if (goods_p1_array[3] <= 0)
				{
					Interaction.MsgBox("You don't have any tobacco to sell.", 0, null);
				}
				else
				{
					counter3 = 3;
					if (current_role_chooser == 1)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(131);
					if (found_building)
					{
						counter3 = checked(counter3 + 1);
					}
					check_for_building(251);
					if (found_building)
					{
						counter3 = checked(counter3 + 2);
					}
					confirmbox_role(string.Concat("Are you sure you want to sell Tobacco for", Conversion.Str(counter3), " doubloon(s) total?"), "role_trader");
					if (confirmed)
					{
						finished = false;
						counter1 = 0;
						while (!finished)
						{
							if (trading_house_array[counter1] != 0)
							{
								counter1 = checked(counter1 + 1);
								if (counter1 != 4)
								{
									continue;
								}
								finished = true;
								Interaction.MsgBox("The Trading House is full. You cannot trade. Your turn is over.", 0, null);
							}
							else
							{
								trading_house_array[counter1] = 4;
								goods_p1_array[3] = checked(goods_p1_array[3] - 1);
								counter3 = 3;
								if (current_role_chooser == 1)
								{
									counter3 = checked(counter3 + 1);
								}
								check_for_building(131);
								if (found_building)
								{
									counter3 = checked(counter3 + 1);
									infobox_building1("Your manned Small Market gave you +1 doubloons for your tobacco sale.", 131);
								}
								check_for_building(251);
								if (found_building)
								{
									counter3 = checked(counter3 + 2);
									infobox_building1("Your manned Large Market gave you +2 doubloons for your tobacco sale.", 131);
								}
								if (counter3 == 1)
								{
									infobox_role("You sold your tobacco for 1 doubloon.", "role_trader");
									p1_traded = true;
								}
								if (counter3 > 1 | counter3 < 1)
								{
									infobox_role(string.Concat("You sold your tobacco for", Conversion.Str(counter3), " doubloons."), "role_trader");
									p1_traded = true;
								}
								finished = true;
								make_player_goods_buttons_inactive();
								formtitle("p1", "Trader Phase - Your Turn is Over");
							}
						}
						gold_p1 = checked(gold_p1 + counter3);
						update_all_labels();
					}
				}
			}
		}

		private void trader_bonus_label_Click(object sender, EventArgs e)
		{
			if (!p1_choosing_role)
			{
				help_bonus();
			}
			else
			{
				choose_trader();
			}
		}

		public void update_all_colonists()
		{
			update_p1_colonists();
			update_p2_colonists();
			update_p3_colonists();
			update_p4_colonists();
			update_p5_colonists();
		}

		public void update_all_labels()
		{
			calculate_score();
			update_ship_cargo();
			update_p1_labels();
			update_p2_labels();
			update_p3_labels();
			update_p4_labels();
			update_p5_labels();
			update_buildings_available_labels();
			update_num_buildings();
			update_num_plantations();
			check_for_game_end_triggered();
			update_player_turn_designations();
			update_summary();
		}

		public void update_bonus_role_labels()
		{
			settler_bonus_label.Text =StringType.FromInteger(bonus_roles_array[0]);
			mayor_bonus_label.Text =StringType.FromInteger(bonus_roles_array[1]);
			builder_bonus_label.Text =StringType.FromInteger(bonus_roles_array[2]);
			craftsman_bonus_label.Text =StringType.FromInteger(bonus_roles_array[3]);
			trader_bonus_label.Text =StringType.FromInteger(bonus_roles_array[4]);
			captain_bonus_label.Text =StringType.FromInteger(bonus_roles_array[5]);
			pros1_bonus_label.Text =StringType.FromInteger(bonus_roles_array[6]);
			pros2_bonus_label.Text =StringType.FromInteger(bonus_roles_array[7]);
			if (bonus_roles_array[0] != 0)
			{
				settler_bonus_label.Visible = true;
			}
			else
			{
				settler_bonus_label.Visible = false;
			}
			if (bonus_roles_array[1] != 0)
			{
				mayor_bonus_label.Visible = true;
			}
			else
			{
				mayor_bonus_label.Visible = false;
			}
			if (bonus_roles_array[2] != 0)
			{
				builder_bonus_label.Visible = true;
			}
			else
			{
				builder_bonus_label.Visible = false;
			}
			if (bonus_roles_array[3] != 0)
			{
				craftsman_bonus_label.Visible = true;
			}
			else
			{
				craftsman_bonus_label.Visible = false;
			}
			if (bonus_roles_array[4] != 0)
			{
				trader_bonus_label.Visible = true;
			}
			else
			{
				trader_bonus_label.Visible = false;
			}
			if (bonus_roles_array[5] != 0)
			{
				captain_bonus_label.Visible = true;
			}
			else
			{
				captain_bonus_label.Visible = false;
			}
			if (bonus_roles_array[6] != 0)
			{
				pros1_bonus_label.Visible = true;
			}
			else
			{
				pros1_bonus_label.Visible = false;
			}
			if (bonus_roles_array[7] != 0)
			{
				pros2_bonus_label.Visible = true;
			}
			else
			{
				pros2_bonus_label.Visible = false;
			}
		}

		public void update_buildings_available_labels()
		{
			buildings_form.current_playerb = current_player;
			buildings_form.current_role_chooserb = current_role_chooser;
			if (!builder_round)
			{
				buildings_form.builder_roundb = false;
			}
			else
			{
				buildings_form.builder_roundb = true;
			}
			counter1 = 0;
			do
			{
				buildings_form.buildings_available_array2[counter1] = buildings_available_array[counter1];
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 22);
			counter1 = 0;
			do
			{
				buildings_form.buildings_p1_arrayb[counter1] = buildings_p1_array[counter1];
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 19);
			verification_alerts();
			draw_buildings_available_labels();
		}

		public void update_buildings_available_labels2()
		{
			counter1 = 0;
			do
			{
				buildings_available_array[counter1] = buildings_form.buildings_available_array2[counter1];
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 22);
			counter1 = 0;
			do
			{
				buildings_p1_array[counter1] = buildings_form.buildings_p1_arrayb[counter1];
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 19);
			verification_alerts();
			draw_buildings_available_labels();
		}

		public void update_buildings_p1_labels()
		{
			string[] strArray;
			counter1 = 0;
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot1.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot1.Image = Image.FromFile(tempstring);
				build_p1_slot1.Visible = true;
			}
			else
			{
				build_p1_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot2.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot2.Image = Image.FromFile(tempstring);
				build_p1_slot2.Visible = true;
			}
			else
			{
				build_p1_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot3.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot3.Image = Image.FromFile(tempstring);
				build_p1_slot3.Visible = true;
			}
			else
			{
				build_p1_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot4.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot4.Image = Image.FromFile(tempstring);
				build_p1_slot4.Visible = true;
			}
			else
			{
				build_p1_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot5.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot5.Image = Image.FromFile(tempstring);
				build_p1_slot5.Visible = true;
			}
			else
			{
				build_p1_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot6.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot6.Image = Image.FromFile(tempstring);
				build_p1_slot6.Visible = true;
			}
			else
			{
				build_p1_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot7.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot7.Image = Image.FromFile(tempstring);
				build_p1_slot7.Visible = true;
			}
			else
			{
				build_p1_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot8.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot8.Image = Image.FromFile(tempstring);
				build_p1_slot8.Visible = true;
			}
			else
			{
				build_p1_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot9.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot9.Image = Image.FromFile(tempstring);
				build_p1_slot9.Visible = true;
			}
			else
			{
				build_p1_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot10.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot10.Image = Image.FromFile(tempstring);
				build_p1_slot10.Visible = true;
			}
			else
			{
				build_p1_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot11.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot11.Image = Image.FromFile(tempstring);
				build_p1_slot11.Visible = true;
			}
			else
			{
				build_p1_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p1_array[counter1] == 0)
			{
				build_p1_slot12.Visible = false;
			}
			else if (buildings_p1_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot12.Image = Image.FromFile(tempstring);
				build_p1_slot12.Visible = true;
			}
			else
			{
				build_p1_slot12.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot13.Image = Image.FromFile(tempstring);
				build_p1_slot13.Visible = true;
			}
			else
			{
				build_p1_slot13.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot14.Image = Image.FromFile(tempstring);
				build_p1_slot14.Visible = true;
			}
			else
			{
				build_p1_slot14.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot15.Image = Image.FromFile(tempstring);
				build_p1_slot15.Visible = true;
			}
			else
			{
				build_p1_slot15.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot16.Image = Image.FromFile(tempstring);
				build_p1_slot16.Visible = true;
			}
			else
			{
				build_p1_slot16.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot17.Image = Image.FromFile(tempstring);
				build_p1_slot17.Visible = true;
			}
			else
			{
				build_p1_slot17.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot18.Image = Image.FromFile(tempstring);
				build_p1_slot18.Visible = true;
			}
			else
			{
				build_p1_slot18.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot19.Image = Image.FromFile(tempstring);
				build_p1_slot19.Visible = true;
			}
			else
			{
				build_p1_slot19.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p1_array[counter1] == 0 | buildings_p1_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p1_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				build_p1_slot20.Image = Image.FromFile(tempstring);
				build_p1_slot20.Visible = true;
			}
			else
			{
				build_p1_slot20.Visible = false;
			}
			counter1 = checked(counter1 + 1);
		}

		public void update_buildings_p2_labels()
		{
			string[] strArray;
			counter1 = 0;
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot1.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot1.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot1.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot2.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot2.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot2.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot3.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot3.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot3.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot4.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot4.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot4.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot5.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot5.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot5.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot6.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot6.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot6.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot7.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot7.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot7.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot8.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot8.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot8.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot9.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot9.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot9.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot10.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot10.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot10.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot11.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot11.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot11.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p2_array[counter1] == 0)
			{
				player2_form.build_p2_slot12.Visible = false;
			}
			else if (buildings_p2_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot12.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot12.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot12.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot13.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot13.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot13.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot14.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot14.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot14.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot15.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot15.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot15.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot16.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot16.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot16.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot17.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot17.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot17.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot18.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot18.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot18.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot19.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot19.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot19.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p2_array[counter1] == 0 | buildings_p2_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p2_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player2_form.build_p2_slot20.Image = Image.FromFile(tempstring);
				player2_form.build_p2_slot20.Visible = true;
			}
			else
			{
				player2_form.build_p2_slot20.Visible = false;
			}
			counter1 = checked(counter1 + 1);
		}

		public void update_buildings_p3_labels()
		{
			string[] strArray;
			counter1 = 0;
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot1.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot1.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot1.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot2.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot2.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot2.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot3.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot3.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot3.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot4.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot4.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot4.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot5.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot5.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot5.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot6.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot6.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot6.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot7.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot7.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot7.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot8.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot8.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot8.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot9.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot9.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot9.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot10.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot10.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot10.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot11.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot11.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot11.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p3_array[counter1] == 0)
			{
				player3_form.build_p3_slot12.Visible = false;
			}
			else if (buildings_p3_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot12.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot12.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot12.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot13.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot13.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot13.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot14.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot14.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot14.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot15.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot15.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot15.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot16.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot16.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot16.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot17.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot17.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot17.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot18.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot18.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot18.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot19.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot19.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot19.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p3_array[counter1] == 0 | buildings_p3_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p3_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player3_form.build_p3_slot20.Image = Image.FromFile(tempstring);
				player3_form.build_p3_slot20.Visible = true;
			}
			else
			{
				player3_form.build_p3_slot20.Visible = false;
			}
			counter1 = checked(counter1 + 1);
		}

		public void update_buildings_p4_labels()
		{
			string[] strArray;
			counter1 = 0;
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot1.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot1.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot1.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot2.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot2.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot2.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot3.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot3.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot3.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot4.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot4.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot4.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot5.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot5.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot5.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot6.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot6.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot6.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot7.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot7.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot7.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot8.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot8.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot8.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot9.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot9.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot9.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot10.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot10.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot10.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot11.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot11.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot11.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p4_array[counter1] == 0)
			{
				player4_form.build_p4_slot12.Visible = false;
			}
			else if (buildings_p4_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot12.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot12.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot12.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot13.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot13.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot13.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot14.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot14.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot14.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot15.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot15.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot15.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot16.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot16.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot16.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot17.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot17.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot17.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot18.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot18.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot18.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot19.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot19.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot19.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p4_array[counter1] == 0 | buildings_p4_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p4_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player4_form.build_p4_slot20.Image = Image.FromFile(tempstring);
				player4_form.build_p4_slot20.Visible = true;
			}
			else
			{
				player4_form.build_p4_slot20.Visible = false;
			}
			counter1 = checked(counter1 + 1);
		}

		public void update_buildings_p5_labels()
		{
			string[] strArray;
			counter1 = 0;
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot1.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot1.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot1.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot2.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot2.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot2.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot3.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot3.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot3.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot4.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot4.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot4.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot5.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot5.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot5.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot6.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot6.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot6.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot7.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot7.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot7.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot8.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot8.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot8.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot9.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot9.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot9.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot10.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot10.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot10.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot11.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot11.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot11.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (buildings_p5_array[counter1] == 0)
			{
				player5_form.build_p5_slot12.Visible = false;
			}
			else if (buildings_p5_array[counter1] != 999)
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot12.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot12.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot12.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot13.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot13.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot13.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot14.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot14.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot14.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot15.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot15.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot15.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot16.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot16.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot16.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot17.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot17.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot17.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot18.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot18.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot18.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot19.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot19.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot19.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (!(buildings_p5_array[counter1] == 0 | buildings_p5_array[counter1] == 999))
			{
				strArray = new string[] { "pic\\", StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[2]), StringType.FromChar(Conversion.Str(buildings_p5_array[counter1])[3]), ".bmp" };
				tempstring = string.Concat(strArray);
				player5_form.build_p5_slot20.Image = Image.FromFile(tempstring);
				player5_form.build_p5_slot20.Visible = true;
			}
			else
			{
				player5_form.build_p5_slot20.Visible = false;
			}
			counter1 = checked(counter1 + 1);
		}

		public void update_num_buildings()
		{
			num_buildings_p1 = 0;
			counter1 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p1_array[counter1] != 0 & buildings_p1_array[counter1] != 999)
				{
					num_buildings_p1 = checked(num_buildings_p1 + 1);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p1_array[counter1] != 0 & buildings_p1_array[counter1] != 999)
				{
					num_buildings_p1 = checked(num_buildings_p1 + 2);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			num_buildings_p2 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p2_array[counter1] != 0 & buildings_p2_array[counter1] != 999)
				{
					num_buildings_p2 = checked(num_buildings_p2 + 1);
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p2_array[counter1] != 0 & buildings_p2_array[counter1] != 999)
				{
					num_buildings_p2 = checked(num_buildings_p2 + 2);
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			num_buildings_p3 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p3_array[counter1] != 0 & buildings_p3_array[counter1] != 999)
				{
					num_buildings_p3 = checked(num_buildings_p3 + 1);
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p3_array[counter1] != 0 & buildings_p3_array[counter1] != 999)
				{
					num_buildings_p3 = checked(num_buildings_p3 + 2);
				}
				Form1 form15 = this;
				form15.counter1 = checked(form15.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			num_buildings_p4 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p4_array[counter1] != 0 & buildings_p4_array[counter1] != 999)
				{
					num_buildings_p4 = checked(num_buildings_p4 + 1);
				}
				Form1 form16 = this;
				form16.counter1 = checked(form16.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p4_array[counter1] != 0 & buildings_p4_array[counter1] != 999)
				{
					num_buildings_p4 = checked(num_buildings_p4 + 2);
				}
				Form1 form17 = this;
				form17.counter1 = checked(form17.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			num_buildings_p5 = 0;
			counter1 = 0;
			do
			{
				if (buildings_p5_array[counter1] != 0 & buildings_p5_array[counter1] != 999)
				{
					num_buildings_p5 = checked(num_buildings_p5 + 1);
				}
				Form1 form18 = this;
				form18.counter1 = checked(form18.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 12;
			do
			{
				if (buildings_p5_array[counter1] != 0 & buildings_p5_array[counter1] != 999)
				{
					num_buildings_p5 = checked(num_buildings_p5 + 2);
				}
				Form1 form19 = this;
				form19.counter1 = checked(form19.counter1 + 1);
			}
			while (counter1 <= 19);
			if (num_buildings_p1 == 12 | num_buildings_p2 == 12 | num_buildings_p3 == 12 | num_buildings_p4 == 12 | num_buildings_p5 == 12)
			{
				game_end_triggered_buildings = true;
			}
			verification_alerts();
		}

		public void update_num_plantations()
		{
			counter1 = 0;
			counter3 = plantations_p1_array[counter1];
			num_plantations_p1 = 0;
			num_quarries_p1 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p1_array[counter1] != 0)
				{
					num_plantations_p1 = checked(num_plantations_p1 + 1);
					if (plantations_p1_array[counter1] == 60 | plantations_p1_array[counter1] == 61)
					{
						num_quarries_p1 = checked(num_quarries_p1 + 1);
					}
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			num_plantations_p2 = 0;
			num_quarries_p2 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] != 0)
				{
					num_plantations_p2 = checked(num_plantations_p2 + 1);
					if (plantations_p2_array[counter1] == 60 | plantations_p2_array[counter1] == 61)
					{
						num_quarries_p2 = checked(num_quarries_p2 + 1);
					}
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			num_plantations_p3 = 0;
			num_quarries_p3 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] != 0)
				{
					num_plantations_p3 = checked(num_plantations_p3 + 1);
					if (plantations_p3_array[counter1] == 60 | plantations_p3_array[counter1] == 61)
					{
						num_quarries_p3 = checked(num_quarries_p1 + 1);
					}
				}
				Form1 form12 = this;
				form12.counter1 = checked(form12.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			num_plantations_p4 = 0;
			num_quarries_p4 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] != 0)
				{
					num_plantations_p4 = checked(num_plantations_p4 + 1);
					if (plantations_p4_array[counter1] == 60 | plantations_p4_array[counter1] == 61)
					{
						num_quarries_p4 = checked(num_quarries_p1 + 1);
					}
				}
				Form1 form13 = this;
				form13.counter1 = checked(form13.counter1 + 1);
			}
			while (counter1 <= 11);
			counter1 = 0;
			num_plantations_p5 = 0;
			num_quarries_p5 = 0;
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] != 0)
				{
					num_plantations_p5 = checked(num_plantations_p5 + 1);
					if (plantations_p5_array[counter1] == 60 | plantations_p5_array[counter1] == 61)
					{
						num_quarries_p5 = checked(num_quarries_p1 + 1);
					}
				}
				Form1 form14 = this;
				form14.counter1 = checked(form14.counter1 + 1);
			}
			while (counter1 <= 11);
			verification_alerts();
		}

		public void update_p1_colonists()
		{
			colonists_array[1] = 0;
			counter1 = 0;
			do
			{
				if (buildings_p1_array[counter1] == 111 | buildings_p1_array[counter1] == 121 | buildings_p1_array[counter1] == 131 | buildings_p1_array[counter1] == 141 | buildings_p1_array[counter1] == 151 | buildings_p1_array[counter1] == 161 | buildings_p1_array[counter1] == 211 | buildings_p1_array[counter1] == 221 | buildings_p1_array[counter1] == 231 | buildings_p1_array[counter1] == 241 | buildings_p1_array[counter1] == 251 | buildings_p1_array[counter1] == 261 | buildings_p1_array[counter1] == 311 | buildings_p1_array[counter1] == 321 | buildings_p1_array[counter1] == 331 | buildings_p1_array[counter1] == 341 | buildings_p1_array[counter1] == 351 | buildings_p1_array[counter1] == 361 | buildings_p1_array[counter1] == 411 | buildings_p1_array[counter1] == 421 | buildings_p1_array[counter1] == 441 | buildings_p1_array[counter1] == 451)
				{
					colonists_array[1] = checked(colonists_array[1] + 1);
				}
				if (buildings_p1_array[counter1] == 212 | buildings_p1_array[counter1] == 222 | buildings_p1_array[counter1] == 312 | buildings_p1_array[counter1] == 322)
				{
					colonists_array[1] = checked(colonists_array[1] + 2);
				}
				if (buildings_p1_array[counter1] == 213 | buildings_p1_array[counter1] == 223 | buildings_p1_array[counter1] == 313)
				{
					colonists_array[1] = checked(colonists_array[1] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			do
			{
				if (plantations_p1_array[counter1] == 11 | plantations_p1_array[counter1] == 21 | plantations_p1_array[counter1] == 31 | plantations_p1_array[counter1] == 41 | plantations_p1_array[counter1] == 51 | plantations_p1_array[counter1] == 61)
				{
					colonists_array[1] = checked(colonists_array[1] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			colonists_array[1] = checked(colonists_array[1] + idle_colonists_array[1]);
			verification_alerts();
		}

		public void update_p1_labels()
		{
			vp_chips_label.Text =StringType.FromInteger(vpchips_p1);
			vp_total_label.Text =StringType.FromInteger(checked(vpchips_p1 + vp_buildings_p1));
			gold_label.Text =StringType.FromInteger(gold_p1);
			num_indigo_label.Text =StringType.FromInteger(goods_p1_array[0]);
			num_sugar_label.Text =StringType.FromInteger(goods_p1_array[1]);
			num_corn_label.Text =StringType.FromInteger(goods_p1_array[2]);
			num_tobacco_label.Text =StringType.FromInteger(goods_p1_array[3]);
			num_coffee_label.Text =StringType.FromInteger(goods_p1_array[4]);
			num_indigo_bank_label.Text =StringType.FromInteger(goods_bank_array[0]);
			num_sugar_bank_label.Text =StringType.FromInteger(goods_bank_array[1]);
			num_corn_bank_label.Text =StringType.FromInteger(goods_bank_array[2]);
			num_tobacco_bank_label.Text =StringType.FromInteger(goods_bank_array[3]);
			num_coffee_bank_label.Text =StringType.FromInteger(goods_bank_array[4]);
			num_quarry_bank_label.Text =StringType.FromInteger(goods_bank_array[5]);
			idle_colonists_label.Text =StringType.FromInteger(idle_colonists_array[1]);
			num_colonist_ship_label.Text =StringType.FromInteger(colonists_ship_num);
			num_colonist_bank_label.Text =StringType.FromInteger(colonists_bank_num);
			update_bonus_role_labels();
			update_ship_labels();
			update_tradehouse_labels();
			update_plantation_available_labels();
			update_plantations_p1_labels();
			update_buildings_p1_labels();
			if (current_governor != 1)
			{
				governor_pic.Visible = false;
			}
			else
			{
				governor_pic.Visible = true;
			}
			if (captain_round)
			{
				check_for_building_p1(361);
				if (!found_building)
				{
					wharf_pic.Visible = false;
				}
				else if (p1_used_wharf)
				{
					wharf_pic.Visible = false;
				}
				else
				{
					wharf_pic.Visible = true;
				}
			}
			tempinteger = colonists_array[1];
			Label10.Text =Conversion.Str(colonists_array[1]);
			verification_alerts();
		}

		public void update_p2_colonists()
		{
			colonists_array[2] = 0;
			counter1 = 0;
			do
			{
				if (buildings_p2_array[counter1] == 111 | buildings_p2_array[counter1] == 121 | buildings_p2_array[counter1] == 131 | buildings_p2_array[counter1] == 141 | buildings_p2_array[counter1] == 151 | buildings_p2_array[counter1] == 161 | buildings_p2_array[counter1] == 211 | buildings_p2_array[counter1] == 221 | buildings_p2_array[counter1] == 231 | buildings_p2_array[counter1] == 241 | buildings_p2_array[counter1] == 251 | buildings_p2_array[counter1] == 261 | buildings_p2_array[counter1] == 311 | buildings_p2_array[counter1] == 321 | buildings_p2_array[counter1] == 331 | buildings_p2_array[counter1] == 341 | buildings_p2_array[counter1] == 351 | buildings_p2_array[counter1] == 361 | buildings_p2_array[counter1] == 411 | buildings_p2_array[counter1] == 421 | buildings_p2_array[counter1] == 441 | buildings_p2_array[counter1] == 451)
				{
					colonists_array[2] = checked(colonists_array[2] + 1);
				}
				if (buildings_p2_array[counter1] == 212 | buildings_p2_array[counter1] == 222 | buildings_p2_array[counter1] == 312 | buildings_p2_array[counter1] == 322)
				{
					colonists_array[2] = checked(colonists_array[2] + 2);
				}
				if (buildings_p2_array[counter1] == 213 | buildings_p2_array[counter1] == 223 | buildings_p2_array[counter1] == 313)
				{
					colonists_array[2] = checked(colonists_array[2] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			do
			{
				if (plantations_p2_array[counter1] == 11 | plantations_p2_array[counter1] == 21 | plantations_p2_array[counter1] == 31 | plantations_p2_array[counter1] == 41 | plantations_p2_array[counter1] == 51 | plantations_p2_array[counter1] == 61)
				{
					colonists_array[2] = checked(colonists_array[2] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			colonists_array[2] = checked(colonists_array[2] + idle_colonists_array[2]);
			verification_alerts();
		}

		public void update_p2_labels()
		{
			player2_form.Text =p2_name;
			update_plantations_p2_labels();
			update_buildings_p2_labels();
			player2_form.vp_chips_label.Text =StringType.FromInteger(vpchips_p2);
			player2_form.vp_total_label.Text =StringType.FromInteger(checked(vpchips_p2 + vp_buildings_p2));
			player2_form.gold_label.Text =StringType.FromInteger(gold_p2);
			player2_form.num_indigo_label.Text =StringType.FromInteger(goods_p2_array[0]);
			player2_form.num_sugar_label.Text =StringType.FromInteger(goods_p2_array[1]);
			player2_form.num_corn_label.Text =StringType.FromInteger(goods_p2_array[2]);
			player2_form.num_tobacco_label.Text =StringType.FromInteger(goods_p2_array[3]);
			player2_form.num_coffee_label.Text =StringType.FromInteger(goods_p2_array[4]);
			player2_form.idle_colonists_label.Text =StringType.FromInteger(idle_colonists_array[2]);
			if (current_governor != 2)
			{
				player2_form.governor_pic.Visible = false;
			}
			else
			{
				player2_form.governor_pic.Visible = true;
			}
			verification_alerts();
		}

		public void update_p3_colonists()
		{
			colonists_array[3] = 0;
			counter1 = 0;
			do
			{
				if (buildings_p3_array[counter1] == 111 | buildings_p3_array[counter1] == 121 | buildings_p3_array[counter1] == 131 | buildings_p3_array[counter1] == 141 | buildings_p3_array[counter1] == 151 | buildings_p3_array[counter1] == 161 | buildings_p3_array[counter1] == 211 | buildings_p3_array[counter1] == 221 | buildings_p3_array[counter1] == 231 | buildings_p3_array[counter1] == 241 | buildings_p3_array[counter1] == 251 | buildings_p3_array[counter1] == 261 | buildings_p3_array[counter1] == 311 | buildings_p3_array[counter1] == 321 | buildings_p3_array[counter1] == 331 | buildings_p3_array[counter1] == 341 | buildings_p3_array[counter1] == 351 | buildings_p3_array[counter1] == 361 | buildings_p3_array[counter1] == 411 | buildings_p3_array[counter1] == 421 | buildings_p3_array[counter1] == 441 | buildings_p3_array[counter1] == 451)
				{
					colonists_array[3] = checked(colonists_array[3] + 1);
				}
				if (buildings_p3_array[counter1] == 212 | buildings_p3_array[counter1] == 222 | buildings_p3_array[counter1] == 312 | buildings_p3_array[counter1] == 322)
				{
					colonists_array[3] = checked(colonists_array[3] + 2);
				}
				if (buildings_p3_array[counter1] == 213 | buildings_p3_array[counter1] == 223 | buildings_p3_array[counter1] == 313)
				{
					colonists_array[3] = checked(colonists_array[3] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			do
			{
				if (plantations_p3_array[counter1] == 11 | plantations_p3_array[counter1] == 21 | plantations_p3_array[counter1] == 31 | plantations_p3_array[counter1] == 41 | plantations_p3_array[counter1] == 51 | plantations_p3_array[counter1] == 61)
				{
					colonists_array[3] = checked(colonists_array[3] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			colonists_array[3] = checked(colonists_array[3] + idle_colonists_array[3]);
			verification_alerts();
		}

		public void update_p3_labels()
		{
			player3_form.Text =p3_name;
			update_plantations_p3_labels();
			update_buildings_p3_labels();
			player3_form.vp_chips_label.Text =StringType.FromInteger(vpchips_p3);
			player3_form.vp_total_label.Text =StringType.FromInteger(checked(vpchips_p3 + vp_buildings_p3));
			player3_form.gold_label.Text =StringType.FromInteger(gold_p3);
			player3_form.num_indigo_label.Text =StringType.FromInteger(goods_p3_array[0]);
			player3_form.num_sugar_label.Text =StringType.FromInteger(goods_p3_array[1]);
			player3_form.num_corn_label.Text =StringType.FromInteger(goods_p3_array[2]);
			player3_form.num_tobacco_label.Text =StringType.FromInteger(goods_p3_array[3]);
			player3_form.num_coffee_label.Text =StringType.FromInteger(goods_p3_array[4]);
			player3_form.idle_colonists_label.Text =StringType.FromInteger(idle_colonists_array[3]);
			if (current_governor != 3)
			{
				player3_form.governor_pic.Visible = false;
			}
			else
			{
				player3_form.governor_pic.Visible = true;
			}
			verification_alerts();
		}

		public void update_p4_colonists()
		{
			colonists_array[4] = 0;
			counter1 = 0;
			do
			{
				if (buildings_p4_array[counter1] == 111 | buildings_p4_array[counter1] == 121 | buildings_p4_array[counter1] == 131 | buildings_p4_array[counter1] == 141 | buildings_p4_array[counter1] == 151 | buildings_p4_array[counter1] == 161 | buildings_p4_array[counter1] == 211 | buildings_p4_array[counter1] == 221 | buildings_p4_array[counter1] == 231 | buildings_p4_array[counter1] == 241 | buildings_p4_array[counter1] == 251 | buildings_p4_array[counter1] == 261 | buildings_p4_array[counter1] == 311 | buildings_p4_array[counter1] == 321 | buildings_p4_array[counter1] == 331 | buildings_p4_array[counter1] == 341 | buildings_p4_array[counter1] == 351 | buildings_p4_array[counter1] == 361 | buildings_p4_array[counter1] == 411 | buildings_p4_array[counter1] == 421 | buildings_p4_array[counter1] == 441 | buildings_p4_array[counter1] == 451)
				{
					colonists_array[4] = checked(colonists_array[4] + 1);
				}
				if (buildings_p4_array[counter1] == 212 | buildings_p4_array[counter1] == 222 | buildings_p4_array[counter1] == 312 | buildings_p4_array[counter1] == 322)
				{
					colonists_array[4] = checked(colonists_array[4] + 2);
				}
				if (buildings_p4_array[counter1] == 213 | buildings_p4_array[counter1] == 223 | buildings_p4_array[counter1] == 313)
				{
					colonists_array[4] = checked(colonists_array[4] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			do
			{
				if (plantations_p4_array[counter1] == 11 | plantations_p4_array[counter1] == 21 | plantations_p4_array[counter1] == 31 | plantations_p4_array[counter1] == 41 | plantations_p4_array[counter1] == 51 | plantations_p4_array[counter1] == 61)
				{
					colonists_array[4] = checked(colonists_array[4] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			colonists_array[4] = checked(colonists_array[4] + idle_colonists_array[4]);
			verification_alerts();
		}

		public void update_p4_labels()
		{
			player4_form.Text =p4_name;
			update_plantations_p4_labels();
			update_buildings_p4_labels();
			player4_form.vp_chips_label.Text =StringType.FromInteger(vpchips_p4);
			player4_form.vp_total_label.Text =StringType.FromInteger(checked(vpchips_p4 + vp_buildings_p4));
			player4_form.gold_label.Text =StringType.FromInteger(gold_p4);
			player4_form.num_indigo_label.Text =StringType.FromInteger(goods_p4_array[0]);
			player4_form.num_sugar_label.Text =StringType.FromInteger(goods_p4_array[1]);
			player4_form.num_corn_label.Text =StringType.FromInteger(goods_p4_array[2]);
			player4_form.num_tobacco_label.Text =StringType.FromInteger(goods_p4_array[3]);
			player4_form.num_coffee_label.Text =StringType.FromInteger(goods_p4_array[4]);
			player4_form.idle_colonists_label.Text =StringType.FromInteger(idle_colonists_array[4]);
			if (current_governor != 4)
			{
				player4_form.governor_pic.Visible = false;
			}
			else
			{
				player4_form.governor_pic.Visible = true;
			}
			verification_alerts();
		}

		public void update_p5_colonists()
		{
			colonists_array[5] = 0;
			counter1 = 0;
			do
			{
				if (buildings_p5_array[counter1] == 111 | buildings_p5_array[counter1] == 121 | buildings_p5_array[counter1] == 131 | buildings_p5_array[counter1] == 141 | buildings_p5_array[counter1] == 151 | buildings_p5_array[counter1] == 161 | buildings_p5_array[counter1] == 211 | buildings_p5_array[counter1] == 221 | buildings_p5_array[counter1] == 231 | buildings_p5_array[counter1] == 241 | buildings_p5_array[counter1] == 251 | buildings_p5_array[counter1] == 261 | buildings_p5_array[counter1] == 311 | buildings_p5_array[counter1] == 321 | buildings_p5_array[counter1] == 331 | buildings_p5_array[counter1] == 341 | buildings_p5_array[counter1] == 351 | buildings_p5_array[counter1] == 361 | buildings_p5_array[counter1] == 411 | buildings_p5_array[counter1] == 421 | buildings_p5_array[counter1] == 441 | buildings_p5_array[counter1] == 451)
				{
					colonists_array[5] = checked(colonists_array[5] + 1);
				}
				if (buildings_p5_array[counter1] == 212 | buildings_p5_array[counter1] == 222 | buildings_p5_array[counter1] == 312 | buildings_p5_array[counter1] == 322)
				{
					colonists_array[5] = checked(colonists_array[5] + 2);
				}
				if (buildings_p5_array[counter1] == 213 | buildings_p5_array[counter1] == 223 | buildings_p5_array[counter1] == 313)
				{
					colonists_array[5] = checked(colonists_array[5] + 3);
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 19);
			counter1 = 0;
			do
			{
				if (plantations_p5_array[counter1] == 11 | plantations_p5_array[counter1] == 21 | plantations_p5_array[counter1] == 31 | plantations_p5_array[counter1] == 41 | plantations_p5_array[counter1] == 51 | plantations_p5_array[counter1] == 61)
				{
					colonists_array[5] = checked(colonists_array[5] + 1);
				}
				Form1 form11 = this;
				form11.counter1 = checked(form11.counter1 + 1);
			}
			while (counter1 <= 11);
			colonists_array[5] = checked(colonists_array[5] + idle_colonists_array[5]);
			verification_alerts();
		}

		public void update_p5_labels()
		{
			player5_form.Text =p5_name;
			update_plantations_p5_labels();
			update_buildings_p5_labels();
			player5_form.vp_chips_label.Text =StringType.FromInteger(vpchips_p5);
			player5_form.vp_total_label.Text =StringType.FromInteger(checked(vpchips_p5 + vp_buildings_p5));
			player5_form.gold_label.Text =StringType.FromInteger(gold_p5);
			player5_form.num_indigo_label.Text =StringType.FromInteger(goods_p5_array[0]);
			player5_form.num_sugar_label.Text =StringType.FromInteger(goods_p5_array[1]);
			player5_form.num_corn_label.Text =StringType.FromInteger(goods_p5_array[2]);
			player5_form.num_tobacco_label.Text =StringType.FromInteger(goods_p5_array[3]);
			player5_form.num_coffee_label.Text =StringType.FromInteger(goods_p5_array[4]);
			player5_form.idle_colonists_label.Text =StringType.FromInteger(idle_colonists_array[5]);
			if (current_governor != 5)
			{
				player5_form.governor_pic.Visible = false;
			}
			else
			{
				player5_form.governor_pic.Visible = true;
			}
			verification_alerts();
		}

		public void update_plantation_available_labels()
		{
			if (plantation_available_array[0] == 0)
			{
				plantation_available_slot1.Visible = false;
			}
			else
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantation_available_array[0])[1]), StringType.FromChar(Conversion.Str(plantation_available_array[0])[2]), ".bmp");
				plantation_available_slot1.Visible = true;
				plantation_available_slot1.Image = Image.FromFile(tempstring);
			}
			if (plantation_available_array[1] == 0)
			{
				plantation_available_slot2.Visible = false;
			}
			else
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantation_available_array[1])[1]), StringType.FromChar(Conversion.Str(plantation_available_array[1])[2]), ".bmp");
				plantation_available_slot2.Visible = true;
				plantation_available_slot2.Image = Image.FromFile(tempstring);
			}
			if (plantation_available_array[2] == 0)
			{
				plantation_available_slot3.Visible = false;
			}
			else
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantation_available_array[2])[1]), StringType.FromChar(Conversion.Str(plantation_available_array[2])[2]), ".bmp");
				plantation_available_slot3.Visible = true;
				plantation_available_slot3.Image = Image.FromFile(tempstring);
			}
			if (plantation_available_array[3] == 0)
			{
				plantation_available_slot4.Visible = false;
			}
			else
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantation_available_array[3])[1]), StringType.FromChar(Conversion.Str(plantation_available_array[3])[2]), ".bmp");
				plantation_available_slot4.Visible = true;
				plantation_available_slot4.Image = Image.FromFile(tempstring);
			}
			if (plantation_available_array[4] == 0)
			{
				plantation_available_slot5.Visible = false;
			}
			else
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantation_available_array[4])[1]), StringType.FromChar(Conversion.Str(plantation_available_array[4])[2]), ".bmp");
				plantation_available_slot5.Visible = true;
				plantation_available_slot5.Image = Image.FromFile(tempstring);
			}
			if (plantation_available_array[5] == 0)
			{
				plantation_available_slot6.Visible = false;
			}
			else
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantation_available_array[5])[1]), StringType.FromChar(Conversion.Str(plantation_available_array[5])[2]), ".bmp");
				plantation_available_slot6.Visible = true;
				plantation_available_slot6.Image = Image.FromFile(tempstring);
			}
		}

		public void update_plantations_p1_labels()
		{
			counter1 = 0;
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot1.Image = Image.FromFile(tempstring);
				plant_p1_slot1.Visible = true;
			}
			else
			{
				plant_p1_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot2.Image = Image.FromFile(tempstring);
				plant_p1_slot2.Visible = true;
			}
			else
			{
				plant_p1_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot3.Image = Image.FromFile(tempstring);
				plant_p1_slot3.Visible = true;
			}
			else
			{
				plant_p1_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot4.Image = Image.FromFile(tempstring);
				plant_p1_slot4.Visible = true;
			}
			else
			{
				plant_p1_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot5.Image = Image.FromFile(tempstring);
				plant_p1_slot5.Visible = true;
			}
			else
			{
				plant_p1_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot6.Image = Image.FromFile(tempstring);
				plant_p1_slot6.Visible = true;
			}
			else
			{
				plant_p1_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot7.Image = Image.FromFile(tempstring);
				plant_p1_slot7.Visible = true;
			}
			else
			{
				plant_p1_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot8.Image = Image.FromFile(tempstring);
				plant_p1_slot8.Visible = true;
			}
			else
			{
				plant_p1_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot9.Image = Image.FromFile(tempstring);
				plant_p1_slot9.Visible = true;
			}
			else
			{
				plant_p1_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot10.Image = Image.FromFile(tempstring);
				plant_p1_slot10.Visible = true;
			}
			else
			{
				plant_p1_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot11.Image = Image.FromFile(tempstring);
				plant_p1_slot11.Visible = true;
			}
			else
			{
				plant_p1_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p1_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p1_array[counter1])[2]), ".bmp");
				plant_p1_slot12.Image = Image.FromFile(tempstring);
				plant_p1_slot12.Visible = true;
			}
			else
			{
				plant_p1_slot12.Visible = false;
			}
		}

		public void update_plantations_p2_labels()
		{
			counter1 = 0;
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot1.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot1.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot2.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot2.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot3.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot3.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot4.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot4.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot5.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot5.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot6.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot6.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot7.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot7.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot8.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot8.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot9.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot9.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot10.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot10.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot11.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot11.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p2_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p2_array[counter1])[2]), ".bmp");
				player2_form.plant_p2_slot12.Image = Image.FromFile(tempstring);
				player2_form.plant_p2_slot12.Visible = true;
			}
			else
			{
				player2_form.plant_p2_slot12.Visible = false;
			}
		}

		public void update_plantations_p3_labels()
		{
			counter1 = 0;
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot1.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot1.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot2.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot2.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot3.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot3.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot4.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot4.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot5.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot5.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot6.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot6.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot7.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot7.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot8.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot8.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot9.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot9.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot10.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot10.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot11.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot11.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p3_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p3_array[counter1])[2]), ".bmp");
				player3_form.plant_p3_slot12.Image = Image.FromFile(tempstring);
				player3_form.plant_p3_slot12.Visible = true;
			}
			else
			{
				player3_form.plant_p3_slot12.Visible = false;
			}
		}

		public void update_plantations_p4_labels()
		{
			counter1 = 0;
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot1.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot1.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot2.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot2.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot3.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot3.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot4.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot4.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot5.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot5.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot6.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot6.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot7.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot7.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot8.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot8.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot9.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot9.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot10.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot10.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot11.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot11.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p4_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p4_array[counter1])[2]), ".bmp");
				player4_form.plant_p4_slot12.Image = Image.FromFile(tempstring);
				player4_form.plant_p4_slot12.Visible = true;
			}
			else
			{
				player4_form.plant_p4_slot12.Visible = false;
			}
		}

		public void update_plantations_p5_labels()
		{
			counter1 = 0;
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot1.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot1.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot1.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot2.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot2.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot2.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot3.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot3.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot3.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot4.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot4.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot4.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot5.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot5.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot5.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot6.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot6.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot6.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot7.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot7.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot7.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot8.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot8.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot8.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot9.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot9.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot9.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot10.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot10.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot10.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot11.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot11.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot11.Visible = false;
			}
			counter1 = checked(counter1 + 1);
			if (plantations_p5_array[counter1] != 0)
			{
				tempstring = string.Concat("pic\\", StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[1]), StringType.FromChar(Conversion.Str(plantations_p5_array[counter1])[2]), ".bmp");
				player5_form.plant_p5_slot12.Image = Image.FromFile(tempstring);
				player5_form.plant_p5_slot12.Visible = true;
			}
			else
			{
				player5_form.plant_p5_slot12.Visible = false;
			}
		}

		public void update_player_turn_designations()
		{
			if (current_player == 1)
			{
				current_player_string = "p1";
			}
			if (current_player == 2)
			{
				current_player_string = "p2";
			}
			if (current_player == 3)
			{
				current_player_string = "p3";
			}
			if (current_player == 4)
			{
				current_player_string = "p4";
			}
			if (current_player == 5)
			{
				current_player_string = "p5";
			}
			if (current_role_chooser == 1)
			{
				current_role_chooser_string = "p1";
			}
			if (current_role_chooser == 2)
			{
				current_role_chooser_string = "p2";
			}
			if (current_role_chooser == 3)
			{
				current_role_chooser_string = "p3";
			}
			if (current_role_chooser == 4)
			{
				current_role_chooser_string = "p4";
			}
			if (current_role_chooser == 5)
			{
				current_role_chooser_string = "p5";
			}
			if (current_governor == 1)
			{
				current_governor_string = "p1";
			}
			if (current_governor == 2)
			{
				current_governor_string = "p2";
			}
			if (current_governor == 3)
			{
				current_governor_string = "p3";
			}
			if (current_governor == 4)
			{
				current_governor_string = "p4";
			}
			if (current_governor == 5)
			{
				current_governor_string = "p5";
			}
		}

		public void update_ship_cargo()
		{
			indigo_shipnum = 0;
			sugar_shipnum = 0;
			corn_shipnum = 0;
			tobacco_shipnum = 0;
			coffee_shipnum = 0;
			indigo_ship_available = false;
			sugar_ship_available = false;
			corn_ship_available = false;
			tobacco_ship_available = false;
			coffee_ship_available = false;
			indigo_ship_full = false;
			sugar_ship_full = false;
			corn_ship_full = false;
			tobacco_ship_full = false;
			coffee_ship_full = false;
			empty_ship_available = false;
			ships_can_take_indigo = false;
			ships_can_take_sugar = false;
			ships_can_take_corn = false;
			ships_can_take_tobacco = false;
			ships_can_take_coffee = false;
			shipa_empty = false;
			shipb_empty = false;
			shipc_empty = false;
			biggest_empty_ship = "null";
			shipa_array[3] = checked(shipa_array[0] - shipa_array[1]);
			shipb_array[3] = checked(shipb_array[0] - shipb_array[1]);
			shipc_array[3] = checked(shipc_array[0] - shipc_array[1]);
			if (shipa_array[1] == 0)
			{
				shipa_array[2] = 99;
			}
			if (shipb_array[1] == 0)
			{
				shipb_array[2] = 99;
			}
			if (shipc_array[1] == 0)
			{
				shipc_array[2] = 99;
			}
			if (shipa_array[2] == 1 & shipa_array[3] == 0)
			{
				indigo_ship_full = true;
			}
			if (shipa_array[2] == 2 & shipa_array[3] == 0)
			{
				sugar_ship_full = true;
			}
			if (shipa_array[2] == 3 & shipa_array[3] == 0)
			{
				corn_ship_full = true;
			}
			if (shipa_array[2] == 4 & shipa_array[3] == 0)
			{
				tobacco_ship_full = true;
			}
			if (shipa_array[2] == 5 & shipa_array[3] == 0)
			{
				coffee_ship_full = true;
			}
			if (shipb_array[2] == 1 & shipb_array[3] == 0)
			{
				indigo_ship_full = true;
			}
			if (shipb_array[2] == 2 & shipb_array[3] == 0)
			{
				sugar_ship_full = true;
			}
			if (shipb_array[2] == 3 & shipb_array[3] == 0)
			{
				corn_ship_full = true;
			}
			if (shipb_array[2] == 4 & shipb_array[3] == 0)
			{
				tobacco_ship_full = true;
			}
			if (shipb_array[2] == 5 & shipb_array[3] == 0)
			{
				coffee_ship_full = true;
			}
			if (shipc_array[2] == 1 & shipc_array[3] == 0)
			{
				indigo_ship_full = true;
			}
			if (shipc_array[2] == 2 & shipc_array[3] == 0)
			{
				sugar_ship_full = true;
			}
			if (shipc_array[2] == 3 & shipc_array[3] == 0)
			{
				corn_ship_full = true;
			}
			if (shipc_array[2] == 4 & shipc_array[3] == 0)
			{
				tobacco_ship_full = true;
			}
			if (shipc_array[2] == 5 & shipc_array[3] == 0)
			{
				coffee_ship_full = true;
			}
			if (shipa_array[2] == 1 & shipa_array[1] > 0)
			{
				indigo_shipnum = 1;
			}
			if (shipb_array[2] == 1 & shipb_array[1] > 0)
			{
				indigo_shipnum = 2;
			}
			if (shipc_array[2] == 1 & shipc_array[1] > 0)
			{
				indigo_shipnum = 3;
			}
			if (shipa_array[2] == 2 & shipa_array[1] > 0)
			{
				sugar_shipnum = 1;
			}
			if (shipb_array[2] == 2 & shipb_array[1] > 0)
			{
				sugar_shipnum = 2;
			}
			if (shipc_array[2] == 2 & shipc_array[1] > 0)
			{
				sugar_shipnum = 3;
			}
			if (shipa_array[2] == 3 & shipa_array[1] > 0)
			{
				corn_shipnum = 1;
			}
			if (shipb_array[2] == 3 & shipb_array[1] > 0)
			{
				corn_shipnum = 2;
			}
			if (shipc_array[2] == 3 & shipc_array[1] > 0)
			{
				corn_shipnum = 3;
			}
			if (shipa_array[2] == 4 & shipa_array[1] > 0)
			{
				tobacco_shipnum = 1;
			}
			if (shipb_array[2] == 4 & shipb_array[1] > 0)
			{
				tobacco_shipnum = 2;
			}
			if (shipc_array[2] == 4 & shipc_array[1] > 0)
			{
				tobacco_shipnum = 3;
			}
			if (shipa_array[2] == 5 & shipa_array[1] > 0)
			{
				coffee_shipnum = 1;
			}
			if (shipb_array[2] == 5 & shipb_array[1] > 0)
			{
				coffee_shipnum = 2;
			}
			if (shipc_array[2] == 5 & shipc_array[1] > 0)
			{
				coffee_shipnum = 3;
			}
			if (shipa_array[2] == 1 & shipa_array[1] > 0 & shipa_array[1] < shipa_array[0])
			{
				indigo_shipnum = 1;
				indigo_ship_available = true;
			}
			if (shipa_array[2] == 2 & shipa_array[1] > 0 & shipa_array[1] < shipa_array[0])
			{
				sugar_shipnum = 1;
				sugar_ship_available = true;
			}
			if (shipa_array[2] == 3 & shipa_array[1] > 0 & shipa_array[1] < shipa_array[0])
			{
				corn_shipnum = 1;
				corn_ship_available = true;
			}
			if (shipa_array[2] == 4 & shipa_array[1] > 0 & shipa_array[1] < shipa_array[0])
			{
				tobacco_shipnum = 1;
				tobacco_ship_available = true;
			}
			if (shipa_array[2] == 5 & shipa_array[1] > 0 & shipa_array[1] < shipa_array[0])
			{
				coffee_shipnum = 1;
				coffee_ship_available = true;
			}
			if (shipa_array[2] == 99)
			{
				empty_ship_available = true;
				shipa_empty = true;
			}
			if (shipb_array[2] == 1 & shipb_array[1] > 0 & shipb_array[1] < shipb_array[0])
			{
				indigo_shipnum = 2;
				indigo_ship_available = true;
			}
			if (shipb_array[2] == 2 & shipb_array[1] > 0 & shipb_array[1] < shipb_array[0])
			{
				sugar_shipnum = 2;
				sugar_ship_available = true;
			}
			if (shipb_array[2] == 3 & shipb_array[1] > 0 & shipb_array[1] < shipb_array[0])
			{
				corn_shipnum = 2;
				corn_ship_available = true;
			}
			if (shipb_array[2] == 4 & shipb_array[1] > 0 & shipb_array[1] < shipb_array[0])
			{
				tobacco_shipnum = 2;
				tobacco_ship_available = true;
			}
			if (shipb_array[2] == 5 & shipb_array[1] > 0 & shipb_array[1] < shipb_array[0])
			{
				coffee_shipnum = 2;
				coffee_ship_available = true;
			}
			if (shipb_array[2] == 99)
			{
				empty_ship_available = true;
				shipb_empty = true;
			}
			if (shipc_array[2] == 1 & shipc_array[1] > 0 & shipc_array[1] < shipc_array[0])
			{
				indigo_shipnum = 3;
				indigo_ship_available = true;
			}
			if (shipc_array[2] == 2 & shipc_array[1] > 0 & shipc_array[1] < shipc_array[0])
			{
				sugar_shipnum = 3;
				sugar_ship_available = true;
			}
			if (shipc_array[2] == 3 & shipc_array[1] > 0 & shipc_array[1] < shipc_array[0])
			{
				corn_shipnum = 3;
				corn_ship_available = true;
			}
			if (shipc_array[2] == 4 & shipc_array[1] > 0 & shipc_array[1] < shipc_array[0])
			{
				tobacco_shipnum = 3;
				tobacco_ship_available = true;
			}
			if (shipc_array[2] == 5 & shipc_array[1] > 0 & shipc_array[1] < shipc_array[0])
			{
				coffee_shipnum = 3;
				coffee_ship_available = true;
			}
			if (shipc_array[2] == 99)
			{
				empty_ship_available = true;
				shipc_empty = true;
			}
			if (shipc_empty)
			{
				biggest_empty_ship = "shipc";
			}
			else if (shipb_empty)
			{
				biggest_empty_ship = "shipb";
			}
			else if (!shipa_empty)
			{
				biggest_empty_ship = "null";
			}
			else
			{
				biggest_empty_ship = "shipa";
			}
			if (empty_ship_available & indigo_shipnum != 1 & indigo_shipnum != 2 & indigo_shipnum != 3 | indigo_ship_available)
			{
				ships_can_take_indigo = true;
			}
			if (empty_ship_available & sugar_shipnum != 1 & sugar_shipnum != 2 & sugar_shipnum != 3 | sugar_ship_available)
			{
				ships_can_take_sugar = true;
			}
			if (empty_ship_available & corn_shipnum != 1 & corn_shipnum != 2 & corn_shipnum != 3 | corn_ship_available)
			{
				ships_can_take_corn = true;
			}
			if (empty_ship_available & tobacco_shipnum != 1 & tobacco_shipnum != 2 & tobacco_shipnum != 3 | tobacco_ship_available)
			{
				ships_can_take_tobacco = true;
			}
			if (empty_ship_available & coffee_shipnum != 1 & coffee_shipnum != 2 & coffee_shipnum != 3 | coffee_ship_available)
			{
				ships_can_take_coffee = true;
			}
			verification_alerts();
		}

		public void update_ship_labels()
		{
			if (number_of_players == 3)
			{
				shipa_slot5.Visible = false;
				shipa_slot6.Visible = false;
				shipb_slot6.Visible = false;
				shipb_slot7.Visible = false;
				shipc_slot7.Visible = false;
				shipc_slot8.Visible = false;
			}
			if (number_of_players == 4)
			{
				shipa_slot5.Visible = true;
				shipa_slot6.Visible = false;
				shipb_slot6.Visible = true;
				shipb_slot7.Visible = false;
				shipc_slot7.Visible = true;
				shipc_slot8.Visible = false;
			}
			if (number_of_players == 5)
			{
				shipa_slot5.Visible = true;
				shipa_slot6.Visible = true;
				shipb_slot6.Visible = true;
				shipb_slot7.Visible = true;
				shipc_slot7.Visible = true;
				shipc_slot8.Visible = true;
			}
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(shipa_array[2])[1]), ".bmp");
			if (shipa_array[1] < 1)
			{
				shipa_slot1.Image = Image.FromFile("pic\\b0.bmp");
				shipa_slot1.Visible = false;
			}
			else
			{
				shipa_slot1.Image = Image.FromFile(tempstring);
				shipa_slot1.Visible = true;
			}
			if (shipa_array[1] < 2)
			{
				shipa_slot2.Image = Image.FromFile("pic\\b0.bmp");
				shipa_slot2.Visible = false;
			}
			else
			{
				shipa_slot2.Image = Image.FromFile(tempstring);
				shipa_slot2.Visible = true;
			}
			if (shipa_array[1] < 3)
			{
				shipa_slot3.Image = Image.FromFile("pic\\b0.bmp");
				shipa_slot3.Visible = false;
			}
			else
			{
				shipa_slot3.Image = Image.FromFile(tempstring);
				shipa_slot3.Visible = true;
			}
			if (shipa_array[1] < 4)
			{
				shipa_slot4.Image = Image.FromFile("pic\\b0.bmp");
				shipa_slot4.Visible = false;
			}
			else
			{
				shipa_slot4.Image = Image.FromFile(tempstring);
				shipa_slot4.Visible = true;
			}
			if (shipa_array[1] < 5)
			{
				shipa_slot5.Image = Image.FromFile("pic\\b0.bmp");
				shipa_slot5.Visible = false;
			}
			else
			{
				shipa_slot5.Image = Image.FromFile(tempstring);
				shipa_slot5.Visible = true;
			}
			if (shipa_array[1] < 6)
			{
				shipa_slot6.Image = Image.FromFile("pic\\b0.bmp");
				shipa_slot6.Visible = false;
			}
			else
			{
				shipa_slot6.Image = Image.FromFile(tempstring);
				shipa_slot6.Visible = true;
			}
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(shipb_array[2])[1]), ".bmp");
			if (shipb_array[1] < 1)
			{
				shipb_slot1.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot1.Visible = false;
			}
			else
			{
				shipb_slot1.Image = Image.FromFile(tempstring);
				shipb_slot1.Visible = true;
			}
			if (shipb_array[1] < 2)
			{
				shipb_slot2.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot2.Visible = false;
			}
			else
			{
				shipb_slot2.Image = Image.FromFile(tempstring);
				shipb_slot2.Visible = true;
			}
			if (shipb_array[1] < 3)
			{
				shipb_slot3.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot3.Visible = false;
			}
			else
			{
				shipb_slot3.Image = Image.FromFile(tempstring);
				shipb_slot3.Visible = true;
			}
			if (shipb_array[1] < 4)
			{
				shipb_slot4.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot4.Visible = false;
			}
			else
			{
				shipb_slot4.Image = Image.FromFile(tempstring);
				shipb_slot4.Visible = true;
			}
			if (shipb_array[1] < 5)
			{
				shipb_slot5.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot5.Visible = false;
			}
			else
			{
				shipb_slot5.Image = Image.FromFile(tempstring);
				shipb_slot5.Visible = true;
			}
			if (shipb_array[1] < 6)
			{
				shipb_slot6.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot6.Visible = false;
			}
			else
			{
				shipb_slot6.Image = Image.FromFile(tempstring);
				shipb_slot6.Visible = true;
			}
			if (shipb_array[1] < 7)
			{
				shipb_slot7.Image = Image.FromFile("pic\\b0.bmp");
				shipb_slot7.Visible = false;
			}
			else
			{
				shipb_slot7.Image = Image.FromFile(tempstring);
				shipb_slot7.Visible = true;
			}
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(shipc_array[2])[1]), ".bmp");
			if (shipc_array[1] < 1)
			{
				shipc_slot1.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot1.Visible = false;
			}
			else
			{
				shipc_slot1.Image = Image.FromFile(tempstring);
				shipc_slot1.Visible = true;
			}
			if (shipc_array[1] < 2)
			{
				shipc_slot2.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot2.Visible = false;
			}
			else
			{
				shipc_slot2.Image = Image.FromFile(tempstring);
				shipc_slot2.Visible = true;
			}
			if (shipc_array[1] < 3)
			{
				shipc_slot3.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot3.Visible = false;
			}
			else
			{
				shipc_slot3.Image = Image.FromFile(tempstring);
				shipc_slot3.Visible = true;
			}
			if (shipc_array[1] < 4)
			{
				shipc_slot4.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot4.Visible = false;
			}
			else
			{
				shipc_slot4.Image = Image.FromFile(tempstring);
				shipc_slot4.Visible = true;
			}
			if (shipc_array[1] < 5)
			{
				shipc_slot5.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot5.Visible = false;
			}
			else
			{
				shipc_slot5.Image = Image.FromFile(tempstring);
				shipc_slot5.Visible = true;
			}
			if (shipc_array[1] < 6)
			{
				shipc_slot6.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot6.Visible = false;
			}
			else
			{
				shipc_slot6.Image = Image.FromFile(tempstring);
				shipc_slot6.Visible = true;
			}
			if (shipc_array[1] < 7)
			{
				shipc_slot7.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot7.Visible = false;
			}
			else
			{
				shipc_slot7.Image = Image.FromFile(tempstring);
				shipc_slot7.Visible = true;
			}
			if (shipc_array[1] < 8)
			{
				shipc_slot8.Image = Image.FromFile("pic\\b0.bmp");
				shipc_slot8.Visible = false;
			}
			else
			{
				shipc_slot8.Image = Image.FromFile(tempstring);
				shipc_slot8.Visible = true;
			}
			Label7.Text =Conversion.Str(shipa_array[3]);
			Label8.Text =Conversion.Str(shipb_array[3]);
			Label9.Text =Conversion.Str(shipc_array[3]);
		}

		public void update_summary()
		{
			if (summary_on)
			{
				if (!summary_form.Visible)
				{
					summary_form.Visible = true;
				}
				summary_form.p1_name_label.Text =p1_name;
				summary_form.p2_name_label.Text =p2_name;
				summary_form.p3_name_label.Text =p3_name;
				summary_form.p4_name_label.Text =p4_name;
				summary_form.p5_name_label.Text =p5_name;
				summary_form.gov1.Visible = false;
				summary_form.gov2.Visible = false;
				summary_form.gov3.Visible = false;
				summary_form.gov4.Visible = false;
				summary_form.gov5.Visible = false;
				summary_form.role1.Visible = false;
				summary_form.role2.Visible = false;
				summary_form.role3.Visible = false;
				summary_form.role4.Visible = false;
				summary_form.role5.Visible = false;
				summary_form.cur1.Visible = false;
				summary_form.cur2.Visible = false;
				summary_form.cur3.Visible = false;
				summary_form.cur4.Visible = false;
				summary_form.cur5.Visible = false;
				summary_form.p1_name_label.Text =p1_name;
				summary_form.p2_name_label.Text =p2_name;
				summary_form.p3_name_label.Text =p3_name;
				summary_form.p4_name_label.Text =p4_name;
				summary_form.p5_name_label.Text =p5_name;
				if (number_of_players == 3)
				{
					summary_form.p1_name_label.Visible = true;
					summary_form.p2_name_label.Visible = true;
					summary_form.p3_name_label.Visible = true;
					summary_form.p4_name_label.Visible = false;
					summary_form.p5_name_label.Visible = false;
				}
				if (number_of_players == 4)
				{
					summary_form.p1_name_label.Visible = true;
					summary_form.p2_name_label.Visible = true;
					summary_form.p3_name_label.Visible = true;
					summary_form.p4_name_label.Visible = true;
					summary_form.p5_name_label.Visible = false;
				}
				if (number_of_players == 5)
				{
					summary_form.p1_name_label.Visible = true;
					summary_form.p2_name_label.Visible = true;
					summary_form.p3_name_label.Visible = true;
					summary_form.p4_name_label.Visible = true;
					summary_form.p5_name_label.Visible = true;
				}
				if (current_governor == 1)
				{
					summary_form.gov1.Visible = true;
				}
				if (current_governor == 2)
				{
					summary_form.gov2.Visible = true;
				}
				if (current_governor == 3)
				{
					summary_form.gov3.Visible = true;
				}
				if (current_governor == 4)
				{
					summary_form.gov4.Visible = true;
				}
				if (current_governor == 5)
				{
					summary_form.gov5.Visible = true;
				}
				if (current_player == 1)
				{
					summary_form.cur1.Visible = true;
				}
				if (current_player == 2)
				{
					summary_form.cur2.Visible = true;
				}
				if (current_player == 3)
				{
					summary_form.cur3.Visible = true;
				}
				if (current_player == 4)
				{
					summary_form.cur4.Visible = true;
				}
				if (current_player == 5)
				{
					summary_form.cur5.Visible = true;
				}
				if (current_role_chooser == 1)
				{
					summary_form.role1.Visible = true;
				}
				if (current_role_chooser == 2)
				{
					summary_form.role2.Visible = true;
				}
				if (current_role_chooser == 3)
				{
					summary_form.role3.Visible = true;
				}
				if (current_role_chooser == 4)
				{
					summary_form.role4.Visible = true;
				}
				if (current_role_chooser == 5)
				{
					summary_form.role5.Visible = true;
				}
			}
		}

		public void update_tradehouse_labels()
		{
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(trading_house_array[0])[1]), ".bmp");
			tradehouse_slot1.Image = Image.FromFile(tempstring);
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(trading_house_array[1])[1]), ".bmp");
			tradehouse_slot2.Image = Image.FromFile(tempstring);
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(trading_house_array[2])[1]), ".bmp");
			tradehouse_slot3.Image = Image.FromFile(tempstring);
			tempstring = string.Concat("pic\\b", StringType.FromChar(Conversion.Str(trading_house_array[3])[1]), ".bmp");
			tradehouse_slot4.Image = Image.FromFile(tempstring);
		}

		public void update_vp_bank_num_via_shipping()
		{
			if (current_player == 1)
			{
				vp_bank_num = checked(vp_bank_num - p1_num_shipped);
				if (vp_bank_num <= 0)
				{
					game_end_triggered_victorypoints = true;
				}
			}
			if (current_player == 2)
			{
				vp_bank_num = checked(vp_bank_num - p2_num_shipped);
				if (vp_bank_num <= 0)
				{
					game_end_triggered_victorypoints = true;
				}
			}
			if (current_player == 3)
			{
				vp_bank_num = checked(vp_bank_num - p3_num_shipped);
				if (vp_bank_num <= 0)
				{
					game_end_triggered_victorypoints = true;
				}
			}
			if (current_player == 4)
			{
				vp_bank_num = checked(vp_bank_num - p4_num_shipped);
				if (vp_bank_num <= 0)
				{
					game_end_triggered_victorypoints = true;
				}
			}
			if (current_player == 5)
			{
				vp_bank_num = checked(vp_bank_num - p5_num_shipped);
				if (vp_bank_num <= 0)
				{
					game_end_triggered_victorypoints = true;
				}
			}
		}

		public void verification_alerts()
		{
			if (alerts_on)
			{
				alert_triggered = false;
				verify_indigo = 0;
				verify_sugar = 0;
				verify_corn = 0;
				verify_tobacco = 0;
				verify_coffee = 0;
				verify_colonists = 0;
				verify_indigo = checked(verify_indigo + goods_bank_array[0]);
				verify_sugar = checked(verify_sugar + goods_bank_array[1]);
				verify_corn = checked(verify_corn + goods_bank_array[2]);
				verify_tobacco = checked(verify_tobacco + goods_bank_array[3]);
				verify_coffee = checked(verify_coffee + goods_bank_array[4]);
				verify_indigo = checked(verify_indigo + goods_p1_array[0]);
				verify_sugar = checked(verify_sugar + goods_p1_array[1]);
				verify_corn = checked(verify_corn + goods_p1_array[2]);
				verify_tobacco = checked(verify_tobacco + goods_p1_array[3]);
				verify_coffee = checked(verify_coffee + goods_p1_array[4]);
				verify_indigo = checked(verify_indigo + goods_p2_array[0]);
				verify_sugar = checked(verify_sugar + goods_p2_array[1]);
				verify_corn = checked(verify_corn + goods_p2_array[2]);
				verify_tobacco = checked(verify_tobacco + goods_p2_array[3]);
				verify_coffee = checked(verify_coffee + goods_p2_array[4]);
				verify_indigo = checked(verify_indigo + goods_p3_array[0]);
				verify_sugar = checked(verify_sugar + goods_p3_array[1]);
				verify_corn = checked(verify_corn + goods_p3_array[2]);
				verify_tobacco = checked(verify_tobacco + goods_p3_array[3]);
				verify_coffee = checked(verify_coffee + goods_p3_array[4]);
				verify_indigo = checked(verify_indigo + goods_p4_array[0]);
				verify_sugar = checked(verify_sugar + goods_p4_array[1]);
				verify_corn = checked(verify_corn + goods_p4_array[2]);
				verify_tobacco = checked(verify_tobacco + goods_p4_array[3]);
				verify_coffee = checked(verify_coffee + goods_p4_array[4]);
				verify_indigo = checked(verify_indigo + goods_p5_array[0]);
				verify_sugar = checked(verify_sugar + goods_p5_array[1]);
				verify_corn = checked(verify_corn + goods_p5_array[2]);
				verify_tobacco = checked(verify_tobacco + goods_p5_array[3]);
				verify_coffee = checked(verify_coffee + goods_p5_array[4]);
				if (shipa_array[2] == 1)
				{
					verify_indigo = checked(verify_indigo + shipa_array[1]);
				}
				if (shipb_array[2] == 1)
				{
					verify_indigo = checked(verify_indigo + shipb_array[1]);
				}
				if (shipc_array[2] == 1)
				{
					verify_indigo = checked(verify_indigo + shipc_array[1]);
				}
				if (shipa_array[2] == 2)
				{
					verify_sugar = checked(verify_sugar + shipa_array[1]);
				}
				if (shipb_array[2] == 2)
				{
					verify_sugar = checked(verify_sugar + shipb_array[1]);
				}
				if (shipc_array[2] == 2)
				{
					verify_sugar = checked(verify_sugar + shipc_array[1]);
				}
				if (shipa_array[2] == 3)
				{
					verify_corn = checked(verify_corn + shipa_array[1]);
				}
				if (shipb_array[2] == 3)
				{
					verify_corn = checked(verify_corn + shipb_array[1]);
				}
				if (shipc_array[2] == 3)
				{
					verify_corn = checked(verify_corn + shipc_array[1]);
				}
				if (shipa_array[2] == 4)
				{
					verify_tobacco = checked(verify_tobacco + shipa_array[1]);
				}
				if (shipb_array[2] == 4)
				{
					verify_tobacco = checked(verify_tobacco + shipb_array[1]);
				}
				if (shipc_array[2] == 4)
				{
					verify_tobacco = checked(verify_tobacco + shipc_array[1]);
				}
				if (shipa_array[2] == 5)
				{
					verify_coffee = checked(verify_coffee + shipa_array[1]);
				}
				if (shipb_array[2] == 5)
				{
					verify_coffee = checked(verify_coffee + shipb_array[1]);
				}
				if (shipc_array[2] == 5)
				{
					verify_coffee = checked(verify_coffee + shipc_array[1]);
				}
				counter1 = 0;
				do
				{
					if (trading_house_array[counter1] == 1)
					{
						verify_indigo = checked(verify_indigo + 1);
					}
					if (trading_house_array[counter1] == 2)
					{
						verify_sugar = checked(verify_sugar + 1);
					}
					if (trading_house_array[counter1] == 3)
					{
						verify_corn = checked(verify_corn + 1);
					}
					if (trading_house_array[counter1] == 4)
					{
						verify_tobacco = checked(verify_tobacco + 1);
					}
					if (trading_house_array[counter1] == 5)
					{
						verify_coffee = checked(verify_coffee + 1);
					}
					Form1 form1 = this;
					form1.counter1 = checked(form1.counter1 + 1);
				}
				while (counter1 <= 3);
				if (verify_indigo != 11)
				{
					alert_triggered = true;
					infobox_nopic(string.Concat("ALERT - There should be 11 Indigo and there currently is ", Conversion.Str(verify_indigo)));
				}
				if (verify_sugar != 11)
				{
					alert_triggered = true;
					infobox_nopic(string.Concat("ALERT - There should be 11 sugar and there currently is ", Conversion.Str(verify_sugar)));
				}
				if (verify_corn != 10)
				{
					alert_triggered = true;
					infobox_nopic(string.Concat("ALERT - There should be 10 corn and there currently is ", Conversion.Str(verify_corn)));
				}
				if (verify_tobacco != 9)
				{
					alert_triggered = true;
					infobox_nopic(string.Concat("ALERT - There should be 9 tobacco and there currently is ", Conversion.Str(verify_tobacco)));
				}
				if (verify_coffee != 9)
				{
					alert_triggered = true;
					infobox_nopic(string.Concat("ALERT - There should be 9 coffee and there currently is ", Conversion.Str(verify_coffee)));
				}
				if (idle_colonists_array[1] < 0)
				{
					alert_triggered = true;
					infobox_nopic("ALERT - Player1 has negative idle colonists");
				}
				if (idle_colonists_array[2] < 0)
				{
					alert_triggered = true;
					infobox_nopic("ALERT - Player2 has negative idle colonists");
				}
				if (idle_colonists_array[3] < 0)
				{
					alert_triggered = true;
					infobox_nopic("ALERT - Player3 has negative idle colonists");
				}
				if (idle_colonists_array[4] < 0)
				{
					alert_triggered = true;
					infobox_nopic("ALERT - Player4 has negative idle colonists");
				}
				if (idle_colonists_array[5] < 0)
				{
					alert_triggered = true;
					infobox_nopic("ALERT - Player5 has negative idle colonists");
				}
				if (alert_triggered)
				{
					tempinteger = tempinteger;
				}
			}
		}

		public void verify_trader_end()
		{
			if (current_player == 1 & trader_round & !p1_traded)
			{
				confirmbox_role("Are you sure you want to end your turn without trading?", "role_trader");
#warning: Best guess.  In .NET framework 1, it was just a statement !confirmed;
				confirmed = !confirmed;
			}
		}

		private void vpremain_label_Click(object sender, EventArgs e)
		{
			help_vp_remaining();
		}

		private void wharf_pic_Click(object sender, EventArgs e)
		{
			if (current_player != 1)
			{
				Interaction.MsgBox("It's not your turn.", 0, null);
			}
			else if ((ready_to_ship_indigo | ready_to_ship_sugar | ready_to_ship_corn | ready_to_ship_tobacco | ready_to_ship_coffee) & !p1_done_shipping)
			{
				load_wharf();
			}
		}

		public void what_plantations_available()
		{
			indigo_available = false;
			indigo_available_slot = 99;
			sugar_available = false;
			sugar_available_slot = 99;
			corn_available = false;
			corn_available_slot = 99;
			tobacco_available = false;
			tobacco_available_slot = 99;
			coffee_available = false;
			coffee_available_slot = 99;
			quarry_available = false;
			counter1 = 0;
			do
			{
				if (plantation_available_array[counter1] == 10)
				{
					indigo_available = true;
					indigo_available_slot = counter1;
				}
				if (plantation_available_array[counter1] == 20)
				{
					sugar_available = true;
					sugar_available_slot = counter1;
				}
				if (plantation_available_array[counter1] == 30)
				{
					corn_available = true;
					corn_available_slot = counter1;
				}
				if (plantation_available_array[counter1] == 40)
				{
					tobacco_available = true;
					tobacco_available_slot = counter1;
				}
				if (plantation_available_array[counter1] == 50)
				{
					coffee_available = true;
					coffee_available_slot = counter1;
				}
				Form1 form1 = this;
				form1.counter1 = checked(form1.counter1 + 1);
			}
			while (counter1 <= 5);
			if (goods_bank_array[5] > 0)
			{
				quarry_available = true;
			}
		}
	}
}
